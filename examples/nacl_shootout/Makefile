# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# GNU Makefile based on shared rules provided by the Native Client SDK.
# See README.Makefiles for more details.

VALID_TOOLCHAINS := newlib 

NACL_SDK_ROOT = /home/berkeley/nacl_sdk/pepper_42

TARGET = part2


include $(NACL_SDK_ROOT)/tools/common.mk


LIBS = ppapi_cpp ppapi pthread

CFLAGS = -Wall
SOURCES = popcnt.cc

# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))


extract:
	stoke extract -i newlib/Release/part2_unstripped_x86_64.nexe -o bins

search:
	stoke search --target bins/_Z7computej.s --testcases popcnt.tc --timeout 1000000 --cost "nacl+correctness+latency" --correctness "nacl+correctness == 0" --def_in "{ %rdi %rsp %rbp %r15 }" --live_out "{ %rax %rsp %rbp %r15 }" --test_set "{ 0 .. 6 }" --training_set "{ 0 .. 100 }" --init target --max_instrs 100 --strategy hold_out --postprocessing none --resize_mass 0 --statistics_interval 100000

sandbox:
	stoke debug sandbox --target bins/_Z7computej.s --testcases popcnt.tc --def_in "{ %rdi %rsp %rbp %r15 }" --live_out "{ %eax %rsp %rbp %r15 }" --index 0 -d

replace:
	mkdir -p newlib/Stoke
	stoke replace --rewrite result.s -i newlib/Release/part2_unstripped_x86_64.nexe -o newlib/Stoke/part2_stoke.nexe

test: FORCE
	/home/berkeley/nacl_sdk/pepper_42/tools/httpd.py --no-dir-check

FORCE:

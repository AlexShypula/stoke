Training TCs: 2
flags for addb_al_imm8: { }
flags for addw_ax_imm16: { }
flags for addl_eax_imm32: { }
flags for addw_m16_imm16: { }
flags for addw_m16_imm8: { }
flags for addw_m16_r16: { }
flags for addl_m32_imm32: { }
flags for addl_m32_imm8: { }
flags for addl_m32_r32: { }
flags for addq_m64_imm32: { }
flags for addq_m64_imm8: { }
flags for addq_m64_r64: { }
flags for addb_m8_imm8: { }
flags for addb_m8_r8: { }
flags for addb_m8_rh: { }
flags for addw_r16_imm16: { }
flags for addw_r16_imm8: { }
flags for addw_r16_m16: { }
flags for addw_r16_r16: { }
flags for addw_r16_r16_1: { }
flags for addl_r32_imm32: { }
flags for addl_r32_imm8: { }
flags for addl_r32_m32: { }
flags for addl_r32_r32: { }
flags for addl_r32_r32_1: { }
flags for addq_r64_imm32: { }
flags for addq_r64_imm8: { }
flags for addq_r64_m64: { }
flags for addq_r64_r64: { }
flags for addq_r64_r64_1: { }
flags for addb_r8_imm8: { }
flags for addb_r8_m8: { }
flags for addb_r8_r8: { }
flags for addb_r8_r8_1: { }
flags for addb_r8_rh: { }
flags for addb_r8_rh_1: { }
flags for addq_rax_imm32: { }
flags for addb_rh_imm8: { }
flags for addb_rh_m8: { }
flags for addb_rh_r8: { }
flags for addb_rh_r8_1: { }
flags for addb_rh_rh: { }
flags for addb_rh_rh_1: { }
flags for addpd_xmm_m128: { sse2 }
flags for addpd_xmm_xmm: { sse2 }
flags for addps_xmm_m128: { sse }
flags for addps_xmm_xmm: { sse }
flags for addsd_xmm_m64: { sse2 }
flags for addsd_xmm_xmm: { sse2 }
flags for addss_xmm_m32: { sse }
flags for addss_xmm_xmm: { sse }
flags for addsubpd_xmm_m128: { pni }
flags for addsubpd_xmm_xmm: { pni }
flags for addsubps_xmm_m128: { pni }
flags for addsubps_xmm_xmm: { pni }
flags for aesdec_xmm_m128: { aes }
flags for aesdec_xmm_xmm: { aes }
flags for aesdeclast_xmm_m128: { aes }
flags for aesdeclast_xmm_xmm: { aes }
flags for aesenc_xmm_m128: { aes }
flags for aesenc_xmm_xmm: { aes }
flags for aesenclast_xmm_m128: { aes }
flags for aesenclast_xmm_xmm: { aes }
flags for aesimc_xmm_m128: { aes }
flags for aesimc_xmm_xmm: { aes }
flags for aeskeygenassist_xmm_m128_imm8: { aes }
flags for aeskeygenassist_xmm_xmm_imm8: { aes }
flags for andb_al_imm8: { }
flags for andw_ax_imm16: { }
flags for andl_eax_imm32: { }
flags for andw_m16_imm16: { }
flags for andw_m16_imm8: { }
flags for andw_m16_r16: { }
flags for andl_m32_imm32: { }
flags for andl_m32_imm8: { }
flags for andl_m32_r32: { }
flags for andq_m64_imm32: { }
flags for andq_m64_imm8: { }
flags for andq_m64_r64: { }
flags for andb_m8_imm8: { }
flags for andb_m8_r8: { }
flags for andb_m8_rh: { }
flags for andw_r16_imm16: { }
flags for andw_r16_imm8: { }
flags for andw_r16_m16: { }
flags for andw_r16_r16: { }
flags for andw_r16_r16_1: { }
flags for andl_r32_imm32: { }
flags for andl_r32_imm8: { }
flags for andl_r32_m32: { }
flags for andl_r32_r32: { }
flags for andl_r32_r32_1: { }
flags for andq_r64_imm32: { }
flags for andq_r64_imm8: { }
flags for andq_r64_m64: { }
flags for andq_r64_r64: { }
flags for andq_r64_r64_1: { }
flags for andb_r8_imm8: { }
flags for andb_r8_m8: { }
flags for andb_r8_r8: { }
flags for andb_r8_r8_1: { }
flags for andb_r8_rh: { }
flags for andb_r8_rh_1: { }
flags for andq_rax_imm32: { }
flags for andb_rh_imm8: { }
flags for andb_rh_m8: { }
flags for andb_rh_r8: { }
flags for andb_rh_r8_1: { }
flags for andb_rh_rh: { }
flags for andb_rh_rh_1: { }
flags for andnl_r32_r32_m32: { bmi1 }
flags for andnl_r32_r32_r32: { bmi1 }
flags for andnq_r64_r64_m64: { bmi1 }
flags for andnq_r64_r64_r64: { bmi1 }
flags for andnpd_xmm_m128: { sse2 }
flags for andnpd_xmm_xmm: { sse2 }
flags for andnps_xmm_m128: { sse }
flags for andnps_xmm_xmm: { sse }
flags for andpd_xmm_m128: { sse2 }
flags for andpd_xmm_xmm: { sse2 }
flags for andps_xmm_m128: { sse }
flags for andps_xmm_xmm: { sse }
flags for bextrl_r32_m32_r32: { bmi1 }
flags for bextrl_r32_r32_r32: { bmi1 }
flags for bextrq_r64_m64_r64: { bmi1 }
flags for bextrq_r64_r64_r64: { bmi1 }
flags for blendpd_xmm_m128_imm8: { sse4_1 }
flags for blendpd_xmm_xmm_imm8: { sse4_1 }
flags for blendps_xmm_m128_imm8: { sse4_1 }
flags for blendps_xmm_xmm_imm8: { sse4_1 }
flags for blendvpd_xmm_m128_xmm0: { sse4_1 }
flags for blendvpd_xmm_xmm_xmm0: { sse4_1 }
flags for blendvps_xmm_m128_xmm0: { sse4_1 }
flags for blendvps_xmm_xmm_xmm0: { sse4_1 }
flags for blsil_r32_m32: { bmi1 }
flags for blsil_r32_r32: { bmi1 }
flags for blsiq_r64_m64: { bmi1 }
flags for blsiq_r64_r64: { bmi1 }
flags for blsmskl_r32_m32: { bmi1 }
flags for blsmskl_r32_r32: { bmi1 }
flags for blsmskq_r64_m64: { bmi1 }
flags for blsmskq_r64_r64: { bmi1 }
flags for blsrl_r32_m32: { bmi1 }
flags for blsrl_r32_r32: { bmi1 }
flags for blsrq_r64_m64: { bmi1 }
flags for blsrq_r64_r64: { bmi1 }
flags for bzhil_r32_m32_r32: { bmi2 }
flags for bzhil_r32_r32_r32: { bmi2 }
flags for bzhiq_r64_m64_r64: { bmi2 }
flags for bzhiq_r64_r64_r64: { bmi2 }
flags for cli: { }
flags for cmovaw_r16_m16: { cmov }
flags for cmovaw_r16_r16: { cmov }
flags for cmoval_r32_m32: { cmov }
flags for cmoval_r32_r32: { cmov }
flags for cmovaq_r64_m64: { cmov }
flags for cmovaq_r64_r64: { cmov }
flags for cmovaew_r16_m16: { cmov }
flags for cmovaew_r16_r16: { cmov }
flags for cmovael_r32_m32: { cmov }
flags for cmovael_r32_r32: { cmov }
flags for cmovaeq_r64_m64: { cmov }
flags for cmovaeq_r64_r64: { cmov }
flags for cmovbw_r16_m16: { cmov }
flags for cmovbw_r16_r16: { cmov }
flags for cmovbl_r32_m32: { cmov }
flags for cmovbl_r32_r32: { cmov }
flags for cmovbq_r64_m64: { cmov }
flags for cmovbq_r64_r64: { cmov }
flags for cmovbew_r16_m16: { cmov }
flags for cmovbew_r16_r16: { cmov }
flags for cmovbel_r32_m32: { cmov }
flags for cmovbel_r32_r32: { cmov }
flags for cmovbeq_r64_m64: { cmov }
flags for cmovbeq_r64_r64: { cmov }
flags for cmovcw_r16_m16: { cmov }
flags for cmovcw_r16_r16: { cmov }
flags for cmovcl_r32_m32: { cmov }
flags for cmovcl_r32_r32: { cmov }
flags for cmovcq_r64_m64: { cmov }
flags for cmovcq_r64_r64: { cmov }
flags for cmovew_r16_m16: { cmov }
flags for cmovew_r16_r16: { cmov }
flags for cmovel_r32_m32: { cmov }
flags for cmovel_r32_r32: { cmov }
flags for cmoveq_r64_m64: { cmov }
flags for cmoveq_r64_r64: { cmov }
flags for cmovgw_r16_m16: { cmov }
flags for cmovgw_r16_r16: { cmov }
flags for cmovgl_r32_m32: { cmov }
flags for cmovgl_r32_r32: { cmov }
flags for cmovgq_r64_m64: { cmov }
flags for cmovgq_r64_r64: { cmov }
flags for cmovgew_r16_m16: { cmov }
flags for cmovgew_r16_r16: { cmov }
flags for cmovgel_r32_m32: { cmov }
flags for cmovgel_r32_r32: { cmov }
flags for cmovgeq_r64_m64: { cmov }
flags for cmovgeq_r64_r64: { cmov }
flags for cmovlw_r16_m16: { cmov }
flags for cmovlw_r16_r16: { cmov }
flags for cmovll_r32_m32: { cmov }
flags for cmovll_r32_r32: { cmov }
flags for cmovlq_r64_m64: { cmov }
flags for cmovlq_r64_r64: { cmov }
flags for cmovlew_r16_m16: { cmov }
flags for cmovlew_r16_r16: { cmov }
flags for cmovlel_r32_m32: { cmov }
flags for cmovlel_r32_r32: { cmov }
flags for cmovleq_r64_m64: { cmov }
flags for cmovleq_r64_r64: { cmov }
flags for cmovnaw_r16_m16: { cmov }
flags for cmovnaw_r16_r16: { cmov }
flags for cmovnal_r32_m32: { cmov }
flags for cmovnal_r32_r32: { cmov }
flags for cmovnaq_r64_m64: { cmov }
flags for cmovnaq_r64_r64: { cmov }
flags for cmovnaew_r16_m16: { cmov }
flags for cmovnaew_r16_r16: { cmov }
flags for cmovnael_r32_m32: { cmov }
flags for cmovnael_r32_r32: { cmov }
flags for cmovnaeq_r64_m64: { cmov }
flags for cmovnaeq_r64_r64: { cmov }
flags for cmovnbw_r16_m16: { cmov }
flags for cmovnbw_r16_r16: { cmov }
flags for cmovnbl_r32_m32: { cmov }
flags for cmovnbl_r32_r32: { cmov }
flags for cmovnbq_r64_m64: { cmov }
flags for cmovnbq_r64_r64: { cmov }
flags for cmovnbew_r16_m16: { cmov }
flags for cmovnbew_r16_r16: { cmov }
flags for cmovnbel_r32_m32: { cmov }
flags for cmovnbel_r32_r32: { cmov }
flags for cmovnbeq_r64_m64: { cmov }
flags for cmovnbeq_r64_r64: { cmov }
flags for cmovncw_r16_m16: { cmov }
flags for cmovncw_r16_r16: { cmov }
flags for cmovncl_r32_m32: { cmov }
flags for cmovncl_r32_r32: { cmov }
flags for cmovncq_r64_m64: { cmov }
flags for cmovncq_r64_r64: { cmov }
flags for cmovnew_r16_m16: { cmov }
flags for cmovnew_r16_r16: { cmov }
flags for cmovnel_r32_m32: { cmov }
flags for cmovnel_r32_r32: { cmov }
flags for cmovneq_r64_m64: { cmov }
flags for cmovneq_r64_r64: { cmov }
flags for cmovngw_r16_m16: { cmov }
flags for cmovngw_r16_r16: { cmov }
flags for cmovngl_r32_m32: { cmov }
flags for cmovngl_r32_r32: { cmov }
flags for cmovngq_r64_m64: { cmov }
flags for cmovngq_r64_r64: { cmov }
flags for cmovngew_r16_m16: { cmov }
flags for cmovngew_r16_r16: { cmov }
flags for cmovngel_r32_m32: { cmov }
flags for cmovngel_r32_r32: { cmov }
flags for cmovngeq_r64_m64: { cmov }
flags for cmovngeq_r64_r64: { cmov }
flags for cmovnlw_r16_m16: { cmov }
flags for cmovnlw_r16_r16: { cmov }
flags for cmovnll_r32_m32: { cmov }
flags for cmovnll_r32_r32: { cmov }
flags for cmovnlq_r64_m64: { cmov }
flags for cmovnlq_r64_r64: { cmov }
flags for cmovnlew_r16_m16: { cmov }
flags for cmovnlew_r16_r16: { cmov }
flags for cmovnlel_r32_m32: { cmov }
flags for cmovnlel_r32_r32: { cmov }
flags for cmovnleq_r64_m64: { cmov }
flags for cmovnleq_r64_r64: { cmov }
flags for cmovnow_r16_m16: { cmov }
flags for cmovnow_r16_r16: { cmov }
flags for cmovnol_r32_m32: { cmov }
flags for cmovnol_r32_r32: { cmov }
flags for cmovnoq_r64_m64: { cmov }
flags for cmovnoq_r64_r64: { cmov }
flags for cmovnpw_r16_m16: { cmov }
flags for cmovnpw_r16_r16: { cmov }
flags for cmovnpl_r32_m32: { cmov }
flags for cmovnpl_r32_r32: { cmov }
flags for cmovnpq_r64_m64: { cmov }
flags for cmovnpq_r64_r64: { cmov }
flags for cmovnsw_r16_m16: { cmov }
flags for cmovnsw_r16_r16: { cmov }
flags for cmovnsl_r32_m32: { cmov }
flags for cmovnsl_r32_r32: { cmov }
flags for cmovnsq_r64_m64: { cmov }
flags for cmovnsq_r64_r64: { cmov }
flags for cmovnzw_r16_m16: { cmov }
flags for cmovnzw_r16_r16: { cmov }
flags for cmovnzl_r32_m32: { cmov }
flags for cmovnzl_r32_r32: { cmov }
flags for cmovnzq_r64_m64: { cmov }
flags for cmovnzq_r64_r64: { cmov }
flags for cmovow_r16_m16: { cmov }
flags for cmovow_r16_r16: { cmov }
flags for cmovol_r32_m32: { cmov }
flags for cmovol_r32_r32: { cmov }
flags for cmovoq_r64_m64: { cmov }
flags for cmovoq_r64_r64: { cmov }
flags for cmovpw_r16_m16: { cmov }
flags for cmovpw_r16_r16: { cmov }
flags for cmovpl_r32_m32: { cmov }
flags for cmovpl_r32_r32: { cmov }
flags for cmovpq_r64_m64: { cmov }
flags for cmovpq_r64_r64: { cmov }
flags for cmovpew_r16_m16: { cmov }
flags for cmovpew_r16_r16: { cmov }
flags for cmovpel_r32_m32: { cmov }
flags for cmovpel_r32_r32: { cmov }
flags for cmovpeq_r64_m64: { cmov }
flags for cmovpeq_r64_r64: { cmov }
flags for cmovpow_r16_m16: { cmov }
flags for cmovpow_r16_r16: { cmov }
flags for cmovpol_r32_m32: { cmov }
flags for cmovpol_r32_r32: { cmov }
flags for cmovpoq_r64_m64: { cmov }
flags for cmovpoq_r64_r64: { cmov }
flags for cmovsw_r16_m16: { cmov }
flags for cmovsw_r16_r16: { cmov }
flags for cmovsl_r32_m32: { cmov }
flags for cmovsl_r32_r32: { cmov }
flags for cmovsq_r64_m64: { cmov }
flags for cmovsq_r64_r64: { cmov }
flags for cmovzw_r16_m16: { cmov }
flags for cmovzw_r16_r16: { cmov }
flags for cmovzl_r32_m32: { cmov }
flags for cmovzl_r32_r32: { cmov }
flags for cmovzq_r64_m64: { cmov }
flags for cmovzq_r64_r64: { cmov }
flags for comisd_xmm_m64: { sse2 }
flags for comisd_xmm_xmm: { sse2 }
flags for comiss_xmm_m32: { sse }
flags for comiss_xmm_xmm: { sse }
flags for cpuid: { }
flags for cvtdq2pd_xmm_m64: { sse2 }
flags for cvtdq2pd_xmm_xmm: { sse2 }
flags for cvtdq2ps_xmm_m128: { sse2 }
flags for cvtdq2ps_xmm_xmm: { sse2 }
flags for cvtpd2dq_xmm_m128: { sse2 }
flags for cvtpd2dq_xmm_xmm: { sse2 }
flags for cvtpd2pi_mm_m128: { }
flags for cvtpd2pi_mm_xmm: { }
flags for cvtpd2ps_xmm_m128: { sse2 }
flags for cvtpd2ps_xmm_xmm: { sse2 }
flags for cvtpi2pd_xmm_m64: { }
flags for cvtpi2pd_xmm_mm: { }
flags for cvtpi2ps_xmm_m64: { }
flags for cvtpi2ps_xmm_mm: { }
flags for cvtps2dq_xmm_m128: { sse2 }
flags for cvtps2dq_xmm_xmm: { sse2 }
flags for cvtps2pd_xmm_m64: { sse2 }
flags for cvtps2pd_xmm_xmm: { sse2 }
flags for cvtps2pi_mm_m64: { }
flags for cvtps2pi_mm_xmm: { }
flags for cvtsd2sil_r32_m64: { sse2 }
flags for cvtsd2sil_r32_xmm: { sse2 }
flags for cvtsd2siq_r64_m64: { sse2 }
flags for cvtsd2siq_r64_xmm: { sse2 }
flags for cvtsd2ss_xmm_m64: { sse2 }
flags for cvtsd2ss_xmm_xmm: { sse2 }
flags for cvtsi2sdl_xmm_m32: { sse2 }
flags for cvtsi2sdq_xmm_m64: { sse2 }
flags for cvtsi2sdl_xmm_r32: { sse2 }
flags for cvtsi2sdq_xmm_r64: { sse2 }
flags for cvtsi2ssl_xmm_m32: { sse }
flags for cvtsi2ssq_xmm_m64: { sse }
flags for cvtsi2ssl_xmm_r32: { sse }
flags for cvtsi2ssq_xmm_r64: { sse }
flags for cvtss2sd_xmm_m32: { sse2 }
flags for cvtss2sd_xmm_xmm: { sse2 }
flags for cvtss2sil_r32_m32: { sse }
flags for cvtss2sil_r32_xmm: { sse }
flags for cvtss2siq_r64_m32: { sse }
flags for cvtss2siq_r64_xmm: { sse }
flags for cvttpd2dq_xmm_m128: { sse2 }
flags for cvttpd2dq_xmm_xmm: { sse2 }
flags for cvttpd2pi_mm_m128: { }
flags for cvttpd2pi_mm_xmm: { }
flags for cvttps2dq_xmm_m128: { sse2 }
flags for cvttps2dq_xmm_xmm: { sse2 }
flags for cvttps2pi_mm_m64: { }
flags for cvttps2pi_mm_xmm: { }
flags for cvttsd2sil_r32_m64: { sse2 }
flags for cvttsd2sil_r32_xmm: { sse2 }
flags for cvttsd2siq_r64_m64: { sse2 }
flags for cvttsd2siq_r64_xmm: { sse2 }
flags for cvttss2sil_r32_m32: { sse }
flags for cvttss2sil_r32_xmm: { sse }
flags for cvttss2siq_r64_m32: { sse }
flags for cvttss2siq_r64_xmm: { sse }
flags for decw_m16: { }
flags for decl_m32: { }
flags for decq_m64: { }
flags for decb_m8: { }
flags for decw_r16: { }
flags for decl_r32: { }
flags for decq_r64: { }
flags for decb_r8: { }
flags for decb_rh: { }
flags for dppd_xmm_m128_imm8: { sse4_1 }
flags for dppd_xmm_xmm_imm8: { sse4_1 }
flags for dpps_xmm_m128_imm8: { sse4_1 }
flags for dpps_xmm_xmm_imm8: { sse4_1 }
flags for extractps_m32_xmm_imm8: { sse4_1 }
flags for extractps_r32_xmm_imm8: { sse4_1 }
flags for extractps_r64_xmm_imm8: { sse4_1 }
flags for f2xm1: { fpu }
flags for fabs: { fpu }
flags for fadds_m32fp: { fpu }
flags for faddl_m64fp: { fpu }
flags for faddp: { fpu }
flags for fbld_m80bcd: { fpu }
flags for fbstp_m80bcd: { fpu }
flags for fchs: { fpu }
flags for fclex: { fpu }
flags for fcom: { fpu }
flags for fcoms_m32fp: { fpu }
flags for fcoml_m64fp: { fpu }
flags for fcomp: { fpu }
flags for fcomps_m32fp: { fpu }
flags for fcompl_m64fp: { fpu }
flags for fcompp: { fpu }
flags for fcos: { fpu }
flags for fdecstp: { fpu }
flags for fdivs_m32fp: { fpu }
flags for fdivl_m64fp: { fpu }
flags for fdivp: { fpu }
flags for fdivrs_m32fp: { fpu }
flags for fdivrl_m64fp: { fpu }
flags for fdivrp: { fpu }
flags for fiadd_m16int: { fpu }
flags for fiaddl_m32int: { fpu }
flags for ficom_m16int: { fpu }
flags for ficoml_m32int: { fpu }
flags for ficomp_m16int: { fpu }
flags for ficompl_m32int: { fpu }
flags for fidiv_m16int: { fpu }
flags for fidivl_m32int: { fpu }
flags for fidivr_m16int: { fpu }
flags for fidivrl_m32int: { fpu }
flags for fild_m16int: { fpu }
flags for fildl_m32int: { fpu }
flags for fildll_m64int: { fpu }
flags for fimul_m16int: { fpu }
flags for fimull_m32int: { fpu }
flags for fincstp: { fpu }
flags for finit: { fpu }
flags for fist_m16int: { fpu }
flags for fistl_m32int: { fpu }
flags for fistp_m16int: { fpu }
flags for fistpl_m32int: { fpu }
flags for fistpll_m64int: { fpu }
flags for fisttp_m16int: { fpu }
flags for fisttpl_m32int: { fpu }
flags for fisttpll_m64int: { fpu }
flags for fisub_m16int: { fpu }
flags for fisubl_m32int: { fpu }
flags for fisubr_m16int: { fpu }
flags for fisubrl_m32int: { fpu }
flags for flds_m32fp: { fpu }
flags for fldl_m64fp: { fpu }
flags for fldt_m80fp: { fpu }
flags for fld1: { fpu }
flags for fldl2e: { fpu }
flags for fldl2t: { fpu }
flags for fldlg2: { fpu }
flags for fldln2: { fpu }
flags for fldpi: { fpu }
flags for fldz: { fpu }
flags for fmuls_m32fp: { fpu }
flags for fmull_m64fp: { fpu }
flags for fmulp: { fpu }
flags for fnclex: { fpu }
flags for fninit: { fpu }
flags for fnop: { fpu }
flags for fnstsw_ax: { fpu }
flags for fpatan: { fpu }
flags for fprem: { fpu }
flags for fprem1: { fpu }
flags for fptan: { fpu }
flags for frndint: { fpu }
flags for fscale: { fpu }
flags for fsin: { fpu }
flags for fsincos: { fpu }
flags for fsqrt: { fpu }
flags for fsts_m32fp: { fpu }
flags for fstl_m64fp: { fpu }
flags for fstps_m32fp: { fpu }
flags for fstpl_m64fp: { fpu }
flags for fstpt_m80fp: { fpu }
flags for fstsw_ax: { fpu }
flags for fsubs_m32fp: { fpu }
flags for fsubl_m64fp: { fpu }
flags for fsubp: { fpu }
flags for fsubrs_m32fp: { fpu }
flags for fsubrl_m64fp: { fpu }
flags for fsubrp: { fpu }
flags for ftst: { fpu }
flags for fucom: { fpu }
flags for fucomp: { fpu }
flags for fucompp: { fpu }
flags for fwait: { fpu }
flags for fxam: { fpu }
flags for fxch: { fpu }
flags for fxtract: { fpu }
flags for fyl2x: { fpu }
flags for fyl2xp1: { fpu }
flags for haddpd_xmm_m128: { pni }
flags for haddpd_xmm_xmm: { pni }
flags for haddps_xmm_m128: { pni }
flags for haddps_xmm_xmm: { pni }
flags for hsubpd_xmm_m128: { pni }
flags for hsubpd_xmm_xmm: { pni }
flags for hsubps_xmm_m128: { pni }
flags for hsubps_xmm_xmm: { pni }
flags for incw_m16: { }
flags for incl_m32: { }
flags for incq_m64: { }
flags for incb_m8: { }
flags for incw_r16: { }
flags for incl_r32: { }
flags for incq_r64: { }
flags for incb_r8: { }
flags for incb_rh: { }
flags for insertps_xmm_m32_imm8: { sse4_1 }
flags for insertps_xmm_xmm_imm8: { sse4_1 }
flags for int_imm8: { }
flags for int_three: { }
flags for lahf: { lahf_lm }
flags for lddqu_xmm_m128: { pni }
flags for leaw_r16_m16: { }
flags for leaw_r16_m32: { }
flags for leaw_r16_m64: { }
flags for leal_r32_m16: { }
flags for leal_r32_m32: { }
flags for leal_r32_m64: { }
flags for leaq_r64_m16: { }
flags for leaq_r64_m32: { }
flags for leaq_r64_m64: { }
flags for lzcntw_r16_m16: { bmi1 }
flags for lzcntw_r16_r16: { bmi1 }
flags for lzcntl_r32_m32: { bmi1 }
flags for lzcntl_r32_r32: { bmi1 }
flags for lzcntq_r64_m64: { bmi1 }
flags for lzcntq_r64_r64: { bmi1 }
flags for maxpd_xmm_m128: { sse2 }
flags for maxpd_xmm_xmm: { sse2 }
flags for maxps_xmm_m128: { sse }
flags for maxps_xmm_xmm: { sse }
flags for maxsd_xmm_m64: { sse2 }
flags for maxsd_xmm_xmm: { sse2 }
flags for maxss_xmm_m32: { sse }
flags for maxss_xmm_xmm: { sse }
flags for minpd_xmm_m128: { sse2 }
flags for minpd_xmm_xmm: { sse2 }
flags for minps_xmm_m128: { sse }
flags for minps_xmm_xmm: { sse }
flags for minsd_xmm_m64: { sse2 }
flags for minsd_xmm_xmm: { sse2 }
flags for minss_xmm_m32: { sse }
flags for minss_xmm_xmm: { sse }
flags for movw_m16_imm16: { }
flags for movw_m16_r16: { }
flags for movl_m32_imm32: { }
flags for movl_m32_r32: { }
flags for movq_m64_imm32: { }
flags for movq_m64_r64: { }
flags for movb_m8_imm8: { }
flags for movb_m8_r8: { }
flags for movb_m8_rh: { }
flags for movw_r16_imm16: { }
flags for movw_r16_imm16_1: { }
flags for movw_r16_m16: { }
flags for movw_r16_r16: { }
flags for movw_r16_r16_1: { }
flags for movl_r32_imm32: { }
flags for movl_r32_imm32_1: { }
flags for movl_r32_m32: { }
flags for movl_r32_r32: { }
flags for movl_r32_r32_1: { }
flags for movq_r64_imm32: { }
flags for movq_r64_imm64: { }
flags for movq_r64_m64: { }
flags for movq_r64_r64: { }
flags for movq_r64_r64_1: { }
flags for movb_r8_imm8: { }
flags for movb_r8_imm8_1: { }
flags for movb_r8_m8: { }
flags for movb_r8_r8: { }
flags for movb_r8_r8_1: { }
flags for movb_r8_rh: { }
flags for movb_r8_rh_1: { }
flags for movb_rh_imm8: { }
flags for movb_rh_imm8_1: { }
flags for movb_rh_m8: { }
flags for movb_rh_r8: { }
flags for movb_rh_r8_1: { }
flags for movb_rh_rh: { }
flags for movb_rh_rh_1: { }
flags for movapd_m128_xmm: { sse2 }
flags for movapd_xmm_m128: { sse2 }
flags for movapd_xmm_xmm: { sse2 }
flags for movapd_xmm_xmm_1: { sse2 }
flags for movaps_m128_xmm: { sse }
flags for movaps_xmm_m128: { sse }
flags for movaps_xmm_xmm: { sse }
flags for movaps_xmm_xmm_1: { sse }
flags for movbew_m16_r16: { movbe }
flags for movbel_m32_r32: { movbe }
flags for movbeq_m64_r64: { movbe }
flags for movbew_r16_m16: { movbe }
flags for movbel_r32_m32: { movbe }
flags for movbeq_r64_m64: { movbe }
flags for movd_m32_mm: { mmx }
flags for movd_m32_xmm: { sse2 }
flags for movd_mm_m32: { mmx }
flags for movd_mm_r32: { mmx }
flags for movd_r32_mm: { mmx }
flags for movd_r32_xmm: { sse2 }
flags for movd_xmm_m32: { sse2 }
flags for movd_xmm_r32: { sse2 }
flags for movddup_xmm_m64: { pni }
flags for movddup_xmm_xmm: { pni }
flags for movdq2q_mm_xmm: { mmx }
flags for movdqa_m128_xmm: { sse2 }
flags for movdqa_xmm_m128: { sse2 }
flags for movdqa_xmm_xmm: { sse2 }
flags for movdqa_xmm_xmm_1: { sse2 }
flags for movdqu_m128_xmm: { sse2 }
flags for movdqu_xmm_m128: { sse2 }
flags for movdqu_xmm_xmm: { sse2 }
flags for movdqu_xmm_xmm_1: { sse2 }
flags for movhlps_xmm_xmm: { sse }
flags for movhpd_m64_xmm: { sse2 }
flags for movhpd_xmm_m64: { sse2 }
flags for movhps_m64_xmm: { sse }
flags for movhps_xmm_m64: { sse }
flags for movlhps_xmm_xmm: { sse }
flags for movlpd_m64_xmm: { sse2 }
flags for movlpd_xmm_m64: { sse2 }
flags for movlps_m64_xmm: { sse }
flags for movlps_xmm_m64: { sse }
flags for movmskpd_r32_xmm: { sse2 }
flags for movmskpd_r64_xmm: { sse2 }
flags for movmskps_r32_xmm: { sse }
flags for movmskps_r64_xmm: { sse }
flags for movntdq_m128_xmm: { sse2 }
flags for movntdq_m256_ymm: { avx }
flags for movntdqa_xmm_m128: { sse4_1 }
flags for movnti_m32_r32: { }
flags for movnti_m64_r64: { }
flags for movntpd_m128_xmm: { sse2 }
flags for movntps_m128_xmm: { sse }
flags for movntq_m64_mm: { }
flags for movq_m64_mm: { mmx }
flags for movq_m64_mm_1: { mmx }
flags for movq_m64_xmm: { sse2 }
flags for movq_m64_xmm_1: { sse2 }
flags for movq_mm_m64: { mmx }
flags for movq_mm_m64_1: { mmx }
flags for movq_mm_mm: { mmx }
flags for movq_mm_mm_1: { mmx }
flags for movq_mm_r64: { mmx }
flags for movq_r64_mm: { mmx }
flags for movq_r64_xmm: { sse2 }
flags for movq_xmm_m64: { sse2 }
flags for movq_xmm_m64_1: { sse2 }
flags for movq_xmm_r64: { sse2 }
flags for movq_xmm_xmm: { sse2 }
flags for movq_xmm_xmm_1: { sse2 }
flags for movq2dq_xmm_mm: { mmx }
flags for movsd_m64_xmm: { sse2 }
flags for movsd_xmm_m64: { sse2 }
flags for movsd_xmm_xmm: { sse2 }
flags for movsd_xmm_xmm_1: { sse2 }
flags for movshdup_xmm_m128: { pni }
flags for movshdup_xmm_xmm: { pni }
flags for movsldup_xmm_m128: { pni }
flags for movsldup_xmm_xmm: { pni }
flags for movss_m32_xmm: { sse }
flags for movss_xmm_m32: { sse }
flags for movss_xmm_xmm: { sse }
flags for movss_xmm_xmm_1: { sse }
flags for movsbw_r16_m8: { }
flags for movsbw_r16_r8: { }
flags for movsbw_r16_rh: { }
flags for movswl_r32_m16: { }
flags for movsbl_r32_m8: { }
flags for movswl_r32_r16: { }
flags for movsbl_r32_r8: { }
flags for movsbl_r32_rh: { }
flags for movswq_r64_m16: { }
flags for movsbq_r64_m8: { }
flags for movswq_r64_r16: { }
flags for movsbq_r64_r8: { }
flags for movslq_r64_m32: { }
flags for movslq_r64_r32: { }
flags for movupd_m128_xmm: { sse2 }
flags for movupd_xmm_m128: { sse2 }
flags for movupd_xmm_xmm: { sse2 }
flags for movupd_xmm_xmm_1: { sse2 }
flags for movups_m128_xmm: { sse }
flags for movups_xmm_m128: { sse }
flags for movups_xmm_xmm: { sse }
flags for movups_xmm_xmm_1: { sse }
flags for movzbw_r16_m8: { }
flags for movzbw_r16_r8: { }
flags for movzbw_r16_rh: { }
flags for movzwl_r32_m16: { }
flags for movzbl_r32_m8: { }
flags for movzwl_r32_r16: { }
flags for movzbl_r32_r8: { }
flags for movzbl_r32_rh: { }
flags for movzwq_r64_m16: { }
flags for movzbq_r64_m8: { }
flags for movzwq_r64_r16: { }
flags for movzbq_r64_r8: { }
flags for mpsadbw_xmm_m128_imm8: { sse4_1 }
flags for mpsadbw_xmm_xmm_imm8: { sse4_1 }
flags for negw_m16: { }
flags for negl_m32: { }
flags for negq_m64: { }
flags for negb_m8: { }
flags for negw_r16: { }
flags for negl_r32: { }
flags for negq_r64: { }
flags for negb_r8: { }
flags for negb_rh: { }
flags for nop: { }
flags for nopw_m16: { nopl }
flags for nopl_m32: { nopl }
flags for nopw_r16: { nopl }
flags for nopl_r32: { nopl }
flags for notw_m16: { }
flags for notl_m32: { }
flags for notq_m64: { }
flags for notb_m8: { }
flags for notw_r16: { }
flags for notl_r32: { }
flags for notq_r64: { }
flags for notb_r8: { }
flags for notb_rh: { }
flags for orb_al_imm8: { }
flags for orw_ax_imm16: { }
flags for orl_eax_imm32: { }
flags for orw_m16_imm16: { }
flags for orw_m16_imm8: { }
flags for orw_m16_r16: { }
flags for orl_m32_imm32: { }
flags for orl_m32_imm8: { }
flags for orl_m32_r32: { }
flags for orq_m64_imm32: { }
flags for orq_m64_imm8: { }
flags for orq_m64_r64: { }
flags for orb_m8_imm8: { }
flags for orb_m8_r8: { }
flags for orb_m8_rh: { }
flags for orw_r16_imm16: { }
flags for orw_r16_imm8: { }
flags for orw_r16_m16: { }
flags for orw_r16_r16: { }
flags for orw_r16_r16_1: { }
flags for orl_r32_imm32: { }
flags for orl_r32_imm8: { }
flags for orl_r32_m32: { }
flags for orl_r32_r32: { }
flags for orl_r32_r32_1: { }
flags for orq_r64_imm32: { }
flags for orq_r64_imm8: { }
flags for orq_r64_m64: { }
flags for orq_r64_r64: { }
flags for orq_r64_r64_1: { }
flags for orb_r8_imm8: { }
flags for orb_r8_m8: { }
flags for orb_r8_r8: { }
flags for orb_r8_r8_1: { }
flags for orb_r8_rh: { }
flags for orb_r8_rh_1: { }
flags for orq_rax_imm32: { }
flags for orb_rh_imm8: { }
flags for orb_rh_m8: { }
flags for orb_rh_r8: { }
flags for orb_rh_r8_1: { }
flags for orb_rh_rh: { }
flags for orb_rh_rh_1: { }
flags for orpd_xmm_m128: { sse2 }
flags for orpd_xmm_xmm: { sse2 }
flags for orps_xmm_m128: { sse }
flags for orps_xmm_xmm: { sse }
flags for pabsb_mm_m64: { ssse3 }
flags for pabsb_mm_mm: { ssse3 }
flags for pabsb_xmm_m128: { ssse3 }
flags for pabsb_xmm_xmm: { ssse3 }
flags for pabsd_mm_m64: { ssse3 }
flags for pabsd_mm_mm: { ssse3 }
flags for pabsd_xmm_m128: { ssse3 }
flags for pabsd_xmm_xmm: { ssse3 }
flags for pabsw_mm_m64: { ssse3 }
flags for pabsw_mm_mm: { ssse3 }
flags for pabsw_xmm_m128: { ssse3 }
flags for pabsw_xmm_xmm: { ssse3 }
flags for packssdw_mm_m64: { mmx }
flags for packssdw_mm_mm: { mmx }
flags for packssdw_xmm_m128: { sse2 }
flags for packssdw_xmm_xmm: { sse2 }
flags for packsswb_mm_m64: { mmx }
flags for packsswb_mm_mm: { mmx }
flags for packsswb_xmm_m128: { sse2 }
flags for packsswb_xmm_xmm: { sse2 }
flags for packusdw_xmm_m128: { sse4_1 }
flags for packusdw_xmm_xmm: { sse4_1 }
flags for packuswb_mm_m64: { mmx }
flags for packuswb_mm_mm: { mmx }
flags for packuswb_xmm_m128: { sse2 }
flags for packuswb_xmm_xmm: { sse2 }
flags for paddb_mm_m64: { mmx }
flags for paddb_mm_mm: { mmx }
flags for paddb_xmm_m128: { sse2 }
flags for paddb_xmm_xmm: { sse2 }
flags for paddd_mm_m64: { mmx }
flags for paddd_mm_mm: { mmx }
flags for paddd_xmm_m128: { sse2 }
flags for paddd_xmm_xmm: { sse2 }
flags for paddq_mm_m64: { sse2 }
flags for paddq_mm_mm: { sse2 }
flags for paddq_xmm_m128: { sse2 }
flags for paddq_xmm_xmm: { sse2 }
flags for paddsb_mm_m64: { mmx }
flags for paddsb_mm_mm: { mmx }
flags for paddsb_xmm_m128: { sse2 }
flags for paddsb_xmm_xmm: { sse2 }
flags for paddsw_mm_m64: { mmx }
flags for paddsw_mm_mm: { mmx }
flags for paddsw_xmm_m128: { sse2 }
flags for paddsw_xmm_xmm: { sse2 }
flags for paddusb_mm_m64: { mmx }
flags for paddusb_mm_mm: { mmx }
flags for paddusb_xmm_m128: { sse2 }
flags for paddusb_xmm_xmm: { sse2 }
flags for paddusw_mm_m64: { mmx }
flags for paddusw_mm_mm: { mmx }
flags for paddusw_xmm_m128: { sse2 }
flags for paddusw_xmm_xmm: { sse2 }
flags for paddw_mm_m64: { mmx }
flags for paddw_mm_mm: { mmx }
flags for paddw_xmm_m128: { sse2 }
flags for paddw_xmm_xmm: { sse2 }
flags for palignr_mm_m64_imm8: { ssse3 }
flags for palignr_mm_mm_imm8: { ssse3 }
flags for palignr_xmm_m128_imm8: { ssse3 }
flags for palignr_xmm_xmm_imm8: { ssse3 }
flags for pand_mm_m64: { mmx }
flags for pand_mm_mm: { mmx }
flags for pand_xmm_m128: { sse2 }
flags for pand_xmm_xmm: { sse2 }
flags for pandn_mm_m64: { mmx }
flags for pandn_mm_mm: { mmx }
flags for pandn_xmm_m128: { sse2 }
flags for pandn_xmm_xmm: { sse2 }
flags for pavgb_mm_m64: { sse }
flags for pavgb_mm_mm: { sse }
flags for pavgb_xmm_m128: { sse2 }
flags for pavgb_xmm_xmm: { sse2 }
flags for pavgw_mm_m64: { sse }
flags for pavgw_mm_mm: { sse }
flags for pavgw_xmm_m128: { sse2 }
flags for pavgw_xmm_xmm: { sse2 }
flags for pblendvb_xmm_m128_xmm0: { sse4_1 }
flags for pblendvb_xmm_xmm_xmm0: { sse4_1 }
flags for pblendw_xmm_m128_imm8: { sse4_1 }
flags for pblendw_xmm_xmm_imm8: { sse4_1 }
flags for pclmulqdq_xmm_m128_imm8: { pclmulqdq }
flags for pclmulqdq_xmm_xmm_imm8: { pclmulqdq }
flags for pcmpeqb_mm_m64: { mmx }
flags for pcmpeqb_mm_mm: { mmx }
flags for pcmpeqb_xmm_m128: { sse2 }
flags for pcmpeqb_xmm_xmm: { sse2 }
flags for pcmpeqd_mm_m64: { mmx }
flags for pcmpeqd_mm_mm: { mmx }
flags for pcmpeqd_xmm_m128: { sse2 }
flags for pcmpeqd_xmm_xmm: { sse2 }
flags for pcmpeqq_xmm_m128: { sse4_1 }
flags for pcmpeqq_xmm_xmm: { sse4_1 }
flags for pcmpeqw_mm_m64: { mmx }
flags for pcmpeqw_mm_mm: { mmx }
flags for pcmpeqw_xmm_m128: { sse2 }
flags for pcmpeqw_xmm_xmm: { sse2 }
flags for pcmpestri_xmm_m128_imm8: { sse4_2 }
flags for pcmpestri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpestrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpestrm_xmm_xmm_imm8: { sse4_2 }
flags for pcmpgtb_mm_m64: { mmx }
flags for pcmpgtb_mm_mm: { mmx }
flags for pcmpgtb_xmm_m128: { sse2 }
flags for pcmpgtb_xmm_xmm: { sse2 }
flags for pcmpgtd_mm_m64: { mmx }
flags for pcmpgtd_mm_mm: { mmx }
flags for pcmpgtd_xmm_m128: { sse2 }
flags for pcmpgtd_xmm_xmm: { sse2 }
flags for pcmpgtq_xmm_m128: { sse4_2 }
flags for pcmpgtq_xmm_xmm: { sse4_2 }
flags for pcmpgtw_mm_m64: { mmx }
flags for pcmpgtw_mm_mm: { mmx }
flags for pcmpgtw_xmm_m128: { sse2 }
flags for pcmpgtw_xmm_xmm: { sse2 }
flags for pcmpistri_xmm_m128_imm8: { sse4_2 }
flags for pcmpistri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpistrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpistrm_xmm_xmm_imm8: { sse4_2 }
flags for pdepl_r32_r32_m32: { bmi2 }
flags for pdepl_r32_r32_r32: { bmi2 }
flags for pdepq_r64_r64_m64: { bmi2 }
flags for pdepq_r64_r64_r64: { bmi2 }
flags for pextl_r32_r32_m32: { bmi2 }
flags for pextl_r32_r32_r32: { bmi2 }
flags for pextq_r64_r64_m64: { bmi2 }
flags for pextq_r64_r64_r64: { bmi2 }
flags for pextrb_m8_xmm_imm8: { sse4_1 }
flags for pextrb_r32_xmm_imm8: { sse4_1 }
flags for pextrb_r64_xmm_imm8: { sse4_1 }
flags for pextrd_m32_xmm_imm8: { sse4_1 }
flags for pextrd_r32_xmm_imm8: { sse4_1 }
flags for pextrq_m64_xmm_imm8: { sse4_1 }
flags for pextrq_r64_xmm_imm8: { sse4_1 }
flags for pextrw_m16_xmm_imm8: { sse4_1 }
flags for pextrw_r32_mm_imm8: { sse }
flags for pextrw_r32_xmm_imm8: { sse2 }
flags for pextrw_r32_xmm_imm8_1: { sse4_1 }
flags for pextrw_r64_mm_imm8: { sse }
flags for pextrw_r64_xmm_imm8: { sse2 }
flags for pextrw_r64_xmm_imm8_1: { sse4_1 }
flags for phaddd_mm_m64: { ssse3 }
flags for phaddd_mm_mm: { ssse3 }
flags for phaddd_xmm_m128: { ssse3 }
flags for phaddd_xmm_xmm: { ssse3 }
flags for phaddsw_mm_m64: { ssse3 }
flags for phaddsw_mm_mm: { ssse3 }
flags for phaddsw_xmm_m128: { ssse3 }
flags for phaddsw_xmm_xmm: { ssse3 }
flags for phaddw_mm_m64: { ssse3 }
flags for phaddw_mm_mm: { ssse3 }
flags for phaddw_xmm_m128: { ssse3 }
flags for phaddw_xmm_xmm: { ssse3 }
flags for phminposuw_xmm_m128: { sse4_1 }
flags for phminposuw_xmm_xmm: { sse4_1 }
flags for phsubd_mm_m64: { ssse3 }
flags for phsubd_mm_mm: { ssse3 }
flags for phsubd_xmm_m128: { ssse3 }
flags for phsubd_xmm_xmm: { ssse3 }
flags for phsubsw_mm_m64: { ssse3 }
flags for phsubsw_mm_mm: { ssse3 }
flags for phsubsw_xmm_m128: { ssse3 }
flags for phsubsw_xmm_xmm: { ssse3 }
flags for phsubw_mm_m64: { ssse3 }
flags for phsubw_mm_mm: { ssse3 }
flags for phsubw_xmm_m128: { ssse3 }
flags for phsubw_xmm_xmm: { ssse3 }
flags for pinsrb_xmm_m8_imm8: { sse4_1 }
flags for pinsrb_xmm_r32_imm8: { sse4_1 }
flags for pinsrd_xmm_m32_imm8: { sse4_1 }
flags for pinsrd_xmm_r32_imm8: { sse4_1 }
flags for pinsrw_mm_m16_imm8: { sse }
flags for pinsrw_mm_r32_imm8: { sse }
flags for pinsrw_xmm_m16_imm8: { sse2 }
flags for pinsrw_xmm_r32_imm8: { sse2 }
flags for pmaddubsw_mm_m64: { mmx ssse3 }
flags for pmaddubsw_mm_mm: { mmx ssse3 }
flags for pmaddubsw_xmm_m128: { ssse3 }
flags for pmaddubsw_xmm_xmm: { ssse3 }
flags for pmaddwd_mm_m64: { mmx }
flags for pmaddwd_mm_mm: { mmx }
flags for pmaddwd_xmm_m128: { sse2 }
flags for pmaddwd_xmm_xmm: { sse2 }
flags for pmaxsb_xmm_m128: { sse4_1 }
flags for pmaxsb_xmm_xmm: { sse4_1 }
flags for pmaxsd_xmm_m128: { sse4_1 }
flags for pmaxsd_xmm_xmm: { sse4_1 }
flags for pmaxsw_mm_m64: { sse }
flags for pmaxsw_mm_mm: { sse }
flags for pmaxsw_xmm_m128: { sse2 }
flags for pmaxsw_xmm_xmm: { sse2 }
flags for pmaxub_mm_m64: { sse }
flags for pmaxub_mm_mm: { sse }
flags for pmaxub_xmm_m128: { sse2 }
flags for pmaxub_xmm_xmm: { sse2 }
flags for pmaxud_xmm_m128: { sse4_1 }
flags for pmaxud_xmm_xmm: { sse4_1 }
flags for pmaxuw_xmm_m128: { sse4_1 }
flags for pmaxuw_xmm_xmm: { sse4_1 }
flags for pminsb_xmm_m128: { sse4_1 }
flags for pminsb_xmm_xmm: { sse4_1 }
flags for pminsd_xmm_m128: { sse4_1 }
flags for pminsd_xmm_xmm: { sse4_1 }
flags for pminsw_mm_m64: { sse }
flags for pminsw_mm_mm: { sse }
flags for pminsw_xmm_m128: { sse2 }
flags for pminsw_xmm_xmm: { sse2 }
flags for pminub_mm_m64: { sse }
flags for pminub_mm_mm: { sse }
flags for pminub_xmm_m128: { sse2 }
flags for pminub_xmm_xmm: { sse2 }
flags for pminud_xmm_m128: { sse4_1 }
flags for pminud_xmm_xmm: { sse4_1 }
flags for pminuw_xmm_m128: { sse4_1 }
flags for pminuw_xmm_xmm: { sse4_1 }
flags for pmovmskb_r32_mm: { sse }
flags for pmovmskb_r32_xmm: { sse2 }
flags for pmovmskb_r64_mm: { sse }
flags for pmovmskb_r64_xmm: { sse2 }
flags for pmovsxbd_xmm_m32: { sse4_1 }
flags for pmovsxbd_xmm_xmm: { sse4_1 }
flags for pmovsxbq_xmm_m16: { sse4_1 }
flags for pmovsxbq_xmm_xmm: { sse4_1 }
flags for pmovsxbw_xmm_m64: { sse4_1 }
flags for pmovsxbw_xmm_xmm: { sse4_1 }
flags for pmovsxdq_xmm_m64: { sse4_1 }
flags for pmovsxdq_xmm_xmm: { sse4_1 }
flags for pmovsxwd_xmm_m64: { sse4_1 }
flags for pmovsxwd_xmm_xmm: { sse4_1 }
flags for pmovsxwq_xmm_m32: { sse4_1 }
flags for pmovsxwq_xmm_xmm: { sse4_1 }
flags for pmovzxbd_xmm_m32: { sse4_1 }
flags for pmovzxbd_xmm_xmm: { sse4_1 }
flags for pmovzxbq_xmm_m16: { sse4_1 }
flags for pmovzxbq_xmm_xmm: { sse4_1 }
flags for pmovzxbw_xmm_m64: { sse4_1 }
flags for pmovzxbw_xmm_xmm: { sse4_1 }
flags for pmovzxdq_xmm_m64: { sse4_1 }
flags for pmovzxdq_xmm_xmm: { sse4_1 }
flags for pmovzxwd_xmm_m64: { sse4_1 }
flags for pmovzxwd_xmm_xmm: { sse4_1 }
flags for pmovzxwq_xmm_m32: { sse4_1 }
flags for pmovzxwq_xmm_xmm: { sse4_1 }
flags for pmuldq_xmm_m128: { sse4_1 }
flags for pmuldq_xmm_xmm: { sse4_1 }
flags for pmulhrsw_mm_m64: { ssse3 }
flags for pmulhrsw_mm_mm: { ssse3 }
flags for pmulhrsw_xmm_m128: { ssse3 }
flags for pmulhrsw_xmm_xmm: { ssse3 }
flags for pmulhuw_mm_m64: { sse }
flags for pmulhuw_mm_mm: { sse }
flags for pmulhuw_xmm_m128: { sse2 }
flags for pmulhuw_xmm_xmm: { sse2 }
flags for pmulhw_mm_m64: { mmx }
flags for pmulhw_mm_mm: { mmx }
flags for pmulhw_xmm_m128: { sse2 }
flags for pmulhw_xmm_xmm: { sse2 }
flags for pmulld_xmm_m128: { sse4_1 }
flags for pmulld_xmm_xmm: { sse4_1 }
flags for pmullw_mm_m64: { mmx }
flags for pmullw_mm_mm: { mmx }
flags for pmullw_xmm_m128: { sse2 }
flags for pmullw_xmm_xmm: { sse2 }
flags for pmuludq_mm_m64: { sse2 }
flags for pmuludq_mm_mm: { sse2 }
flags for pmuludq_xmm_m128: { sse2 }
flags for pmuludq_xmm_xmm: { sse2 }
flags for popw_m16: { }
flags for popq_m64: { }
flags for popw_r16: { }
flags for popw_r16_1: { }
flags for popq_r64: { }
flags for popq_r64_1: { }
flags for popcntw_r16_m16: { popcnt }
flags for popcntw_r16_r16: { popcnt }
flags for popcntl_r32_m32: { popcnt }
flags for popcntl_r32_r32: { popcnt }
flags for popcntq_r64_m64: { popcnt }
flags for popcntq_r64_r64: { popcnt }
flags for popf: { }
flags for popfq: { }
flags for por_mm_m64: { mmx }
flags for por_mm_mm: { mmx }
flags for por_xmm_m128: { sse2 }
flags for por_xmm_xmm: { sse2 }
flags for psadbw_mm_m64: { sse }
flags for psadbw_mm_mm: { sse }
flags for psadbw_xmm_m128: { sse2 }
flags for psadbw_xmm_xmm: { sse2 }
flags for pshufb_mm_m64: { ssse3 }
flags for pshufb_mm_mm: { ssse3 }
flags for pshufb_xmm_m128: { ssse3 }
flags for pshufb_xmm_xmm: { ssse3 }
flags for pshufd_xmm_m128_imm8: { sse2 }
flags for pshufd_xmm_xmm_imm8: { sse2 }
flags for pshufhw_xmm_m128_imm8: { sse2 }
flags for pshufhw_xmm_xmm_imm8: { sse2 }
flags for pshuflw_xmm_m128_imm8: { sse2 }
flags for pshuflw_xmm_xmm_imm8: { sse2 }
flags for pshufw_mm_m64_imm8: { }
flags for pshufw_mm_mm_imm8: { }
flags for psignb_mm_m64: { ssse3 }
flags for psignb_mm_mm: { ssse3 }
flags for psignb_xmm_m128: { ssse3 }
flags for psignb_xmm_xmm: { ssse3 }
flags for psignd_mm_m64: { ssse3 }
flags for psignd_mm_mm: { ssse3 }
flags for psignd_xmm_m128: { ssse3 }
flags for psignd_xmm_xmm: { ssse3 }
flags for psignw_mm_m64: { ssse3 }
flags for psignw_mm_mm: { ssse3 }
flags for psignw_xmm_m128: { ssse3 }
flags for psignw_xmm_xmm: { ssse3 }
flags for pslld_mm_imm8: { mmx }
flags for pslld_mm_m64: { mmx }
flags for pslld_mm_mm: { mmx }
flags for pslld_xmm_imm8: { sse2 }
flags for pslld_xmm_m128: { sse2 }
flags for pslld_xmm_xmm: { sse2 }
flags for pslldq_xmm_imm8: { sse2 }
flags for psllq_mm_imm8: { mmx }
flags for psllq_mm_m64: { mmx }
flags for psllq_mm_mm: { mmx }
flags for psllq_xmm_imm8: { sse2 }
flags for psllq_xmm_m128: { sse2 }
flags for psllq_xmm_xmm: { sse2 }
flags for psllw_mm_imm8: { mmx }
flags for psllw_mm_m64: { mmx }
flags for psllw_mm_mm: { mmx }
flags for psllw_xmm_imm8: { sse2 }
flags for psllw_xmm_m128: { sse2 }
flags for psllw_xmm_xmm: { sse2 }
flags for psrad_mm_imm8: { mmx }
flags for psrad_mm_m64: { mmx }
flags for psrad_mm_mm: { mmx }
flags for psrad_xmm_imm8: { sse2 }
flags for psrad_xmm_m128: { sse2 }
flags for psrad_xmm_xmm: { sse2 }
flags for psraw_mm_imm8: { mmx }
flags for psraw_mm_m64: { mmx }
flags for psraw_mm_mm: { mmx }
flags for psraw_xmm_imm8: { sse2 }
flags for psraw_xmm_m128: { sse2 }
flags for psraw_xmm_xmm: { sse2 }
flags for psrld_mm_imm8: { mmx }
flags for psrld_mm_m64: { mmx }
flags for psrld_mm_mm: { mmx }
flags for psrld_xmm_imm8: { sse2 }
flags for psrld_xmm_m128: { sse2 }
flags for psrld_xmm_xmm: { sse2 }
flags for psrldq_xmm_imm8: { sse2 }
flags for psrlq_mm_imm8: { mmx }
flags for psrlq_mm_m64: { mmx }
flags for psrlq_mm_mm: { mmx }
flags for psrlq_xmm_imm8: { sse2 }
flags for psrlq_xmm_m128: { sse2 }
flags for psrlq_xmm_xmm: { sse2 }
flags for psrlw_mm_imm8: { mmx }
flags for psrlw_mm_m64: { mmx }
flags for psrlw_mm_mm: { mmx }
flags for psrlw_xmm_imm8: { sse2 }
flags for psrlw_xmm_m128: { sse2 }
flags for psrlw_xmm_xmm: { sse2 }
flags for psubb_mm_m64: { mmx }
flags for psubb_mm_mm: { mmx }
flags for psubb_xmm_m128: { sse2 }
flags for psubb_xmm_xmm: { sse2 }
flags for psubd_mm_m64: { mmx }
flags for psubd_mm_mm: { mmx }
flags for psubd_xmm_m128: { sse2 }
flags for psubd_xmm_xmm: { sse2 }
flags for psubq_mm_m64: { sse2 }
flags for psubq_mm_mm: { sse2 }
flags for psubq_xmm_m128: { sse2 }
flags for psubq_xmm_xmm: { sse2 }
flags for psubsb_mm_m64: { mmx }
flags for psubsb_mm_mm: { mmx }
flags for psubsb_xmm_m128: { sse2 }
flags for psubsb_xmm_xmm: { sse2 }
flags for psubsw_mm_m64: { mmx }
flags for psubsw_mm_mm: { mmx }
flags for psubsw_xmm_m128: { sse2 }
flags for psubsw_xmm_xmm: { sse2 }
flags for psubusb_mm_m64: { mmx }
flags for psubusb_mm_mm: { mmx }
flags for psubusb_xmm_m128: { sse2 }
flags for psubusb_xmm_xmm: { sse2 }
flags for psubusw_mm_m64: { mmx }
flags for psubusw_mm_mm: { mmx }
flags for psubusw_xmm_m128: { sse2 }
flags for psubusw_xmm_xmm: { sse2 }
flags for psubw_mm_m64: { mmx }
flags for psubw_mm_mm: { mmx }
flags for psubw_xmm_m128: { sse2 }
flags for psubw_xmm_xmm: { sse2 }
flags for ptest_xmm_m128: { sse4_1 }
flags for ptest_xmm_xmm: { sse4_1 }
flags for punpckhbw_mm_m64: { mmx }
flags for punpckhbw_mm_mm: { mmx }
flags for punpckhbw_xmm_m128: { sse2 }
flags for punpckhbw_xmm_xmm: { sse2 }
flags for punpckhdq_mm_m64: { mmx }
flags for punpckhdq_mm_mm: { mmx }
flags for punpckhdq_xmm_m128: { sse2 }
flags for punpckhdq_xmm_xmm: { sse2 }
flags for punpckhqdq_xmm_m128: { sse2 }
flags for punpckhqdq_xmm_xmm: { sse2 }
flags for punpckhwd_mm_m64: { mmx }
flags for punpckhwd_mm_mm: { mmx }
flags for punpckhwd_xmm_m128: { sse2 }
flags for punpckhwd_xmm_xmm: { sse2 }
flags for punpcklbw_mm_m32: { mmx }
flags for punpcklbw_mm_mm: { mmx }
flags for punpcklbw_xmm_m128: { sse2 }
flags for punpcklbw_xmm_xmm: { sse2 }
flags for punpckldq_mm_m32: { mmx }
flags for punpckldq_mm_mm: { mmx }
flags for punpckldq_xmm_m128: { sse2 }
flags for punpckldq_xmm_xmm: { sse2 }
flags for punpcklqdq_xmm_m128: { sse2 }
flags for punpcklqdq_xmm_xmm: { sse2 }
flags for punpcklwd_mm_m32: { mmx }
flags for punpcklwd_mm_mm: { mmx }
flags for punpcklwd_xmm_m128: { sse2 }
flags for punpcklwd_xmm_xmm: { sse2 }
flags for pushq_imm16: { }
flags for pushq_imm32: { }
flags for pushq_imm8: { }
flags for pushw_m16: { }
flags for pushq_m64: { }
flags for pushw_r16: { }
flags for pushw_r16_1: { }
flags for pushq_r64: { }
flags for pushq_r64_1: { }
flags for pushf: { }
flags for pushfq: { }
flags for pxor_mm_m64: { mmx }
flags for pxor_mm_mm: { mmx }
flags for pxor_xmm_m128: { sse2 }
flags for pxor_xmm_xmm: { sse2 }
flags for rcpps_xmm_m128: { sse }
flags for rcpps_xmm_xmm: { sse }
flags for rcpss_xmm_m32: { sse }
flags for rcpss_xmm_xmm: { sse }
flags for rdrand_r16: { rdrand }
flags for rdrand_r32: { rdrand }
flags for rdrand_r64: { rdrand }
flags for repz scasb_m8_1: { rep_good }
flags for roundpd_xmm_m128_imm8: { sse4_1 }
flags for roundpd_xmm_xmm_imm8: { sse4_1 }
flags for roundps_xmm_m128_imm8: { sse4_1 }
flags for roundps_xmm_xmm_imm8: { sse4_1 }
flags for roundsd_xmm_m64_imm8: { sse4_1 }
flags for roundsd_xmm_xmm_imm8: { sse4_1 }
flags for roundss_xmm_m32_imm8: { sse4_1 }
flags for roundss_xmm_xmm_imm8: { sse4_1 }
flags for rsqrtps_xmm_m128: { sse }
flags for rsqrtps_xmm_xmm: { sse }
flags for rsqrtss_xmm_m32: { sse }
flags for rsqrtss_xmm_xmm: { sse }
flags for sahf: { lahf_lm }
flags for salw_m16_cl: { }
flags for salw_m16_imm8: { }
flags for salw_m16_one: { }
flags for sall_m32_cl: { }
flags for sall_m32_imm8: { }
flags for sall_m32_one: { }
flags for salq_m64_cl: { }
flags for salq_m64_imm8: { }
flags for salq_m64_one: { }
flags for salb_m8_cl: { }
flags for salb_m8_imm8: { }
flags for salb_m8_one: { }
flags for salw_r16_cl: { }
flags for salw_r16_imm8: { }
flags for salw_r16_one: { }
flags for sall_r32_cl: { }
flags for sall_r32_imm8: { }
flags for sall_r32_one: { }
flags for salq_r64_cl: { }
flags for salq_r64_imm8: { }
flags for salq_r64_one: { }
flags for salb_r8_cl: { }
flags for salb_r8_imm8: { }
flags for salb_r8_one: { }
flags for salb_rh_cl: { }
flags for salb_rh_imm8: { }
flags for salb_rh_one: { }
flags for sarw_m16_cl: { }
flags for sarw_m16_imm8: { }
flags for sarw_m16_one: { }
flags for sarl_m32_cl: { }
flags for sarl_m32_imm8: { }
flags for sarl_m32_one: { }
flags for sarq_m64_cl: { }
flags for sarq_m64_imm8: { }
flags for sarq_m64_one: { }
flags for sarb_m8_cl: { }
flags for sarb_m8_imm8: { }
flags for sarb_m8_one: { }
flags for sarw_r16_cl: { }
flags for sarw_r16_imm8: { }
flags for sarw_r16_one: { }
flags for sarl_r32_cl: { }
flags for sarl_r32_imm8: { }
flags for sarl_r32_one: { }
flags for sarq_r64_cl: { }
flags for sarq_r64_imm8: { }
flags for sarq_r64_one: { }
flags for sarb_r8_cl: { }
flags for sarb_r8_imm8: { }
flags for sarb_r8_one: { }
flags for sarb_rh_cl: { }
flags for sarb_rh_imm8: { }
flags for sarb_rh_one: { }
flags for sarxl_r32_m32_r32: { bmi2 }
flags for sarxl_r32_r32_r32: { bmi2 }
flags for sarxq_r64_m64_r64: { bmi2 }
flags for sarxq_r64_r64_r64: { bmi2 }
flags for shlw_m16_cl: { }
flags for shlw_m16_imm8: { }
flags for shlw_m16_one: { }
flags for shll_m32_cl: { }
flags for shll_m32_imm8: { }
flags for shll_m32_one: { }
flags for shlq_m64_cl: { }
flags for shlq_m64_imm8: { }
flags for shlq_m64_one: { }
flags for shlb_m8_cl: { }
flags for shlb_m8_imm8: { }
flags for shlb_m8_one: { }
flags for shlw_r16_cl: { }
flags for shlw_r16_imm8: { }
flags for shlw_r16_one: { }
flags for shll_r32_cl: { }
flags for shll_r32_imm8: { }
flags for shll_r32_one: { }
flags for shlq_r64_cl: { }
flags for shlq_r64_imm8: { }
flags for shlq_r64_one: { }
flags for shlb_r8_cl: { }
flags for shlb_r8_imm8: { }
flags for shlb_r8_one: { }
flags for shlb_rh_cl: { }
flags for shlb_rh_imm8: { }
flags for shlb_rh_one: { }
flags for shldw_m16_r16_cl: { }
flags for shldw_m16_r16_imm8: { }
flags for shldl_m32_r32_cl: { }
flags for shldl_m32_r32_imm8: { }
flags for shldq_m64_r64_cl: { }
flags for shldq_m64_r64_imm8: { }
flags for shldw_r16_r16_cl: { }
flags for shldw_r16_r16_imm8: { }
flags for shldl_r32_r32_cl: { }
flags for shldl_r32_r32_imm8: { }
flags for shldq_r64_r64_cl: { }
flags for shldq_r64_r64_imm8: { }
flags for shlxl_r32_m32_r32: { bmi2 }
flags for shlxl_r32_r32_r32: { bmi2 }
flags for shlxq_r64_m64_r64: { bmi2 }
flags for shlxq_r64_r64_r64: { bmi2 }
flags for shrw_m16_cl: { }
flags for shrw_m16_imm8: { }
flags for shrw_m16_one: { }
flags for shrl_m32_cl: { }
flags for shrl_m32_imm8: { }
flags for shrl_m32_one: { }
flags for shrq_m64_cl: { }
flags for shrq_m64_imm8: { }
flags for shrq_m64_one: { }
flags for shrb_m8_cl: { }
flags for shrb_m8_imm8: { }
flags for shrb_m8_one: { }
flags for shrw_r16_cl: { }
flags for shrw_r16_imm8: { }
flags for shrw_r16_one: { }
flags for shrl_r32_cl: { }
flags for shrl_r32_imm8: { }
flags for shrl_r32_one: { }
flags for shrq_r64_cl: { }
flags for shrq_r64_imm8: { }
flags for shrq_r64_one: { }
flags for shrb_r8_cl: { }
flags for shrb_r8_imm8: { }
flags for shrb_r8_one: { }
flags for shrb_rh_cl: { }
flags for shrb_rh_imm8: { }
flags for shrb_rh_one: { }
flags for shrxl_r32_m32_r32: { bmi2 }
flags for shrxl_r32_r32_r32: { bmi2 }
flags for shrxq_r64_m64_r64: { bmi2 }
flags for shrxq_r64_r64_r64: { bmi2 }
flags for shufpd_xmm_m128_imm8: { sse2 }
flags for shufpd_xmm_xmm_imm8: { sse2 }
flags for shufps_xmm_m128_imm8: { sse }
flags for shufps_xmm_xmm_imm8: { sse }
flags for sqrtpd_xmm_m128: { sse2 }
flags for sqrtpd_xmm_xmm: { sse2 }
flags for sqrtps_xmm_m128: { sse }
flags for sqrtps_xmm_xmm: { sse }
flags for sqrtsd_xmm_m64: { sse2 }
flags for sqrtsd_xmm_xmm: { sse2 }
flags for sqrtss_xmm_m32: { sse }
flags for sqrtss_xmm_xmm: { sse }
flags for sti: { }
flags for subb_al_imm8: { }
flags for subw_ax_imm16: { }
flags for subl_eax_imm32: { }
flags for subw_m16_imm16: { }
flags for subw_m16_imm8: { }
flags for subw_m16_r16: { }
flags for subl_m32_imm32: { }
flags for subl_m32_imm8: { }
flags for subl_m32_r32: { }
flags for subq_m64_imm32: { }
flags for subq_m64_imm8: { }
flags for subq_m64_r64: { }
flags for subb_m8_imm8: { }
flags for subb_m8_r8: { }
flags for subb_m8_rh: { }
flags for subw_r16_imm16: { }
flags for subw_r16_imm8: { }
flags for subw_r16_m16: { }
flags for subw_r16_r16: { }
flags for subw_r16_r16_1: { }
flags for subl_r32_imm32: { }
flags for subl_r32_imm8: { }
flags for subl_r32_m32: { }
flags for subl_r32_r32: { }
flags for subl_r32_r32_1: { }
flags for subq_r64_imm32: { }
flags for subq_r64_imm8: { }
flags for subq_r64_m64: { }
flags for subq_r64_r64: { }
flags for subq_r64_r64_1: { }
flags for subb_r8_imm8: { }
flags for subb_r8_m8: { }
flags for subb_r8_r8: { }
flags for subb_r8_r8_1: { }
flags for subb_r8_rh: { }
flags for subb_r8_rh_1: { }
flags for subq_rax_imm32: { }
flags for subb_rh_imm8: { }
flags for subb_rh_m8: { }
flags for subb_rh_r8: { }
flags for subb_rh_r8_1: { }
flags for subb_rh_rh: { }
flags for subb_rh_rh_1: { }
flags for subpd_xmm_m128: { sse2 }
flags for subpd_xmm_xmm: { sse2 }
flags for subps_xmm_m128: { sse }
flags for subps_xmm_xmm: { sse }
flags for subsd_xmm_m64: { sse2 }
flags for subsd_xmm_xmm: { sse2 }
flags for subss_xmm_m32: { sse }
flags for subss_xmm_xmm: { sse }
flags for tzcntw_r16_m16: { bmi1 }
flags for tzcntw_r16_r16: { bmi1 }
flags for tzcntl_r32_m32: { bmi1 }
flags for tzcntl_r32_r32: { bmi1 }
flags for tzcntq_r64_m64: { bmi1 }
flags for tzcntq_r64_r64: { bmi1 }
flags for ucomisd_xmm_m64: { sse2 }
flags for ucomisd_xmm_xmm: { sse2 }
flags for ucomiss_xmm_m32: { sse }
flags for ucomiss_xmm_xmm: { sse }
flags for unpckhpd_xmm_m128: { sse2 }
flags for unpckhpd_xmm_xmm: { sse2 }
flags for unpckhps_xmm_m128: { sse }
flags for unpckhps_xmm_xmm: { sse }
flags for unpcklpd_xmm_m128: { sse2 }
flags for unpcklpd_xmm_xmm: { sse2 }
flags for unpcklps_xmm_m128: { sse }
flags for unpcklps_xmm_xmm: { sse }
flags for vaddpd_xmm_xmm_m128: { avx }
flags for vaddpd_xmm_xmm_xmm: { avx }
flags for vaddpd_ymm_ymm_m256: { avx }
flags for vaddpd_ymm_ymm_ymm: { avx }
flags for vaddps_xmm_xmm_m128: { avx }
flags for vaddps_xmm_xmm_xmm: { avx }
flags for vaddps_ymm_ymm_m256: { avx }
flags for vaddps_ymm_ymm_ymm: { avx }
flags for vaddsd_xmm_xmm_m64: { avx }
flags for vaddsd_xmm_xmm_xmm: { avx }
flags for vaddss_xmm_xmm_m32: { avx }
flags for vaddss_xmm_xmm_xmm: { avx }
flags for vaddsubpd_xmm_xmm_m128: { avx }
flags for vaddsubpd_xmm_xmm_xmm: { avx }
flags for vaddsubpd_ymm_ymm_m256: { avx }
flags for vaddsubpd_ymm_ymm_ymm: { avx }
flags for vaddsubps_xmm_xmm_m128: { avx }
flags for vaddsubps_xmm_xmm_xmm: { avx }
flags for vaddsubps_ymm_ymm_m256: { avx }
flags for vaddsubps_ymm_ymm_ymm: { avx }
flags for vaesdec_xmm_xmm_m128: { aes avx }
flags for vaesdec_xmm_xmm_xmm: { aes avx }
flags for vaesdeclast_xmm_xmm_m128: { aes avx }
flags for vaesdeclast_xmm_xmm_xmm: { aes avx }
flags for vaesenc_xmm_xmm_m128: { aes avx }
flags for vaesenc_xmm_xmm_xmm: { aes avx }
flags for vaesenclast_xmm_xmm_m128: { aes avx }
flags for vaesenclast_xmm_xmm_xmm: { aes avx }
flags for vaesimc_xmm_m128: { aes avx }
flags for vaesimc_xmm_xmm: { aes avx }
flags for vaeskeygenassist_xmm_m128_imm8: { aes avx }
flags for vaeskeygenassist_xmm_xmm_imm8: { aes avx }
flags for vandnpd_xmm_xmm_m128: { avx }
flags for vandnpd_xmm_xmm_xmm: { avx }
flags for vandnpd_ymm_ymm_m256: { avx }
flags for vandnpd_ymm_ymm_ymm: { avx }
flags for vandnps_xmm_xmm_m128: { avx }
flags for vandnps_xmm_xmm_xmm: { avx }
flags for vandnps_ymm_ymm_m256: { avx }
flags for vandnps_ymm_ymm_ymm: { avx }
flags for vandpd_xmm_xmm_m128: { avx }
flags for vandpd_xmm_xmm_xmm: { avx }
flags for vandpd_ymm_ymm_m256: { avx }
flags for vandpd_ymm_ymm_ymm: { avx }
flags for vandps_xmm_xmm_m128: { avx }
flags for vandps_xmm_xmm_xmm: { avx }
flags for vandps_ymm_ymm_m256: { avx }
flags for vandps_ymm_ymm_ymm: { avx }
flags for vblendpd_xmm_xmm_m128_imm8: { avx }
flags for vblendpd_xmm_xmm_xmm_imm8: { avx }
flags for vblendpd_ymm_ymm_m256_imm8: { avx }
flags for vblendpd_ymm_ymm_ymm_imm8: { avx }
flags for vblendps_xmm_xmm_m128_imm8: { avx }
flags for vblendps_xmm_xmm_xmm_imm8: { avx }
flags for vblendps_ymm_ymm_m256_imm8: { avx }
flags for vblendps_ymm_ymm_ymm_imm8: { avx }
flags for vblendvpd_xmm_xmm_m128_xmm: { avx }
flags for vblendvpd_xmm_xmm_xmm_xmm: { avx }
flags for vblendvpd_ymm_ymm_m256_ymm: { avx }
flags for vblendvpd_ymm_ymm_ymm_ymm: { avx }
flags for vblendvps_xmm_xmm_m128_xmm: { avx }
flags for vblendvps_xmm_xmm_xmm_xmm: { avx }
flags for vblendvps_ymm_ymm_m256_ymm: { avx }
flags for vblendvps_ymm_ymm_ymm_ymm: { avx }
flags for vbroadcastf128_ymm_m128: { avx }
flags for vpbroadcasti128_ymm_m128: { avx2 }
flags for vbroadcastsd_ymm_m64: { avx }
flags for vbroadcastsd_ymm_xmm: { avx2 }
flags for vbroadcastss_xmm_m32: { avx }
flags for vbroadcastss_xmm_xmm: { avx2 }
flags for vbroadcastss_ymm_m32: { avx }
flags for vbroadcastss_ymm_xmm: { avx2 }
flags for vcmppd_xmm_xmm_m128_imm8: { avx }
flags for vcmppd_xmm_xmm_xmm_imm8: { avx }
flags for vcmppd_ymm_ymm_m256_imm8: { avx }
flags for vcmppd_ymm_ymm_ymm_imm8: { avx }
flags for vcmpps_xmm_xmm_m128_imm8: { avx }
flags for vcmpps_xmm_xmm_xmm_imm8: { avx }
flags for vcmpps_ymm_ymm_m256_imm8: { avx }
flags for vcmpps_ymm_ymm_ymm_imm8: { avx }
flags for vcmpsd_xmm_xmm_m64_imm8: { avx }
flags for vcmpsd_xmm_xmm_xmm_imm8: { avx }
flags for vcmpss_xmm_xmm_m32_imm8: { avx }
flags for vcmpss_xmm_xmm_xmm_imm8: { avx }
flags for vcomisd_xmm_m64: { avx }
flags for vcomisd_xmm_xmm: { avx }
flags for vcomiss_xmm_m32: { avx }
flags for vcomiss_xmm_xmm: { avx }
flags for vcvtdq2pd_xmm_m64: { avx }
flags for vcvtdq2pd_xmm_xmm: { avx }
flags for vcvtdq2pd_ymm_m128: { avx }
flags for vcvtdq2pd_ymm_ymm: { avx }
flags for vcvtdq2ps_xmm_m128: { avx }
flags for vcvtdq2ps_xmm_xmm: { avx }
flags for vcvtdq2ps_ymm_m256: { avx }
flags for vcvtdq2ps_ymm_ymm: { avx }
flags for vcvtpd2dqx_xmm_m128: { avx }
flags for vcvtpd2dq_xmm_m256: { avx }
flags for vcvtpd2dqx_xmm_xmm: { avx }
flags for vcvtpd2dq_xmm_ymm: { avx }
flags for vcvtpd2ps_xmm_m128: { avx }
flags for vcvtpd2ps_xmm_m256: { avx }
flags for vcvtpd2ps_xmm_xmm: { avx }
flags for vcvtpd2ps_xmm_ymm: { avx }
flags for vcvtph2ps_xmm_m64: { f16c }
flags for vcvtph2ps_xmm_xmm: { f16c }
flags for vcvtph2ps_ymm_m128: { f16c }
flags for vcvtph2ps_ymm_xmm: { f16c }
flags for vcvtps2dq_xmm_m128: { avx }
flags for vcvtps2dq_xmm_xmm: { avx }
flags for vcvtps2dq_ymm_m256: { avx }
flags for vcvtps2dq_ymm_ymm: { avx }
flags for vcvtps2pd_xmm_m64: { avx }
flags for vcvtps2pd_xmm_xmm: { avx }
flags for vcvtps2pd_ymm_m128: { avx }
flags for vcvtps2pd_ymm_xmm: { avx }
flags for vcvtps2ph_m128_ymm_imm8: { f16c }
flags for vcvtps2ph_m64_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_ymm_imm8: { f16c }
flags for vcvtsd2sil_r32_m64: { avx }
flags for vcvtsd2sil_r32_xmm: { avx }
flags for vcvtsd2siq_r64_m64: { avx }
flags for vcvtsd2siq_r64_xmm: { avx }
flags for vcvtsd2ss_xmm_xmm_m64: { avx }
flags for vcvtsd2ss_xmm_xmm_xmm: { avx }
flags for vcvtsi2sdl_xmm_xmm_m32: { avx }
flags for vcvtsi2sdq_xmm_xmm_m64: { avx }
flags for vcvtsi2sdl_xmm_xmm_r32: { avx }
flags for vcvtsi2sdq_xmm_xmm_r64: { avx }
flags for vcvtsi2ssl_xmm_xmm_m32: { avx }
flags for vcvtsi2ssq_xmm_xmm_m64: { avx }
flags for vcvtsi2ssl_xmm_xmm_r32: { avx }
flags for vcvtsi2ssq_xmm_xmm_r64: { avx }
flags for vcvtss2sd_xmm_xmm_m32: { avx }
flags for vcvtss2sd_xmm_xmm_xmm: { avx }
flags for vcvtss2sil_r32_m32: { avx }
flags for vcvtss2sil_r32_xmm: { avx }
flags for vcvtss2siq_r64_m32: { avx }
flags for vcvtss2siq_r64_xmm: { avx }
flags for vcvttpd2dq_xmm_m128: { avx }
flags for vcvttpd2dq_xmm_m256: { avx }
flags for vcvttpd2dq_xmm_xmm: { avx }
flags for vcvttpd2dq_xmm_ymm: { avx }
flags for vcvttps2dq_xmm_m128: { avx }
flags for vcvttps2dq_xmm_xmm: { avx }
flags for vcvttps2dq_ymm_m256: { avx }
flags for vcvttps2dq_ymm_ymm: { avx }
flags for vcvttsd2sil_r32_m64: { avx }
flags for vcvttsd2sil_r32_xmm: { avx }
flags for vcvttsd2siq_r64_m64: { avx }
flags for vcvttsd2siq_r64_xmm: { avx }
flags for vcvttss2sil_r32_m32: { avx }
flags for vcvttss2sil_r32_xmm: { avx }
flags for vcvttss2siq_r64_m32: { avx }
flags for vcvttss2siq_r64_xmm: { avx }
flags for vdivpd_xmm_xmm_m128: { avx }
flags for vdivpd_xmm_xmm_xmm: { avx }
flags for vdivpd_ymm_ymm_m256: { avx }
flags for vdivpd_ymm_ymm_ymm: { avx }
flags for vdivps_xmm_xmm_m128: { avx }
flags for vdivps_xmm_xmm_xmm: { avx }
flags for vdivps_ymm_ymm_m256: { avx }
flags for vdivps_ymm_ymm_ymm: { avx }
flags for vdivsd_xmm_xmm_m64: { avx }
flags for vdivsd_xmm_xmm_xmm: { avx }
flags for vdivss_xmm_xmm_m32: { avx }
flags for vdivss_xmm_xmm_xmm: { avx }
flags for vdppd_xmm_xmm_m128_imm8: { avx }
flags for vdppd_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_xmm_xmm_m128_imm8: { avx }
flags for vdpps_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_ymm_ymm_m256_imm8: { avx }
flags for vdpps_ymm_ymm_ymm_imm8: { avx }
flags for vextractf128_m128_ymm_imm8: { avx }
flags for vextractf128_xmm_ymm_imm8: { avx }
flags for vextracti128_m128_ymm_imm8: { avx2 }
flags for vextracti128_xmm_ymm_imm8: { avx2 }
flags for vextractps_m32_xmm_imm8: { avx }
flags for vextractps_r32_xmm_imm8: { avx }
flags for vfmadd132pd_xmm_xmm_m128: { fma }
flags for vfmadd132pd_xmm_xmm_xmm: { fma }
flags for vfmadd132pd_ymm_ymm_m256: { fma }
flags for vfmadd132pd_ymm_ymm_ymm: { fma }
flags for vfmadd132ps_xmm_xmm_m128: { fma }
flags for vfmadd132ps_xmm_xmm_xmm: { fma }
flags for vfmadd132ps_ymm_ymm_m256: { fma }
flags for vfmadd132ps_ymm_ymm_ymm: { fma }
flags for vfmadd132sd_xmm_xmm_m64: { fma }
flags for vfmadd132sd_xmm_xmm_xmm: { fma }
flags for vfmadd132ss_xmm_xmm_m32: { fma }
flags for vfmadd132ss_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_xmm_xmm_m128: { fma }
flags for vfmadd213pd_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_ymm_ymm_m256: { fma }
flags for vfmadd213pd_ymm_ymm_ymm: { fma }
flags for vfmadd213ps_xmm_xmm_m128: { fma }
flags for vfmadd213ps_xmm_xmm_xmm: { fma }
flags for vfmadd213ps_ymm_ymm_m256: { fma }
flags for vfmadd213ps_ymm_ymm_ymm: { fma }
flags for vfmadd213sd_xmm_xmm_m64: { fma }
flags for vfmadd213sd_xmm_xmm_xmm: { fma }
flags for vfmadd213ss_xmm_xmm_m32: { fma }
flags for vfmadd213ss_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_xmm_xmm_m128: { fma }
flags for vfmadd231pd_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_ymm_ymm_m256: { fma }
flags for vfmadd231pd_ymm_ymm_ymm: { fma }
flags for vfmadd231ps_xmm_xmm_m128: { fma }
flags for vfmadd231ps_xmm_xmm_xmm: { fma }
flags for vfmadd231ps_ymm_ymm_m256: { fma }
flags for vfmadd231ps_ymm_ymm_ymm: { fma }
flags for vfmadd231sd_xmm_xmm_m64: { fma }
flags for vfmadd231sd_xmm_xmm_xmm: { fma }
flags for vfmadd231ss_xmm_xmm_m32: { fma }
flags for vfmadd231ss_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_xmm_xmm_m128: { fma }
flags for vfmaddsub132pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_ymm_ymm_m256: { fma }
flags for vfmaddsub132pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub132ps_xmm_xmm_m128: { fma }
flags for vfmaddsub132ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub132ps_ymm_ymm_m256: { fma }
flags for vfmaddsub132ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub213pd_xmm_xmm_m128: { fma }
flags for vfmaddsub213pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub213pd_ymm_ymm_m256: { fma }
flags for vfmaddsub213pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub213ps_xmm_xmm_m128: { fma }
flags for vfmaddsub213ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub213ps_ymm_ymm_m256: { fma }
flags for vfmaddsub213ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub231pd_xmm_xmm_m128: { fma }
flags for vfmaddsub231pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub231pd_ymm_ymm_m256: { fma }
flags for vfmaddsub231pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub231ps_xmm_xmm_m128: { fma }
flags for vfmaddsub231ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub231ps_ymm_ymm_m256: { fma }
flags for vfmaddsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub132pd_xmm_xmm_m128: { fma }
flags for vfmsub132pd_xmm_xmm_xmm: { fma }
flags for vfmsub132pd_ymm_ymm_m256: { fma }
flags for vfmsub132pd_ymm_ymm_ymm: { fma }
flags for vfmsub132ps_xmm_xmm_m128: { fma }
flags for vfmsub132ps_xmm_xmm_xmm: { fma }
flags for vfmsub132ps_ymm_ymm_m256: { fma }
flags for vfmsub132ps_ymm_ymm_ymm: { fma }
flags for vfmsub132sd_xmm_xmm_m64: { fma }
flags for vfmsub132sd_xmm_xmm_xmm: { fma }
flags for vfmsub132ss_xmm_xmm_m32: { fma }
flags for vfmsub132ss_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_xmm_xmm_m128: { fma }
flags for vfmsub213pd_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_ymm_ymm_m256: { fma }
flags for vfmsub213pd_ymm_ymm_ymm: { fma }
flags for vfmsub213ps_xmm_xmm_m128: { fma }
flags for vfmsub213ps_xmm_xmm_xmm: { fma }
flags for vfmsub213ps_ymm_ymm_m256: { fma }
flags for vfmsub213ps_ymm_ymm_ymm: { fma }
flags for vfmsub213sd_xmm_xmm_m64: { fma }
flags for vfmsub213sd_xmm_xmm_xmm: { fma }
flags for vfmsub213ss_xmm_xmm_m32: { fma }
flags for vfmsub213ss_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_xmm_xmm_m128: { fma }
flags for vfmsub231pd_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_ymm_ymm_m256: { fma }
flags for vfmsub231pd_ymm_ymm_ymm: { fma }
flags for vfmsub231ps_xmm_xmm_m128: { fma }
flags for vfmsub231ps_xmm_xmm_xmm: { fma }
flags for vfmsub231ps_ymm_ymm_m256: { fma }
flags for vfmsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub231sd_xmm_xmm_m64: { fma }
flags for vfmsub231sd_xmm_xmm_xmm: { fma }
flags for vfmsub231ss_xmm_xmm_m32: { fma }
flags for vfmsub231ss_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_xmm_xmm_m128: { fma }
flags for vfmsubadd132pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_ymm_ymm_m256: { fma }
flags for vfmsubadd132pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd132ps_xmm_xmm_m128: { fma }
flags for vfmsubadd132ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd132ps_ymm_ymm_m256: { fma }
flags for vfmsubadd132ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd213pd_xmm_xmm_m128: { fma }
flags for vfmsubadd213pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd213pd_ymm_ymm_m256: { fma }
flags for vfmsubadd213pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd213ps_xmm_xmm_m128: { fma }
flags for vfmsubadd213ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd213ps_ymm_ymm_m256: { fma }
flags for vfmsubadd213ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd231pd_xmm_xmm_m128: { fma }
flags for vfmsubadd231pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd231pd_ymm_ymm_m256: { fma }
flags for vfmsubadd231pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd231ps_xmm_xmm_m128: { fma }
flags for vfmsubadd231ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd231ps_ymm_ymm_m256: { fma }
flags for vfmsubadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132pd_xmm_xmm_m128: { fma }
flags for vfnmadd132pd_xmm_xmm_xmm: { fma }
flags for vfnmadd132pd_ymm_ymm_m256: { fma }
flags for vfnmadd132pd_ymm_ymm_ymm: { fma }
flags for vfnmadd132ps_xmm_xmm_m128: { fma }
flags for vfnmadd132ps_xmm_xmm_xmm: { fma }
flags for vfnmadd132ps_ymm_ymm_m256: { fma }
flags for vfnmadd132ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132sd_xmm_xmm_m64: { fma }
flags for vfnmadd132sd_xmm_xmm_xmm: { fma }
flags for vfnmadd132ss_xmm_xmm_m32: { fma }
flags for vfnmadd132ss_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_xmm_xmm_m128: { fma }
flags for vfnmadd213pd_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_ymm_ymm_m256: { fma }
flags for vfnmadd213pd_ymm_ymm_ymm: { fma }
flags for vfnmadd213ps_xmm_xmm_m128: { fma }
flags for vfnmadd213ps_xmm_xmm_xmm: { fma }
flags for vfnmadd213ps_ymm_ymm_m256: { fma }
flags for vfnmadd213ps_ymm_ymm_ymm: { fma }
flags for vfnmadd213sd_xmm_xmm_m64: { fma }
flags for vfnmadd213sd_xmm_xmm_xmm: { fma }
flags for vfnmadd213ss_xmm_xmm_m32: { fma }
flags for vfnmadd213ss_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_xmm_xmm_m128: { fma }
flags for vfnmadd231pd_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_ymm_ymm_m256: { fma }
flags for vfnmadd231pd_ymm_ymm_ymm: { fma }
flags for vfnmadd231ps_xmm_xmm_m128: { fma }
flags for vfnmadd231ps_xmm_xmm_xmm: { fma }
flags for vfnmadd231ps_ymm_ymm_m256: { fma }
flags for vfnmadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd231sd_xmm_xmm_m64: { fma }
flags for vfnmadd231sd_xmm_xmm_xmm: { fma }
flags for vfnmadd231ss_xmm_xmm_m32: { fma }
flags for vfnmadd231ss_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_xmm_xmm_m128: { fma }
flags for vfnmsub132pd_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_ymm_ymm_m256: { fma }
flags for vfnmsub132pd_ymm_ymm_ymm: { fma }
flags for vfnmsub132ps_xmm_xmm_m128: { fma }
flags for vfnmsub132ps_xmm_xmm_xmm: { fma }
flags for vfnmsub132ps_ymm_ymm_m256: { fma }
flags for vfnmsub132ps_ymm_ymm_ymm: { fma }
flags for vfnmsub132sd_xmm_xmm_m64: { fma }
flags for vfnmsub132sd_xmm_xmm_xmm: { fma }
flags for vfnmsub132ss_xmm_xmm_m32: { fma }
flags for vfnmsub132ss_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_xmm_xmm_m128: { fma }
flags for vfnmsub213pd_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_ymm_ymm_m256: { fma }
flags for vfnmsub213pd_ymm_ymm_ymm: { fma }
flags for vfnmsub213ps_xmm_xmm_m128: { fma }
flags for vfnmsub213ps_xmm_xmm_xmm: { fma }
flags for vfnmsub213ps_ymm_ymm_m256: { fma }
flags for vfnmsub213ps_ymm_ymm_ymm: { fma }
flags for vfnmsub213sd_xmm_xmm_m64: { fma }
flags for vfnmsub213sd_xmm_xmm_xmm: { fma }
flags for vfnmsub213ss_xmm_xmm_m32: { fma }
flags for vfnmsub213ss_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_xmm_xmm_m128: { fma }
flags for vfnmsub231pd_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_ymm_ymm_m256: { fma }
flags for vfnmsub231pd_ymm_ymm_ymm: { fma }
flags for vfnmsub231ps_xmm_xmm_m128: { fma }
flags for vfnmsub231ps_xmm_xmm_xmm: { fma }
flags for vfnmsub231ps_ymm_ymm_m256: { fma }
flags for vfnmsub231ps_ymm_ymm_ymm: { fma }
flags for vfnmsub231sd_xmm_xmm_m64: { fma }
flags for vfnmsub231sd_xmm_xmm_xmm: { fma }
flags for vfnmsub231ss_xmm_xmm_m32: { fma }
flags for vfnmsub231ss_xmm_xmm_xmm: { fma }
flags for vgatherdpd_xmm_m32_xmm: { avx2 }
flags for vgatherdpd_ymm_m32_ymm: { avx2 }
flags for vgatherdps_xmm_m32_xmm: { avx2 }
flags for vgatherdps_ymm_m32_ymm: { avx2 }
flags for vgatherqpd_xmm_m64_xmm: { avx2 }
flags for vgatherqpd_ymm_m64_ymm: { avx2 }
flags for vgatherqps_xmm_m64_xmm: { avx2 }
flags for vgatherqps_xmm_m64_xmm_1: { avx2 }
flags for vhaddpd_xmm_xmm_m128: { avx }
flags for vhaddpd_xmm_xmm_xmm: { avx }
flags for vhaddpd_ymm_ymm_m256: { avx }
flags for vhaddpd_ymm_ymm_ymm: { avx }
flags for vhaddps_xmm_xmm_m128: { avx }
flags for vhaddps_xmm_xmm_xmm: { avx }
flags for vhaddps_ymm_ymm_m256: { avx }
flags for vhaddps_ymm_ymm_ymm: { avx }
flags for vhsubpd_xmm_xmm_m128: { avx }
flags for vhsubpd_xmm_xmm_xmm: { avx }
flags for vhsubpd_ymm_ymm_m256: { avx }
flags for vhsubpd_ymm_ymm_ymm: { avx }
flags for vhsubps_xmm_xmm_m128: { avx }
flags for vhsubps_xmm_xmm_xmm: { avx }
flags for vhsubps_ymm_ymm_m256: { avx }
flags for vhsubps_ymm_ymm_ymm: { avx }
flags for vinsertf128_ymm_ymm_m128_imm8: { avx }
flags for vinsertf128_ymm_ymm_xmm_imm8: { avx }
flags for vinserti128_ymm_ymm_m128_imm8: { avx2 }
flags for vinserti128_ymm_ymm_xmm_imm8: { avx2 }
flags for vinsertps_xmm_xmm_m32_imm8: { avx }
flags for vinsertps_xmm_xmm_xmm_imm8: { avx }
flags for vlddqu_xmm_m128: { avx }
flags for vlddqu_ymm_m256: { avx }
flags for vmaskmovpd_m128_xmm_xmm: { avx }
flags for vmaskmovpd_m256_ymm_ymm: { avx }
flags for vmaskmovpd_xmm_xmm_m128: { avx }
flags for vmaskmovpd_ymm_ymm_m256: { avx }
flags for vmaskmovps_m128_xmm_xmm: { avx }
flags for vmaskmovps_m256_ymm_ymm: { avx }
flags for vmaskmovps_xmm_xmm_m128: { avx }
flags for vmaskmovps_ymm_ymm_m256: { avx }
flags for vmaxpd_xmm_xmm_m128: { avx }
flags for vmaxpd_xmm_xmm_xmm: { avx }
flags for vmaxpd_ymm_ymm_m256: { avx }
flags for vmaxpd_ymm_ymm_ymm: { avx }
flags for vmaxps_xmm_xmm_m128: { avx }
flags for vmaxps_xmm_xmm_xmm: { avx }
flags for vmaxps_ymm_ymm_m256: { avx }
flags for vmaxps_ymm_ymm_ymm: { avx }
flags for vmaxsd_xmm_xmm_m64: { avx }
flags for vmaxsd_xmm_xmm_xmm: { avx }
flags for vmaxss_xmm_xmm_m32: { avx }
flags for vmaxss_xmm_xmm_xmm: { avx }
flags for vminpd_xmm_xmm_m128: { avx }
flags for vminpd_xmm_xmm_xmm: { avx }
flags for vminpd_ymm_ymm_m256: { avx }
flags for vminpd_ymm_ymm_ymm: { avx }
flags for vminps_xmm_xmm_m128: { avx }
flags for vminps_xmm_xmm_xmm: { avx }
flags for vminps_ymm_ymm_m256: { avx }
flags for vminps_ymm_ymm_ymm: { avx }
flags for vminsd_xmm_xmm_m64: { avx }
flags for vminsd_xmm_xmm_xmm: { avx }
flags for vminss_xmm_xmm_m32: { avx }
flags for vminss_xmm_xmm_xmm: { avx }
flags for vmovapd_m128_xmm: { avx }
flags for vmovapd_m256_ymm: { avx }
flags for vmovapd_xmm_m128: { avx }
flags for vmovapd_xmm_xmm: { avx }
flags for vmovapd_xmm_xmm_1: { avx }
flags for vmovapd_ymm_m256: { avx }
flags for vmovapd_ymm_ymm: { avx }
flags for vmovapd_ymm_ymm_1: { avx }
flags for vmovaps_m128_xmm: { avx }
flags for vmovaps_m256_ymm: { avx }
flags for vmovaps_xmm_m128: { avx }
flags for vmovaps_xmm_xmm: { avx }
flags for vmovaps_xmm_xmm_1: { avx }
flags for vmovaps_ymm_m256: { avx }
flags for vmovaps_ymm_ymm: { avx }
flags for vmovaps_ymm_ymm_1: { avx }
flags for vmovd_m32_xmm: { avx }
flags for vmovd_r32_xmm: { avx }
flags for vmovd_xmm_m32: { avx }
flags for vmovd_xmm_r32: { avx }
flags for vmovddup_xmm_m64: { avx }
flags for vmovddup_xmm_xmm: { avx }
flags for vmovddup_ymm_m256: { avx }
flags for vmovddup_ymm_ymm: { avx }
flags for vmovdqa_m128_xmm: { avx }
flags for vmovdqa_m256_ymm: { avx }
flags for vmovdqa_xmm_m128: { avx }
flags for vmovdqa_xmm_xmm: { avx }
flags for vmovdqa_xmm_xmm_1: { avx }
flags for vmovdqa_ymm_m256: { avx }
flags for vmovdqa_ymm_ymm: { avx }
flags for vmovdqa_ymm_ymm_1: { avx }
flags for vmovdqu_m128_xmm: { avx }
flags for vmovdqu_m256_ymm: { avx }
flags for vmovdqu_xmm_m128: { avx }
flags for vmovdqu_xmm_xmm: { avx }
flags for vmovdqu_xmm_xmm_1: { avx }
flags for vmovdqu_ymm_m256: { avx }
flags for vmovdqu_ymm_ymm: { avx }
flags for vmovdqu_ymm_ymm_1: { avx }
flags for vmovhlps_xmm_xmm_xmm: { avx }
flags for vmovhpd_m64_xmm: { avx }
flags for vmovhpd_xmm_xmm_m64: { avx }
flags for vmovhps_m64_xmm: { avx }
flags for vmovhps_xmm_xmm_m64: { avx }
flags for vmovlhps_xmm_xmm_xmm: { avx }
flags for vmovlpd_m64_xmm: { avx }
flags for vmovlpd_xmm_xmm_m64: { avx }
flags for vmovlps_m64_xmm: { avx }
flags for vmovlps_xmm_xmm_m64: { avx }
flags for vmovmskpd_r32_xmm: { avx }
flags for vmovmskpd_r32_ymm: { avx }
flags for vmovmskpd_r64_xmm: { avx }
flags for vmovmskpd_r64_ymm: { avx }
flags for vmovmskps_r32_xmm: { avx }
flags for vmovmskps_r32_ymm: { avx }
flags for vmovmskps_r64_xmm: { avx }
flags for vmovmskps_r64_ymm: { avx }
flags for vmovntdqa_m128_xmm: { avx }
flags for vmovntdqa_xmm_m128: { avx }
flags for vmovntdqa_ymm_m256: { avx2 }
flags for vmovntpd_m128_xmm: { avx }
flags for vmovntpd_m256_ymm: { avx }
flags for vmovntps_m128_xmm: { avx }
flags for vmovntps_m256_ymm: { avx }
flags for vmovq_m64_xmm: { avx }
flags for vmovq_m64_xmm_1: { avx }
flags for vmovq_r64_xmm: { avx }
flags for vmovq_xmm_m64: { avx }
flags for vmovq_xmm_m64_1: { avx }
flags for vmovq_xmm_r64: { avx }
flags for vmovq_xmm_xmm: { avx }
flags for vmovq_xmm_xmm_1: { avx }
flags for vmovsd_m64_xmm: { avx }
flags for vmovsd_xmm_m64: { avx }
flags for vmovsd_xmm_xmm_xmm: { avx }
flags for vmovsd_xmm_xmm_xmm_1: { avx }
flags for vmovshdup_xmm_m128: { avx }
flags for vmovshdup_xmm_xmm: { avx }
flags for vmovshdup_ymm_m256: { avx }
flags for vmovshdup_ymm_ymm: { avx }
flags for vmovsldup_xmm_m128: { avx }
flags for vmovsldup_xmm_xmm: { avx }
flags for vmovsldup_ymm_m256: { avx }
flags for vmovsldup_ymm_ymm: { avx }
flags for vmovss_m32_xmm: { avx }
flags for vmovss_xmm_m32: { avx }
flags for vmovss_xmm_xmm_xmm: { avx }
flags for vmovss_xmm_xmm_xmm_1: { avx }
flags for vmovupd_m128_xmm: { avx }
flags for vmovupd_m256_ymm: { avx }
flags for vmovupd_xmm_m128: { avx }
flags for vmovupd_xmm_xmm: { avx }
flags for vmovupd_xmm_xmm_1: { avx }
flags for vmovupd_ymm_m256: { avx }
flags for vmovupd_ymm_ymm: { avx }
flags for vmovupd_ymm_ymm_1: { avx }
flags for vmovups_m128_xmm: { avx }
flags for vmovups_m256_ymm: { avx }
flags for vmovups_xmm_m128: { avx }
flags for vmovups_xmm_xmm: { avx }
flags for vmovups_xmm_xmm_1: { avx }
flags for vmovups_ymm_m256: { avx }
flags for vmovups_ymm_ymm: { avx }
flags for vmovups_ymm_ymm_1: { avx }
flags for vmpsadbw_xmm_xmm_m128_imm8: { avx }
flags for vmpsadbw_xmm_xmm_xmm_imm8: { avx }
flags for vmpsadbw_ymm_ymm_m256_imm8: { avx2 }
flags for vmpsadbw_ymm_ymm_ymm_imm8: { avx2 }
flags for vmulpd_xmm_xmm_m128: { avx }
flags for vmulpd_xmm_xmm_xmm: { avx }
flags for vmulpd_ymm_ymm_m256: { avx }
flags for vmulpd_ymm_ymm_ymm: { avx }
flags for vmulps_xmm_xmm_m128: { avx }
flags for vmulps_xmm_xmm_xmm: { avx }
flags for vmulps_ymm_ymm_m256: { avx }
flags for vmulps_ymm_ymm_ymm: { avx }
flags for vmulsd_xmm_xmm_m64: { avx }
flags for vmulsd_xmm_xmm_xmm: { avx }
flags for vmulss_xmm_xmm_m32: { avx }
flags for vmulss_xmm_xmm_xmm: { avx }
flags for vorpd_xmm_xmm_m128: { avx }
flags for vorpd_xmm_xmm_xmm: { avx }
flags for vorpd_ymm_ymm_m256: { avx }
flags for vorpd_ymm_ymm_ymm: { avx }
flags for vorps_xmm_xmm_m128: { avx }
flags for vorps_xmm_xmm_xmm: { avx }
flags for vorps_ymm_ymm_m256: { avx }
flags for vorps_ymm_ymm_ymm: { avx }
flags for vpabsb_xmm_m128: { avx }
flags for vpabsb_xmm_xmm: { avx }
flags for vpabsb_ymm_m256: { avx2 }
flags for vpabsb_ymm_ymm: { avx2 }
flags for vpabsd_xmm_m128: { avx }
flags for vpabsd_xmm_xmm: { avx }
flags for vpabsd_ymm_m256: { avx2 }
flags for vpabsd_ymm_ymm: { avx2 }
flags for vpabsw_xmm_m128: { avx }
flags for vpabsw_xmm_xmm: { avx }
flags for vpabsw_ymm_m256: { avx2 }
flags for vpabsw_ymm_ymm: { avx2 }
flags for vpackssdw_xmm_xmm_m128: { avx }
flags for vpackssdw_xmm_xmm_xmm: { avx }
flags for vpackssdw_ymm_ymm_m256: { avx2 }
flags for vpackssdw_ymm_ymm_ymm: { avx2 }
flags for vpacksswb_xmm_xmm_m128: { avx }
flags for vpacksswb_xmm_xmm_xmm: { avx }
flags for vpacksswb_ymm_ymm_m256: { avx2 }
flags for vpacksswb_ymm_ymm_ymm: { avx2 }
flags for vpackusdw_xmm_xmm_m128: { avx }
flags for vpackusdw_xmm_xmm_xmm: { avx }
flags for vpackusdw_ymm_ymm_m256: { avx2 }
flags for vpackusdw_ymm_ymm_ymm: { avx2 }
flags for vpackuswb_xmm_xmm_m128: { avx }
flags for vpackuswb_xmm_xmm_xmm: { avx }
flags for vpackuswb_ymm_ymm_m256: { avx2 }
flags for vpackuswb_ymm_ymm_ymm: { avx2 }
flags for vpaddb_xmm_xmm_m128: { avx }
flags for vpaddb_xmm_xmm_xmm: { avx }
flags for vpaddb_ymm_ymm_m256: { avx2 }
flags for vpaddb_ymm_ymm_ymm: { avx2 }
flags for vpaddd_xmm_xmm_m128: { avx }
flags for vpaddd_xmm_xmm_xmm: { avx }
flags for vpaddd_ymm_ymm_m256: { avx2 }
flags for vpaddd_ymm_ymm_ymm: { avx2 }
flags for vpaddq_xmm_xmm_m128: { avx }
flags for vpaddq_xmm_xmm_xmm: { avx }
flags for vpaddq_ymm_ymm_m256: { avx2 }
flags for vpaddq_ymm_ymm_ymm: { avx2 }
flags for vpaddsb_xmm_xmm_m128: { avx }
flags for vpaddsb_xmm_xmm_xmm: { avx }
flags for vpaddsb_ymm_ymm_m256: { avx2 }
flags for vpaddsb_ymm_ymm_ymm: { avx2 }
flags for vpaddsw_xmm_xmm_m128: { avx }
flags for vpaddsw_xmm_xmm_xmm: { avx }
flags for vpaddsw_ymm_ymm_m256: { avx2 }
flags for vpaddsw_ymm_ymm_ymm: { avx2 }
flags for vpaddusb_xmm_xmm_m128: { avx }
flags for vpaddusb_xmm_xmm_xmm: { avx }
flags for vpaddusb_ymm_ymm_m256: { avx2 }
flags for vpaddusb_ymm_ymm_ymm: { avx2 }
flags for vpaddusw_xmm_xmm_m128: { avx }
flags for vpaddusw_xmm_xmm_xmm: { avx }
flags for vpaddusw_ymm_ymm_m256: { avx2 }
flags for vpaddusw_ymm_ymm_ymm: { avx2 }
flags for vpaddw_xmm_xmm_m128: { avx }
flags for vpaddw_xmm_xmm_xmm: { avx }
flags for vpaddw_ymm_ymm_m256: { avx2 }
flags for vpaddw_ymm_ymm_ymm: { avx2 }
flags for vpalignr_xmm_xmm_m128_imm8: { avx }
flags for vpalignr_xmm_xmm_xmm_imm8: { avx }
flags for vpalignr_ymm_ymm_m256_imm8: { avx2 }
flags for vpalignr_ymm_ymm_ymm_imm8: { avx2 }
flags for vpand_xmm_xmm_m128: { avx }
flags for vpand_xmm_xmm_xmm: { avx }
flags for vpand_ymm_ymm_m256: { avx2 }
flags for vpand_ymm_ymm_ymm: { avx2 }
flags for vpandn_xmm_xmm_m128: { avx }
flags for vpandn_xmm_xmm_xmm: { avx }
flags for vpandn_ymm_ymm_m256: { avx2 }
flags for vpandn_ymm_ymm_ymm: { avx2 }
flags for vpavgb_xmm_xmm_m128: { avx }
flags for vpavgb_xmm_xmm_xmm: { avx }
flags for vpavgb_ymm_ymm_m256: { avx2 }
flags for vpavgb_ymm_ymm_ymm: { avx2 }
flags for vpavgw_xmm_xmm_m128: { avx }
flags for vpavgw_xmm_xmm_xmm: { avx }
flags for vpavgw_ymm_ymm_m256: { avx2 }
flags for vpavgw_ymm_ymm_ymm: { avx2 }
flags for vpblendd_xmm_xmm_m128_imm8: { avx2 }
flags for vpblendd_xmm_xmm_xmm_imm8: { avx2 }
flags for vpblendd_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendd_ymm_ymm_ymm_imm8: { avx2 }
flags for vpblendvb_xmm_xmm_m128_xmm: { avx }
flags for vpblendvb_xmm_xmm_xmm_xmm: { avx }
flags for vpblendvb_ymm_ymm_m256_ymm: { avx2 }
flags for vpblendvb_ymm_ymm_ymm_ymm: { avx2 }
flags for vpblendw_xmm_xmm_m128_imm8: { avx }
flags for vpblendw_xmm_xmm_xmm_imm8: { avx }
flags for vpblendw_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendw_ymm_ymm_ymm_imm8: { avx2 }
flags for vpbroadcastb_xmm_m8: { avx2 }
flags for vpbroadcastb_xmm_xmm: { avx2 }
flags for vpbroadcastb_ymm_m8: { avx2 }
flags for vpbroadcastb_ymm_xmm: { avx2 }
flags for vpbroadcastd_xmm_m32: { avx2 }
flags for vpbroadcastd_xmm_xmm: { avx2 }
flags for vpbroadcastd_ymm_m32: { avx2 }
flags for vpbroadcastd_ymm_xmm: { avx2 }
flags for vpbroadcastq_xmm_m64: { avx2 }
flags for vpbroadcastq_xmm_xmm: { avx2 }
flags for vpbroadcastq_ymm_m64: { avx2 }
flags for vpbroadcastq_ymm_xmm: { avx2 }
flags for vpbroadcastw_xmm_m16: { avx2 }
flags for vpbroadcastw_xmm_xmm: { avx2 }
flags for vpbroadcastw_ymm_m16: { avx2 }
flags for vpbroadcastw_ymm_xmm: { avx2 }
flags for vpclmulqdq_xmm_xmm_m128_imm8: { pclmulqdq avx }
flags for vpclmulqdq_xmm_xmm_xmm_imm8: { pclmulqdq avx }
flags for vpcmpeqb_xmm_xmm_m128: { avx }
flags for vpcmpeqb_xmm_xmm_xmm: { avx }
flags for vpcmpeqb_ymm_ymm_m256: { avx2 }
flags for vpcmpeqb_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqd_xmm_xmm_m128: { avx }
flags for vpcmpeqd_xmm_xmm_xmm: { avx }
flags for vpcmpeqd_ymm_ymm_m256: { avx2 }
flags for vpcmpeqd_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqq_xmm_xmm_m128: { avx }
flags for vpcmpeqq_xmm_xmm_xmm: { avx }
flags for vpcmpeqq_ymm_ymm_m256: { avx2 }
flags for vpcmpeqq_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqw_xmm_xmm_m128: { avx }
flags for vpcmpeqw_xmm_xmm_xmm: { avx }
flags for vpcmpeqw_ymm_ymm_m256: { avx2 }
flags for vpcmpeqw_ymm_ymm_ymm: { avx2 }
flags for vpcmpestri_xmm_m128_imm8: { avx }
flags for vpcmpestri_xmm_xmm_imm8: { avx }
flags for vpcmpestrm_xmm_m128_imm8: { avx }
flags for vpcmpestrm_xmm_xmm_imm8: { avx }
flags for vpcmpgtb_xmm_xmm_m128: { avx }
flags for vpcmpgtb_xmm_xmm_xmm: { avx }
flags for vpcmpgtb_ymm_ymm_m256: { avx }
flags for vpcmpgtb_ymm_ymm_ymm: { avx }
flags for vpcmpgtd_xmm_xmm_m128: { avx }
flags for vpcmpgtd_xmm_xmm_xmm: { avx }
flags for vpcmpgtd_ymm_ymm_m256: { avx2 }
flags for vpcmpgtd_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtq_xmm_xmm_m128: { avx }
flags for vpcmpgtq_xmm_xmm_xmm: { avx }
flags for vpvmpgtq_ymm_ymm_m256: { avx2 }
flags for vpvmpgtq_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtw_xmm_xmm_m128: { avx }
flags for vpcmpgtw_xmm_xmm_xmm: { avx }
flags for vpcmpgtw_ymm_ymm_m256: { avx2 }
flags for vpcmpgtw_ymm_ymm_ymm: { avx2 }
flags for vpcmpistri_xmm_m128_imm8: { avx }
flags for vpcmpistri_xmm_xmm_imm8: { avx }
flags for vpcmpistrm_xmm_m128_imm8: { avx }
flags for vpcmpistrm_xmm_xmm_imm8: { avx }
flags for vperm2f128_ymm_ymm_m256_imm8: { avx }
flags for vperm2f128_ymm_ymm_ymm_imm8: { avx }
flags for vperm2i128_ymm_ymm_m256_imm8: { avx2 }
flags for vperm2i128_ymm_ymm_ymm_imm8: { avx2 }
flags for vpermd_ymm_ymm_m256: { avx2 }
flags for vpermd_ymm_ymm_ymm: { avx2 }
flags for vpermilpd_xmm_m128_imm8: { avx }
flags for vpermilpd_xmm_xmm_imm8: { avx }
flags for vpermilpd_xmm_xmm_m128: { avx }
flags for vpermilpd_xmm_xmm_xmm: { avx }
flags for vpermilpd_ymm_m256_imm8: { avx }
flags for vpermilpd_ymm_ymm_imm8: { avx }
flags for vpermilpd_ymm_ymm_m256: { avx }
flags for vpermilpd_ymm_ymm_ymm: { avx }
flags for vpermilps_xmm_m128_imm8: { avx }
flags for vpermilps_xmm_xmm_imm8: { avx }
flags for vpermilps_xmm_xmm_m128: { avx }
flags for vpermilps_xmm_xmm_xmm: { avx }
flags for vpermilps_ymm_m256_imm8: { avx }
flags for vpermilps_ymm_ymm_imm8: { avx }
flags for vpermilps_ymm_ymm_m256: { avx }
flags for vpermilps_ymm_ymm_ymm: { avx }
flags for vpermpd_ymm_m256_imm8: { avx2 }
flags for vpermpd_ymm_ymm_imm8: { avx2 }
flags for vpermps_ymm_ymm_m256: { avx2 }
flags for vpermps_ymm_ymm_ymm: { avx2 }
flags for vpermq_ymm_m256_imm8: { avx2 }
flags for vpermq_ymm_ymm_imm8: { avx2 }
flags for vpextrb_m8_xmm_imm8: { avx }
flags for vpextrb_r32_xmm_imm8: { avx }
flags for vpextrb_r64_xmm_imm8: { avx }
flags for vpextrd_m32_xmm_imm8: { avx }
flags for vpextrd_r32_xmm_imm8: { avx }
flags for vpextrq_m64_xmm_imm8: { avx }
flags for vpextrq_r64_xmm_imm8: { avx }
flags for vpextrw_m16_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8_1: { avx }
flags for vpextrw_r64_xmm_imm8: { avx }
flags for vpextrw_r64_xmm_imm8_1: { avx }
flags for vpgatherdd_xmm_m32_xmm: { avx2 }
flags for vpgatherdd_ymm_m32_ymm: { avx2 }
flags for vpgatherdq_xmm_m32_xmm: { avx2 }
flags for vpgatherdq_ymm_m32_ymm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm_1: { avx2 }
flags for vpgatherqq_xmm_m64_xmm: { avx2 }
flags for vpgatherqq_ymm_m64_ymm: { avx2 }
flags for vphaddd_xmm_xmm_m128: { avx }
flags for vphaddd_xmm_xmm_xmm: { avx }
flags for vphaddd_ymm_ymm_m256: { avx2 }
flags for vphaddd_ymm_ymm_ymm: { avx2 }
flags for vphaddsw_xmm_xmm_m128: { avx }
flags for vphaddsw_xmm_xmm_xmm: { avx }
flags for vphaddsw_ymm_ymm_m256: { avx2 }
flags for vphaddsw_ymm_ymm_ymm: { avx2 }
flags for vphaddw_xmm_xmm_m128: { avx }
flags for vphaddw_xmm_xmm_xmm: { avx }
flags for vphaddw_ymm_ymm_m256: { avx2 }
flags for vphaddw_ymm_ymm_ymm: { avx2 }
flags for vphminposuw_xmm_m128: { avx }
flags for vphminposuw_xmm_xmm: { avx }
flags for vphsubd_xmm_xmm_m128: { avx }
flags for vphsubd_xmm_xmm_xmm: { avx }
flags for vphsubd_ymm_ymm_m256: { avx2 }
flags for vphsubd_ymm_ymm_ymm: { avx2 }
flags for vphsubsw_xmm_xmm_m128: { avx }
flags for vphsubsw_xmm_xmm_xmm: { avx }
flags for vphsubsw_ymm_ymm_m256: { avx2 }
flags for vphsubsw_ymm_ymm_ymm: { avx2 }
flags for vphsubw_xmm_xmm_m128: { avx }
flags for vphsubw_xmm_xmm_xmm: { avx }
flags for vphsubw_ymm_ymm_m256: { avx2 }
flags for vphsubw_ymm_ymm_ymm: { avx2 }
flags for vpinsrb_xmm_xmm_m8_imm8: { avx }
flags for vpinsrb_xmm_xmm_r32_imm8: { avx }
flags for vpinsrd_xmm_xmm_m32_imm8: { avx }
flags for vpinsrd_xmm_xmm_r32_imm8: { avx }
flags for vpinsrq_xmm_xmm_m64_imm8: { avx }
flags for vpinsrq_xmm_xmm_r64_imm8: { avx }
flags for vpinsrw_xmm_xmm_m16_imm8: { avx }
flags for vpinsrw_xmm_xmm_r32_imm8: { avx }
flags for vpmaddubsw_xmm_xmm_m128: { avx }
flags for vpmaddubsw_xmm_xmm_xmm: { avx }
flags for vpmaddubsw_ymm_ymm_m256: { avx2 }
flags for vpmaddubsw_ymm_ymm_ymm: { avx2 }
flags for vpmaddwd_xmm_xmm_m128: { avx }
flags for vpmaddwd_xmm_xmm_xmm: { avx }
flags for vpmaddwd_ymm_ymm_m256: { avx2 }
flags for vpmaddwd_ymm_ymm_ymm: { avx2 }
flags for vpmaskmovd_m128_xmm_xmm: { avx2 }
flags for vpmaskmovd_m256_ymm_ymm: { avx2 }
flags for vpmaskmovd_xmm_xmm_m128: { avx2 }
flags for vpmaskmovd_ymm_ymm_m256: { avx2 }
flags for vpmaskmovq_m128_xmm_xmm: { avx2 }
flags for vpmaskmovq_m256_ymm_ymm: { avx2 }
flags for vpmaskmovq_xmm_xmm_m128: { avx2 }
flags for vpmaskmovq_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_xmm_xmm_m128: { avx }
flags for vpmaxsb_xmm_xmm_xmm: { avx }
flags for vpmaxsb_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_ymm_ymm_ymm: { avx2 }
flags for vpmaxsd_xmm_xmm_m128: { avx }
flags for vpmaxsd_xmm_xmm_xmm: { avx }
flags for vpmaxsd_ymm_ymm_m256: { avx2 }
flags for vpmaxsd_ymm_ymm_ymm: { avx2 }
flags for vpmaxsw_xmm_xmm_m128: { avx }
flags for vpmaxsw_xmm_xmm_xmm: { avx }
flags for vpmaxsw_ymm_ymm_m256: { avx2 }
flags for vpmaxsw_ymm_ymm_ymm: { avx2 }
flags for vpmaxub_xmm_xmm_m128: { avx }
flags for vpmaxub_xmm_xmm_xmm: { avx }
flags for vpmaxub_ymm_ymm_m256: { avx2 }
flags for vpmaxub_ymm_ymm_ymm: { avx2 }
flags for vpmaxud_xmm_xmm_m128: { avx }
flags for vpmaxud_xmm_xmm_xmm: { avx }
flags for vpmaxud_ymm_ymm_m256: { avx2 }
flags for vpmaxud_ymm_ymm_ymm: { avx2 }
flags for vpmaxuw_xmm_xmm_m128: { avx }
flags for vpmaxuw_xmm_xmm_xmm: { avx }
flags for vpmaxuw_ymm_ymm_m256: { avx2 }
flags for vpmaxuw_ymm_ymm_ymm: { avx2 }
flags for vpminsb_xmm_xmm_m128: { avx }
flags for vpminsb_xmm_xmm_xmm: { avx }
flags for vpminsb_ymm_ymm_m256: { avx2 }
flags for vpminsb_ymm_ymm_ymm: { avx2 }
flags for vpminsd_xmm_xmm_m128: { avx }
flags for vpminsd_xmm_xmm_xmm: { avx }
flags for vpminsd_ymm_ymm_m256: { avx2 }
flags for vpminsd_ymm_ymm_ymm: { avx2 }
flags for vpminsw_xmm_xmm_m128: { avx }
flags for vpminsw_xmm_xmm_xmm: { avx }
flags for vpminub_xmm_xmm_m128: { avx }
flags for vpminub_xmm_xmm_xmm: { avx }
flags for vpminub_ymm_ymm_m256: { avx2 }
flags for vpminub_ymm_ymm_ymm: { avx2 }
flags for vpminud_xmm_xmm_m128: { avx }
flags for vpminud_xmm_xmm_xmm: { avx }
flags for vpminud_ymm_ymm_m256: { avx2 }
flags for vpminud_ymm_ymm_ymm: { avx2 }
flags for vpminuw_xmm_xmm_m128: { avx }
flags for vpminuw_xmm_xmm_xmm: { avx }
flags for vpminuw_ymm_ymm_m256: { avx2 }
flags for vpminuw_ymm_ymm_ymm: { avx2 }
flags for vpmovmskb_r32_xmm: { avx }
flags for vpmovmskb_r32_ymm: { avx2 }
flags for vpmovmskb_r64_xmm: { avx }
flags for vpmovmskb_r64_ymm: { avx2 }
flags for vpmovsxbd_xmm_m32: { avx }
flags for vpmovsxbd_xmm_xmm: { avx }
flags for vpmovsxbd_ymm_m64: { avx2 }
flags for vpmovsxbd_ymm_xmm: { avx2 }
flags for vpmovsxbq_xmm_m16: { avx }
flags for vpmovsxbq_xmm_xmm: { avx }
flags for vpmovsxbq_ymm_m32: { avx2 }
flags for vpmovsxbq_ymm_xmm: { avx2 }
flags for vpmovsxbw_xmm_m64: { avx }
flags for vpmovsxbw_xmm_xmm: { avx }
flags for vpmovsxbw_ymm_m128: { avx2 }
flags for vpmovsxbw_ymm_xmm: { avx2 }
flags for vpmovsxdq_xmm_m64: { avx }
flags for vpmovsxdq_xmm_xmm: { avx }
flags for vpmovsxdq_ymm_m128: { avx2 }
flags for vpmovsxdq_ymm_xmm: { avx2 }
flags for vpmovsxwd_xmm_m64: { avx }
flags for vpmovsxwd_xmm_xmm: { avx }
flags for vpmovsxwd_ymm_m128: { avx2 }
flags for vpmovsxwd_ymm_xmm: { avx2 }
flags for vpmovsxwq_xmm_m32: { avx }
flags for vpmovsxwq_xmm_xmm: { avx }
flags for vpmovsxwq_ymm_m64: { avx2 }
flags for vpmovsxwq_ymm_xmm: { avx2 }
flags for vpmovzxbd_xmm_m32: { avx }
flags for vpmovzxbd_xmm_xmm: { avx }
flags for vpmovzxbd_ymm_m64: { avx2 }
flags for vpmovzxbd_ymm_xmm: { avx2 }
flags for vpmovzxbq_xmm_m16: { avx }
flags for vpmovzxbq_xmm_xmm: { avx }
flags for vpmovzxbq_ymm_m32: { avx2 }
flags for vpmovzxbq_ymm_xmm: { avx2 }
flags for vpmovzxbw_xmm_m64: { avx }
flags for vpmovzxbw_xmm_xmm: { avx }
flags for vpmovzxbw_ymm_m128: { avx2 }
flags for vpmovzxbw_ymm_xmm: { avx2 }
flags for vpmovzxdq_xmm_m64: { avx }
flags for vpmovzxdq_xmm_xmm: { avx }
flags for vpmovzxdq_ymm_m128: { avx2 }
flags for vpmovzxdq_ymm_xmm: { avx2 }
flags for vpmovzxwd_xmm_m64: { avx }
flags for vpmovzxwd_xmm_xmm: { avx }
flags for vpmovzxwd_ymm_m128: { avx2 }
flags for vpmovzxwd_ymm_xmm: { avx2 }
flags for vpmovzxwq_xmm_m32: { avx }
flags for vpmovzxwq_xmm_xmm: { avx }
flags for vpmovzxwq_ymm_m64: { avx2 }
flags for vpmovzxwq_ymm_xmm: { avx2 }
flags for vpmuldq_xmm_xmm_m128: { avx }
flags for vpmuldq_xmm_xmm_xmm: { avx }
flags for vpmuldq_ymm_ymm_m256: { avx2 }
flags for vpmuldq_ymm_ymm_ymm: { avx2 }
flags for vpmulhrsw_xmm_xmm_m128: { avx }
flags for vpmulhrsw_xmm_xmm_xmm: { avx }
flags for vpmulhrsw_ymm_ymm_m256: { avx2 }
flags for vpmulhrsw_ymm_ymm_ymm: { avx2 }
flags for vpmulhuw_xmm_xmm_m128: { avx }
flags for vpmulhuw_xmm_xmm_xmm: { avx }
flags for vpmulhuw_ymm_ymm_m256: { avx2 }
flags for vpmulhuw_ymm_ymm_ymm: { avx2 }
flags for vpmulhw_xmm_xmm_m128: { avx }
flags for vpmulhw_xmm_xmm_xmm: { avx }
flags for vpmulhw_ymm_ymm_m256: { avx2 }
flags for vpmulhw_ymm_ymm_ymm: { avx2 }
flags for vpmulld_xmm_xmm_m128: { avx }
flags for vpmulld_xmm_xmm_xmm: { avx }
flags for vpmulld_ymm_ymm_m256: { avx2 }
flags for vpmulld_ymm_ymm_ymm: { avx2 }
flags for vpmullw_xmm_xmm_m128: { avx }
flags for vpmullw_xmm_xmm_xmm: { avx }
flags for vpmullw_ymm_ymm_m256: { avx2 }
flags for vpmullw_ymm_ymm_ymm: { avx2 }
flags for vpmuludq_xmm_xmm_m128: { avx }
flags for vpmuludq_xmm_xmm_xmm: { avx }
flags for vpmuludq_ymm_ymm_m256: { avx2 }
flags for vpmuludq_ymm_ymm_ymm: { avx2 }
flags for vpor_xmm_xmm_m128: { avx }
flags for vpor_xmm_xmm_xmm: { avx }
flags for vpor_ymm_ymm_m256: { avx2 }
flags for vpor_ymm_ymm_ymm: { avx2 }
flags for vpsadbw_xmm_xmm_m128: { avx }
flags for vpsadbw_xmm_xmm_xmm: { avx }
flags for vpsadbw_ymm_ymm_m256: { avx2 }
flags for vpsadbw_ymm_ymm_ymm: { avx2 }
flags for vpshufb_xmm_xmm_m128: { avx }
flags for vpshufb_xmm_xmm_xmm: { avx }
flags for vpshufb_ymm_ymm_m256: { avx2 }
flags for vpshufb_ymm_ymm_ymm: { avx2 }
flags for vpshufd_xmm_m128_imm8: { avx }
flags for vpshufd_xmm_xmm_imm8: { avx }
flags for vpshufd_ymm_m256_imm8: { avx2 }
flags for vpshufd_ymm_ymm_imm8: { avx2 }
flags for vpshufhw_xmm_m128_imm8: { avx }
flags for vpshufhw_xmm_xmm_imm8: { avx }
flags for vpshufhw_ymm_m256_imm8: { avx2 }
flags for vpshufhw_ymm_ymm_imm8: { avx2 }
flags for vpshuflw_xmm_m128_imm8: { avx }
flags for vpshuflw_xmm_xmm_imm8: { avx }
flags for vpshuflw_ymm_m256_imm8: { avx2 }
flags for vpshuflw_ymm_ymm_imm8: { avx2 }
flags for vpsignb_xmm_xmm_m128: { avx }
flags for vpsignb_xmm_xmm_xmm: { avx }
flags for vpsignd_xmm_xmm_m128: { avx }
flags for vpsignd_xmm_xmm_xmm: { avx }
flags for vpsignw_xmm_xmm_m128: { avx }
flags for vpsignw_xmm_xmm_xmm: { avx }
flags for vpslld_xmm_xmm_imm8: { avx }
flags for vpslld_xmm_xmm_m128: { avx }
flags for vpslld_xmm_xmm_xmm: { avx }
flags for vpslld_ymm_ymm_imm8: { avx2 }
flags for vpslld_ymm_ymm_m128: { avx2 }
flags for vpslld_ymm_ymm_xmm: { avx2 }
flags for vpslldq_xmm_xmm_imm8: { avx }
flags for vpslldq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_xmm_xmm_imm8: { avx }
flags for vpsllq_xmm_xmm_m128: { avx }
flags for vpsllq_xmm_xmm_xmm: { avx }
flags for vpsllq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_ymm_ymm_m128: { avx2 }
flags for vpsllq_ymm_ymm_xmm: { avx2 }
flags for vpsllvd_xmm_xmm_m128: { avx2 }
flags for vpsllvd_xmm_xmm_xmm: { avx2 }
flags for vpsllvd_ymm_ymm_m256: { avx2 }
flags for vpsllvd_ymm_ymm_ymm: { avx2 }
flags for vpsllvq_xmm_xmm_m128: { avx2 }
flags for vpsllvq_xmm_xmm_xmm: { avx2 }
flags for vpsllvq_ymm_ymm_m256: { avx2 }
flags for vpsllvq_ymm_ymm_ymm: { avx2 }
flags for vpsllw_xmm_xmm_imm8: { avx }
flags for vpsllw_xmm_xmm_m128: { avx }
flags for vpsllw_xmm_xmm_xmm: { avx }
flags for vpsllw_ymm_ymm_imm8: { avx2 }
flags for vpsllw_ymm_ymm_m128: { avx2 }
flags for vpsllw_ymm_ymm_xmm: { avx2 }
flags for vpsrad_xmm_xmm_imm8: { avx }
flags for vpsrad_xmm_xmm_m128: { avx }
flags for vpsrad_xmm_xmm_xmm: { avx }
flags for vpsrad_ymm_ymm_imm8: { avx2 }
flags for vpsrad_ymm_ymm_m128: { avx2 }
flags for vpsrad_ymm_ymm_xmm: { avx2 }
flags for vpsravd_xmm_xmm_m128: { avx2 }
flags for vpsravd_xmm_xmm_xmm: { avx2 }
flags for vpsravd_ymm_ymm_m256: { avx2 }
flags for vpsravd_ymm_ymm_ymm: { avx2 }
flags for vpsraw_xmm_xmm_imm8: { avx }
flags for vpsraw_xmm_xmm_m128: { avx }
flags for vpsraw_xmm_xmm_xmm: { avx }
flags for vpsraw_ymm_ymm_imm8: { avx2 }
flags for vpsraw_ymm_ymm_m128: { avx2 }
flags for vpsraw_ymm_ymm_xmm: { avx2 }
flags for vpsrld_xmm_xmm_imm8: { avx }
flags for vpsrld_xmm_xmm_m128: { avx }
flags for vpsrld_xmm_xmm_xmm: { avx }
flags for vpsrld_ymm_ymm_imm8: { avx2 }
flags for vpsrld_ymm_ymm_m128: { avx2 }
flags for vpsrld_ymm_ymm_xmm: { avx2 }
flags for vpsrldq_xmm_xmm_imm8: { avx }
flags for vpsrldq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_xmm_xmm_imm8: { avx }
flags for vpsrlq_xmm_xmm_m128: { avx }
flags for vpsrlq_xmm_xmm_xmm: { avx }
flags for vpsrlq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_ymm_ymm_m128: { avx2 }
flags for vpsrlq_ymm_ymm_xmm: { avx2 }
flags for vpsrlvd_xmm_xmm_m128: { avx2 }
flags for vpsrlvd_xmm_xmm_xmm: { avx2 }
flags for vpsrlvd_ymm_ymm_m256: { avx2 }
flags for vpsrlvd_ymm_ymm_ymm: { avx2 }
flags for vpsrlvq_xmm_xmm_m128: { avx2 }
flags for vpsrlvq_xmm_xmm_xmm: { avx2 }
flags for vpsrlvq_ymm_ymm_m256: { avx2 }
flags for vpsrlvq_ymm_ymm_ymm: { avx2 }
flags for vpsrlw_xmm_xmm_imm8: { avx }
flags for vpsrlw_xmm_xmm_m128: { avx }
flags for vpsrlw_xmm_xmm_xmm: { avx }
flags for vpsrlw_ymm_ymm_imm8: { avx2 }
flags for vpsrlw_ymm_ymm_m128: { avx2 }
flags for vpsrlw_ymm_ymm_xmm: { avx2 }
flags for vpsubb_xmm_xmm_m128: { avx }
flags for vpsubb_xmm_xmm_xmm: { avx }
flags for vpsubb_ymm_ymm_m256: { avx2 }
flags for vpsubb_ymm_ymm_ymm: { avx2 }
flags for vpsubd_xmm_xmm_m128: { avx }
flags for vpsubd_xmm_xmm_xmm: { avx }
flags for vpsubd_ymm_ymm_m256: { avx2 }
flags for vpsubd_ymm_ymm_ymm: { avx2 }
flags for vpsubq_xmm_xmm_m128: { avx }
flags for vpsubq_xmm_xmm_xmm: { avx }
flags for vpsubq_ymm_ymm_m256: { avx2 }
flags for vpsubq_ymm_ymm_ymm: { avx2 }
flags for vpsubsb_xmm_xmm_m128: { avx }
flags for vpsubsb_xmm_xmm_xmm: { avx }
flags for vpsubsb_ymm_ymm_m256: { avx2 }
flags for vpsubsb_ymm_ymm_ymm: { avx2 }
flags for vpsubsw_xmm_xmm_m128: { avx }
flags for vpsubsw_xmm_xmm_xmm: { avx }
flags for vpsubsw_ymm_ymm_m256: { avx2 }
flags for vpsubsw_ymm_ymm_ymm: { avx2 }
flags for vpsubusb_xmm_xmm_m128: { avx }
flags for vpsubusb_xmm_xmm_xmm: { avx }
flags for vpsubusb_ymm_ymm_m256: { avx2 }
flags for vpsubusb_ymm_ymm_ymm: { avx2 }
flags for vpsubusw_xmm_xmm_m128: { avx }
flags for vpsubusw_xmm_xmm_xmm: { avx }
flags for vpsubusw_ymm_ymm_m256: { avx2 }
flags for vpsubusw_ymm_ymm_ymm: { avx2 }
flags for vpsubw_xmm_xmm_m128: { avx }
flags for vpsubw_xmm_xmm_xmm: { avx }
flags for vpsubw_ymm_ymm_m256: { avx2 }
flags for vpsubw_ymm_ymm_ymm: { avx2 }
flags for vptest_xmm_m128: { avx }
flags for vptest_xmm_xmm: { avx }
flags for vptest_ymm_m256: { avx }
flags for vptest_ymm_ymm: { avx }
flags for vpunpckhbw_xmm_xmm_m128: { avx }
flags for vpunpckhbw_xmm_xmm_xmm: { avx }
flags for vpunpckhbw_ymm_ymm_m256: { avx2 }
flags for vpunpckhbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckhdq_xmm_xmm_m128: { avx }
flags for vpunpckhdq_xmm_xmm_xmm: { avx }
flags for vpunpckhdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhqdq_xmm_xmm_m128: { avx }
flags for vpunpckhqdq_xmm_xmm_xmm: { avx }
flags for vpunpckhqdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhwd_xmm_xmm_m128: { avx }
flags for vpunpckhwd_xmm_xmm_xmm: { avx }
flags for vpunpckhwd_ymm_ymm_m256: { avx2 }
flags for vpunpckhwd_ymm_ymm_ymm: { avx2 }
flags for vpunpcklbw_xmm_xmm_m128: { avx }
flags for vpunpcklbw_xmm_xmm_xmm: { avx }
flags for vpunpcklbw_ymm_ymm_m256: { avx2 }
flags for vpunpcklbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckldq_xmm_xmm_m128: { avx }
flags for vpunpckldq_xmm_xmm_xmm: { avx }
flags for vpunpckldq_ymm_ymm_m256: { avx2 }
flags for vpunpckldq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklqdq_xmm_xmm_m128: { avx }
flags for vpunpcklqdq_xmm_xmm_xmm: { avx }
flags for vpunpcklqdq_ymm_ymm_m256: { avx2 }
flags for vpunpcklqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklwd_xmm_xmm_m128: { avx }
flags for vpunpcklwd_xmm_xmm_xmm: { avx }
flags for vpunpcklwd_ymm_ymm_m256: { avx2 }
flags for vpunpcklwd_ymm_ymm_ymm: { avx2 }
flags for vpxor_xmm_xmm_m128: { avx }
flags for vpxor_xmm_xmm_xmm: { avx }
flags for vpxor_ymm_ymm_m256: { avx2 }
flags for vpxor_ymm_ymm_ymm: { avx2 }
flags for vrcpps_xmm_m128: { avx }
flags for vrcpps_xmm_xmm: { avx }
flags for vrcpps_ymm_m256: { avx }
flags for vrcpps_ymm_ymm: { avx }
flags for vrcpss_xmm_xmm_m32: { avx }
flags for vrcpss_xmm_xmm_xmm: { avx }
flags for vroundpd_xmm_m128_imm8: { avx }
flags for vroundpd_xmm_xmm_imm8: { avx }
flags for vroundpd_ymm_m256_imm8: { avx }
flags for vroundpd_ymm_ymm_imm8: { avx }
flags for vroundps_xmm_m128_imm8: { avx }
flags for vroundps_xmm_xmm_imm8: { avx }
flags for vroundps_ymm_m256_imm8: { avx }
flags for vroundps_ymm_ymm_imm8: { avx }
flags for vroundsd_xmm_xmm_m64_imm8: { avx }
flags for vroundsd_xmm_xmm_xmm_imm8: { avx }
flags for vroundss_xmm_xmm_m32_imm8: { avx }
flags for vroundss_xmm_xmm_xmm_imm8: { avx }
flags for vrsqrtps_xmm_m128: { avx }
flags for vrsqrtps_xmm_xmm: { avx }
flags for vrsqrtps_ymm_m256: { avx }
flags for vrsqrtps_ymm_ymm: { avx }
flags for vrsqrtss_xmm_xmm_m32: { avx }
flags for vrsqrtss_xmm_xmm_xmm: { avx }
flags for vshufpd_xmm_xmm_m128_imm8: { avx }
flags for vshufpd_xmm_xmm_xmm_imm8: { avx }
flags for vshufpd_ymm_ymm_m256_imm8: { avx }
flags for vshufpd_ymm_ymm_ymm_imm8: { avx }
flags for vshufps_xmm_xmm_m128_imm8: { avx }
flags for vshufps_xmm_xmm_xmm_imm8: { avx }
flags for vshufps_ymm_ymm_m256_imm8: { avx }
flags for vshufps_ymm_ymm_ymm_imm8: { avx }
flags for vsqrtpd_xmm_m128: { avx }
flags for vsqrtpd_xmm_xmm: { avx }
flags for vsqrtpd_ymm_m256: { avx }
flags for vsqrtpd_ymm_ymm: { avx }
flags for vsqrtps_xmm_m128: { avx }
flags for vsqrtps_xmm_xmm: { avx }
flags for vsqrtps_ymm_m256: { avx }
flags for vsqrtps_ymm_ymm: { avx }
flags for vsqrtsd_xmm_xmm_m64: { avx }
flags for vsqrtsd_xmm_xmm_xmm: { avx }
flags for vsqrtss_xmm_xmm_m32: { avx }
flags for vsqrtss_xmm_xmm_xmm: { avx }
flags for vsubpd_xmm_xmm_m128: { avx }
flags for vsubpd_xmm_xmm_xmm: { avx }
flags for vsubpd_ymm_ymm_m256: { avx }
flags for vsubpd_ymm_ymm_ymm: { avx }
flags for vsubps_xmm_xmm_m128: { avx }
flags for vsubps_xmm_xmm_xmm: { avx }
flags for vsubps_ymm_ymm_m256: { avx }
flags for vsubps_ymm_ymm_ymm: { avx }
flags for vsubsd_xmm_xmm_m64: { avx }
flags for vsubsd_xmm_xmm_xmm: { avx }
flags for vsubss_xmm_xmm_m32: { avx }
flags for vsubss_xmm_xmm_xmm: { avx }
flags for vtestpd_xmm_m128: { avx }
flags for vtestpd_xmm_xmm: { avx }
flags for vtestpd_ymm_m256: { avx }
flags for vtestpd_ymm_ymm: { avx }
flags for vtestps_xmm_m128: { avx }
flags for vtestps_xmm_xmm: { avx }
flags for vtestps_ymm_m256: { avx }
flags for vtestps_ymm_ymm: { avx }
flags for vucomisd_xmm_m64: { avx }
flags for vucomisd_xmm_xmm: { avx }
flags for vucomiss_xmm_m32: { avx }
flags for vucomiss_xmm_xmm: { avx }
flags for vunpckhpd_xmm_xmm_m128: { avx }
flags for vunpckhpd_xmm_xmm_xmm: { avx }
flags for vunpckhpd_ymm_ymm_m256: { avx }
flags for vunpckhpd_ymm_ymm_ymm: { avx }
flags for vunpckhps_xmm_xmm_m128: { avx }
flags for vunpckhps_xmm_xmm_xmm: { avx }
flags for vunpckhps_ymm_ymm_m256: { avx }
flags for vunpckhps_ymm_ymm_ymm: { avx }
flags for vunpcklpd_xmm_xmm_m128: { avx }
flags for vunpcklpd_xmm_xmm_xmm: { avx }
flags for vunpcklpd_ymm_ymm_m256: { avx }
flags for vunpcklpd_ymm_ymm_ymm: { avx }
flags for vunpcklps_xmm_xmm_m128: { avx }
flags for vunpcklps_xmm_xmm_xmm: { avx }
flags for vunpcklps_ymm_ymm_m256: { avx }
flags for vunpcklps_ymm_ymm_ymm: { avx }
flags for vxorpd_xmm_xmm_m128: { avx }
flags for vxorpd_xmm_xmm_xmm: { avx }
flags for vxorpd_ymm_ymm_m256: { avx }
flags for vxorpd_ymm_ymm_ymm: { avx }
flags for vxorps_xmm_xmm_m128: { avx }
flags for vxorps_xmm_xmm_xmm: { avx }
flags for vxorps_ymm_ymm_m256: { avx }
flags for vxorps_ymm_ymm_ymm: { avx }
flags for vzeroall: { avx }
flags for vzeroupper: { avx }
flags for wait: { fpu }
flags for xabort_imm8: { rtm }
flags for xacquire: { hle }
flags for xbegin_label: { rtm }
flags for xend: { rtm }
flags for xlat_m8: { }
flags for xlatb: { }
flags for xorb_al_imm8: { }
flags for xorw_ax_imm16: { }
flags for xorl_eax_imm32: { }
flags for xorw_m16_imm16: { }
flags for xorw_m16_imm8: { }
flags for xorw_m16_r16: { }
flags for xorl_m32_imm32: { }
flags for xorl_m32_imm8: { }
flags for xorl_m32_r32: { }
flags for xorq_m64_imm32: { }
flags for xorq_m64_imm8: { }
flags for xorq_m64_r64: { }
flags for xorb_m8_imm8: { }
flags for xorb_m8_r8: { }
flags for xorb_m8_rh: { }
flags for xorw_r16_imm16: { }
flags for xorw_r16_imm8: { }
flags for xorw_r16_m16: { }
flags for xorw_r16_r16: { }
flags for xorw_r16_r16_1: { }
flags for xorl_r32_imm32: { }
flags for xorl_r32_imm8: { }
flags for xorl_r32_m32: { }
flags for xorl_r32_r32: { }
flags for xorl_r32_r32_1: { }
flags for xorq_r64_imm32: { }
flags for xorq_r64_imm8: { }
flags for xorq_r64_m64: { }
flags for xorq_r64_r64: { }
flags for xorq_r64_r64_1: { }
flags for xorb_r8_imm8: { }
flags for xorb_r8_m8: { }
flags for xorb_r8_r8: { }
flags for xorb_r8_r8_1: { }
flags for xorb_r8_rh: { }
flags for xorb_r8_rh_1: { }
flags for xorq_rax_imm32: { }
flags for xorb_rh_imm8: { }
flags for xorb_rh_m8: { }
flags for xorb_rh_r8: { }
flags for xorb_rh_r8_1: { }
flags for xorb_rh_rh: { }
flags for xorb_rh_rh_1: { }
flags for xorpd_xmm_m128: { sse2 }
flags for xorpd_xmm_xmm: { sse2 }
flags for xorps_xmm_m128: { sse }
flags for xorps_xmm_xmm: { sse }
flags for xrelease: { hle }
flags for xtest: { rtm }
Computing reference outputs for 2 testcases
Computing reference outputs for 2 testcases
Computing reference outputs for 2 testcases
Computing reference outputs for 2 testcases
Running search (timeout is 500000 iterations):

Progress Update: 

Lowest Cost Discovered (71)                                                  Lowest Known Correct Cost (72)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x2   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x3   2      OPC=movl_r32_r32           movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edi             #  5     0x5   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movq %rsi, %rdx             #  6     0x7   3      OPC=movq_r64_r64           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  movq %rax, %rcx             #  7     0xa   3      OPC=movq_r64_r64           andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  orl %eax, %edi              #  9     0xe   2      OPC=orl_r32_r32            movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0x10  3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x13  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl %esi, %esi             #  12    0x19  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl %r8d, %esi             #  14    0x1f  3      OPC=movl_r32_r32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %edi  #  15    0x22  7      OPC=leal_r32_m16           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  notl %esi                   #  16    0x29  2      OPC=notl_r32               jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl %edi, %esi             #  17    0x2b  2      OPC=andl_r32_r32           nop                         #  17    0x37  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2d  6      OPC=andl_r32_imm32         nop                         #  18    0x38  1      OPC=nop                  
  jne .L_126860               #  19    0x33  6      OPC=jne_label_1            nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x39  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x3a  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3b  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3c  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3d  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3e  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3f  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x40  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x41  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
.L_126820:                    #        0x42  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  29    0x42  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  30    0x45  2      OPC=movl_r32_r32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x47  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  32    0x4b  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %edx, %edx             #  33    0x4e  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  34    0x50  4      OPC=movl_r32_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl %r8d, %r9d             #  35    0x54  3      OPC=movl_r32_r32           nop                         #  35    0x5f  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  36    0x57  7      OPC=leal_r32_m16           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  notl %r9d                   #  37    0x5e  3      OPC=notl_r32               andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x61  3      OPC=andl_r32_r32_1         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  39    0x64  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x6b  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x71  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x72  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x73  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x74  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x75  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x76  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x77  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x78  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x79  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x7a  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7b  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7c  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7d  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7e  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7f  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x80  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x81  0      OPC=<label>                movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  57    0x81  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  58    0x82  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  movzbl (%r15,%rdx,1), %esi  #  59    0x84  5      OPC=movzbl_r32_m8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  addl $0x1, %edx             #  60    0x89  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  61    0x8c  2      OPC=movl_r32_r32           testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  movb %sil, (%r15,%rcx,1)    #  62    0x8e  4      OPC=movb_m8_r8             jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  addl $0x1, %ecx             #  63    0x92  3      OPC=addl_r32_imm8          nop                         #  63    0x9c  1      OPC=nop                  
  testb %sil, %dil            #  64    0x95  3      OPC=testb_r8_r8            nop                         #  64    0x9d  1      OPC=nop                  
  jne .L_126860               #  65    0x98  6      OPC=jne_label_1            nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9e  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9f  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0xa0  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa1  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa2  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  popq %r11                   #  71    0xa3  2      OPC=popq_r64_1             jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  andl $0xe0, %r11d           #  72    0xa5  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  73    0xa9  3      OPC=addq_r64_r64         .size strcpy, .-strcpy                                                       
  jmpq %r11                   #  74    0xac  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (70)                                                  Lowest Known Correct Cost (72)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x2   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x3   2      OPC=movl_r32_r32           movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movq %rsi, %rdx             #  5     0x5   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  6     0x8   3      OPC=movq_r64_r64_1         orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xb   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  orl %eax, %edi              #  8     0xc   2      OPC=orl_r32_r32            jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  andl $0x3, %edi             #  9     0xe   3      OPC=andl_r32_imm8          movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  jne .L_126860               #  10    0x11  6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl %esi, %esi             #  11    0x17  2      OPC=movl_r32_r32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  notl %esi                   #  15    0x27  2      OPC=notl_r32               andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  andl %edi, %esi             #  16    0x29  2      OPC=andl_r32_r32           jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  17    0x2b  6      OPC=andl_r32_imm32         nop                         #  17    0x37  1      OPC=nop                  
  jne .L_126860               #  18    0x31  6      OPC=jne_label_1            nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x37  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x38  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x39  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3f  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
.L_126820:                    #        0x40  0      OPC=<label>                movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  addl $0x4, %edx             #  28    0x40  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  movl %ecx, %ecx             #  29    0x43  2      OPC=movl_r32_r32           addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  30    0x45  4      OPC=movl_m32_r32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  31    0x49  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %edx, %edx             #  32    0x4c  2      OPC=movl_r32_r32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  33    0x4e  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl %r8d, %r9d             #  34    0x52  3      OPC=movl_r32_r32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  notl %r9d                   #  35    0x55  3      OPC=notl_r32               nop                         #  35    0x5f  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  36    0x58  7      OPC=leal_r32_m16           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  andl %esi, %r9d             #  37    0x5f  3      OPC=andl_r32_r32_1         andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl $0x80808080, %r9d      #  38    0x62  7      OPC=andl_r32_imm32         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  je .L_126820                #  39    0x69  6      OPC=je_label_1             nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7f  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x80  0      OPC=<label>                movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  57    0x80  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  58    0x81  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  movzbl (%r15,%rdx,1), %esi  #  59    0x83  5      OPC=movzbl_r32_m8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  addl $0x1, %edx             #  60    0x88  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  61    0x8b  2      OPC=movl_r32_r32           testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  movb %sil, (%r15,%rcx,1)    #  62    0x8d  4      OPC=movb_m8_r8             jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  addl $0x1, %ecx             #  63    0x91  3      OPC=addl_r32_imm8          nop                         #  63    0x9c  1      OPC=nop                  
  testb %sil, %dil            #  64    0x94  3      OPC=testb_r8_r8            nop                         #  64    0x9d  1      OPC=nop                  
  jne .L_126860               #  65    0x97  6      OPC=jne_label_1            nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa0  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa1  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa2  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa3  1      OPC=nop                                                                                               
  popq %r11                   #  73    0xa4  2      OPC=popq_r64_1           .size strcpy, .-strcpy                                                       
  andl $0xe0, %r11d           #  74    0xa6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  75    0xaa  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  76    0xad  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (69)                                                  Lowest Known Correct Cost (72)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x2   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x3   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x4   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movl %edi, %eax             #  6     0x5   2      OPC=movl_r32_r32           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  movq %rsi, %rdx             #  7     0x7   3      OPC=movq_r64_r64           andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64_1         jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xd   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xe   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x11  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl %edx, %esi             #  12    0x17  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  notl %esi                   #  16    0x27  2      OPC=notl_r32               jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           nop                         #  17    0x37  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2b  6      OPC=andl_r32_imm32         nop                         #  18    0x38  1      OPC=nop                  
  jne .L_126860               #  19    0x31  6      OPC=jne_label_1            nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x37  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3a  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
.L_126820:                    #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  29    0x40  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  30    0x43  2      OPC=movl_r32_r32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x45  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  32    0x49  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %edx, %edx             #  33    0x4c  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32           nop                         #  35    0x5f  1      OPC=nop                  
  notl %r9d                   #  36    0x55  3      OPC=notl_r32               andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m16           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x40, %r9d            #  39    0x62  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x69  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x6f  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x70  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x71  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x72  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x73  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x74  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x75  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7e  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7f  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
.L_126860:                    #        0x80  0      OPC=<label>                addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  58    0x80  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  movzbq (%r15,%rdx,1), %rsi  #  59    0x82  5      OPC=movzbq_r64_m8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  addl $0x1, %edx             #  60    0x87  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  61    0x8a  2      OPC=movl_r32_r32           testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  movb %sil, (%r15,%rcx,1)    #  62    0x8c  4      OPC=movb_m8_r8             jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  addl $0x1, %ecx             #  63    0x90  3      OPC=addl_r32_imm8          nop                         #  63    0x9c  1      OPC=nop                  
  testb %sil, %dil            #  64    0x93  3      OPC=testb_r8_r8            nop                         #  64    0x9d  1      OPC=nop                  
  jne .L_126860               #  65    0x96  6      OPC=jne_label_1            nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9c  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9d  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0x9f  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa0  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa1  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa2  1      OPC=nop                                                                                               
  popq %r11                   #  73    0xa3  2      OPC=popq_r64_1           .size strcpy, .-strcpy                                                       
  andl $0xe0, %r11d           #  74    0xa5  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  75    0xa9  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  76    0xac  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (68)                                                  Lowest Known Correct Cost (72)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x2   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x3   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x4   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movl %edi, %eax             #  6     0x5   2      OPC=movl_r32_r32           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  movq %rsi, %rdx             #  7     0x7   3      OPC=movq_r64_r64           andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64_1         jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xd   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xe   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x11  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl %edx, %esi             #  12    0x17  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  notl %esi                   #  16    0x27  2      OPC=notl_r32               jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           nop                         #  17    0x37  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2b  6      OPC=andl_r32_imm32         nop                         #  18    0x38  1      OPC=nop                  
  jne .L_126860               #  19    0x31  6      OPC=jne_label_1            nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x37  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3a  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
.L_126820:                    #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  29    0x40  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  30    0x43  2      OPC=movl_r32_r32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x45  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  32    0x49  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %edx, %edx             #  33    0x4c  2      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32           nop                         #  35    0x5f  1      OPC=nop                  
  notl %r9d                   #  36    0x55  3      OPC=notl_r32               andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m16           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x40, %r9d            #  39    0x62  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x69  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x6f  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x70  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x71  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x72  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x73  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x74  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x75  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7e  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x7f  0      OPC=<label>                movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %edx, %edx             #  57    0x7f  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi  #  58    0x81  5      OPC=movzbq_r64_m8          movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  59    0x86  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movl %ecx, %ecx             #  60    0x89  2      OPC=movl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8b  4      OPC=movb_m8_r8             testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %ecx             #  62    0x8f  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  testb %sil, %dil            #  63    0x92  3      OPC=testb_r8_r8            nop                         #  63    0x9c  1      OPC=nop                  
  jne .L_126860               #  64    0x95  6      OPC=jne_label_1            nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9b  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9c  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9d  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0x9f  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  popq %r11                   #  70    0xa0  2      OPC=popq_r64_1             addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  andl $0xe0, %r11d           #  71    0xa2  4      OPC=andl_r32_imm8          jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  addq %r15, %r11             #  72    0xa6  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  73    0xa9  3      OPC=jmpq_r64             .size strcpy, .-strcpy                                                       
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (68)                                                  Lowest Known Correct Cost (70)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x1   1      OPC=nop                    movq %rsi, %rdx             #  2     0x1   3      OPC=movq_r64_r64         
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  nop                         #  4     0x3   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                         #  5     0x4   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  movl %edi, %eax             #  6     0x5   2      OPC=movl_r32_r32           nop                         #  6     0x7   1      OPC=nop                  
  movq %rsi, %rdx             #  7     0x7   3      OPC=movq_r64_r64           nop                         #  7     0x8   1      OPC=nop                  
  movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64_1         nop                         #  8     0x9   1      OPC=nop                  
  nop                         #  9     0xd   1      OPC=nop                    movl %edi, %eax             #  9     0xa   2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xe   3      OPC=andl_r32_imm8          nop                         #  10    0xc   1      OPC=nop                  
  jne .L_126860               #  11    0x11  6      OPC=jne_label_1            movq %rax, %rcx             #  11    0xd   3      OPC=movq_r64_r64_1       
  movl %edx, %esi             #  12    0x17  2      OPC=movl_r32_r32           andl $0x3, %edi             #  12    0x10  3      OPC=andl_r32_imm8        
  movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32           jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           nop                         #  14    0x19  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           movl %edx, %esi             #  15    0x1a  2      OPC=movl_r32_r32         
  notl %esi                   #  16    0x27  2      OPC=notl_r32               movl (%r15,%rsi,1), %r8d    #  16    0x1c  4      OPC=movl_r32_m32         
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           nop                         #  17    0x20  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2b  6      OPC=andl_r32_imm32         nop                         #  18    0x21  1      OPC=nop                  
  jne .L_126860               #  19    0x31  6      OPC=jne_label_1            nop                         #  19    0x22  1      OPC=nop                  
  nop                         #  20    0x37  1      OPC=nop                    nop                         #  20    0x23  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    testb %sil, %dil            #  21    0x24  3      OPC=testb_r8_r8          
  nop                         #  22    0x39  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                         #  23    0x3a  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x2a  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x2b  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x2c  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x2d  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  29    0x2e  1      OPC=nop                  
  addl $0x4, %edx             #  29    0x40  3      OPC=addl_r32_imm8          jne .L_126860               #  30    0x2f  6      OPC=jne_label_1          
  movl %ecx, %ecx             #  30    0x43  2      OPC=movl_r32_r32           nop                         #  31    0x35  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  31    0x45  4      OPC=movl_m32_r32           leaq -0x1010101(%r8), %rdi  #  32    0x36  7      OPC=leaq_r64_m32         
  addl $0x4, %ecx             #  32    0x49  3      OPC=addl_r32_imm8          nop                         #  33    0x3d  1      OPC=nop                  
  movl %edx, %edx             #  33    0x4c  2      OPC=movl_r32_r32           nop                         #  34    0x3e  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           nop                         #  35    0x3f  1      OPC=nop                  
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32         .L_126820:                    #        0x40  0      OPC=<label>              
  notl %r9d                   #  36    0x55  3      OPC=notl_r32               addl $0x4, %edx             #  36    0x40  3      OPC=addl_r32_imm8        
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m16           movl %ecx, %ecx             #  37    0x43  2      OPC=movl_r32_r32         
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         movl %r8d, (%r15,%rcx,1)    #  38    0x45  4      OPC=movl_m32_r32         
  andl $0x40, %r9d            #  39    0x62  7      OPC=andl_r32_imm32         movl %edx, %edx             #  39    0x49  2      OPC=movl_r32_r32_1       
  je .L_126820                #  40    0x69  6      OPC=je_label_1             movl (%r15,%rdx,1), %r8d    #  40    0x4b  4      OPC=movl_r32_m32         
  nop                         #  41    0x6f  1      OPC=nop                    movl %r8d, %r9d             #  41    0x4f  3      OPC=movl_r32_r32_1       
  nop                         #  42    0x70  1      OPC=nop                    notl %r9d                   #  42    0x52  3      OPC=notl_r32             
  nop                         #  43    0x71  1      OPC=nop                    leaw -0x1010101(%r8), %si   #  43    0x55  8      OPC=leaw_r16_m32         
  nop                         #  44    0x72  1      OPC=nop                    andl %esi, %r9d             #  44    0x5d  3      OPC=andl_r32_r32_1       
  nop                         #  45    0x73  1      OPC=nop                    addl $0x4, %ecx             #  45    0x60  3      OPC=addl_r32_imm8        
  nop                         #  46    0x74  1      OPC=nop                    andl $0x40, %r9d            #  46    0x63  7      OPC=andl_r32_imm32       
  nop                         #  47    0x75  1      OPC=nop                    je .L_126820                #  47    0x6a  6      OPC=je_label_1           
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                         #  56    0x7e  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  57    0x79  1      OPC=nop                  
  movl %edx, %edx             #  57    0x7f  2      OPC=movl_r32_r32           nop                         #  58    0x7a  1      OPC=nop                  
  movzbq (%r15,%rdx,1), %rsi  #  58    0x81  5      OPC=movzbq_r64_m8          nop                         #  59    0x7b  1      OPC=nop                  
  addl $0x1, %edx             #  59    0x86  3      OPC=addl_r32_imm8          nop                         #  60    0x7c  1      OPC=nop                  
  movl %ecx, %ecx             #  60    0x89  2      OPC=movl_r32_r32           nop                         #  61    0x7d  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  61    0x8b  4      OPC=movb_m8_r8             nop                         #  62    0x7e  1      OPC=nop                  
  addl $0x1, %ecx             #  62    0x8f  3      OPC=addl_r32_imm8          nop                         #  63    0x7f  1      OPC=nop                  
  testb %sil, %dil            #  63    0x92  3      OPC=testb_r8_r8          .L_126860:                    #        0x80  0      OPC=<label>              
  jne .L_126860               #  64    0x95  6      OPC=jne_label_1            nop                         #  64    0x80  1      OPC=nop                  
  nop                         #  65    0x9b  1      OPC=nop                    movl %edx, %edx             #  65    0x81  2      OPC=movl_r32_r32         
  nop                         #  66    0x9c  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  66    0x83  5      OPC=movsbq_r64_m8        
  nop                         #  67    0x9d  1      OPC=nop                    addl $0x1, %edx             #  67    0x88  3      OPC=addl_r32_imm8        
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x8b  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    movl %ecx, %ecx             #  69    0x8c  2      OPC=movl_r32_r32         
  popq %r11                   #  70    0xa0  2      OPC=popq_r64_1             movb %sil, (%r15,%rcx,1)    #  70    0x8e  4      OPC=movb_m8_r8           
  andl $0xe0, %r11d           #  71    0xa2  4      OPC=andl_r32_imm8          nop                         #  71    0x92  1      OPC=nop                  
  addq %r15, %r11             #  72    0xa6  3      OPC=addq_r64_r64           nop                         #  72    0x93  1      OPC=nop                  
  jmpq %r11                   #  73    0xa9  3      OPC=jmpq_r64               addl $0x1, %ecx             #  73    0x94  3      OPC=addl_r32_imm8        
                                                                               andl %edi, %esi             #  74    0x97  2      OPC=andl_r32_r32         
.size strcpy, .-strcpy                                                         nop                         #  75    0x99  1      OPC=nop                  
                                                                               jne .L_126860               #  76    0x9a  6      OPC=jne_label_1          
                                                                               nop                         #  77    0xa0  1      OPC=nop                  
                                                                               nop                         #  78    0xa1  1      OPC=nop                  
                                                                               nop                         #  79    0xa2  1      OPC=nop                  
                                                                               popq %r11                   #  80    0xa3  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  81    0xa5  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  82    0xa9  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  83    0xac  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (68)                                                  Lowest Known Correct Cost (69)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64         
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x3   1      OPC=nop                  
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  nop                         #  4     0x3   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                         #  5     0x4   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  movl %edi, %eax             #  6     0x5   2      OPC=movl_r32_r32           nop                         #  6     0x7   1      OPC=nop                  
  movq %rsi, %rdx             #  7     0x7   3      OPC=movq_r64_r64           nop                         #  7     0x8   1      OPC=nop                  
  movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64_1         movl %edi, %eax             #  8     0x9   2      OPC=movl_r32_r32         
  nop                         #  9     0xd   1      OPC=nop                    nop                         #  9     0xb   1      OPC=nop                  
  andl $0x3, %edi             #  10    0xe   3      OPC=andl_r32_imm8          movq %rax, %rcx             #  10    0xc   3      OPC=movq_r64_r64_1       
  jne .L_126860               #  11    0x11  6      OPC=jne_label_1            andl $0x3, %edi             #  11    0xf   3      OPC=andl_r32_imm8        
  movl %edx, %esi             #  12    0x17  2      OPC=movl_r32_r32           jne .L_126860               #  12    0x12  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32           nop                         #  13    0x18  1      OPC=nop                  
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           movl %edx, %esi             #  14    0x19  2      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           movl (%r15,%rsi,1), %r8d    #  15    0x1b  4      OPC=movl_r32_m32         
  notl %esi                   #  16    0x27  2      OPC=notl_r32               nop                         #  16    0x1f  1      OPC=nop                  
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           nop                         #  17    0x20  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2b  6      OPC=andl_r32_imm32         nop                         #  18    0x21  1      OPC=nop                  
  jne .L_126860               #  19    0x31  6      OPC=jne_label_1            nop                         #  19    0x22  1      OPC=nop                  
  nop                         #  20    0x37  1      OPC=nop                    testb %sil, %dil            #  20    0x23  3      OPC=testb_r8_r8          
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                         #  23    0x3a  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x2a  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x2b  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x2c  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x2d  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                jne .L_126860               #  29    0x2e  6      OPC=jne_label_1          
  addl $0x4, %edx             #  29    0x40  3      OPC=addl_r32_imm8          nop                         #  30    0x34  1      OPC=nop                  
  movl %ecx, %ecx             #  30    0x43  2      OPC=movl_r32_r32           leaq -0x1010101(%r8), %rdi  #  31    0x35  7      OPC=leaq_r64_m32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x45  4      OPC=movl_m32_r32           nop                         #  32    0x3c  1      OPC=nop                  
  addl $0x4, %ecx             #  32    0x49  3      OPC=addl_r32_imm8          nop                         #  33    0x3d  1      OPC=nop                  
  movl %edx, %edx             #  33    0x4c  2      OPC=movl_r32_r32           nop                         #  34    0x3e  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           nop                         #  35    0x3f  1      OPC=nop                  
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32         .L_126820:                    #        0x40  0      OPC=<label>              
  notl %r9d                   #  36    0x55  3      OPC=notl_r32               addl $0x4, %edx             #  36    0x40  3      OPC=addl_r32_imm8        
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m16           movl %ecx, %ecx             #  37    0x43  2      OPC=movl_r32_r32         
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         movl %r8d, (%r15,%rcx,1)    #  38    0x45  4      OPC=movl_m32_r32         
  andl $0x40, %r9d            #  39    0x62  7      OPC=andl_r32_imm32         movl %edx, %edx             #  39    0x49  2      OPC=movl_r32_r32_1       
  je .L_126820                #  40    0x69  6      OPC=je_label_1             movl (%r15,%rdx,1), %r8d    #  40    0x4b  4      OPC=movl_r32_m32         
  nop                         #  41    0x6f  1      OPC=nop                    movl %r8d, %r9d             #  41    0x4f  3      OPC=movl_r32_r32_1       
  nop                         #  42    0x70  1      OPC=nop                    notl %r9d                   #  42    0x52  3      OPC=notl_r32             
  nop                         #  43    0x71  1      OPC=nop                    leaw -0x1010101(%r8), %si   #  43    0x55  8      OPC=leaw_r16_m32         
  nop                         #  44    0x72  1      OPC=nop                    andl %esi, %r9d             #  44    0x5d  3      OPC=andl_r32_r32_1       
  nop                         #  45    0x73  1      OPC=nop                    addl $0x4, %ecx             #  45    0x60  3      OPC=addl_r32_imm8        
  nop                         #  46    0x74  1      OPC=nop                    andl $0x40, %r9d            #  46    0x63  7      OPC=andl_r32_imm32       
  nop                         #  47    0x75  1      OPC=nop                    je .L_126820                #  47    0x6a  6      OPC=je_label_1           
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                         #  56    0x7e  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  57    0x79  1      OPC=nop                  
  movl %edx, %edx             #  57    0x7f  2      OPC=movl_r32_r32           nop                         #  58    0x7a  1      OPC=nop                  
  movzbq (%r15,%rdx,1), %rsi  #  58    0x81  5      OPC=movzbq_r64_m8          nop                         #  59    0x7b  1      OPC=nop                  
  addl $0x1, %edx             #  59    0x86  3      OPC=addl_r32_imm8          nop                         #  60    0x7c  1      OPC=nop                  
  movl %ecx, %ecx             #  60    0x89  2      OPC=movl_r32_r32           nop                         #  61    0x7d  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  61    0x8b  4      OPC=movb_m8_r8             nop                         #  62    0x7e  1      OPC=nop                  
  addl $0x1, %ecx             #  62    0x8f  3      OPC=addl_r32_imm8          nop                         #  63    0x7f  1      OPC=nop                  
  testb %sil, %dil            #  63    0x92  3      OPC=testb_r8_r8          .L_126860:                    #        0x80  0      OPC=<label>              
  jne .L_126860               #  64    0x95  6      OPC=jne_label_1            nop                         #  64    0x80  1      OPC=nop                  
  nop                         #  65    0x9b  1      OPC=nop                    movl %edx, %edx             #  65    0x81  2      OPC=movl_r32_r32         
  nop                         #  66    0x9c  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  66    0x83  5      OPC=movsbq_r64_m8        
  nop                         #  67    0x9d  1      OPC=nop                    addl $0x1, %edx             #  67    0x88  3      OPC=addl_r32_imm8        
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x8b  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    movl %ecx, %ecx             #  69    0x8c  2      OPC=movl_r32_r32         
  popq %r11                   #  70    0xa0  2      OPC=popq_r64_1             movb %sil, (%r15,%rcx,1)    #  70    0x8e  4      OPC=movb_m8_r8           
  andl $0xe0, %r11d           #  71    0xa2  4      OPC=andl_r32_imm8          nop                         #  71    0x92  1      OPC=nop                  
  addq %r15, %r11             #  72    0xa6  3      OPC=addq_r64_r64           nop                         #  72    0x93  1      OPC=nop                  
  jmpq %r11                   #  73    0xa9  3      OPC=jmpq_r64               addl $0x1, %ecx             #  73    0x94  3      OPC=addl_r32_imm8        
                                                                               andl %edi, %esi             #  74    0x97  2      OPC=andl_r32_r32         
.size strcpy, .-strcpy                                                         nop                         #  75    0x99  1      OPC=nop                  
                                                                               jne .L_126860               #  76    0x9a  6      OPC=jne_label_1          
                                                                               nop                         #  77    0xa0  1      OPC=nop                  
                                                                               nop                         #  78    0xa1  1      OPC=nop                  
                                                                               nop                         #  79    0xa2  1      OPC=nop                  
                                                                               popq %r11                   #  80    0xa3  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  81    0xa5  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  82    0xa9  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  83    0xac  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (67)                                                  Lowest Known Correct Cost (69)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64         
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x3   1      OPC=nop                  
  nop                         #  3     0x4   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  nop                         #  4     0x5   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                         #  5     0x6   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                         #  6     0x7   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                         #  7     0x8   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                         #  8     0x9   1      OPC=nop                    movl %edi, %eax             #  8     0x9   2      OPC=movl_r32_r32         
  nop                         #  9     0xa   1      OPC=nop                    nop                         #  9     0xb   1      OPC=nop                  
  nop                         #  10    0xb   1      OPC=nop                    movq %rax, %rcx             #  10    0xc   3      OPC=movq_r64_r64_1       
  nop                         #  11    0xc   1      OPC=nop                    andl $0x3, %edi             #  11    0xf   3      OPC=andl_r32_imm8        
  nop                         #  12    0xd   1      OPC=nop                    jne .L_126860               #  12    0x12  6      OPC=jne_label_1          
  nop                         #  13    0xe   1      OPC=nop                    nop                         #  13    0x18  1      OPC=nop                  
  nopl %eax                   #  14    0xf   3      OPC=nopl_r32               movl %edx, %esi             #  14    0x19  2      OPC=movl_r32_r32         
  movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32           movl (%r15,%rsi,1), %r8d    #  15    0x1b  4      OPC=movl_r32_m32         
  movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1         nop                         #  16    0x1f  1      OPC=nop                  
  andl $0x3, %edi             #  17    0x17  3      OPC=andl_r32_imm8          nop                         #  17    0x20  1      OPC=nop                  
  jne .L_126860               #  18    0x1a  6      OPC=jne_label_1            nop                         #  18    0x21  1      OPC=nop                  
  movl %edx, %esi             #  19    0x20  2      OPC=movl_r32_r32           nop                         #  19    0x22  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  20    0x22  4      OPC=movl_r32_m32           testb %sil, %dil            #  20    0x23  3      OPC=testb_r8_r8          
  nop                         #  21    0x26  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                         #  22    0x27  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                         #  23    0x28  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                         #  24    0x29  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  nop                         #  25    0x2a  1      OPC=nop                    nop                         #  25    0x2a  1      OPC=nop                  
  nop                         #  26    0x2b  1      OPC=nop                    nop                         #  26    0x2b  1      OPC=nop                  
  nop                         #  27    0x2c  1      OPC=nop                    nop                         #  27    0x2c  1      OPC=nop                  
  nop                         #  28    0x2d  1      OPC=nop                    nop                         #  28    0x2d  1      OPC=nop                  
  nop                         #  29    0x2e  1      OPC=nop                    jne .L_126860               #  29    0x2e  6      OPC=jne_label_1          
  nop                         #  30    0x2f  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                         #  31    0x30  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  31    0x35  7      OPC=leaq_r64_m32         
  jne .L_126860               #  32    0x31  6      OPC=jne_label_1            nop                         #  32    0x3c  1      OPC=nop                  
  nop                         #  33    0x37  1      OPC=nop                    nop                         #  33    0x3d  1      OPC=nop                  
  nop                         #  34    0x38  1      OPC=nop                    nop                         #  34    0x3e  1      OPC=nop                  
  nop                         #  35    0x39  1      OPC=nop                    nop                         #  35    0x3f  1      OPC=nop                  
  nop                         #  36    0x3a  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  37    0x3b  1      OPC=nop                    addl $0x4, %edx             #  36    0x40  3      OPC=addl_r32_imm8        
  nop                         #  38    0x3c  1      OPC=nop                    movl %ecx, %ecx             #  37    0x43  2      OPC=movl_r32_r32         
  nop                         #  39    0x3d  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  38    0x45  4      OPC=movl_m32_r32         
  nop                         #  40    0x3e  1      OPC=nop                    movl %edx, %edx             #  39    0x49  2      OPC=movl_r32_r32_1       
  nop                         #  41    0x3f  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  40    0x4b  4      OPC=movl_r32_m32         
.L_126820:                    #        0x40  0      OPC=<label>                movl %r8d, %r9d             #  41    0x4f  3      OPC=movl_r32_r32_1       
  addl $0x4, %edx             #  42    0x40  3      OPC=addl_r32_imm8          notl %r9d                   #  42    0x52  3      OPC=notl_r32             
  movl %ecx, %ecx             #  43    0x43  2      OPC=movl_r32_r32           leaw -0x1010101(%r8), %si   #  43    0x55  8      OPC=leaw_r16_m32         
  movl %r8d, (%r15,%rcx,1)    #  44    0x45  4      OPC=movl_m32_r32           andl %esi, %r9d             #  44    0x5d  3      OPC=andl_r32_r32_1       
  movl %edx, %edx             #  45    0x49  2      OPC=movl_r32_r32_1         addl $0x4, %ecx             #  45    0x60  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  46    0x4b  4      OPC=movl_r32_m32           andl $0x40, %r9d            #  46    0x63  7      OPC=andl_r32_imm32       
  movl %r8d, %r9d             #  47    0x4f  3      OPC=movl_r32_r32_1         je .L_126820                #  47    0x6a  6      OPC=je_label_1           
  notl %r9d                   #  48    0x52  3      OPC=notl_r32               nop                         #  48    0x70  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  49    0x55  7      OPC=leal_r32_m16           nop                         #  49    0x71  1      OPC=nop                  
  andl %esi, %r9d             #  50    0x5c  3      OPC=andl_r32_r32           nop                         #  50    0x72  1      OPC=nop                  
  addl $0x4, %ecx             #  51    0x5f  3      OPC=addl_r32_imm8          nop                         #  51    0x73  1      OPC=nop                  
  andl $0x40, %r9d            #  52    0x62  7      OPC=andl_r32_imm32         nop                         #  52    0x74  1      OPC=nop                  
  je .L_126820                #  53    0x69  6      OPC=je_label_1             nop                         #  53    0x75  1      OPC=nop                  
  nop                         #  54    0x6f  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                         #  55    0x70  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                         #  56    0x71  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                         #  57    0x72  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                         #  58    0x73  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                         #  59    0x74  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                         #  60    0x75  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                         #  61    0x76  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                         #  62    0x77  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                         #  63    0x78  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
  nop                         #  64    0x79  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  65    0x7a  1      OPC=nop                    nop                         #  64    0x80  1      OPC=nop                  
  nop                         #  66    0x7b  1      OPC=nop                    movl %edx, %edx             #  65    0x81  2      OPC=movl_r32_r32         
  nop                         #  67    0x7c  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  66    0x83  5      OPC=movsbq_r64_m8        
  nop                         #  68    0x7d  1      OPC=nop                    addl $0x1, %edx             #  67    0x88  3      OPC=addl_r32_imm8        
  nop                         #  69    0x7e  1      OPC=nop                    nop                         #  68    0x8b  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                movl %ecx, %ecx             #  69    0x8c  2      OPC=movl_r32_r32         
  nop                         #  70    0x7f  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  70    0x8e  4      OPC=movb_m8_r8           
  nop                         #  71    0x80  1      OPC=nop                    nop                         #  71    0x92  1      OPC=nop                  
  movl %edx, %edx             #  72    0x81  2      OPC=movl_r32_r32           nop                         #  72    0x93  1      OPC=nop                  
  movsbq (%r15,%rdx,1), %rsi  #  73    0x83  5      OPC=movsbq_r64_m8          addl $0x1, %ecx             #  73    0x94  3      OPC=addl_r32_imm8        
  addl $0x1, %edx             #  74    0x88  3      OPC=addl_r32_imm8          andl %edi, %esi             #  74    0x97  2      OPC=andl_r32_r32         
  movl %ecx, %ecx             #  75    0x8b  2      OPC=movl_r32_r32           nop                         #  75    0x99  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  76    0x8d  4      OPC=movb_m8_r8             jne .L_126860               #  76    0x9a  6      OPC=jne_label_1          
  nop                         #  77    0x91  1      OPC=nop                    nop                         #  77    0xa0  1      OPC=nop                  
  addl $0x1, %ecx             #  78    0x92  3      OPC=addl_r32_imm8          nop                         #  78    0xa1  1      OPC=nop                  
  andl %ecx, %esi             #  79    0x95  2      OPC=andl_r32_r32           nop                         #  79    0xa2  1      OPC=nop                  
  nop                         #  80    0x97  1      OPC=nop                    popq %r11                   #  80    0xa3  2      OPC=popq_r64_1           
  nop                         #  81    0x98  1      OPC=nop                    andl $0xe0, %r11d           #  81    0xa5  4      OPC=andl_r32_imm8        
  jne .L_126860               #  82    0x99  6      OPC=jne_label_1            addq %r15, %r11             #  82    0xa9  3      OPC=addq_r64_r64         
  nop                         #  83    0x9f  1      OPC=nop                    jmpq %r11                   #  83    0xac  3      OPC=jmpq_r64             
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  popq %r11                   #  85    0xa1  2      OPC=popq_r64_1           .size strcpy, .-strcpy                                                       
  andl $0xe0, %r11d           #  86    0xa3  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  87    0xa7  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  88    0xaa  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (67)                                                  Lowest Known Correct Cost (67)                                               
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x4   1      OPC=nop                    movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  nop                         #  4     0x5   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                         #  5     0x6   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                         #  6     0x7   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                         #  7     0x8   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                         #  8     0x9   1      OPC=nop                    nop                         #  8     0x9   1      OPC=nop                  
  nop                         #  9     0xa   1      OPC=nop                    nop                         #  9     0xa   1      OPC=nop                  
  nop                         #  10    0xb   1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  nop                         #  11    0xc   1      OPC=nop                    nop                         #  11    0xc   1      OPC=nop                  
  nop                         #  12    0xd   1      OPC=nop                    nop                         #  12    0xd   1      OPC=nop                  
  nop                         #  13    0xe   1      OPC=nop                    nop                         #  13    0xe   1      OPC=nop                  
  nopl %eax                   #  14    0xf   3      OPC=nopl_r32               testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32           movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1         movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  andl $0x3, %edi             #  17    0x17  3      OPC=andl_r32_imm8          nop                         #  17    0x17  1      OPC=nop                  
  jne .L_126860               #  18    0x1a  6      OPC=jne_label_1            nop                         #  18    0x18  1      OPC=nop                  
  movl %edx, %esi             #  19    0x20  2      OPC=movl_r32_r32           jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d    #  20    0x22  4      OPC=movl_r32_m32           nop                         #  20    0x1f  1      OPC=nop                  
  nop                         #  21    0x26  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                         #  22    0x27  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  nop                         #  23    0x28  1      OPC=nop                    nop                         #  23    0x26  1      OPC=nop                  
  nop                         #  24    0x29  1      OPC=nop                    nop                         #  24    0x27  1      OPC=nop                  
  nop                         #  25    0x2a  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  nop                         #  26    0x2b  1      OPC=nop                    nop                         #  26    0x29  1      OPC=nop                  
  nop                         #  27    0x2c  1      OPC=nop                    nop                         #  27    0x2a  1      OPC=nop                  
  nop                         #  28    0x2d  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                         #  29    0x2e  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                         #  30    0x2f  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                         #  31    0x30  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  jne .L_126860               #  32    0x31  6      OPC=jne_label_1            nop                         #  32    0x2f  1      OPC=nop                  
  nop                         #  33    0x37  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  nop                         #  34    0x38  1      OPC=nop                    jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                         #  35    0x39  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                         #  38    0x3c  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                         #  39    0x3d  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  40    0x3c  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  42    0x3e  1      OPC=nop                  
  addl $0x4, %edx             #  42    0x40  3      OPC=addl_r32_imm8          nop                         #  43    0x3f  1      OPC=nop                  
  movl %ecx, %ecx             #  43    0x43  2      OPC=movl_r32_r32         .L_126820:                    #        0x40  0      OPC=<label>              
  movl %r8d, (%r15,%rcx,1)    #  44    0x45  4      OPC=movl_m32_r32           addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
  movl %edx, %edx             #  45    0x49  2      OPC=movl_r32_r32_1         movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  46    0x4b  4      OPC=movl_r32_m32           movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movl %r8d, %r9d             #  47    0x4f  3      OPC=movl_r32_r32_1         movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  notl %r9d                   #  48    0x52  3      OPC=notl_r32               movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %esi  #  49    0x55  7      OPC=leal_r32_m16           movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  andl %esi, %r9d             #  50    0x5c  3      OPC=andl_r32_r32           notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  addl $0x4, %ecx             #  51    0x5f  3      OPC=addl_r32_imm8          leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  andl $0x40, %r9d            #  52    0x62  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  je .L_126820                #  53    0x69  6      OPC=je_label_1             addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  nop                         #  54    0x6f  1      OPC=nop                    andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  nop                         #  55    0x70  1      OPC=nop                    je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  nop                         #  56    0x71  1      OPC=nop                    nop                         #  56    0x70  1      OPC=nop                  
  nop                         #  57    0x72  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                         #  58    0x73  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  nop                         #  59    0x74  1      OPC=nop                    nop                         #  59    0x73  1      OPC=nop                  
  nop                         #  60    0x75  1      OPC=nop                    nop                         #  60    0x74  1      OPC=nop                  
  nop                         #  61    0x76  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                         #  62    0x77  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                         #  63    0x78  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                         #  64    0x79  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                         #  65    0x7a  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                         #  66    0x7b  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                         #  67    0x7c  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                         #  68    0x7d  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
  nop                         #  69    0x7e  1      OPC=nop                    nop                         #  69    0x7d  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  70    0x7e  1      OPC=nop                  
  nop                         #  70    0x7f  1      OPC=nop                    nop                         #  71    0x7f  1      OPC=nop                  
  nop                         #  71    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  movl %edx, %edx             #  72    0x81  2      OPC=movl_r32_r32           nop                         #  72    0x80  1      OPC=nop                  
  movsbq (%r15,%rdx,1), %rsi  #  73    0x83  5      OPC=movsbq_r64_m8          nop                         #  73    0x81  1      OPC=nop                  
  addl $0x1, %edx             #  74    0x88  3      OPC=addl_r32_imm8          movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  movl %ecx, %ecx             #  75    0x8b  2      OPC=movl_r32_r32           movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  movb %sil, (%r15,%rcx,1)    #  76    0x8d  4      OPC=movb_m8_r8             addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  nop                         #  77    0x91  1      OPC=nop                    movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  78    0x92  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  andl %ecx, %esi             #  79    0x95  2      OPC=andl_r32_r32           addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  nop                         #  80    0x97  1      OPC=nop                    andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  nop                         #  81    0x98  1      OPC=nop                    nop                         #  81    0x97  1      OPC=nop                  
  jne .L_126860               #  82    0x99  6      OPC=jne_label_1            jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  nop                         #  83    0x9f  1      OPC=nop                    nop                         #  83    0x9e  1      OPC=nop                  
  nop                         #  84    0xa0  1      OPC=nop                    nop                         #  84    0x9f  1      OPC=nop                  
  popq %r11                   #  85    0xa1  2      OPC=popq_r64_1             popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  86    0xa3  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  87    0xa7  3      OPC=addq_r64_r64           addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  jmpq %r11                   #  88    0xaa  3      OPC=jmpq_r64               jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (66)                                                    Lowest Known Correct Cost (67)                                               
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rdi, %rax               #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  testb %sil, %dil              #  2     0x3   3      OPC=testb_r8_r8            nop                         #  2     0x1   1      OPC=nop                  
  movq %rsi, %rdx               #  3     0x6   3      OPC=movq_r64_r64           movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  movl %eax, %ecx               #  4     0x9   2      OPC=movl_r32_r32_1         nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0xb   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0xc   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                           #  7     0xd   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                           #  8     0xe   1      OPC=nop                    nop                         #  8     0x9   1      OPC=nop                  
  jne .L_126860                 #  9     0xf   6      OPC=jne_label_1            nop                         #  9     0xa   1      OPC=nop                  
  nop                           #  10    0x15  1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  nop                           #  11    0x16  1      OPC=nop                    nop                         #  11    0xc   1      OPC=nop                  
  nop                           #  12    0x17  1      OPC=nop                    nop                         #  12    0xd   1      OPC=nop                  
  nop                           #  13    0x18  1      OPC=nop                    nop                         #  13    0xe   1      OPC=nop                  
  nop                           #  14    0x19  1      OPC=nop                    testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  nop                           #  15    0x1a  1      OPC=nop                    movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  nop                           #  16    0x1b  1      OPC=nop                    movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  nop                           #  17    0x1c  1      OPC=nop                    nop                         #  17    0x17  1      OPC=nop                  
  nop                           #  18    0x1d  1      OPC=nop                    nop                         #  18    0x18  1      OPC=nop                  
  nop                           #  19    0x1e  1      OPC=nop                    jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  nop                           #  20    0x1f  1      OPC=nop                    nop                         #  20    0x1f  1      OPC=nop                  
  nop                           #  21    0x20  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                           #  22    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  nop                           #  23    0x22  1      OPC=nop                    nop                         #  23    0x26  1      OPC=nop                  
  nop                           #  24    0x23  1      OPC=nop                    nop                         #  24    0x27  1      OPC=nop                  
  movl %esi, %esi               #  25    0x24  2      OPC=movl_r32_r32           nop                         #  25    0x28  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  26    0x26  4      OPC=movl_r32_m32           nop                         #  26    0x29  1      OPC=nop                  
  nop                           #  27    0x2a  1      OPC=nop                    nop                         #  27    0x2a  1      OPC=nop                  
  nop                           #  28    0x2b  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                           #  29    0x2c  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  shll $0xfe, %ecx              #  30    0x2d  3      OPC=shll_r32_imm8          nop                         #  30    0x2d  1      OPC=nop                  
  nop                           #  31    0x30  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x31  1      OPC=nop                    nop                         #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x32  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  jne .L_126860                 #  34    0x33  6      OPC=jne_label_1            jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                           #  35    0x39  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                           #  36    0x3a  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                           #  37    0x3b  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                           #  38    0x3c  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                           #  39    0x3d  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  nop                           #  40    0x3e  1      OPC=nop                    nop                         #  40    0x3c  1      OPC=nop                  
  nop                           #  41    0x3f  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>                nop                         #  42    0x3e  1      OPC=nop                  
  orl %edi, %ecx                #  42    0x40  2      OPC=orl_r32_r32            nop                         #  43    0x3f  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)      #  43    0x42  4      OPC=movl_m32_r32         .L_126820:                    #        0x40  0      OPC=<label>              
  addl $0x4, %edx               #  44    0x46  6      OPC=addl_r32_imm32         addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
  movl (%r15,%rdx,1), %r8d      #  45    0x4c  4      OPC=movl_r32_m32           movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  addb $0x4, %cl                #  46    0x50  3      OPC=addb_r8_imm8           movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movq %r8, %r9                 #  47    0x53  3      OPC=movq_r64_r64           movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  48    0x56  7      OPC=leal_r32_m16           movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  notl %r9d                     #  49    0x5d  3      OPC=notl_r32               movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  andl $0xfffffff8, %r9d        #  50    0x60  7      OPC=andl_r32_imm32         notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  nop                           #  51    0x67  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  nop                           #  52    0x68  1      OPC=nop                    andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  nop                           #  53    0x69  1      OPC=nop                    addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  nop                           #  54    0x6a  1      OPC=nop                    andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  nop                           #  55    0x6b  1      OPC=nop                    je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  nop                           #  56    0x6c  1      OPC=nop                    nop                         #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x6d  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x6e  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  andb %sil, %r9b               #  59    0x6f  3      OPC=andb_r8_r8             nop                         #  59    0x73  1      OPC=nop                  
  je .L_126820                  #  60    0x72  6      OPC=je_label_1             nop                         #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                         #  69    0x7d  1      OPC=nop                  
  andl %edx, %edx               #  69    0x80  2      OPC=andl_r32_r32_1         nop                         #  70    0x7e  1      OPC=nop                  
  movsbw (%r15,%rdx,1), %si     #  70    0x82  6      OPC=movsbw_r16_m8          nop                         #  71    0x7f  1      OPC=nop                  
  addq $0x1, %rcx               #  71    0x88  4      OPC=addq_r64_imm8        .L_126860:                    #        0x80  0      OPC=<label>              
  movb %sil, -0x1(%r15,%rcx,1)  #  72    0x8c  5      OPC=movb_m8_r8             nop                         #  72    0x80  1      OPC=nop                  
  nop                           #  73    0x91  1      OPC=nop                    nop                         #  73    0x81  1      OPC=nop                  
  nop                           #  74    0x92  1      OPC=nop                    movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  nop                           #  75    0x93  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  nop                           #  76    0x94  1      OPC=nop                    addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  nop                           #  77    0x95  1      OPC=nop                    movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  nop                           #  78    0x96  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  nop                           #  79    0x97  1      OPC=nop                    addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  nop                           #  80    0x98  1      OPC=nop                    andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  nop                           #  81    0x99  1      OPC=nop                    nop                         #  81    0x97  1      OPC=nop                  
  nop                           #  82    0x9a  1      OPC=nop                    jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  nop                           #  83    0x9b  1      OPC=nop                    nop                         #  83    0x9e  1      OPC=nop                  
  nop                           #  84    0x9c  1      OPC=nop                    nop                         #  84    0x9f  1      OPC=nop                  
  addl $0x1, %edx               #  85    0x9d  3      OPC=addl_r32_imm8          popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  nop                           #  86    0xa0  1      OPC=nop                    andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  nop                           #  87    0xa1  1      OPC=nop                    addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  nop                           #  88    0xa2  1      OPC=nop                    jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
  nop                           #  89    0xa3  1      OPC=nop                                                                                               
  nop                           #  90    0xa4  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  andw %cx, %si                 #  91    0xa5  3      OPC=andw_r16_r16                                                                                      
  jne .L_126860                 #  92    0xa8  6      OPC=jne_label_1                                                                                       
  popq %r11                     #  93    0xae  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  94    0xb0  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  95    0xb4  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  96    0xb7  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (65)                                                    Lowest Known Correct Cost (67)                                               
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %ecx               #  1     0     2      OPC=movl_r32_r32           nop                         #  1     0     1      OPC=nop                  
  nop                           #  2     0x2   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  movq %rsi, %rdx               #  3     0x3   3      OPC=movq_r64_r64           movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  nop                           #  4     0x6   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x7   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                           #  7     0x9   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                           #  8     0xa   1      OPC=nop                    nop                         #  8     0x9   1      OPC=nop                  
  testb %cl, %sil               #  9     0xb   3      OPC=testb_r8_r8            nop                         #  9     0xa   1      OPC=nop                  
  nop                           #  10    0xe   1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  nop                           #  11    0xf   1      OPC=nop                    nop                         #  11    0xc   1      OPC=nop                  
  jne .L_126860                 #  12    0x10  6      OPC=jne_label_1            nop                         #  12    0xd   1      OPC=nop                  
  nop                           #  13    0x16  1      OPC=nop                    nop                         #  13    0xe   1      OPC=nop                  
  nop                           #  14    0x17  1      OPC=nop                    testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  nop                           #  15    0x18  1      OPC=nop                    movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  nop                           #  16    0x19  1      OPC=nop                    movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  nop                           #  17    0x1a  1      OPC=nop                    nop                         #  17    0x17  1      OPC=nop                  
  nop                           #  18    0x1b  1      OPC=nop                    nop                         #  18    0x18  1      OPC=nop                  
  nop                           #  19    0x1c  1      OPC=nop                    jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  nop                           #  20    0x1d  1      OPC=nop                    nop                         #  20    0x1f  1      OPC=nop                  
  nop                           #  21    0x1e  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                           #  22    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  movl %esi, %esi               #  23    0x20  2      OPC=movl_r32_r32           nop                         #  23    0x26  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  24    0x22  4      OPC=movl_r32_m32           nop                         #  24    0x27  1      OPC=nop                  
  nop                           #  25    0x26  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  nop                           #  26    0x27  1      OPC=nop                    nop                         #  26    0x29  1      OPC=nop                  
  nop                           #  27    0x28  1      OPC=nop                    nop                         #  27    0x2a  1      OPC=nop                  
  nop                           #  28    0x29  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                           #  29    0x2a  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                           #  30    0x2b  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                           #  31    0x2c  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x2d  1      OPC=nop                    nop                         #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x2e  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  nop                           #  34    0x2f  1      OPC=nop                    jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                           #  35    0x30  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                           #  36    0x31  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                           #  37    0x32  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                           #  38    0x33  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                           #  39    0x34  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  jne .L_126860                 #  40    0x35  6      OPC=jne_label_1            nop                         #  40    0x3c  1      OPC=nop                  
  nop                           #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
  nop                           #  42    0x3c  1      OPC=nop                    nop                         #  42    0x3e  1      OPC=nop                  
  nop                           #  43    0x3d  1      OPC=nop                    nop                         #  43    0x3f  1      OPC=nop                  
  nop                           #  44    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  45    0x3f  1      OPC=nop                    addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
.L_126820:                      #        0x40  0      OPC=<label>                movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  orl %ecx, %ecx                #  46    0x40  2      OPC=orl_r32_r32            movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)      #  47    0x42  4      OPC=movl_m32_r32           movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  addl $0x4, %edx               #  48    0x46  6      OPC=addl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d      #  49    0x4c  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  addb $0x4, %cl                #  50    0x50  3      OPC=addb_r8_imm8           notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  movq %r8, %r9                 #  51    0x53  3      OPC=movq_r64_r64           leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  notl %r9d                     #  52    0x56  3      OPC=notl_r32               andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  53    0x59  7      OPC=leal_r32_m16           addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  andl $0x80, %esi              #  54    0x60  6      OPC=andl_r32_imm32         andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  andb %sil, %r9b               #  55    0x66  3      OPC=andb_r8_r8             je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  je .L_126820                  #  56    0x69  6      OPC=je_label_1             nop                         #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x6f  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x70  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  nop                           #  59    0x71  1      OPC=nop                    nop                         #  59    0x73  1      OPC=nop                  
  nop                           #  60    0x72  1      OPC=nop                    nop                         #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x73  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x74  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x75  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x76  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x77  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x78  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x79  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7a  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
  nop                           #  69    0x7b  1      OPC=nop                    nop                         #  69    0x7d  1      OPC=nop                  
  nop                           #  70    0x7c  1      OPC=nop                    nop                         #  70    0x7e  1      OPC=nop                  
  nop                           #  71    0x7d  1      OPC=nop                    nop                         #  71    0x7f  1      OPC=nop                  
  nop                           #  72    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                      #        0x7f  0      OPC=<label>                nop                         #  72    0x80  1      OPC=nop                  
  movq %rdi, %rax               #  73    0x7f  3      OPC=movq_r64_r64           nop                         #  73    0x81  1      OPC=nop                  
  nop                           #  74    0x82  1      OPC=nop                    movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  nop                           #  75    0x83  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  nop                           #  76    0x84  1      OPC=nop                    addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  andl %edx, %edx               #  77    0x85  2      OPC=andl_r32_r32           movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  movzbq (%r15,%rdx,1), %rsi    #  78    0x87  5      OPC=movzbq_r64_m8          movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  nop                           #  79    0x8c  1      OPC=nop                    addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  nop                           #  80    0x8d  1      OPC=nop                    andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  addq $0x1, %rcx               #  81    0x8e  4      OPC=addq_r64_imm8          nop                         #  81    0x97  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)  #  82    0x92  5      OPC=movb_m8_r8             jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  nop                           #  83    0x97  1      OPC=nop                    nop                         #  83    0x9e  1      OPC=nop                  
  addl $0x1, %edx               #  84    0x98  3      OPC=addl_r32_imm8          nop                         #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x9b  1      OPC=nop                    popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  nop                           #  86    0x9c  1      OPC=nop                    andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  nop                           #  87    0x9d  1      OPC=nop                    addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  nop                           #  88    0x9e  1      OPC=nop                    jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
  nop                           #  89    0x9f  1      OPC=nop                                                                                               
  nop                           #  90    0xa0  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  91    0xa1  1      OPC=nop                                                                                               
  nop                           #  92    0xa2  1      OPC=nop                                                                                               
  andw %di, %si                 #  93    0xa3  3      OPC=andw_r16_r16                                                                                      
  jne .L_126860                 #  94    0xa6  6      OPC=jne_label_1                                                                                       
  nop                           #  95    0xac  1      OPC=nop                                                                                               
  nop                           #  96    0xad  1      OPC=nop                                                                                               
  nop                           #  97    0xae  1      OPC=nop                                                                                               
  nop                           #  98    0xaf  1      OPC=nop                                                                                               
  nop                           #  99    0xb0  1      OPC=nop                                                                                               
  nop                           #  100   0xb1  1      OPC=nop                                                                                               
  popq %r11                     #  101   0xb2  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  102   0xb4  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  103   0xb8  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  104   0xbb  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (64)                                                    Lowest Known Correct Cost (67)                                               
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %ecx               #  1     0     2      OPC=movl_r32_r32           nop                         #  1     0     1      OPC=nop                  
  nop                           #  2     0x2   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  movq %rsi, %rdx               #  3     0x3   3      OPC=movq_r64_r64           movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  nop                           #  4     0x6   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x7   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                           #  7     0x9   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  testb %cl, %sil               #  8     0xa   3      OPC=testb_r8_r8            nop                         #  8     0x9   1      OPC=nop                  
  nop                           #  9     0xd   1      OPC=nop                    nop                         #  9     0xa   1      OPC=nop                  
  nop                           #  10    0xe   1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  nop                           #  11    0xf   1      OPC=nop                    nop                         #  11    0xc   1      OPC=nop                  
  jne .L_126860                 #  12    0x10  6      OPC=jne_label_1            nop                         #  12    0xd   1      OPC=nop                  
  nop                           #  13    0x16  1      OPC=nop                    nop                         #  13    0xe   1      OPC=nop                  
  nop                           #  14    0x17  1      OPC=nop                    testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  nop                           #  15    0x18  1      OPC=nop                    movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  nop                           #  16    0x19  1      OPC=nop                    movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  nop                           #  17    0x1a  1      OPC=nop                    nop                         #  17    0x17  1      OPC=nop                  
  nop                           #  18    0x1b  1      OPC=nop                    nop                         #  18    0x18  1      OPC=nop                  
  nop                           #  19    0x1c  1      OPC=nop                    jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  nop                           #  20    0x1d  1      OPC=nop                    nop                         #  20    0x1f  1      OPC=nop                  
  nop                           #  21    0x1e  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                           #  22    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  movl %esi, %esi               #  23    0x20  2      OPC=movl_r32_r32           nop                         #  23    0x26  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  24    0x22  4      OPC=movl_r32_m32           nop                         #  24    0x27  1      OPC=nop                  
  nop                           #  25    0x26  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  nop                           #  26    0x27  1      OPC=nop                    nop                         #  26    0x29  1      OPC=nop                  
  nop                           #  27    0x28  1      OPC=nop                    nop                         #  27    0x2a  1      OPC=nop                  
  nop                           #  28    0x29  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                           #  29    0x2a  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                           #  30    0x2b  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                           #  31    0x2c  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x2d  1      OPC=nop                    nop                         #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x2e  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  nop                           #  34    0x2f  1      OPC=nop                    jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                           #  35    0x30  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                           #  36    0x31  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                           #  37    0x32  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                           #  38    0x33  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                           #  39    0x34  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  jne .L_126860                 #  40    0x35  6      OPC=jne_label_1            nop                         #  40    0x3c  1      OPC=nop                  
  nop                           #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
  nop                           #  42    0x3c  1      OPC=nop                    nop                         #  42    0x3e  1      OPC=nop                  
  nop                           #  43    0x3d  1      OPC=nop                    nop                         #  43    0x3f  1      OPC=nop                  
  nop                           #  44    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  45    0x3f  1      OPC=nop                    addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
.L_126820:                      #        0x40  0      OPC=<label>                movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  orl %ecx, %ecx                #  46    0x40  2      OPC=orl_r32_r32            movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)      #  47    0x42  4      OPC=movl_m32_r32           movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  addl $0x4, %edx               #  48    0x46  6      OPC=addl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d      #  49    0x4c  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  addb $0x4, %cl                #  50    0x50  3      OPC=addb_r8_imm8           notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  movq %r8, %r9                 #  51    0x53  3      OPC=movq_r64_r64           leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  notl %r9d                     #  52    0x56  3      OPC=notl_r32               andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  53    0x59  7      OPC=leal_r32_m16           addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  andl $0x80, %esi              #  54    0x60  6      OPC=andl_r32_imm32         andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  andb %sil, %r9b               #  55    0x66  3      OPC=andb_r8_r8             je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  je .L_126820                  #  56    0x69  6      OPC=je_label_1             nop                         #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x6f  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x70  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  nop                           #  59    0x71  1      OPC=nop                    nop                         #  59    0x73  1      OPC=nop                  
  nop                           #  60    0x72  1      OPC=nop                    nop                         #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x73  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x74  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x75  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x76  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x77  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x78  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x79  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7a  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
  nop                           #  69    0x7b  1      OPC=nop                    nop                         #  69    0x7d  1      OPC=nop                  
  nop                           #  70    0x7c  1      OPC=nop                    nop                         #  70    0x7e  1      OPC=nop                  
  nop                           #  71    0x7d  1      OPC=nop                    nop                         #  71    0x7f  1      OPC=nop                  
  nop                           #  72    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                           #  73    0x7f  1      OPC=nop                    nop                         #  72    0x80  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                         #  73    0x81  1      OPC=nop                  
  movq %rdi, %rax               #  74    0x80  3      OPC=movq_r64_r64           movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  nop                           #  75    0x83  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  nop                           #  76    0x84  1      OPC=nop                    addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  nop                           #  77    0x85  1      OPC=nop                    movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  nop                           #  78    0x86  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  andl %edx, %edx               #  79    0x87  2      OPC=andl_r32_r32_1         addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi    #  80    0x89  5      OPC=movzbq_r64_m8          andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  nop                           #  81    0x8e  1      OPC=nop                    nop                         #  81    0x97  1      OPC=nop                  
  nop                           #  82    0x8f  1      OPC=nop                    jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  addq $0x1, %rcx               #  83    0x90  4      OPC=addq_r64_imm8          nop                         #  83    0x9e  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)  #  84    0x94  5      OPC=movb_m8_r8             nop                         #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x99  1      OPC=nop                    popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  addl $0x1, %edx               #  86    0x9a  3      OPC=addl_r32_imm8          andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  nop                           #  87    0x9d  1      OPC=nop                    addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  nop                           #  88    0x9e  1      OPC=nop                    jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
  nop                           #  89    0x9f  1      OPC=nop                                                                                               
  nop                           #  90    0xa0  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  91    0xa1  1      OPC=nop                                                                                               
  nop                           #  92    0xa2  1      OPC=nop                                                                                               
  nop                           #  93    0xa3  1      OPC=nop                                                                                               
  nop                           #  94    0xa4  1      OPC=nop                                                                                               
  andw %di, %si                 #  95    0xa5  3      OPC=andw_r16_r16                                                                                      
  jne .L_126860                 #  96    0xa8  6      OPC=jne_label_1                                                                                       
  nop                           #  97    0xae  1      OPC=nop                                                                                               
  nop                           #  98    0xaf  1      OPC=nop                                                                                               
  nop                           #  99    0xb0  1      OPC=nop                                                                                               
  nop                           #  100   0xb1  1      OPC=nop                                                                                               
  nop                           #  101   0xb2  1      OPC=nop                                                                                               
  nop                           #  102   0xb3  1      OPC=nop                                                                                               
  popq %r11                     #  103   0xb4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  104   0xb6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  105   0xba  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  106   0xbd  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (63)                                                    Lowest Known Correct Cost (67)                                               
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  nop                           #  4     0x3   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x5   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  nop                           #  7     0x6   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                           #  8     0x7   1      OPC=nop                    nop                         #  8     0x9   1      OPC=nop                  
  nop                           #  9     0x8   1      OPC=nop                    nop                         #  9     0xa   1      OPC=nop                  
  nop                           #  10    0x9   1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  movl %edi, %ecx               #  11    0xa   2      OPC=movl_r32_r32           nop                         #  11    0xc   1      OPC=nop                  
  nop                           #  12    0xc   1      OPC=nop                    nop                         #  12    0xd   1      OPC=nop                  
  testb %cl, %sil               #  13    0xd   3      OPC=testb_r8_r8            nop                         #  13    0xe   1      OPC=nop                  
  nop                           #  14    0x10  1      OPC=nop                    testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  movq %rsi, %rdx               #  15    0x11  3      OPC=movq_r64_r64           movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  nop                           #  16    0x14  1      OPC=nop                    movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  nop                           #  17    0x15  1      OPC=nop                    nop                         #  17    0x17  1      OPC=nop                  
  jne .L_126860                 #  18    0x16  6      OPC=jne_label_1            nop                         #  18    0x18  1      OPC=nop                  
  nop                           #  19    0x1c  1      OPC=nop                    jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  nop                           #  20    0x1d  1      OPC=nop                    nop                         #  20    0x1f  1      OPC=nop                  
  nop                           #  21    0x1e  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                           #  22    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  nop                           #  23    0x20  1      OPC=nop                    nop                         #  23    0x26  1      OPC=nop                  
  nop                           #  24    0x21  1      OPC=nop                    nop                         #  24    0x27  1      OPC=nop                  
  nop                           #  25    0x22  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  nop                           #  26    0x23  1      OPC=nop                    nop                         #  26    0x29  1      OPC=nop                  
  movl %esi, %esi               #  27    0x24  2      OPC=movl_r32_r32           nop                         #  27    0x2a  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  28    0x26  4      OPC=movl_r32_m32           nop                         #  28    0x2b  1      OPC=nop                  
  nop                           #  29    0x2a  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                           #  30    0x2b  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                           #  31    0x2c  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x2d  1      OPC=nop                    nop                         #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x2e  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  nop                           #  34    0x2f  1      OPC=nop                    jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                           #  35    0x30  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                           #  36    0x31  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                           #  37    0x32  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                           #  38    0x33  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                           #  39    0x34  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  jne .L_126860                 #  40    0x35  6      OPC=jne_label_1            nop                         #  40    0x3c  1      OPC=nop                  
  nop                           #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
  nop                           #  42    0x3c  1      OPC=nop                    nop                         #  42    0x3e  1      OPC=nop                  
  nop                           #  43    0x3d  1      OPC=nop                    nop                         #  43    0x3f  1      OPC=nop                  
  nop                           #  44    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  45    0x3f  1      OPC=nop                    addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
.L_126820:                      #        0x40  0      OPC=<label>                movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  orl %ecx, %ecx                #  46    0x40  2      OPC=orl_r32_r32            movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)      #  47    0x42  4      OPC=movl_m32_r32           movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  addl $0x4, %edx               #  48    0x46  6      OPC=addl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d      #  49    0x4c  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  addb $0x4, %cl                #  50    0x50  3      OPC=addb_r8_imm8           notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  movq %r8, %r9                 #  51    0x53  3      OPC=movq_r64_r64           leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  notl %r9d                     #  52    0x56  3      OPC=notl_r32               andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  leaq -0x1010101(%r8), %rsi    #  53    0x59  7      OPC=leaq_r64_m32           addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  andl $0x80, %esi              #  54    0x60  6      OPC=andl_r32_imm32         andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  andb %sil, %r9b               #  55    0x66  3      OPC=andb_r8_r8             je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  je .L_126820                  #  56    0x69  6      OPC=je_label_1             nop                         #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x6f  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x70  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  nop                           #  59    0x71  1      OPC=nop                    nop                         #  59    0x73  1      OPC=nop                  
  nop                           #  60    0x72  1      OPC=nop                    nop                         #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x73  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x74  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x75  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x76  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x77  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x78  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x79  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7a  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
  nop                           #  69    0x7b  1      OPC=nop                    nop                         #  69    0x7d  1      OPC=nop                  
  nop                           #  70    0x7c  1      OPC=nop                    nop                         #  70    0x7e  1      OPC=nop                  
  nop                           #  71    0x7d  1      OPC=nop                    nop                         #  71    0x7f  1      OPC=nop                  
  nop                           #  72    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                           #  73    0x7f  1      OPC=nop                    nop                         #  72    0x80  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                         #  73    0x81  1      OPC=nop                  
  movq %rdi, %rax               #  74    0x80  3      OPC=movq_r64_r64           movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  nop                           #  75    0x83  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  andl %edx, %edx               #  76    0x84  2      OPC=andl_r32_r32_1         addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi    #  77    0x86  5      OPC=movzbq_r64_m8          movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  addq $0x1, %rcx               #  78    0x8b  4      OPC=addq_r64_imm8          movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)  #  79    0x8f  5      OPC=movb_m8_r8             addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  nop                           #  80    0x94  1      OPC=nop                    andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  addl $0x1, %edx               #  81    0x95  3      OPC=addl_r32_imm8          nop                         #  81    0x97  1      OPC=nop                  
  nop                           #  82    0x98  1      OPC=nop                    jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  nop                           #  83    0x99  1      OPC=nop                    nop                         #  83    0x9e  1      OPC=nop                  
  nop                           #  84    0x9a  1      OPC=nop                    nop                         #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x9b  1      OPC=nop                    popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  nop                           #  86    0x9c  1      OPC=nop                    andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  nop                           #  87    0x9d  1      OPC=nop                    addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  nop                           #  88    0x9e  1      OPC=nop                    jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
  nop                           #  89    0x9f  1      OPC=nop                                                                                               
  nop                           #  90    0xa0  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  91    0xa1  1      OPC=nop                                                                                               
  nop                           #  92    0xa2  1      OPC=nop                                                                                               
  nop                           #  93    0xa3  1      OPC=nop                                                                                               
  nop                           #  94    0xa4  1      OPC=nop                                                                                               
  andw %di, %si                 #  95    0xa5  3      OPC=andw_r16_r16                                                                                      
  jne .L_126860                 #  96    0xa8  6      OPC=jne_label_1                                                                                       
  nop                           #  97    0xae  1      OPC=nop                                                                                               
  nop                           #  98    0xaf  1      OPC=nop                                                                                               
  nop                           #  99    0xb0  1      OPC=nop                                                                                               
  nop                           #  100   0xb1  1      OPC=nop                                                                                               
  nop                           #  101   0xb2  1      OPC=nop                                                                                               
  nop                           #  102   0xb3  1      OPC=nop                                                                                               
  popq %r11                     #  103   0xb4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  104   0xb6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  105   0xba  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  106   0xbd  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (62)                                                    Lowest Known Correct Cost (67)                                               
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    movq %rsi, %rdx             #  3     0x2   3      OPC=movq_r64_r64         
  nop                           #  4     0x3   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  movq %rdi, %rax               #  6     0x5   3      OPC=movq_r64_r64           nop                         #  6     0x7   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                           #  8     0x9   1      OPC=nop                    nop                         #  8     0x9   1      OPC=nop                  
  testb %dil, %sil              #  9     0xa   3      OPC=testb_r8_r8            nop                         #  9     0xa   1      OPC=nop                  
  nop                           #  10    0xd   1      OPC=nop                    nop                         #  10    0xb   1      OPC=nop                  
  nop                           #  11    0xe   1      OPC=nop                    nop                         #  11    0xc   1      OPC=nop                  
  movl %eax, %ecx               #  12    0xf   2      OPC=movl_r32_r32_1         nop                         #  12    0xd   1      OPC=nop                  
  nop                           #  13    0x11  1      OPC=nop                    nop                         #  13    0xe   1      OPC=nop                  
  nop                           #  14    0x12  1      OPC=nop                    testb %dl, %dil             #  14    0xf   3      OPC=testb_r8_r8          
  nop                           #  15    0x13  1      OPC=nop                    movl %edi, %eax             #  15    0x12  2      OPC=movl_r32_r32         
  movq %rsi, %rdx               #  16    0x14  3      OPC=movq_r64_r64_1         movq %rdi, %rcx             #  16    0x14  3      OPC=movq_r64_r64_1       
  jne .L_126860                 #  17    0x17  6      OPC=jne_label_1            nop                         #  17    0x17  1      OPC=nop                  
  nop                           #  18    0x1d  1      OPC=nop                    nop                         #  18    0x18  1      OPC=nop                  
  nop                           #  19    0x1e  1      OPC=nop                    jne .L_126860               #  19    0x19  6      OPC=jne_label_1          
  nop                           #  20    0x1f  1      OPC=nop                    nop                         #  20    0x1f  1      OPC=nop                  
  nop                           #  21    0x20  1      OPC=nop                    movl %edx, %esi             #  21    0x20  2      OPC=movl_r32_r32         
  nop                           #  22    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  22    0x22  4      OPC=movl_r32_m32         
  nop                           #  23    0x22  1      OPC=nop                    nop                         #  23    0x26  1      OPC=nop                  
  nop                           #  24    0x23  1      OPC=nop                    nop                         #  24    0x27  1      OPC=nop                  
  nop                           #  25    0x24  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  movl %edx, %esi               #  26    0x25  2      OPC=movl_r32_r32_1         nop                         #  26    0x29  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  27    0x27  4      OPC=movl_r32_m32           nop                         #  27    0x2a  1      OPC=nop                  
  nop                           #  28    0x2b  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                           #  29    0x2c  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                           #  30    0x2d  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                           #  31    0x2e  1      OPC=nop                    nop                         #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x2f  1      OPC=nop                    nop                         #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x30  1      OPC=nop                    nop                         #  33    0x30  1      OPC=nop                  
  nop                           #  34    0x31  1      OPC=nop                    jne .L_126860               #  34    0x31  6      OPC=jne_label_1          
  nop                           #  35    0x32  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                           #  36    0x33  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                           #  37    0x34  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                           #  38    0x35  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                           #  39    0x36  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  nop                           #  40    0x37  1      OPC=nop                    nop                         #  40    0x3c  1      OPC=nop                  
  nop                           #  41    0x38  1      OPC=nop                    nop                         #  41    0x3d  1      OPC=nop                  
  nop                           #  42    0x39  1      OPC=nop                    nop                         #  42    0x3e  1      OPC=nop                  
  jne .L_126860                 #  43    0x3a  6      OPC=jne_label_1            nop                         #  43    0x3f  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  andl %ecx, %ecx               #  44    0x40  2      OPC=andl_r32_r32           addq $0x4, %rdx             #  44    0x40  4      OPC=addq_r64_imm8        
  movl %r8d, (%r15,%rcx,1)      #  45    0x42  4      OPC=movl_m32_r32           movl %ecx, %ecx             #  45    0x44  2      OPC=movl_r32_r32         
  addl $0x4, %edx               #  46    0x46  6      OPC=addl_r32_imm32         movl %r8d, (%r15,%rcx,1)    #  46    0x46  4      OPC=movl_m32_r32         
  movl (%r15,%rdx,1), %r8d      #  47    0x4c  4      OPC=movl_r32_m32           movl %edx, %edx             #  47    0x4a  2      OPC=movl_r32_r32_1       
  movq %r8, %r9                 #  48    0x50  3      OPC=movq_r64_r64_1         movl (%r15,%rdx,1), %r8d    #  48    0x4c  4      OPC=movl_r32_m32         
  addb $0x4, %cl                #  49    0x53  3      OPC=addb_r8_imm8           movl %r8d, %r9d             #  49    0x50  3      OPC=movl_r32_r32_1       
  notb %r9b                     #  50    0x56  3      OPC=notb_r8                notl %r9d                   #  50    0x53  3      OPC=notl_r32             
  leal -0x1010101(%r8), %esi    #  51    0x59  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %esi  #  51    0x56  7      OPC=leal_r32_m16         
  andl $0xfffffffc, %r9d        #  52    0x60  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  52    0x5d  3      OPC=andl_r32_r32_1       
  andb %sil, %r9b               #  53    0x67  3      OPC=andb_r8_r8             addl $0x4, %ecx             #  53    0x60  3      OPC=addl_r32_imm8        
  je .L_126820                  #  54    0x6a  6      OPC=je_label_1             andl $0x40, %r9d            #  54    0x63  7      OPC=andl_r32_imm32       
  nop                           #  55    0x70  1      OPC=nop                    je .L_126820                #  55    0x6a  6      OPC=je_label_1           
  nop                           #  56    0x71  1      OPC=nop                    nop                         #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x72  1      OPC=nop                    nop                         #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x73  1      OPC=nop                    nop                         #  58    0x72  1      OPC=nop                  
  nop                           #  59    0x74  1      OPC=nop                    nop                         #  59    0x73  1      OPC=nop                  
  nop                           #  60    0x75  1      OPC=nop                    nop                         #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x76  1      OPC=nop                    nop                         #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x77  1      OPC=nop                    nop                         #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x78  1      OPC=nop                    nop                         #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x79  1      OPC=nop                    nop                         #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x7a  1      OPC=nop                    nop                         #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x7b  1      OPC=nop                    nop                         #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x7c  1      OPC=nop                    nop                         #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7d  1      OPC=nop                    nop                         #  68    0x7c  1      OPC=nop                  
  nop                           #  69    0x7e  1      OPC=nop                    nop                         #  69    0x7d  1      OPC=nop                  
  nop                           #  70    0x7f  1      OPC=nop                    nop                         #  70    0x7e  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                         #  71    0x7f  1      OPC=nop                  
  movl %edx, %edx               #  71    0x80  2      OPC=movl_r32_r32_1       .L_126860:                    #        0x80  0      OPC=<label>              
  movzbq (%r15,%rdx,1), %rsi    #  72    0x82  5      OPC=movzbq_r64_m8          nop                         #  72    0x80  1      OPC=nop                  
  addq $0x1, %rcx               #  73    0x87  4      OPC=addq_r64_imm8          nop                         #  73    0x81  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8b  5      OPC=movb_m8_r8             movl %edx, %edx             #  74    0x82  2      OPC=movl_r32_r32         
  nop                           #  75    0x90  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  75    0x84  5      OPC=movsbq_r64_m8        
  nop                           #  76    0x91  1      OPC=nop                    addl $0x1, %edx             #  76    0x89  3      OPC=addl_r32_imm8        
  nop                           #  77    0x92  1      OPC=nop                    movl %ecx, %ecx             #  77    0x8c  2      OPC=movl_r32_r32         
  nop                           #  78    0x93  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  78    0x8e  4      OPC=movb_m8_r8           
  nop                           #  79    0x94  1      OPC=nop                    addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8        
  nop                           #  80    0x95  1      OPC=nop                    andl %ecx, %esi             #  80    0x95  2      OPC=andl_r32_r32         
  nop                           #  81    0x96  1      OPC=nop                    nop                         #  81    0x97  1      OPC=nop                  
  nop                           #  82    0x97  1      OPC=nop                    jne .L_126860               #  82    0x98  6      OPC=jne_label_1          
  nop                           #  83    0x98  1      OPC=nop                    nop                         #  83    0x9e  1      OPC=nop                  
  nop                           #  84    0x99  1      OPC=nop                    nop                         #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x9a  1      OPC=nop                    popq %r11                   #  85    0xa0  2      OPC=popq_r64_1           
  nop                           #  86    0x9b  1      OPC=nop                    andl $0xe0, %r11d           #  86    0xa2  4      OPC=andl_r32_imm8        
  nop                           #  87    0x9c  1      OPC=nop                    addq %r15, %r11             #  87    0xa6  3      OPC=addq_r64_r64         
  addl $0x1, %edx               #  88    0x9d  3      OPC=addl_r32_imm8          jmpq %r11                   #  88    0xa9  3      OPC=jmpq_r64             
  andw %ax, %si                 #  89    0xa0  3      OPC=andw_r16_r16                                                                                      
  jne .L_126860                 #  90    0xa3  6      OPC=jne_label_1          .size strcpy, .-strcpy                                                       
  nopl %eax                     #  91    0xa9  3      OPC=nopl_r32                                                                                          
  nop                           #  92    0xac  1      OPC=nop                                                                                               
  nop                           #  93    0xad  1      OPC=nop                                                                                               
  nop                           #  94    0xae  1      OPC=nop                                                                                               
  nop                           #  95    0xaf  1      OPC=nop                                                                                               
  nop                           #  96    0xb0  1      OPC=nop                                                                                               
  nop                           #  97    0xb1  1      OPC=nop                                                                                               
  nop                           #  98    0xb2  1      OPC=nop                                                                                               
  nop                           #  99    0xb3  1      OPC=nop                                                                                               
  popq %r11                     #  100   0xb4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  101   0xb6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  102   0xba  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  103   0xbd  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (62)                                                    Lowest Known Correct Cost (63)                                                 
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  movq %rdi, %rax               #  6     0x5   3      OPC=movq_r64_r64           nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x9   1      OPC=nop                    testb %dil, %sil              #  8     0x7   3      OPC=testb_r8_r8          
  testb %dil, %sil              #  9     0xa   3      OPC=testb_r8_r8            movl %edi, %eax               #  9     0xa   2      OPC=movl_r32_r32_1       
  nop                           #  10    0xd   1      OPC=nop                    movl %eax, %ecx               #  10    0xc   2      OPC=movl_r32_r32_1       
  nop                           #  11    0xe   1      OPC=nop                    nop                           #  11    0xe   1      OPC=nop                  
  movl %eax, %ecx               #  12    0xf   2      OPC=movl_r32_r32_1         nop                           #  12    0xf   1      OPC=nop                  
  nop                           #  13    0x11  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                           #  14    0x12  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                           #  15    0x13  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  movq %rsi, %rdx               #  16    0x14  3      OPC=movq_r64_r64_1         nop                           #  16    0x13  1      OPC=nop                  
  jne .L_126860                 #  17    0x17  6      OPC=jne_label_1            movq %rsi, %rdx               #  17    0x14  3      OPC=movq_r64_r64         
  nop                           #  18    0x1d  1      OPC=nop                    nop                           #  18    0x17  1      OPC=nop                  
  nop                           #  19    0x1e  1      OPC=nop                    nop                           #  19    0x18  1      OPC=nop                  
  nop                           #  20    0x1f  1      OPC=nop                    jne .L_126860                 #  20    0x19  6      OPC=jne_label_1          
  nop                           #  21    0x20  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                           #  22    0x21  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                           #  23    0x22  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                           #  24    0x23  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                           #  25    0x24  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  movl %edx, %esi               #  26    0x25  2      OPC=movl_r32_r32_1         nop                           #  26    0x24  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  27    0x27  4      OPC=movl_r32_m32           nop                           #  27    0x25  1      OPC=nop                  
  nop                           #  28    0x2b  1      OPC=nop                    movl %edx, %esi               #  28    0x26  2      OPC=movl_r32_r32_1       
  nop                           #  29    0x2c  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  29    0x28  4      OPC=movl_r32_m32         
  nop                           #  30    0x2d  1      OPC=nop                    movb %ch, %ch                 #  30    0x2c  2      OPC=movb_rh_rh_1         
  nop                           #  31    0x2e  1      OPC=nop                    nop                           #  31    0x2e  1      OPC=nop                  
  nop                           #  32    0x2f  1      OPC=nop                    nop                           #  32    0x2f  1      OPC=nop                  
  nop                           #  33    0x30  1      OPC=nop                    nop                           #  33    0x30  1      OPC=nop                  
  nop                           #  34    0x31  1      OPC=nop                    nop                           #  34    0x31  1      OPC=nop                  
  nop                           #  35    0x32  1      OPC=nop                    nop                           #  35    0x32  1      OPC=nop                  
  nop                           #  36    0x33  1      OPC=nop                    nop                           #  36    0x33  1      OPC=nop                  
  nop                           #  37    0x34  1      OPC=nop                    nop                           #  37    0x34  1      OPC=nop                  
  nop                           #  38    0x35  1      OPC=nop                    nop                           #  38    0x35  1      OPC=nop                  
  nop                           #  39    0x36  1      OPC=nop                    nop                           #  39    0x36  1      OPC=nop                  
  nop                           #  40    0x37  1      OPC=nop                    nop                           #  40    0x37  1      OPC=nop                  
  nop                           #  41    0x38  1      OPC=nop                    nop                           #  41    0x38  1      OPC=nop                  
  nop                           #  42    0x39  1      OPC=nop                    jne .L_126860                 #  42    0x39  6      OPC=jne_label_1          
  jne .L_126860                 #  43    0x3a  6      OPC=jne_label_1            nop                           #  43    0x3f  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  andl %ecx, %ecx               #  44    0x40  2      OPC=andl_r32_r32           andl %ecx, %ecx               #  44    0x40  2      OPC=andl_r32_r32         
  movl %r8d, (%r15,%rcx,1)      #  45    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  45    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  46    0x46  6      OPC=addl_r32_imm32         addl $0x4, %edx               #  46    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d      #  47    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  47    0x4c  4      OPC=movl_r32_m32         
  movq %r8, %r9                 #  48    0x50  3      OPC=movq_r64_r64_1         leal -0x1010101(%r8), %esi    #  48    0x50  7      OPC=leal_r32_m64         
  addb $0x4, %cl                #  49    0x53  3      OPC=addb_r8_imm8           movq %r8, %r9                 #  49    0x57  3      OPC=movq_r64_r64_1       
  notb %r9b                     #  50    0x56  3      OPC=notb_r8                addb $0x4, %cl                #  50    0x5a  3      OPC=addb_r8_imm8         
  leal -0x1010101(%r8), %esi    #  51    0x59  7      OPC=leal_r32_m16           notb %r9b                     #  51    0x5d  3      OPC=notb_r8              
  andl $0xfffffffc, %r9d        #  52    0x60  7      OPC=andl_r32_imm32         andb %sil, %r9b               #  52    0x60  3      OPC=andb_r8_r8           
  andb %sil, %r9b               #  53    0x67  3      OPC=andb_r8_r8             andl $0x4, %r9d               #  53    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                  #  54    0x6a  6      OPC=je_label_1             je .L_126820                  #  54    0x6a  6      OPC=je_label_1           
  nop                           #  55    0x70  1      OPC=nop                    nop                           #  55    0x70  1      OPC=nop                  
  nop                           #  56    0x71  1      OPC=nop                    nop                           #  56    0x71  1      OPC=nop                  
  nop                           #  57    0x72  1      OPC=nop                    nop                           #  57    0x72  1      OPC=nop                  
  nop                           #  58    0x73  1      OPC=nop                    nop                           #  58    0x73  1      OPC=nop                  
  nop                           #  59    0x74  1      OPC=nop                    nop                           #  59    0x74  1      OPC=nop                  
  nop                           #  60    0x75  1      OPC=nop                    nop                           #  60    0x75  1      OPC=nop                  
  nop                           #  61    0x76  1      OPC=nop                    nop                           #  61    0x76  1      OPC=nop                  
  nop                           #  62    0x77  1      OPC=nop                    nop                           #  62    0x77  1      OPC=nop                  
  nop                           #  63    0x78  1      OPC=nop                    nop                           #  63    0x78  1      OPC=nop                  
  nop                           #  64    0x79  1      OPC=nop                    nop                           #  64    0x79  1      OPC=nop                  
  nop                           #  65    0x7a  1      OPC=nop                    nop                           #  65    0x7a  1      OPC=nop                  
  nop                           #  66    0x7b  1      OPC=nop                    nopl %eax                     #  66    0x7b  3      OPC=nopl_r32             
  nop                           #  67    0x7c  1      OPC=nop                    nop                           #  67    0x7e  1      OPC=nop                  
  nop                           #  68    0x7d  1      OPC=nop                    nop                           #  68    0x7f  1      OPC=nop                  
  nop                           #  69    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                           #  70    0x7f  1      OPC=nop                    nop                           #  69    0x80  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                           #  70    0x81  1      OPC=nop                  
  movl %edx, %edx               #  71    0x80  2      OPC=movl_r32_r32_1         nop                           #  71    0x82  1      OPC=nop                  
  movzbq (%r15,%rdx,1), %rsi    #  72    0x82  5      OPC=movzbq_r64_m8          nop                           #  72    0x83  1      OPC=nop                  
  addq $0x1, %rcx               #  73    0x87  4      OPC=addq_r64_imm8          nop                           #  73    0x84  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8b  5      OPC=movb_m8_r8             nop                           #  74    0x85  1      OPC=nop                  
  nop                           #  75    0x90  1      OPC=nop                    movl %edx, %edx               #  75    0x86  2      OPC=movl_r32_r32_1       
  nop                           #  76    0x91  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  76    0x88  5      OPC=movsbl_r32_m8        
  nop                           #  77    0x92  1      OPC=nop                    addl $0x1, %ecx               #  77    0x8d  6      OPC=addl_r32_imm32       
  nop                           #  78    0x93  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  78    0x93  5      OPC=movb_m8_r8           
  nop                           #  79    0x94  1      OPC=nop                    nop                           #  79    0x98  1      OPC=nop                  
  nop                           #  80    0x95  1      OPC=nop                    addl $0x1, %edx               #  80    0x99  3      OPC=addl_r32_imm8        
  nop                           #  81    0x96  1      OPC=nop                    nop                           #  81    0x9c  1      OPC=nop                  
  nop                           #  82    0x97  1      OPC=nop                    nop                           #  82    0x9d  1      OPC=nop                  
  nop                           #  83    0x98  1      OPC=nop                    nop                           #  83    0x9e  1      OPC=nop                  
  nop                           #  84    0x99  1      OPC=nop                    nop                           #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x9a  1      OPC=nop                    andq %rdx, %rsi               #  85    0xa0  3      OPC=andq_r64_r64         
  nop                           #  86    0x9b  1      OPC=nop                    nop                           #  86    0xa3  1      OPC=nop                  
  nop                           #  87    0x9c  1      OPC=nop                    nop                           #  87    0xa4  1      OPC=nop                  
  addl $0x1, %edx               #  88    0x9d  3      OPC=addl_r32_imm8          nop                           #  88    0xa5  1      OPC=nop                  
  andw %ax, %si                 #  89    0xa0  3      OPC=andw_r16_r16           nop                           #  89    0xa6  1      OPC=nop                  
  jne .L_126860                 #  90    0xa3  6      OPC=jne_label_1            nop                           #  90    0xa7  1      OPC=nop                  
  nopl %eax                     #  91    0xa9  3      OPC=nopl_r32               nop                           #  91    0xa8  1      OPC=nop                  
  nop                           #  92    0xac  1      OPC=nop                    nop                           #  92    0xa9  1      OPC=nop                  
  nop                           #  93    0xad  1      OPC=nop                    nop                           #  93    0xaa  1      OPC=nop                  
  nop                           #  94    0xae  1      OPC=nop                    jne .L_126860                 #  94    0xab  6      OPC=jne_label_1          
  nop                           #  95    0xaf  1      OPC=nop                    nop                           #  95    0xb1  1      OPC=nop                  
  nop                           #  96    0xb0  1      OPC=nop                    nop                           #  96    0xb2  1      OPC=nop                  
  nop                           #  97    0xb1  1      OPC=nop                    popq %r11                     #  97    0xb3  2      OPC=popq_r64_1           
  nop                           #  98    0xb2  1      OPC=nop                    andl $0xe0, %r11d             #  98    0xb5  4      OPC=andl_r32_imm8        
  nop                           #  99    0xb3  1      OPC=nop                    addq %r15, %r11               #  99    0xb9  3      OPC=addq_r64_r64         
  popq %r11                     #  100   0xb4  2      OPC=popq_r64_1             jmpq %r11                     #  100   0xbc  3      OPC=jmpq_r64             
  andl $0xe0, %r11d             #  101   0xb6  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11               #  102   0xba  3      OPC=addq_r64_r64         .size strcpy, .-strcpy                                                         
  jmpq %r11                     #  103   0xbd  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                              
.size strcpy, .-strcpy                                                                                                                                        
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (62)                                                    Lowest Known Correct Cost (62)                                                 
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  movq %rdi, %rax               #  6     0x5   3      OPC=movq_r64_r64           nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x9   1      OPC=nop                    testb %dil, %sil              #  8     0x7   3      OPC=testb_r8_r8          
  testb %dil, %sil              #  9     0xa   3      OPC=testb_r8_r8            movl %edi, %eax               #  9     0xa   2      OPC=movl_r32_r32_1       
  nop                           #  10    0xd   1      OPC=nop                    movl %eax, %ecx               #  10    0xc   2      OPC=movl_r32_r32_1       
  nop                           #  11    0xe   1      OPC=nop                    nop                           #  11    0xe   1      OPC=nop                  
  movl %eax, %ecx               #  12    0xf   2      OPC=movl_r32_r32_1         nop                           #  12    0xf   1      OPC=nop                  
  nop                           #  13    0x11  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                           #  14    0x12  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                           #  15    0x13  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  movq %rsi, %rdx               #  16    0x14  3      OPC=movq_r64_r64_1         nop                           #  16    0x13  1      OPC=nop                  
  jne .L_126860                 #  17    0x17  6      OPC=jne_label_1            nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1d  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                           #  19    0x1e  1      OPC=nop                    nop                           #  19    0x18  1      OPC=nop                  
  nop                           #  20    0x1f  1      OPC=nop                    nop                           #  20    0x19  1      OPC=nop                  
  nop                           #  21    0x20  1      OPC=nop                    jne .L_126860                 #  21    0x1a  6      OPC=jne_label_1          
  nop                           #  22    0x21  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                           #  23    0x22  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                           #  24    0x23  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                           #  25    0x24  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  movl %edx, %esi               #  26    0x25  2      OPC=movl_r32_r32_1         nop                           #  26    0x24  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  27    0x27  4      OPC=movl_r32_m32           nop                           #  27    0x25  1      OPC=nop                  
  nop                           #  28    0x2b  1      OPC=nop                    nop                           #  28    0x26  1      OPC=nop                  
  nop                           #  29    0x2c  1      OPC=nop                    nop                           #  29    0x27  1      OPC=nop                  
  nop                           #  30    0x2d  1      OPC=nop                    movl %edx, %esi               #  30    0x28  2      OPC=movl_r32_r32_1       
  nop                           #  31    0x2e  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  31    0x2a  4      OPC=movl_r32_m32         
  nop                           #  32    0x2f  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                           #  33    0x30  1      OPC=nop                    movb %ch, %ch                 #  33    0x2f  2      OPC=movb_rh_rh_1         
  nop                           #  34    0x31  1      OPC=nop                    nop                           #  34    0x31  1      OPC=nop                  
  nop                           #  35    0x32  1      OPC=nop                    nop                           #  35    0x32  1      OPC=nop                  
  nop                           #  36    0x33  1      OPC=nop                    nop                           #  36    0x33  1      OPC=nop                  
  nop                           #  37    0x34  1      OPC=nop                    nop                           #  37    0x34  1      OPC=nop                  
  nop                           #  38    0x35  1      OPC=nop                    nop                           #  38    0x35  1      OPC=nop                  
  nop                           #  39    0x36  1      OPC=nop                    nop                           #  39    0x36  1      OPC=nop                  
  nop                           #  40    0x37  1      OPC=nop                    nop                           #  40    0x37  1      OPC=nop                  
  nop                           #  41    0x38  1      OPC=nop                    nop                           #  41    0x38  1      OPC=nop                  
  nop                           #  42    0x39  1      OPC=nop                    nop                           #  42    0x39  1      OPC=nop                  
  jne .L_126860                 #  43    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  43    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  andl %ecx, %ecx               #  44    0x40  2      OPC=andl_r32_r32           andl %ecx, %ecx               #  44    0x40  2      OPC=andl_r32_r32         
  movl %r8d, (%r15,%rcx,1)      #  45    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  45    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  46    0x46  6      OPC=addl_r32_imm32         addl $0x4, %edx               #  46    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d      #  47    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  47    0x4c  4      OPC=movl_r32_m32         
  movq %r8, %r9                 #  48    0x50  3      OPC=movq_r64_r64_1         leal -0x1010101(%r8), %esi    #  48    0x50  7      OPC=leal_r32_m64         
  addb $0x4, %cl                #  49    0x53  3      OPC=addb_r8_imm8           addb $0x4, %cl                #  49    0x57  3      OPC=addb_r8_imm8         
  notb %r9b                     #  50    0x56  3      OPC=notb_r8                movq %r8, %r9                 #  50    0x5a  3      OPC=movq_r64_r64_1       
  leal -0x1010101(%r8), %esi    #  51    0x59  7      OPC=leal_r32_m16           notb %r9b                     #  51    0x5d  3      OPC=notb_r8              
  andl $0xfffffffc, %r9d        #  52    0x60  7      OPC=andl_r32_imm32         andb %sil, %r9b               #  52    0x60  3      OPC=andb_r8_r8           
  andb %sil, %r9b               #  53    0x67  3      OPC=andb_r8_r8             andl $0x4, %r9d               #  53    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                  #  54    0x6a  6      OPC=je_label_1             je .L_126820                  #  54    0x6a  6      OPC=je_label_1           
  nop                           #  55    0x70  1      OPC=nop                    nop                           #  55    0x70  1      OPC=nop                  
  nop                           #  56    0x71  1      OPC=nop                    nop                           #  56    0x71  1      OPC=nop                  
  nop                           #  57    0x72  1      OPC=nop                    nop                           #  57    0x72  1      OPC=nop                  
  nop                           #  58    0x73  1      OPC=nop                    nop                           #  58    0x73  1      OPC=nop                  
  nop                           #  59    0x74  1      OPC=nop                    nop                           #  59    0x74  1      OPC=nop                  
  nop                           #  60    0x75  1      OPC=nop                    nop                           #  60    0x75  1      OPC=nop                  
  nop                           #  61    0x76  1      OPC=nop                    nop                           #  61    0x76  1      OPC=nop                  
  nop                           #  62    0x77  1      OPC=nop                    nop                           #  62    0x77  1      OPC=nop                  
  nop                           #  63    0x78  1      OPC=nop                    nop                           #  63    0x78  1      OPC=nop                  
  nop                           #  64    0x79  1      OPC=nop                    nop                           #  64    0x79  1      OPC=nop                  
  nop                           #  65    0x7a  1      OPC=nop                    nop                           #  65    0x7a  1      OPC=nop                  
  nop                           #  66    0x7b  1      OPC=nop                    nop                           #  66    0x7b  1      OPC=nop                  
  nop                           #  67    0x7c  1      OPC=nop                    nopl %eax                     #  67    0x7c  3      OPC=nopl_r32             
  nop                           #  68    0x7d  1      OPC=nop                    nop                           #  68    0x7f  1      OPC=nop                  
  nop                           #  69    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                           #  70    0x7f  1      OPC=nop                    nop                           #  69    0x80  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                           #  70    0x81  1      OPC=nop                  
  movl %edx, %edx               #  71    0x80  2      OPC=movl_r32_r32_1         nop                           #  71    0x82  1      OPC=nop                  
  movzbq (%r15,%rdx,1), %rsi    #  72    0x82  5      OPC=movzbq_r64_m8          nop                           #  72    0x83  1      OPC=nop                  
  addq $0x1, %rcx               #  73    0x87  4      OPC=addq_r64_imm8          nop                           #  73    0x84  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8b  5      OPC=movb_m8_r8             movl %edx, %edx               #  74    0x85  2      OPC=movl_r32_r32_1       
  nop                           #  75    0x90  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  75    0x87  5      OPC=movsbl_r32_m8        
  nop                           #  76    0x91  1      OPC=nop                    addl $0x1, %edx               #  76    0x8c  3      OPC=addl_r32_imm8        
  nop                           #  77    0x92  1      OPC=nop                    addl $0x1, %ecx               #  77    0x8f  6      OPC=addl_r32_imm32       
  nop                           #  78    0x93  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  78    0x95  5      OPC=movb_m8_r8           
  nop                           #  79    0x94  1      OPC=nop                    nop                           #  79    0x9a  1      OPC=nop                  
  nop                           #  80    0x95  1      OPC=nop                    nop                           #  80    0x9b  1      OPC=nop                  
  nop                           #  81    0x96  1      OPC=nop                    nop                           #  81    0x9c  1      OPC=nop                  
  nop                           #  82    0x97  1      OPC=nop                    nop                           #  82    0x9d  1      OPC=nop                  
  nop                           #  83    0x98  1      OPC=nop                    nop                           #  83    0x9e  1      OPC=nop                  
  nop                           #  84    0x99  1      OPC=nop                    nop                           #  84    0x9f  1      OPC=nop                  
  nop                           #  85    0x9a  1      OPC=nop                    andq %rdx, %rsi               #  85    0xa0  3      OPC=andq_r64_r64         
  nop                           #  86    0x9b  1      OPC=nop                    nop                           #  86    0xa3  1      OPC=nop                  
  nop                           #  87    0x9c  1      OPC=nop                    nop                           #  87    0xa4  1      OPC=nop                  
  addl $0x1, %edx               #  88    0x9d  3      OPC=addl_r32_imm8          nop                           #  88    0xa5  1      OPC=nop                  
  andw %ax, %si                 #  89    0xa0  3      OPC=andw_r16_r16           nop                           #  89    0xa6  1      OPC=nop                  
  jne .L_126860                 #  90    0xa3  6      OPC=jne_label_1            nop                           #  90    0xa7  1      OPC=nop                  
  nopl %eax                     #  91    0xa9  3      OPC=nopl_r32               nop                           #  91    0xa8  1      OPC=nop                  
  nop                           #  92    0xac  1      OPC=nop                    nop                           #  92    0xa9  1      OPC=nop                  
  nop                           #  93    0xad  1      OPC=nop                    nop                           #  93    0xaa  1      OPC=nop                  
  nop                           #  94    0xae  1      OPC=nop                    jne .L_126860                 #  94    0xab  6      OPC=jne_label_1          
  nop                           #  95    0xaf  1      OPC=nop                    nop                           #  95    0xb1  1      OPC=nop                  
  nop                           #  96    0xb0  1      OPC=nop                    nop                           #  96    0xb2  1      OPC=nop                  
  nop                           #  97    0xb1  1      OPC=nop                    popq %r11                     #  97    0xb3  2      OPC=popq_r64_1           
  nop                           #  98    0xb2  1      OPC=nop                    andl $0xe0, %r11d             #  98    0xb5  4      OPC=andl_r32_imm8        
  nop                           #  99    0xb3  1      OPC=nop                    addq %r15, %r11               #  99    0xb9  3      OPC=addq_r64_r64         
  popq %r11                     #  100   0xb4  2      OPC=popq_r64_1             jmpq %r11                     #  100   0xbc  3      OPC=jmpq_r64             
  andl $0xe0, %r11d             #  101   0xb6  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11               #  102   0xba  3      OPC=addq_r64_r64         .size strcpy, .-strcpy                                                         
  jmpq %r11                     #  103   0xbd  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                              
.size strcpy, .-strcpy                                                                                                                                        
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (61)                                                    Lowest Known Correct Cost (61)                                                 
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8            testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                           #  3     0x4   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                           #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                           #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                           #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1         movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1         movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  12    0xf   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                           #  13    0x10  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                           #  14    0x11  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                           #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64           movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  jne .L_126860                 #  19    0x18  6      OPC=jne_label_1            jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                           #  22    0x20  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                           #  23    0x21  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                           #  24    0x22  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                           #  25    0x23  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                           #  26    0x24  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1         movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                           #  30    0x2c  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                           #  31    0x2d  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                           #  32    0x2e  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                           #  33    0x2f  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                           #  34    0x30  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                           #  35    0x31  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                           #  36    0x32  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                           #  37    0x33  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                           #  38    0x34  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                           #  39    0x35  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                           #  40    0x36  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                           #  41    0x37  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                           #  42    0x38  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
  nop                           #  43    0x39  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
  jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32           andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32         addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64           leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1         movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  notb %r9b                     #  52    0x5d  3      OPC=notb_r8                notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8             andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32         andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                  #  55    0x6a  6      OPC=je_label_1             je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                           #  56    0x70  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                           #  57    0x71  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                           #  58    0x72  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                           #  59    0x73  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                           #  60    0x74  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                           #  61    0x75  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                           #  62    0x76  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                           #  63    0x77  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                           #  64    0x78  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                           #  65    0x79  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                           #  66    0x7a  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                           #  67    0x7b  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                           #  68    0x7c  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                           #  69    0x7d  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                           #  70    0x7e  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                           #  71    0x7f  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  nop                           #  72    0x80  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                           #  73    0x81  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                           #  74    0x82  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                           #  75    0x83  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
  nop                           #  76    0x84  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                           #  77    0x85  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                           #  78    0x86  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1         movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8          movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8          addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32         addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                           #  84    0x9c  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                           #  85    0x9d  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                           #  86    0x9e  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                           #  87    0x9f  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                           #  88    0xa0  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                           #  89    0xa1  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64           andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                           #  91    0xa5  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                           #  92    0xa6  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                           #  93    0xa7  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                           #  94    0xa8  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                           #  95    0xa9  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                           #  96    0xaa  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  jne .L_126860                 #  97    0xab  6      OPC=jne_label_1            jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                           #  98    0xb1  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                           #  99    0xb2  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  popq %r11                     #  100   0xb3  2      OPC=popq_r64_1             popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64           addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64               jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Statistics Update: 

Iterations:                    100000
Elapsed Time:                  38.7243s
Iterations/s:                  2582.36

Starting cost:                 72
Lowest cost:                   61
Lowest correct cost:           61

Move Type       Proposed     Succeeded     Accepted     
                                                        
Rotate          8.246%       6.805%        3.377%       
Add Nops        8.375%       8.375%        4.603%       
Delete          8.348%       7.503%        4.706%       
OpcodeWidth     8.481%       7.2%          6.714%       
Instruction     8.213%       3.363%        0.12%        
ReplaceNop      8.279%       7.437%        6.416%       
Opcode          8.132%       7.349%        6.614%       
Global Swap     8.513%       6.624%        5.075%       
Operand         8.243%       4.835%        0.856%       
Local Swap      8.389%       4.841%        3.773%       
Global Copy     8.394%       7.429%        7.429%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.387%       4.2%          0.005%       
                                                        
Total           100%         75.961%       49.688%      

********************************************************************************

Progress Update: 

Lowest Cost Discovered (60)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  movl %edi, %ecx                 #  5     0x4   2      OPC=movl_r32_r32           nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x6   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x8   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x9   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  andb %ch, %ch                   #  10    0xa   2      OPC=andb_rh_rh_1           movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  movl %ecx, %eax                 #  11    0xc   2      OPC=movl_r32_r32_1         movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xe   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xf   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x10  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x11  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x12  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x13  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x14  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x15  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x16  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x17  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x18  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x19  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1a  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  movq %rcx, %rdx                 #  25    0x1b  3      OPC=movq_r64_r64_1         nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1e  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1f  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x20  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  andb %sil, %dl                  #  29    0x21  3      OPC=andb_r8_r8             nop                           #  29    0x2b  1      OPC=nop                  
  jne .L_126860                   #  30    0x24  6      OPC=jne_label_1            nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x2a  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x2b  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x2c  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x2d  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x2e  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  movl %edx, %esi                 #  36    0x2f  2      OPC=movl_r32_r32_1         nop                           #  36    0x32  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  37    0x31  4      OPC=movl_r32_m32           nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x35  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x36  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x37  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x38  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x39  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
  nop                             #  43    0x3f  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                             #  44    0x40  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x41  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x42  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x43  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x44  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  orl %ecx, %ecx                  #  49    0x45  2      OPC=orl_r32_r32_1          leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  movl %r8d, (%r15,%rcx,1)        #  50    0x47  4      OPC=movl_m32_r32           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  addq $0x4, %rdx                 #  51    0x4b  4      OPC=addq_r64_imm8          movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  movq (%r15,%rdx,1), %r8         #  52    0x4f  4      OPC=movq_r64_m64           notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  addl $0x4, %ecx                 #  53    0x53  6      OPC=addl_r32_imm32         andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x59  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x5a  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5b  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x5c  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x5d  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x5e  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x5f  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  andl $0x80, %esi                #  61    0x60  6      OPC=andl_r32_imm32         nop                           #  61    0x75  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  62    0x66  8      OPC=leaw_r16_m16           nop                           #  62    0x76  1      OPC=nop                  
  je .L_126820                    #  63    0x6e  6      OPC=je_label_1             nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x74  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x75  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x76  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x77  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x78  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x79  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7a  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7b  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7c  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7d  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7e  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7f  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  76    0x80  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x81  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x82  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x83  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x84  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x85  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x86  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x87  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x88  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x89  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x8a  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  addw $0x1, %dx                  #  87    0x8b  4      OPC=addw_r16_imm8          nop                           #  87    0x9f  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  88    0x8f  6      OPC=movzbl_r32_m8          nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x95  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  addq $0x1, %rcx                 #  90    0x96  4      OPC=addq_r64_imm8          andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  movb %sil, -0x1(%r15,%rcx,1)    #  91    0x9a  5      OPC=movb_m8_r8             nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x9f  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0xa0  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0xa1  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0xa2  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0xa3  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0xa4  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0xa5  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0xa6  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0xa7  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  addl %esp, %esi                 #  101   0xa8  2      OPC=addl_r32_r32           andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0xaa  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  jne .L_126860                   #  103   0xab  6      OPC=jne_label_1            jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0xb1  1      OPC=nop                                                                                                 
  nop                             #  105   0xb2  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  popq %r11                       #  106   0xb3  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  107   0xb5  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  108   0xb9  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  109   0xbc  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (59)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  movl %edi, %ecx                 #  4     0x3   2      OPC=movl_r32_r32           nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x5   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x6   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  andb %ch, %ch                   #  8     0x8   2      OPC=andb_rh_rh_1           nop                           #  8     0x9   1      OPC=nop                  
  movl %ecx, %eax                 #  9     0xa   2      OPC=movl_r32_r32_1         nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xc   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xd   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xe   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xf   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x10  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x11  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x12  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x13  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x14  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x15  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x16  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x17  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x18  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x19  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1a  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  movq %rcx, %rdx                 #  25    0x1b  3      OPC=movq_r64_r64_1         nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1e  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1f  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x20  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  andb %sil, %dl                  #  29    0x21  3      OPC=andb_r8_r8             nop                           #  29    0x2b  1      OPC=nop                  
  jne .L_126860                   #  30    0x24  6      OPC=jne_label_1            nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x2a  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x2b  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x2c  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  movl %edx, %esi                 #  34    0x2d  2      OPC=movl_r32_r32_1         nop                           #  34    0x30  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  35    0x2f  4      OPC=movl_r32_m32           nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x33  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x34  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x35  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x36  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  jne .L_126860                   #  40    0x37  6      OPC=jne_label_1            nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x3d  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                             #  42    0x3e  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
  nop                             #  43    0x3f  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                             #  44    0x40  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x41  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x42  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x43  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x44  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x45  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  orl %ecx, %ecx                  #  50    0x46  2      OPC=orl_r32_r32_1          addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  movl %r8d, (%r15,%rcx,1)        #  51    0x48  4      OPC=movl_m32_r32           movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  addl $0x4, %edx                 #  52    0x4c  6      OPC=addl_r32_imm32         notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  movq (%r15,%rdx,1), %r8         #  53    0x52  4      OPC=movq_r64_m64           andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  addl $0x4, %ecx                 #  54    0x56  6      OPC=addl_r32_imm32         andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x5c  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5d  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x5e  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x5f  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x60  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x61  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x62  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  andl $0x80, %esi                #  62    0x63  6      OPC=andl_r32_imm32         nop                           #  62    0x76  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  63    0x69  8      OPC=leaw_r16_m16           nop                           #  63    0x77  1      OPC=nop                  
  je .L_126820                    #  64    0x71  6      OPC=je_label_1             nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x77  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x78  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x79  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x7a  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x7b  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7c  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7d  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7f  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  74    0x80  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  75    0x81  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  76    0x82  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x83  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x84  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x85  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x86  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x87  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x88  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x89  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x8a  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  addw $0x1, %dx                  #  85    0x8b  4      OPC=addw_r16_imm8          nop                           #  85    0x9d  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  86    0x8f  6      OPC=movzbl_r32_m8          nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x95  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  addq $0x1, %rcx                 #  88    0x96  4      OPC=addq_r64_imm8          nop                           #  88    0xa0  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  89    0x9a  5      OPC=movb_m8_r8             nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x9f  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0xa0  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0xa1  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0xa2  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0xa3  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0xa4  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0xa5  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  addl %esp, %esi                 #  97    0xa6  2      OPC=addl_r32_r32           jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0xa8  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0xa9  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0xaa  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0xab  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  jne .L_126860                   #  102   0xac  6      OPC=jne_label_1            addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                             #  103   0xb2  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0xb3  1      OPC=nop                                                                                                 
  popq %r11                       #  105   0xb4  2      OPC=popq_r64_1           .size strcpy, .-strcpy                                                         
  andl $0xe0, %r11d               #  106   0xb6  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  107   0xba  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  108   0xbd  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (58)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  movl %edi, %eax                 #  8     0x7   2      OPC=movl_r32_r32_1         nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x9   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xa   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xb   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xc   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xd   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xe   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0xf   1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x10  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x11  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  movl %eax, %ecx                 #  18    0x12  2      OPC=movl_r32_r32           movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x14  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x15  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x16  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x17  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x18  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x19  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1a  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  movq %rax, %rdx                 #  26    0x1b  3      OPC=movq_r64_r64           nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1e  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x20  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x21  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x22  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x23  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x24  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x25  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x26  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x27  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x28  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  andb %sil, %dl                  #  38    0x29  3      OPC=andb_r8_r8_1           nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x2c  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x2d  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  jne .L_126860                   #  41    0x2e  6      OPC=jne_label_1            nop                           #  41    0x37  1      OPC=nop                  
  movl %esi, %esi                 #  42    0x34  2      OPC=movl_r32_r32_1         nop                           #  42    0x38  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  43    0x36  4      OPC=movl_r32_m32           nop                           #  43    0x39  1      OPC=nop                  
  jne .L_126860                   #  44    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x40  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x42  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x43  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  orw %cx, %cx                    #  49    0x44  3      OPC=orw_r16_r16            leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  movl %r8d, (%r15,%rcx,1)        #  50    0x47  4      OPC=movl_m32_r32           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  addl $0x4, %edx                 #  51    0x4b  6      OPC=addl_r32_imm32         movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  movq (%r15,%rdx,1), %r8         #  52    0x51  4      OPC=movq_r64_m64           notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  addl $0x4, %ecx                 #  53    0x55  6      OPC=addl_r32_imm32         andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x5b  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x5c  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5d  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x5e  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x5f  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x60  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x61  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x62  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x63  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  andl $0x80, %esi                #  63    0x64  6      OPC=andl_r32_imm32         nop                           #  63    0x77  1      OPC=nop                  
  leaq -0x3(,%rcx,4), %rsi        #  64    0x6a  8      OPC=leaq_r64_m16           nop                           #  64    0x78  1      OPC=nop                  
  je .L_126820                    #  65    0x72  6      OPC=je_label_1             nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x78  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x79  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x7a  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x7b  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7c  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7d  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7f  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  74    0x80  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  addw $0x1, %dx                  #  75    0x81  4      OPC=addw_r16_imm8          nop                           #  75    0x83  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  76    0x85  6      OPC=movzbl_r32_m8          nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x8b  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x8c  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x8d  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x8e  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x8f  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  addq $0x1, %rcx                 #  82    0x90  7      OPC=addq_r64_imm32         addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  movb %sil, -0x1(%r15,%rcx,1)    #  83    0x97  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x9c  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x9d  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x9e  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x9f  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0xa0  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0xa1  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  sall $0xfc, %esi                #  90    0xa2  3      OPC=sall_r32_imm8          andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0xa5  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0xa6  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0xa7  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0xa8  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0xa9  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0xaa  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  jne .L_126860                   #  97    0xab  6      OPC=jne_label_1            jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  popq %r11                       #  98    0xb1  2      OPC=popq_r64_1             nop                           #  98    0xb1  1      OPC=nop                  
  andl $0xe0, %r11d               #  99    0xb3  4      OPC=andl_r32_imm8          nop                           #  99    0xb2  1      OPC=nop                  
  addq %r15, %r11                 #  100   0xb7  3      OPC=addq_r64_r64           popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  jmpq %r11                       #  101   0xba  3      OPC=jmpq_r64               andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
                                                                                   addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                             jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                                
                                                                                 .size strcpy, .-strcpy                                                         
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (57)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x7   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  movl %edi, %eax                 #  9     0x8   2      OPC=movl_r32_r32_1         nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xa   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xb   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  movl %eax, %ecx                 #  12    0xc   2      OPC=movl_r32_r32           nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xf   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x10  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x11  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x12  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x13  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x14  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x15  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x16  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x17  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x18  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x19  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1a  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1b  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  movq %rcx, %rdx                 #  27    0x1c  3      OPC=movq_r64_r64           movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x20  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x21  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x22  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x23  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x24  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x25  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  andb %sil, %dl                  #  35    0x26  3      OPC=andb_r8_r8_1           nop                           #  35    0x31  1      OPC=nop                  
  jne .L_126860                   #  36    0x29  6      OPC=jne_label_1            nop                           #  36    0x32  1      OPC=nop                  
  movl %esi, %esi                 #  37    0x2f  2      OPC=movl_r32_r32           nop                           #  37    0x33  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  38    0x31  4      OPC=movl_r32_m32           nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x35  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x36  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x37  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                             #  42    0x38  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
  jne .L_126860                   #  43    0x39  6      OPC=jne_label_1            nop                           #  43    0x39  1      OPC=nop                  
  nop                             #  44    0x3f  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x40  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x42  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  orw %cx, %cx                    #  48    0x43  3      OPC=orw_r16_r16            movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  movl %r8d, (%r15,%rcx,1)        #  49    0x46  4      OPC=movl_m32_r32           leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  addl $0x4, %edx                 #  50    0x4a  6      OPC=addl_r32_imm32         addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  movq (%r15,%rdx,1), %r8         #  51    0x50  4      OPC=movq_r64_m64           movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  addl $0x4, %ecx                 #  52    0x54  6      OPC=addl_r32_imm32         notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x5a  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x5b  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x5c  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5d  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x5e  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x5f  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x60  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  andl $0x80, %esi                #  60    0x61  6      OPC=andl_r32_imm32         nop                           #  60    0x74  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  61    0x67  8      OPC=leaw_r16_m32           nop                           #  61    0x75  1      OPC=nop                  
  je .L_126820                    #  62    0x6f  6      OPC=je_label_1             nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x75  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x76  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x77  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x78  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x79  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x7a  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x7b  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7c  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7d  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7f  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  73    0x81  1      OPC=nop                  
  addw $0x1, %dx                  #  74    0x80  4      OPC=addw_r16_imm8          nop                           #  74    0x82  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  75    0x84  6      OPC=movsbl_r32_m8          nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  76    0x8a  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x8b  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  addl $0x1, %ecx                 #  78    0x8c  6      OPC=addl_r32_imm32         nop                           #  78    0x86  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  79    0x92  5      OPC=movb_m8_r8             movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x97  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x98  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x99  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x9a  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x9b  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x9c  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x9d  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x9e  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x9f  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0xa0  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0xa1  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0xa2  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  andl $0xfb, %esi                #  92    0xa3  3      OPC=andl_r32_imm8          nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0xa6  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0xa7  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  jne .L_126860                   #  95    0xa8  6      OPC=jne_label_1            nop                           #  95    0xa9  1      OPC=nop                  
  popq %r11                       #  96    0xae  2      OPC=popq_r64_1             nop                           #  96    0xaa  1      OPC=nop                  
  andl $0xe0, %r11d               #  97    0xb0  4      OPC=andl_r32_imm8          jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  addq %r15, %r11                 #  98    0xb4  3      OPC=addq_r64_r64           nop                           #  98    0xb1  1      OPC=nop                  
  jmpq %r11                       #  99    0xb7  3      OPC=jmpq_r64               nop                           #  99    0xb2  1      OPC=nop                  
                                                                                   popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
.size strcpy, .-strcpy                                                             andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
                                                                                   addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
                                                                                   jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                                
                                                                                 .size strcpy, .-strcpy                                                         
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (56)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  movl %edi, %eax                 #  8     0x7   2      OPC=movl_r32_r32_1         nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x9   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  movl %edi, %ecx                 #  10    0xa   2      OPC=movl_r32_r32           movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xf   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x10  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x11  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x12  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x13  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  movq %rcx, %rdx                 #  19    0x14  3      OPC=movq_r64_r64           jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x17  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x18  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x19  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x1a  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1b  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1c  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1d  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1e  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x20  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x21  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x22  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x23  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  andb %sil, %dl                  #  33    0x24  3      OPC=andb_r8_r8_1           nop                           #  33    0x2f  1      OPC=nop                  
  jne .L_126860                   #  34    0x27  6      OPC=jne_label_1            nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x2d  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x2e  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  movl %esi, %esi                 #  37    0x2f  2      OPC=movl_r32_r32           nop                           #  37    0x33  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  38    0x31  4      OPC=movl_r32_m32           nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x35  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x36  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x37  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                             #  42    0x38  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
  nop                             #  43    0x39  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
  jne .L_126860                   #  44    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x40  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x42  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x43  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x44  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  nop                             #  50    0x45  1      OPC=nop                    addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  subw %sp, %cx                   #  51    0x46  3      OPC=subw_r16_r16           movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  movl %r8d, (%r15,%rcx,1)        #  52    0x49  4      OPC=movl_m32_r32           notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  addl $0x4, %edx                 #  53    0x4d  6      OPC=addl_r32_imm32         andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  movq (%r15,%rdx,1), %r8         #  54    0x53  4      OPC=movq_r64_m64           andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  addl $0x4, %ecx                 #  55    0x57  6      OPC=addl_r32_imm32         je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5d  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x5e  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x5f  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x60  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x61  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x62  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  andl $0x80, %esi                #  62    0x63  6      OPC=andl_r32_imm32         nop                           #  62    0x76  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  63    0x69  8      OPC=leaw_r16_m64           nop                           #  63    0x77  1      OPC=nop                  
  je .L_126820                    #  64    0x71  6      OPC=je_label_1             nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x77  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x78  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x79  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x7a  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x7b  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7c  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7d  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7e  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7f  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  73    0x81  1      OPC=nop                  
  addw $0x1, %dx                  #  74    0x80  4      OPC=addw_r16_imm8          nop                           #  74    0x82  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  75    0x84  6      OPC=movzbl_r32_m8          nop                           #  75    0x83  1      OPC=nop                  
  addl $0x1, %ecx                 #  76    0x8a  6      OPC=addl_r32_imm32         nop                           #  76    0x84  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  77    0x90  5      OPC=movb_m8_r8             nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x95  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x96  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x97  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x98  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x99  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x9a  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x9b  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x9c  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x9d  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x9e  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x9f  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0xa0  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  andl $0x2, %esi                 #  90    0xa1  3      OPC=andl_r32_imm8          andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  jne .L_126860                   #  91    0xa4  6      OPC=jne_label_1            nop                           #  91    0xa5  1      OPC=nop                  
  popq %r11                       #  92    0xaa  2      OPC=popq_r64_1             nop                           #  92    0xa6  1      OPC=nop                  
  andl $0xe0, %r11d               #  93    0xac  4      OPC=andl_r32_imm8          nop                           #  93    0xa7  1      OPC=nop                  
  addq %r15, %r11                 #  94    0xb0  3      OPC=addq_r64_r64           nop                           #  94    0xa8  1      OPC=nop                  
  jmpq %r11                       #  95    0xb3  3      OPC=jmpq_r64               nop                           #  95    0xa9  1      OPC=nop                  
                                                                                   nop                           #  96    0xaa  1      OPC=nop                  
.size strcpy, .-strcpy                                                             jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
                                                                                   nop                           #  98    0xb1  1      OPC=nop                  
                                                                                   nop                           #  99    0xb2  1      OPC=nop                  
                                                                                   popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
                                                                                   andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
                                                                                   addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
                                                                                   jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                                
                                                                                 .size strcpy, .-strcpy                                                         
                                                                                                                                                                

********************************************************************************

Statistics Update: 

Iterations:                    200000
Elapsed Time:                  72.0665s
Iterations/s:                  2775.21

Starting cost:                 72
Lowest cost:                   56
Lowest correct cost:           61

Move Type       Proposed     Succeeded     Accepted     
                                                        
Rotate          8.2295%      6.702%        3.2175%      
Add Nops        8.3935%      8.3935%       4.2035%      
Delete          8.426%       7.477%        4.335%       
OpcodeWidth     8.45%        7.1585%       6.5545%      
Instruction     8.2725%      3.5025%       0.1245%      
ReplaceNop      8.2545%      7.3205%       6.2225%      
Opcode          8.199%       7.3535%       6.549%       
Global Swap     8.4065%      6.3935%       4.7695%      
Operand         8.2435%      4.792%        0.851%       
Local Swap      8.385%       5.211%        3.9065%      
Global Copy     8.366%       7.2985%       7.2985%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.374%       4.7955%       0.0025%      
                                                        
Total           100%         76.398%       48.0345%     

********************************************************************************

Progress Update: 

Lowest Cost Discovered (55)                                                     Lowest Known Correct Cost (61)                                                 
                                                                                                                                                               
  .text                                                                           .text                                                                        
  .globl strcpy                                                                   .globl strcpy                                                                
  .type strcpy, @function                                                         .type strcpy, @function                                                      
                                                                                                                                                               
#! file-offset 0                                                                #! file-offset 0                                                               
#! rip-offset  0                                                                #! rip-offset  0                                                               
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                         
                                                                                                                                                               
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                            #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                            #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                            #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  movq %rdi, %rax                #  5     0x4   3      OPC=movq_r64_r64           nop                           #  5     0x6   1      OPC=nop                  
  nop                            #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                            #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                            #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                            #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                            #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                            #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                            #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                            #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  andl $0x7, %edi                #  14    0xf   3      OPC=andl_r32_imm8          nop                           #  14    0x11  1      OPC=nop                  
  nop                            #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                            #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  movq %rax, %rcx                #  17    0x14  3      OPC=movq_r64_r64           nop                           #  17    0x14  1      OPC=nop                  
  nop                            #  18    0x17  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                            #  19    0x18  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                            #  20    0x19  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                            #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                            #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                            #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                            #  24    0x1d  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                            #  25    0x1e  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                            #  26    0x1f  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                            #  27    0x20  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                            #  28    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  movq %rsi, %rdx                #  29    0x22  3      OPC=movq_r64_r64_1         nop                           #  29    0x2b  1      OPC=nop                  
  nop                            #  30    0x25  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                            #  31    0x26  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                            #  32    0x27  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                            #  33    0x28  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  jne .L_126860                  #  34    0x29  6      OPC=jne_label_1            nop                           #  34    0x30  1      OPC=nop                  
  nop                            #  35    0x2f  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                            #  36    0x30  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  movl %esi, %esi                #  37    0x31  2      OPC=movl_r32_r32           nop                           #  37    0x33  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8        #  38    0x33  4      OPC=movq_r64_m64           nop                           #  38    0x34  1      OPC=nop                  
  jne .L_126860                  #  39    0x37  6      OPC=jne_label_1            nop                           #  39    0x35  1      OPC=nop                  
  nop                            #  40    0x3d  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                            #  41    0x3e  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                            #  42    0x3f  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  nop                            #  43    0x40  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                            #  44    0x41  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                            #  45    0x42  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  addw $0x4, %cx                 #  46    0x43  4      OPC=addw_r16_imm8          movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)   #  47    0x47  5      OPC=movl_m32_r32           addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                #  48    0x4c  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  movq (%r15,%rdx,1), %r8        #  49    0x4f  4      OPC=movq_r64_m64           leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  andq $0x80, %rsi               #  50    0x53  7      OPC=andq_r64_imm32         addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                            #  51    0x5a  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                            #  52    0x5b  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                            #  53    0x5c  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                            #  54    0x5d  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                            #  55    0x5e  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                            #  56    0x5f  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                            #  57    0x60  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                            #  58    0x61  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                            #  59    0x62  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                            #  60    0x63  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                            #  61    0x64  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                            #  62    0x65  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                            #  63    0x66  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  leaq -0x3(,%rcx,4), %rsi       #  64    0x67  8      OPC=leaq_r64_m16           nop                           #  64    0x78  1      OPC=nop                  
  je .L_126820                   #  65    0x6f  6      OPC=je_label_1             nop                           #  65    0x79  1      OPC=nop                  
  nop                            #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                            #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                            #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                            #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                            #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                            #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                            #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                            #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                            #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                            #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
.L_126860:                       #        0x7f  0      OPC=<label>                nop                           #  75    0x83  1      OPC=nop                  
  nop                            #  76    0x7f  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                            #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                            #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                            #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                            #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                            #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                            #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                            #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                            #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  addw $0x1, %dx                 #  85    0x88  4      OPC=addw_r16_imm8          nop                           #  85    0x9d  1      OPC=nop                  
  movzbw -0x1(%r15,%rdx,1), %si  #  86    0x8c  7      OPC=movzbw_r16_m8          nop                           #  86    0x9e  1      OPC=nop                  
  nop                            #  87    0x93  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                            #  88    0x94  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                            #  89    0x95  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                            #  90    0x96  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                            #  91    0x97  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                            #  92    0x98  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                            #  93    0x99  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                            #  94    0x9a  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                            #  95    0x9b  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                            #  96    0x9c  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                            #  97    0x9d  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                            #  98    0x9e  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                            #  99    0x9f  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                            #  100   0xa0  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                            #  101   0xa1  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                            #  102   0xa2  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                            #  103   0xa3  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                            #  104   0xa4  1      OPC=nop                                                                                                 
  addl $0x1, %ecx                #  105   0xa5  3      OPC=addl_r32_imm8        .size strcpy, .-strcpy                                                         
  movb %sil, -0x1(%r15,%rcx,1)   #  106   0xa8  5      OPC=movb_m8_r8                                                                                          
  nop                            #  107   0xad  1      OPC=nop                                                                                                 
  nop                            #  108   0xae  1      OPC=nop                                                                                                 
  nop                            #  109   0xaf  1      OPC=nop                                                                                                 
  nop                            #  110   0xb0  1      OPC=nop                                                                                                 
  nop                            #  111   0xb1  1      OPC=nop                                                                                                 
  nop                            #  112   0xb2  1      OPC=nop                                                                                                 
  nop                            #  113   0xb3  1      OPC=nop                                                                                                 
  nop                            #  114   0xb4  1      OPC=nop                                                                                                 
  nop                            #  115   0xb5  1      OPC=nop                                                                                                 
  nop                            #  116   0xb6  1      OPC=nop                                                                                                 
  nop                            #  117   0xb7  1      OPC=nop                                                                                                 
  nop                            #  118   0xb8  1      OPC=nop                                                                                                 
  nop                            #  119   0xb9  1      OPC=nop                                                                                                 
  shrb $0x1, %sil                #  120   0xba  3      OPC=shrb_r8_one                                                                                         
  nop                            #  121   0xbd  1      OPC=nop                                                                                                 
  nop                            #  122   0xbe  1      OPC=nop                                                                                                 
  nop                            #  123   0xbf  1      OPC=nop                                                                                                 
  nop                            #  124   0xc0  1      OPC=nop                                                                                                 
  nop                            #  125   0xc1  1      OPC=nop                                                                                                 
  nop                            #  126   0xc2  1      OPC=nop                                                                                                 
  nop                            #  127   0xc3  1      OPC=nop                                                                                                 
  nop                            #  128   0xc4  1      OPC=nop                                                                                                 
  nop                            #  129   0xc5  1      OPC=nop                                                                                                 
  nop                            #  130   0xc6  1      OPC=nop                                                                                                 
  nop                            #  131   0xc7  1      OPC=nop                                                                                                 
  nop                            #  132   0xc8  1      OPC=nop                                                                                                 
  jne .L_126860                  #  133   0xc9  6      OPC=jne_label_1                                                                                         
  nop                            #  134   0xcf  1      OPC=nop                                                                                                 
  nop                            #  135   0xd0  1      OPC=nop                                                                                                 
  popq %r11                      #  136   0xd1  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d              #  137   0xd3  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                #  138   0xd7  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                      #  139   0xda  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                               
.size strcpy, .-strcpy                                                                                                                                         
                                                                                                                                                               

********************************************************************************

Progress Update: 

Lowest Cost Discovered (54)                                                     Lowest Known Correct Cost (61)                                                 
                                                                                                                                                               
  .text                                                                           .text                                                                        
  .globl strcpy                                                                   .globl strcpy                                                                
  .type strcpy, @function                                                         .type strcpy, @function                                                      
                                                                                                                                                               
#! file-offset 0                                                                #! file-offset 0                                                               
#! rip-offset  0                                                                #! rip-offset  0                                                               
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                         
                                                                                                                                                               
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                            #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                            #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                            #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  movq %rdi, %rax                #  5     0x4   3      OPC=movq_r64_r64           nop                           #  5     0x6   1      OPC=nop                  
  nop                            #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                            #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                            #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                            #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                            #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                            #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                            #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                            #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                            #  14    0xf   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  andl $0x7, %edi                #  15    0x10  3      OPC=andl_r32_imm8          nop                           #  15    0x12  1      OPC=nop                  
  nop                            #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                            #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  movq %rax, %rcx                #  18    0x15  3      OPC=movq_r64_r64           movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                            #  19    0x18  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                            #  20    0x19  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                            #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                            #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                            #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                            #  24    0x1d  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                            #  25    0x1e  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                            #  26    0x1f  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                            #  27    0x20  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                            #  28    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  movq %rsi, %rdx                #  29    0x22  3      OPC=movq_r64_r64_1         nop                           #  29    0x2b  1      OPC=nop                  
  nop                            #  30    0x25  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                            #  31    0x26  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                            #  32    0x27  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                            #  33    0x28  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  jne .L_126860                  #  34    0x29  6      OPC=jne_label_1            nop                           #  34    0x30  1      OPC=nop                  
  nop                            #  35    0x2f  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                            #  36    0x30  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  movl %esi, %esi                #  37    0x31  2      OPC=movl_r32_r32           nop                           #  37    0x33  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8        #  38    0x33  4      OPC=movq_r64_m64           nop                           #  38    0x34  1      OPC=nop                  
  jne .L_126860                  #  39    0x37  6      OPC=jne_label_1            nop                           #  39    0x35  1      OPC=nop                  
  nop                            #  40    0x3d  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                            #  41    0x3e  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                            #  42    0x3f  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  nop                            #  43    0x40  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                            #  44    0x41  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                            #  45    0x42  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  addw $0x4, %cx                 #  46    0x43  4      OPC=addw_r16_imm8          movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)   #  47    0x47  5      OPC=movl_m32_r32           addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                #  48    0x4c  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  movq (%r15,%rdx,1), %r8        #  49    0x4f  4      OPC=movq_r64_m64           leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  andq $0x80, %rsi               #  50    0x53  7      OPC=andq_r64_imm32         addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                            #  51    0x5a  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                            #  52    0x5b  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                            #  53    0x5c  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                            #  54    0x5d  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                            #  55    0x5e  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                            #  56    0x5f  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                            #  57    0x60  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                            #  58    0x61  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                            #  59    0x62  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                            #  60    0x63  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                            #  61    0x64  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                            #  62    0x65  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                            #  63    0x66  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  leaq -0x3(,%rcx,4), %rsi       #  64    0x67  8      OPC=leaq_r64_m16           nop                           #  64    0x78  1      OPC=nop                  
  je .L_126820                   #  65    0x6f  6      OPC=je_label_1             nop                           #  65    0x79  1      OPC=nop                  
  nop                            #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                            #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                            #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                            #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                            #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                            #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                            #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                            #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                            #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                            #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                            #  76    0x7f  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>                nop                           #  76    0x84  1      OPC=nop                  
  nop                            #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                            #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                            #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                            #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                            #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                            #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                            #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                            #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                            #  85    0x88  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  addw $0x1, %dx                 #  86    0x89  4      OPC=addw_r16_imm8          nop                           #  86    0x9e  1      OPC=nop                  
  movzbw -0x1(%r15,%rdx,1), %si  #  87    0x8d  7      OPC=movzbw_r16_m8          nop                           #  87    0x9f  1      OPC=nop                  
  nop                            #  88    0x94  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                            #  89    0x95  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                            #  90    0x96  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                            #  91    0x97  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                            #  92    0x98  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                            #  93    0x99  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                            #  94    0x9a  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                            #  95    0x9b  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                            #  96    0x9c  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                            #  97    0x9d  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                            #  98    0x9e  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                            #  99    0x9f  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                            #  100   0xa0  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                            #  101   0xa1  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                            #  102   0xa2  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                            #  103   0xa3  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                            #  104   0xa4  1      OPC=nop                                                                                                 
  addl $0x1, %ecx                #  105   0xa5  3      OPC=addl_r32_imm8        .size strcpy, .-strcpy                                                         
  movb %sil, -0x1(%r15,%rcx,1)   #  106   0xa8  5      OPC=movb_m8_r8                                                                                          
  nop                            #  107   0xad  1      OPC=nop                                                                                                 
  nop                            #  108   0xae  1      OPC=nop                                                                                                 
  nop                            #  109   0xaf  1      OPC=nop                                                                                                 
  nop                            #  110   0xb0  1      OPC=nop                                                                                                 
  nop                            #  111   0xb1  1      OPC=nop                                                                                                 
  nop                            #  112   0xb2  1      OPC=nop                                                                                                 
  nop                            #  113   0xb3  1      OPC=nop                                                                                                 
  nop                            #  114   0xb4  1      OPC=nop                                                                                                 
  nop                            #  115   0xb5  1      OPC=nop                                                                                                 
  nop                            #  116   0xb6  1      OPC=nop                                                                                                 
  nop                            #  117   0xb7  1      OPC=nop                                                                                                 
  nop                            #  118   0xb8  1      OPC=nop                                                                                                 
  nop                            #  119   0xb9  1      OPC=nop                                                                                                 
  nop                            #  120   0xba  1      OPC=nop                                                                                                 
  shrb $0x1, %sil                #  121   0xbb  3      OPC=shrb_r8_one                                                                                         
  nop                            #  122   0xbe  1      OPC=nop                                                                                                 
  nop                            #  123   0xbf  1      OPC=nop                                                                                                 
  nop                            #  124   0xc0  1      OPC=nop                                                                                                 
  nop                            #  125   0xc1  1      OPC=nop                                                                                                 
  nop                            #  126   0xc2  1      OPC=nop                                                                                                 
  nop                            #  127   0xc3  1      OPC=nop                                                                                                 
  nop                            #  128   0xc4  1      OPC=nop                                                                                                 
  nop                            #  129   0xc5  1      OPC=nop                                                                                                 
  nop                            #  130   0xc6  1      OPC=nop                                                                                                 
  nop                            #  131   0xc7  1      OPC=nop                                                                                                 
  nop                            #  132   0xc8  1      OPC=nop                                                                                                 
  jne .L_126860                  #  133   0xc9  6      OPC=jne_label_1                                                                                         
  nop                            #  134   0xcf  1      OPC=nop                                                                                                 
  nop                            #  135   0xd0  1      OPC=nop                                                                                                 
  nop                            #  136   0xd1  1      OPC=nop                                                                                                 
  popq %r11                      #  137   0xd2  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d              #  138   0xd4  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                #  139   0xd8  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                      #  140   0xdb  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                               
.size strcpy, .-strcpy                                                                                                                                         
                                                                                                                                                               

********************************************************************************

Progress Update: 

Lowest Cost Discovered (53)                                                     Lowest Known Correct Cost (61)                                                 
                                                                                                                                                               
  .text                                                                           .text                                                                        
  .globl strcpy                                                                   .globl strcpy                                                                
  .type strcpy, @function                                                         .type strcpy, @function                                                      
                                                                                                                                                               
#! file-offset 0                                                                #! file-offset 0                                                               
#! rip-offset  0                                                                #! rip-offset  0                                                               
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                         
                                                                                                                                                               
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                            #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                            #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                            #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                            #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                            #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                            #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  movq %rdi, %rax                #  8     0x7   3      OPC=movq_r64_r64           nop                           #  8     0x9   1      OPC=nop                  
  nop                            #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                            #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                            #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                            #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                            #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                            #  14    0xf   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                            #  15    0x10  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                            #  16    0x11  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                            #  17    0x12  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  andl $0x7, %edi                #  18    0x13  3      OPC=andl_r32_imm8          movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                            #  19    0x16  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                            #  20    0x17  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                            #  21    0x18  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  movq %rax, %rcx                #  22    0x19  3      OPC=movq_r64_r64_1         nop                           #  22    0x20  1      OPC=nop                  
  nop                            #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                            #  24    0x1d  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                            #  25    0x1e  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                            #  26    0x1f  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                            #  27    0x20  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                            #  28    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                            #  29    0x22  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                            #  30    0x23  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                            #  31    0x24  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                            #  32    0x25  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                            #  33    0x26  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  movq %rsi, %rdx                #  34    0x27  3      OPC=movq_r64_r64_1         nop                           #  34    0x30  1      OPC=nop                  
  jne .L_126860                  #  35    0x2a  6      OPC=jne_label_1            nop                           #  35    0x31  1      OPC=nop                  
  nop                            #  36    0x30  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                            #  37    0x31  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                            #  38    0x32  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                            #  39    0x33  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  movl %edx, %esi                #  40    0x34  2      OPC=movl_r32_r32           nop                           #  40    0x36  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8        #  41    0x36  4      OPC=movq_r64_m64           nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                  #  42    0x3a  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  nop                            #  43    0x40  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                            #  44    0x41  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                            #  45    0x42  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                            #  46    0x43  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                            #  47    0x44  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                            #  48    0x45  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  addw $0x4, %cx                 #  49    0x46  4      OPC=addw_r16_imm8          leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  movl %r8d, -0x4(%r15,%rcx,1)   #  50    0x4a  5      OPC=movl_m32_r32           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  addl $0x4, %edx                #  51    0x4f  3      OPC=addl_r32_imm8          movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  movq (%r15,%rdx,1), %r8        #  52    0x52  4      OPC=movq_r64_m64           notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  andq $0x80, %rsi               #  53    0x56  7      OPC=andq_r64_imm32         andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                            #  54    0x5d  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                            #  55    0x5e  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                            #  56    0x5f  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                            #  57    0x60  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                            #  58    0x61  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                            #  59    0x62  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si        #  60    0x63  8      OPC=leaw_r16_m64           nop                           #  60    0x74  1      OPC=nop                  
  je .L_126820                   #  61    0x6b  6      OPC=je_label_1             nop                           #  61    0x75  1      OPC=nop                  
  nop                            #  62    0x71  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                            #  63    0x72  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                            #  64    0x73  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                            #  65    0x74  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                            #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                            #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                            #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                            #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                            #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                            #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                            #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                            #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                            #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                            #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                            #  76    0x7f  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>                nop                           #  76    0x84  1      OPC=nop                  
  nop                            #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                            #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                            #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                            #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                            #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                            #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                            #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                            #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  addw $0x1, %dx                 #  85    0x88  4      OPC=addw_r16_imm8          nop                           #  85    0x9d  1      OPC=nop                  
  movzbw -0x1(%r15,%rdx,1), %si  #  86    0x8c  7      OPC=movzbw_r16_m8          nop                           #  86    0x9e  1      OPC=nop                  
  nop                            #  87    0x93  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                            #  88    0x94  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                            #  89    0x95  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                            #  90    0x96  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                            #  91    0x97  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                            #  92    0x98  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                            #  93    0x99  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                            #  94    0x9a  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                            #  95    0x9b  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                            #  96    0x9c  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                            #  97    0x9d  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                            #  98    0x9e  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                            #  99    0x9f  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                            #  100   0xa0  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  addl $0x1, %ecx                #  101   0xa1  3      OPC=addl_r32_imm8          andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)   #  102   0xa4  5      OPC=movb_m8_r8             addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                            #  103   0xa9  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                            #  104   0xaa  1      OPC=nop                                                                                                 
  nop                            #  105   0xab  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                            #  106   0xac  1      OPC=nop                                                                                                 
  nop                            #  107   0xad  1      OPC=nop                                                                                                 
  shrq $0x1, %rdi                #  108   0xae  4      OPC=shrq_r64_imm8                                                                                       
  nop                            #  109   0xb2  1      OPC=nop                                                                                                 
  nop                            #  110   0xb3  1      OPC=nop                                                                                                 
  nop                            #  111   0xb4  1      OPC=nop                                                                                                 
  nop                            #  112   0xb5  1      OPC=nop                                                                                                 
  nop                            #  113   0xb6  1      OPC=nop                                                                                                 
  nop                            #  114   0xb7  1      OPC=nop                                                                                                 
  nop                            #  115   0xb8  1      OPC=nop                                                                                                 
  nop                            #  116   0xb9  1      OPC=nop                                                                                                 
  nop                            #  117   0xba  1      OPC=nop                                                                                                 
  nop                            #  118   0xbb  1      OPC=nop                                                                                                 
  nop                            #  119   0xbc  1      OPC=nop                                                                                                 
  nop                            #  120   0xbd  1      OPC=nop                                                                                                 
  nop                            #  121   0xbe  1      OPC=nop                                                                                                 
  nop                            #  122   0xbf  1      OPC=nop                                                                                                 
  jne .L_126860                  #  123   0xc0  6      OPC=jne_label_1                                                                                         
  nop                            #  124   0xc6  1      OPC=nop                                                                                                 
  nop                            #  125   0xc7  1      OPC=nop                                                                                                 
  nop                            #  126   0xc8  1      OPC=nop                                                                                                 
  popq %r11                      #  127   0xc9  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d              #  128   0xcb  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                #  129   0xcf  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                      #  130   0xd2  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                               
.size strcpy, .-strcpy                                                                                                                                         
                                                                                                                                                               

********************************************************************************

Progress Update: 

Lowest Cost Discovered (52)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movq %rdi, %rcx                 #  1     0     3      OPC=movq_r64_r64           nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x3   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x4   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x8   3      OPC=movq_r64_r64           nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0xb   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xc   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xd   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xe   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xf   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0x10  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x11  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x15  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x16  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x17  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x18  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x19  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  movq %rcx, %rax                 #  23    0x1a  3      OPC=movq_r64_r64           nop                           #  23    0x21  1      OPC=nop                  
  andl $0x7, %edi                 #  24    0x1d  3      OPC=andl_r32_imm8          nop                           #  24    0x22  1      OPC=nop                  
  jne .L_126860                   #  25    0x20  6      OPC=jne_label_1            nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x26  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x27  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x28  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x29  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  movl %esi, %esi                 #  30    0x2a  2      OPC=movl_r32_r32           nop                           #  30    0x2c  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  31    0x2c  4      OPC=movl_r32_m32           nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x30  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x31  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x32  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x33  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x34  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x35  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x36  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x37  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x38  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x39  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x3a  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  nop                             #  43    0x40  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                             #  44    0x41  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x42  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x43  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x44  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x45  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  addq $0x4, %rcx                 #  49    0x46  4      OPC=addq_r64_imm8          leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  movl %r8d, -0x4(%r15,%rcx,1)    #  50    0x4a  5      OPC=movl_m32_r32           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  addl $0x4, %edx                 #  51    0x4f  3      OPC=addl_r32_imm8          movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  movq (%r15,%rdx,1), %r8         #  52    0x52  4      OPC=movq_r64_m64           notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  andq $0x80, %rsi                #  53    0x56  7      OPC=andq_r64_imm32         andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x5d  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x5e  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x5f  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x60  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x61  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x62  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x63  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x64  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x65  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  leaq -0x3(,%rcx,4), %rsi        #  63    0x66  8      OPC=leaq_r64_m64           nop                           #  63    0x77  1      OPC=nop                  
  je .L_126820                    #  64    0x6e  6      OPC=je_label_1             nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x74  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  76    0x7f  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x88  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x89  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x8a  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x8b  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x8c  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x8d  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  addw $0x1, %dx                  #  91    0x8e  4      OPC=addw_r16_imm8          nop                           #  91    0xa5  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  92    0x92  6      OPC=movsbl_r32_m8          nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x98  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x99  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x9a  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x9b  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x9c  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x9d  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x9e  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9f  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0xa0  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0xa1  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  addl $0x1, %ecx                 #  103   0xa2  3      OPC=addl_r32_imm8          jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  movb %sil, -0x1(%r15,%rcx,1)    #  104   0xa5  5      OPC=movb_m8_r8                                                                                          
  shrl $0x1, %esi                 #  105   0xaa  2      OPC=shrl_r32_one         .size strcpy, .-strcpy                                                         
  nop                             #  106   0xac  1      OPC=nop                                                                                                 
  nop                             #  107   0xad  1      OPC=nop                                                                                                 
  nop                             #  108   0xae  1      OPC=nop                                                                                                 
  nop                             #  109   0xaf  1      OPC=nop                                                                                                 
  nop                             #  110   0xb0  1      OPC=nop                                                                                                 
  nop                             #  111   0xb1  1      OPC=nop                                                                                                 
  nop                             #  112   0xb2  1      OPC=nop                                                                                                 
  nop                             #  113   0xb3  1      OPC=nop                                                                                                 
  nop                             #  114   0xb4  1      OPC=nop                                                                                                 
  jne .L_126860                   #  115   0xb5  6      OPC=jne_label_1                                                                                         
  nop                             #  116   0xbb  1      OPC=nop                                                                                                 
  nop                             #  117   0xbc  1      OPC=nop                                                                                                 
  nop                             #  118   0xbd  1      OPC=nop                                                                                                 
  nop                             #  119   0xbe  1      OPC=nop                                                                                                 
  nop                             #  120   0xbf  1      OPC=nop                                                                                                 
  nop                             #  121   0xc0  1      OPC=nop                                                                                                 
  nop                             #  122   0xc1  1      OPC=nop                                                                                                 
  nop                             #  123   0xc2  1      OPC=nop                                                                                                 
  nop                             #  124   0xc3  1      OPC=nop                                                                                                 
  nop                             #  125   0xc4  1      OPC=nop                                                                                                 
  nop                             #  126   0xc5  1      OPC=nop                                                                                                 
  nop                             #  127   0xc6  1      OPC=nop                                                                                                 
  nop                             #  128   0xc7  1      OPC=nop                                                                                                 
  nop                             #  129   0xc8  1      OPC=nop                                                                                                 
  nop                             #  130   0xc9  1      OPC=nop                                                                                                 
  nopl %eax                       #  131   0xca  3      OPC=nopl_r32                                                                                            
  popq %r11                       #  132   0xcd  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  133   0xcf  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  134   0xd3  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  135   0xd6  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (51)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  movq %rdi, %rcx                 #  3     0x2   3      OPC=movq_r64_r64           nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  movq %rdi, %rax                 #  13    0xe   3      OPC=movq_r64_r64           nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x11  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x15  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  movq %rsi, %rdx                 #  19    0x16  3      OPC=movq_r64_r64           jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x19  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  andl $0x1, %edi                 #  23    0x1c  3      OPC=andl_r32_imm8          nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1f  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nopl %eax                       #  25    0x20  3      OPC=nopl_r32               nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x23  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x24  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x25  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x26  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x27  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x28  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  jne .L_126860                   #  32    0x29  6      OPC=jne_label_1            nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x2f  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x30  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  movl %edx, %esi                 #  35    0x31  2      OPC=movl_r32_r32           nop                           #  35    0x31  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  36    0x33  4      OPC=movq_r64_m64           nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x37  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x38  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x39  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  jne .L_126860                   #  40    0x3a  6      OPC=jne_label_1            nop                           #  40    0x36  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  41    0x37  1      OPC=nop                  
  addq $0x4, %rcx                 #  41    0x40  4      OPC=addq_r64_imm8          nop                           #  42    0x38  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  42    0x44  5      OPC=movl_m32_r32           nop                           #  43    0x39  1      OPC=nop                  
  addl $0x4, %edx                 #  43    0x49  3      OPC=addl_r32_imm8          jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  movq (%r15,%rdx,1), %r8         #  44    0x4c  4      OPC=movq_r64_m64         .L_126820:                      #        0x40  0      OPC=<label>              
  nop                             #  45    0x50  1      OPC=nop                    andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  nop                             #  46    0x51  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x52  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x53  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x54  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  nop                             #  50    0x55  1      OPC=nop                    addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                             #  51    0x56  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x57  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x58  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  andq $0x80, %rsi                #  54    0x59  7      OPC=andq_r64_imm32         andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  leaw -0x3(,%rcx,4), %si         #  55    0x60  8      OPC=leaw_r16_m64           je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  je .L_126820                    #  56    0x68  6      OPC=je_label_1             nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x6e  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x6f  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x70  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x71  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x72  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x73  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x74  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x75  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x76  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x77  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x78  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x79  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x7a  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x7b  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7c  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7d  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7e  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7f  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  75    0x80  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  76    0x81  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x82  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x83  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x84  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x85  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x86  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x87  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  addw $0x1, %dx                  #  83    0x88  4      OPC=addw_r16_imm8          movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  movzbl -0x1(%r15,%rdx,1), %esi  #  84    0x8c  6      OPC=movzbl_r32_m8          nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x92  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x93  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x94  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x95  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x96  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x97  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0x98  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x99  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x9a  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x9b  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x9c  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x9d  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x9e  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x9f  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0xa0  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0xa1  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  addl $0x1, %ecx                 #  101   0xa2  3      OPC=addl_r32_imm8          andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  102   0xa5  5      OPC=movb_m8_r8             addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  sarl $0x2, %esi                 #  103   0xaa  3      OPC=sarl_r32_imm8          jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0xad  1      OPC=nop                                                                                                 
  nop                             #  105   0xae  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  106   0xaf  1      OPC=nop                                                                                                 
  nop                             #  107   0xb0  1      OPC=nop                                                                                                 
  nop                             #  108   0xb1  1      OPC=nop                                                                                                 
  nop                             #  109   0xb2  1      OPC=nop                                                                                                 
  nop                             #  110   0xb3  1      OPC=nop                                                                                                 
  nop                             #  111   0xb4  1      OPC=nop                                                                                                 
  nop                             #  112   0xb5  1      OPC=nop                                                                                                 
  nop                             #  113   0xb6  1      OPC=nop                                                                                                 
  nop                             #  114   0xb7  1      OPC=nop                                                                                                 
  jne .L_126860                   #  115   0xb8  6      OPC=jne_label_1                                                                                         
  nop                             #  116   0xbe  1      OPC=nop                                                                                                 
  nop                             #  117   0xbf  1      OPC=nop                                                                                                 
  nop                             #  118   0xc0  1      OPC=nop                                                                                                 
  nop                             #  119   0xc1  1      OPC=nop                                                                                                 
  nop                             #  120   0xc2  1      OPC=nop                                                                                                 
  nop                             #  121   0xc3  1      OPC=nop                                                                                                 
  nop                             #  122   0xc4  1      OPC=nop                                                                                                 
  nop                             #  123   0xc5  1      OPC=nop                                                                                                 
  nop                             #  124   0xc6  1      OPC=nop                                                                                                 
  nop                             #  125   0xc7  1      OPC=nop                                                                                                 
  nop                             #  126   0xc8  1      OPC=nop                                                                                                 
  nop                             #  127   0xc9  1      OPC=nop                                                                                                 
  nop                             #  128   0xca  1      OPC=nop                                                                                                 
  nop                             #  129   0xcb  1      OPC=nop                                                                                                 
  nop                             #  130   0xcc  1      OPC=nop                                                                                                 
  popq %r11                       #  131   0xcd  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  132   0xcf  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  133   0xd3  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  134   0xd6  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (50)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  movq %rdi, %rcx                 #  3     0x2   3      OPC=movq_r64_r64           nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  movq %rdi, %rax                 #  12    0xd   3      OPC=movq_r64_r64           nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0x10  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x11  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x15  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x16  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  movq %rsi, %rdx                 #  20    0x17  3      OPC=movq_r64_r64           nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  andl $0x1, %edi                 #  24    0x1d  3      OPC=andl_r32_imm8          nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x20  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x21  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x22  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x23  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x24  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x25  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x26  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x27  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  jne .L_126860                   #  33    0x28  6      OPC=jne_label_1            nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x2e  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x2f  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  movl %edx, %esi                 #  36    0x30  2      OPC=movl_r32_r32           nop                           #  36    0x32  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  37    0x32  4      OPC=movq_r64_m64           nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x36  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x37  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x38  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x39  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x3a  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  addq $0x4, %rcx                 #  43    0x40  4      OPC=addq_r64_imm8          jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)    #  44    0x44  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addl $0x4, %edx                 #  45    0x49  3      OPC=addl_r32_imm8          andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  movq (%r15,%rdx,1), %r8         #  46    0x4c  4      OPC=movq_r64_m64           movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x50  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x51  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x52  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  nop                             #  50    0x53  1      OPC=nop                    addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                             #  51    0x54  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x55  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x56  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x57  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  andq $0x80, %rsi                #  55    0x58  7      OPC=andq_r64_imm32         je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  leaw -0x3(,%rcx,4), %si         #  56    0x5f  8      OPC=leaw_r16_m64           nop                           #  56    0x70  1      OPC=nop                  
  je .L_126820                    #  57    0x67  6      OPC=je_label_1             nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x6d  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x6e  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x6f  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x70  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x71  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x72  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x73  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x74  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>                nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  76    0x7f  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  addw $0x1, %dx                  #  85    0x88  4      OPC=addw_r16_imm8          nop                           #  85    0x9d  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  86    0x8c  6      OPC=movzbl_r32_m8          nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x92  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x93  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x94  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x95  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0x96  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x97  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x98  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x99  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x9a  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x9b  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x9c  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x9d  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x9e  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9f  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0xa0  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0xa1  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  addl $0x1, %ecx                 #  103   0xa2  3      OPC=addl_r32_imm8          jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  movb %sil, -0x1(%r15,%rcx,1)    #  104   0xa5  5      OPC=movb_m8_r8                                                                                          
  sarl $0x2, %esi                 #  105   0xaa  3      OPC=sarl_r32_imm8        .size strcpy, .-strcpy                                                         
  nop                             #  106   0xad  1      OPC=nop                                                                                                 
  nop                             #  107   0xae  1      OPC=nop                                                                                                 
  nop                             #  108   0xaf  1      OPC=nop                                                                                                 
  nop                             #  109   0xb0  1      OPC=nop                                                                                                 
  nop                             #  110   0xb1  1      OPC=nop                                                                                                 
  nop                             #  111   0xb2  1      OPC=nop                                                                                                 
  nop                             #  112   0xb3  1      OPC=nop                                                                                                 
  nop                             #  113   0xb4  1      OPC=nop                                                                                                 
  nop                             #  114   0xb5  1      OPC=nop                                                                                                 
  nop                             #  115   0xb6  1      OPC=nop                                                                                                 
  nop                             #  116   0xb7  1      OPC=nop                                                                                                 
  jne .L_126860                   #  117   0xb8  6      OPC=jne_label_1                                                                                         
  nop                             #  118   0xbe  1      OPC=nop                                                                                                 
  nop                             #  119   0xbf  1      OPC=nop                                                                                                 
  nop                             #  120   0xc0  1      OPC=nop                                                                                                 
  nop                             #  121   0xc1  1      OPC=nop                                                                                                 
  nop                             #  122   0xc2  1      OPC=nop                                                                                                 
  nop                             #  123   0xc3  1      OPC=nop                                                                                                 
  nop                             #  124   0xc4  1      OPC=nop                                                                                                 
  nop                             #  125   0xc5  1      OPC=nop                                                                                                 
  nop                             #  126   0xc6  1      OPC=nop                                                                                                 
  nop                             #  127   0xc7  1      OPC=nop                                                                                                 
  nop                             #  128   0xc8  1      OPC=nop                                                                                                 
  nop                             #  129   0xc9  1      OPC=nop                                                                                                 
  nop                             #  130   0xca  1      OPC=nop                                                                                                 
  nop                             #  131   0xcb  1      OPC=nop                                                                                                 
  popq %r11                       #  132   0xcc  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  133   0xce  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  134   0xd2  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  135   0xd5  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (49)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  movq %rdi, %rcx                 #  3     0x2   3      OPC=movq_r64_r64           nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  movq %rdi, %rax                 #  12    0xd   3      OPC=movq_r64_r64           nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0x10  1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0x11  1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x15  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x16  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  movq %rsi, %rdx                 #  20    0x17  3      OPC=movq_r64_r64           nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  andl $0x1, %edi                 #  24    0x1d  3      OPC=andl_r32_imm8          nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x20  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x21  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x22  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x23  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x24  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x25  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x26  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x27  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  jne .L_126860                   #  33    0x28  6      OPC=jne_label_1            nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x2e  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x2f  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  movl %edx, %esi                 #  36    0x30  2      OPC=movl_r32_r32           nop                           #  36    0x32  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  37    0x32  4      OPC=movq_r64_m64           nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x36  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x37  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  nop                             #  40    0x38  1      OPC=nop                    nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x39  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x3a  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  addq $0x4, %rcx                 #  43    0x40  4      OPC=addq_r64_imm8          jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)    #  44    0x44  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addl $0x4, %edx                 #  45    0x49  3      OPC=addl_r32_imm8          andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  movq (%r15,%rdx,1), %r8         #  46    0x4c  4      OPC=movq_r64_m64           movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x50  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x51  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x52  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  nop                             #  50    0x53  1      OPC=nop                    addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                             #  51    0x54  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x55  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x56  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x57  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x58  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  andq $0x80, %rsi                #  56    0x59  7      OPC=andq_r64_imm32         nop                           #  56    0x70  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  57    0x60  8      OPC=leaw_r16_m64           nop                           #  57    0x71  1      OPC=nop                  
  je .L_126820                    #  58    0x68  6      OPC=je_label_1             nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x6e  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x6f  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x70  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x71  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x72  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x73  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x74  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  76    0x7f  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x88  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  addw $0x1, %dx                  #  86    0x89  4      OPC=addw_r16_imm8          nop                           #  86    0x9e  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  87    0x8d  6      OPC=movzbl_r32_m8          nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x93  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x94  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x95  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0x96  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x97  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x98  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x99  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x9a  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x9b  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x9c  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x9d  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x9e  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9f  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0xa0  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0xa1  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                             #  103   0xa2  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  addl $0x1, %ecx                 #  104   0xa3  3      OPC=addl_r32_imm8                                                                                       
  movb %sil, -0x1(%r15,%rcx,1)    #  105   0xa6  5      OPC=movb_m8_r8           .size strcpy, .-strcpy                                                         
  sarl $0x2, %esi                 #  106   0xab  3      OPC=sarl_r32_imm8                                                                                       
  nop                             #  107   0xae  1      OPC=nop                                                                                                 
  nop                             #  108   0xaf  1      OPC=nop                                                                                                 
  nop                             #  109   0xb0  1      OPC=nop                                                                                                 
  nop                             #  110   0xb1  1      OPC=nop                                                                                                 
  nop                             #  111   0xb2  1      OPC=nop                                                                                                 
  nop                             #  112   0xb3  1      OPC=nop                                                                                                 
  nop                             #  113   0xb4  1      OPC=nop                                                                                                 
  nop                             #  114   0xb5  1      OPC=nop                                                                                                 
  nop                             #  115   0xb6  1      OPC=nop                                                                                                 
  nop                             #  116   0xb7  1      OPC=nop                                                                                                 
  jne .L_126860                   #  117   0xb8  6      OPC=jne_label_1                                                                                         
  nop                             #  118   0xbe  1      OPC=nop                                                                                                 
  nop                             #  119   0xbf  1      OPC=nop                                                                                                 
  nop                             #  120   0xc0  1      OPC=nop                                                                                                 
  nop                             #  121   0xc1  1      OPC=nop                                                                                                 
  nop                             #  122   0xc2  1      OPC=nop                                                                                                 
  nop                             #  123   0xc3  1      OPC=nop                                                                                                 
  nop                             #  124   0xc4  1      OPC=nop                                                                                                 
  nop                             #  125   0xc5  1      OPC=nop                                                                                                 
  nop                             #  126   0xc6  1      OPC=nop                                                                                                 
  nop                             #  127   0xc7  1      OPC=nop                                                                                                 
  nop                             #  128   0xc8  1      OPC=nop                                                                                                 
  nop                             #  129   0xc9  1      OPC=nop                                                                                                 
  nop                             #  130   0xca  1      OPC=nop                                                                                                 
  nop                             #  131   0xcb  1      OPC=nop                                                                                                 
  popq %r11                       #  132   0xcc  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  133   0xce  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  134   0xd2  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  135   0xd5  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Statistics Update: 

Iterations:                    300000
Elapsed Time:                  116.06s
Iterations/s:                  2584.87

Starting cost:                 72
Lowest cost:                   49
Lowest correct cost:           61

Move Type       Proposed     Succeeded     Accepted      
                                                         
Rotate          8.25633%     6.82067%      3.376%        
Add Nops        8.40067%     8.40067%      4.23767%      
Delete          8.317%       7.43267%      4.363%        
OpcodeWidth     8.421%       7.206%        6.64267%      
Instruction     8.26867%     3.57667%      0.143333%     
ReplaceNop      8.24267%     7.381%        6.392%        
Opcode          8.25733%     7.46367%      6.711%        
Global Swap     8.44467%     6.571%        5.03067%      
Operand         8.27%        4.699%        0.88%         
Local Swap      8.34233%     5.47433%      4.191%        
Global Copy     8.34367%     7.33067%      7.33067%      
2xWeighted      0%           0%            0%            
Memory+Swap     8.43567%     5.087%        0.002%        
                                                         
Total           100%         77.4433%      49.3%         

********************************************************************************

Progress Update: 

Lowest Cost Discovered (48)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  subb %spl, %sil                 #  2     0x1   3      OPC=subb_r8_r8             testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x4   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x8   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x9   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xb   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xc   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xd   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xe   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xf   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  movq %rdi, %rax                 #  15    0x10  3      OPC=movq_r64_r64           nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  movq %rsi, %rdx                 #  18    0x15  3      OPC=movq_r64_r64_1         movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x18  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x19  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x1a  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x1b  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1d  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1e  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1f  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x20  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x21  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x22  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  movq %rax, %rcx                 #  30    0x23  3      OPC=movq_r64_r64_1         nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x26  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x27  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  jne .L_126860                   #  33    0x28  6      OPC=jne_label_1            nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x2e  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x2f  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x30  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x31  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  nop                             #  38    0x32  1      OPC=nop                    nop                           #  38    0x34  1      OPC=nop                  
  nop                             #  39    0x33  1      OPC=nop                    nop                           #  39    0x35  1      OPC=nop                  
  movl %edx, %esi                 #  40    0x34  2      OPC=movl_r32_r32_1         nop                           #  40    0x36  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  41    0x36  4      OPC=movq_r64_m64           nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x3a  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  43    0x39  1      OPC=nop                  
  addq $0x4, %rcx                 #  43    0x40  4      OPC=addq_r64_imm8          jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)    #  44    0x44  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addl $0x4, %edx                 #  45    0x49  3      OPC=addl_r32_imm8          andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  movq (%r15,%rdx,1), %r8         #  46    0x4c  4      OPC=movq_r64_m64           movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  nop                             #  47    0x50  1      OPC=nop                    addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  nop                             #  48    0x51  1      OPC=nop                    movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  nop                             #  49    0x52  1      OPC=nop                    leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  nop                             #  50    0x53  1      OPC=nop                    addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                             #  51    0x54  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x55  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x56  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x57  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x58  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  andq $0x80, %rsi                #  56    0x59  7      OPC=andq_r64_imm32         nop                           #  56    0x70  1      OPC=nop                  
  leaw -0x3(,%rcx,4), %si         #  57    0x60  8      OPC=leaw_r16_m32           nop                           #  57    0x71  1      OPC=nop                  
  je .L_126820                    #  58    0x68  6      OPC=je_label_1             nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x6e  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x6f  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x70  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x71  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x72  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x73  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x74  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x75  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x76  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x77  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x78  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x79  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x7a  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x7b  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x7c  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7d  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7e  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  76    0x7f  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  77    0x80  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  78    0x81  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  79    0x82  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  nop                             #  80    0x83  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  nop                             #  81    0x84  1      OPC=nop                    addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x85  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x86  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x87  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x88  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x89  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x8a  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x8b  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x8c  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  addl $0x1, %edx                 #  90    0x8d  3      OPC=addl_r32_imm8          andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  movzbq -0x1(%r15,%rdx,1), %rsi  #  91    0x90  6      OPC=movzbq_r64_m8          nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x96  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x97  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x98  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x99  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x9a  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x9b  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x9c  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x9d  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9e  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0x9f  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  addq $0x1, %rcx                 #  102   0xa0  4      OPC=addq_r64_imm8          addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  movb %sil, -0x1(%r15,%rcx,1)    #  103   0xa4  5      OPC=movb_m8_r8             jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0xa9  1      OPC=nop                                                                                                 
  nop                             #  105   0xaa  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  106   0xab  1      OPC=nop                                                                                                 
  nop                             #  107   0xac  1      OPC=nop                                                                                                 
  nop                             #  108   0xad  1      OPC=nop                                                                                                 
  nop                             #  109   0xae  1      OPC=nop                                                                                                 
  nop                             #  110   0xaf  1      OPC=nop                                                                                                 
  nop                             #  111   0xb0  1      OPC=nop                                                                                                 
  nop                             #  112   0xb1  1      OPC=nop                                                                                                 
  nop                             #  113   0xb2  1      OPC=nop                                                                                                 
  nop                             #  114   0xb3  1      OPC=nop                                                                                                 
  nop                             #  115   0xb4  1      OPC=nop                                                                                                 
  nop                             #  116   0xb5  1      OPC=nop                                                                                                 
  nop                             #  117   0xb6  1      OPC=nop                                                                                                 
  nop                             #  118   0xb7  1      OPC=nop                                                                                                 
  andl $0xfffffffd, %esi          #  119   0xb8  6      OPC=andl_r32_imm32                                                                                      
  nop                             #  120   0xbe  1      OPC=nop                                                                                                 
  nop                             #  121   0xbf  1      OPC=nop                                                                                                 
  nop                             #  122   0xc0  1      OPC=nop                                                                                                 
  nop                             #  123   0xc1  1      OPC=nop                                                                                                 
  nop                             #  124   0xc2  1      OPC=nop                                                                                                 
  nop                             #  125   0xc3  1      OPC=nop                                                                                                 
  nop                             #  126   0xc4  1      OPC=nop                                                                                                 
  nop                             #  127   0xc5  1      OPC=nop                                                                                                 
  nop                             #  128   0xc6  1      OPC=nop                                                                                                 
  nop                             #  129   0xc7  1      OPC=nop                                                                                                 
  nop                             #  130   0xc8  1      OPC=nop                                                                                                 
  nop                             #  131   0xc9  1      OPC=nop                                                                                                 
  jne .L_126860                   #  132   0xca  6      OPC=jne_label_1                                                                                         
  popq %r11                       #  133   0xd0  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  134   0xd2  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  135   0xd6  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  136   0xd9  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (47)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x7   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x8   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0x9   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xa   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  movl %edi, %eax                 #  12    0xb   2      OPC=movl_r32_r32           nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xd   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xe   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0xf   1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  movq %rsi, %rdx                 #  16    0x10  3      OPC=movq_r64_r64_1         nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x13  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x14  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x15  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  nop                             #  20    0x16  1      OPC=nop                    nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x17  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  movl %eax, %ecx                 #  22    0x18  2      OPC=movl_r32_r32_1         nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x1a  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1b  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1c  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1d  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1e  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x20  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x21  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x22  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x23  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x24  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x25  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  nop                             #  35    0x26  1      OPC=nop                    nop                           #  35    0x31  1      OPC=nop                  
  nop                             #  36    0x27  1      OPC=nop                    nop                           #  36    0x32  1      OPC=nop                  
  nop                             #  37    0x28  1      OPC=nop                    nop                           #  37    0x33  1      OPC=nop                  
  orb %dl, %dl                    #  38    0x29  2      OPC=orb_r8_r8_1            nop                           #  38    0x34  1      OPC=nop                  
  jne .L_126860                   #  39    0x2b  6      OPC=jne_label_1            nop                           #  39    0x35  1      OPC=nop                  
  movl %esi, %esi                 #  40    0x31  2      OPC=movl_r32_r32_1         nop                           #  40    0x36  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  41    0x33  4      OPC=movq_r64_m64           nop                           #  41    0x37  1      OPC=nop                  
  jne .L_126860                   #  42    0x37  6      OPC=jne_label_1            nop                           #  42    0x38  1      OPC=nop                  
  nop                             #  43    0x3d  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
  nop                             #  44    0x3e  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
  nop                             #  45    0x3f  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
.L_126820:                        #        0x40  0      OPC=<label>                andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  addl $0x4, %ecx                 #  46    0x40  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)    #  47    0x43  5      OPC=movl_m32_r32           addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                 #  48    0x48  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d        #  49    0x4b  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  andq $0x80, %rsi                #  50    0x4f  7      OPC=andq_r64_imm32         addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  leaq -0x3(,%rcx,4), %rsi        #  51    0x56  8      OPC=leaq_r64_m16           movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x5e  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x5f  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x60  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x61  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x62  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x63  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x64  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x65  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x66  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x67  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x68  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  je .L_126820                    #  63    0x69  6      OPC=je_label_1             nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x6f  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  nop                             #  65    0x70  1      OPC=nop                    nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x71  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x72  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x73  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x74  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x75  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x76  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x77  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x78  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x79  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7a  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  76    0x7b  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  77    0x7c  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  78    0x7d  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  79    0x7e  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
  nop                             #  80    0x7f  1      OPC=nop                    movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
.L_126860:                        #        0x80  0      OPC=<label>                movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  addl $0x1, %edx                 #  81    0x80  3      OPC=addl_r32_imm8          addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  movzbq -0x1(%r15,%rdx,1), %rsi  #  82    0x83  6      OPC=movzbq_r64_m8          addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x89  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x8a  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x8b  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x8c  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x8d  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x8e  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x8f  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x90  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0x91  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x92  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x93  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x94  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x95  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x96  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x97  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x98  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x99  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9a  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0x9b  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0x9c  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                             #  103   0x9d  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0x9e  1      OPC=nop                                                                                                 
  nop                             #  105   0x9f  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  106   0xa0  1      OPC=nop                                                                                                 
  nop                             #  107   0xa1  1      OPC=nop                                                                                                 
  nop                             #  108   0xa2  1      OPC=nop                                                                                                 
  nop                             #  109   0xa3  1      OPC=nop                                                                                                 
  nop                             #  110   0xa4  1      OPC=nop                                                                                                 
  addq $0x1, %rcx                 #  111   0xa5  4      OPC=addq_r64_imm8                                                                                       
  movb %sil, -0x1(%r15,%rcx,1)    #  112   0xa9  5      OPC=movb_m8_r8                                                                                          
  nop                             #  113   0xae  1      OPC=nop                                                                                                 
  nop                             #  114   0xaf  1      OPC=nop                                                                                                 
  nop                             #  115   0xb0  1      OPC=nop                                                                                                 
  nop                             #  116   0xb1  1      OPC=nop                                                                                                 
  nop                             #  117   0xb2  1      OPC=nop                                                                                                 
  nop                             #  118   0xb3  1      OPC=nop                                                                                                 
  nop                             #  119   0xb4  1      OPC=nop                                                                                                 
  nop                             #  120   0xb5  1      OPC=nop                                                                                                 
  nop                             #  121   0xb6  1      OPC=nop                                                                                                 
  nop                             #  122   0xb7  1      OPC=nop                                                                                                 
  nop                             #  123   0xb8  1      OPC=nop                                                                                                 
  nop                             #  124   0xb9  1      OPC=nop                                                                                                 
  nop                             #  125   0xba  1      OPC=nop                                                                                                 
  nop                             #  126   0xbb  1      OPC=nop                                                                                                 
  nop                             #  127   0xbc  1      OPC=nop                                                                                                 
  negw %si                        #  128   0xbd  3      OPC=negw_r16                                                                                            
  nop                             #  129   0xc0  1      OPC=nop                                                                                                 
  nop                             #  130   0xc1  1      OPC=nop                                                                                                 
  nop                             #  131   0xc2  1      OPC=nop                                                                                                 
  jne .L_126860                   #  132   0xc3  6      OPC=jne_label_1                                                                                         
  nop                             #  133   0xc9  1      OPC=nop                                                                                                 
  nop                             #  134   0xca  1      OPC=nop                                                                                                 
  nop                             #  135   0xcb  1      OPC=nop                                                                                                 
  nop                             #  136   0xcc  1      OPC=nop                                                                                                 
  nop                             #  137   0xcd  1      OPC=nop                                                                                                 
  nop                             #  138   0xce  1      OPC=nop                                                                                                 
  nop                             #  139   0xcf  1      OPC=nop                                                                                                 
  nop                             #  140   0xd0  1      OPC=nop                                                                                                 
  nop                             #  141   0xd1  1      OPC=nop                                                                                                 
  nop                             #  142   0xd2  1      OPC=nop                                                                                                 
  nop                             #  143   0xd3  1      OPC=nop                                                                                                 
  popq %r11                       #  144   0xd4  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  145   0xd6  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  146   0xda  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  147   0xdd  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (46)                                                      Lowest Known Correct Cost (61)                                                 
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    testb %sil, %sil              #  2     0x1   3      OPC=testb_r8_r8          
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                           #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    nop                           #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x7   1      OPC=nop                    nop                           #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x8   1      OPC=nop                    nop                           #  9     0xa   1      OPC=nop                  
  nop                             #  10    0x9   1      OPC=nop                    movl %edi, %eax               #  10    0xb   2      OPC=movl_r32_r32_1       
  nop                             #  11    0xa   1      OPC=nop                    movl %eax, %ecx               #  11    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  12    0xb   1      OPC=nop                    nop                           #  12    0xf   1      OPC=nop                  
  nop                             #  13    0xc   1      OPC=nop                    nop                           #  13    0x10  1      OPC=nop                  
  nop                             #  14    0xd   1      OPC=nop                    nop                           #  14    0x11  1      OPC=nop                  
  nop                             #  15    0xe   1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  movq %rsi, %rdx                 #  16    0xf   3      OPC=movq_r64_r64_1         nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x12  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x13  1      OPC=nop                    movq %rsi, %rdx               #  18    0x15  3      OPC=movq_r64_r64         
  nop                             #  19    0x14  1      OPC=nop                    jne .L_126860                 #  19    0x18  6      OPC=jne_label_1          
  movl %edi, %eax                 #  20    0x15  2      OPC=movl_r32_r32           nop                           #  20    0x1e  1      OPC=nop                  
  nop                             #  21    0x17  1      OPC=nop                    nop                           #  21    0x1f  1      OPC=nop                  
  nop                             #  22    0x18  1      OPC=nop                    nop                           #  22    0x20  1      OPC=nop                  
  nop                             #  23    0x19  1      OPC=nop                    nop                           #  23    0x21  1      OPC=nop                  
  nop                             #  24    0x1a  1      OPC=nop                    nop                           #  24    0x22  1      OPC=nop                  
  nop                             #  25    0x1b  1      OPC=nop                    nop                           #  25    0x23  1      OPC=nop                  
  nop                             #  26    0x1c  1      OPC=nop                    nop                           #  26    0x24  1      OPC=nop                  
  nop                             #  27    0x1d  1      OPC=nop                    movl %edx, %esi               #  27    0x25  2      OPC=movl_r32_r32_1       
  nop                             #  28    0x1e  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  28    0x27  4      OPC=movl_r32_m32         
  nop                             #  29    0x1f  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                             #  30    0x20  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  nop                             #  31    0x21  1      OPC=nop                    nop                           #  31    0x2d  1      OPC=nop                  
  nop                             #  32    0x22  1      OPC=nop                    nop                           #  32    0x2e  1      OPC=nop                  
  nop                             #  33    0x23  1      OPC=nop                    nop                           #  33    0x2f  1      OPC=nop                  
  nop                             #  34    0x24  1      OPC=nop                    nop                           #  34    0x30  1      OPC=nop                  
  movl %eax, %ecx                 #  35    0x25  2      OPC=movl_r32_r32_1         nop                           #  35    0x31  1      OPC=nop                  
  orb %dl, %sil                   #  36    0x27  3      OPC=orb_r8_r8_1            nop                           #  36    0x32  1      OPC=nop                  
  jne .L_126860                   #  37    0x2a  6      OPC=jne_label_1            nop                           #  37    0x33  1      OPC=nop                  
  movl %esi, %esi                 #  38    0x30  2      OPC=movl_r32_r32           nop                           #  38    0x34  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  39    0x32  4      OPC=movq_r64_m64           nop                           #  39    0x35  1      OPC=nop                  
  jne .L_126860                   #  40    0x36  6      OPC=jne_label_1            nop                           #  40    0x36  1      OPC=nop                  
  nop                             #  41    0x3c  1      OPC=nop                    nop                           #  41    0x37  1      OPC=nop                  
  nop                             #  42    0x3d  1      OPC=nop                    nop                           #  42    0x38  1      OPC=nop                  
  nop                             #  43    0x3e  1      OPC=nop                    nop                           #  43    0x39  1      OPC=nop                  
  nop                             #  44    0x3f  1      OPC=nop                    jne .L_126860                 #  44    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  45    0x40  3      OPC=addl_r32_imm8          andl %ecx, %ecx               #  45    0x40  2      OPC=andl_r32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)    #  46    0x43  5      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  46    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  47    0x48  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  47    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d        #  48    0x4b  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  48    0x4c  4      OPC=movl_r32_m32         
  andq $0x80, %rsi                #  49    0x4f  7      OPC=andq_r64_imm32         leal -0x1010101(%r8), %esi    #  49    0x50  7      OPC=leal_r32_m64         
  leaq -0x3(,%rcx,4), %rsi        #  50    0x56  8      OPC=leaq_r64_m16           addb $0x4, %cl                #  50    0x57  3      OPC=addb_r8_imm8         
  nop                             #  51    0x5e  1      OPC=nop                    movq %r8, %r9                 #  51    0x5a  3      OPC=movq_r64_r64_1       
  nop                             #  52    0x5f  1      OPC=nop                    notb %r9b                     #  52    0x5d  3      OPC=notb_r8              
  nop                             #  53    0x60  1      OPC=nop                    andb %sil, %r9b               #  53    0x60  3      OPC=andb_r8_r8           
  nop                             #  54    0x61  1      OPC=nop                    andl $0x4, %r9d               #  54    0x63  7      OPC=andl_r32_imm32       
  nop                             #  55    0x62  1      OPC=nop                    je .L_126820                  #  55    0x6a  6      OPC=je_label_1           
  nop                             #  56    0x63  1      OPC=nop                    nop                           #  56    0x70  1      OPC=nop                  
  nop                             #  57    0x64  1      OPC=nop                    nop                           #  57    0x71  1      OPC=nop                  
  nop                             #  58    0x65  1      OPC=nop                    nop                           #  58    0x72  1      OPC=nop                  
  nop                             #  59    0x66  1      OPC=nop                    nop                           #  59    0x73  1      OPC=nop                  
  nop                             #  60    0x67  1      OPC=nop                    nop                           #  60    0x74  1      OPC=nop                  
  nop                             #  61    0x68  1      OPC=nop                    nop                           #  61    0x75  1      OPC=nop                  
  nop                             #  62    0x69  1      OPC=nop                    nop                           #  62    0x76  1      OPC=nop                  
  nop                             #  63    0x6a  1      OPC=nop                    nop                           #  63    0x77  1      OPC=nop                  
  nop                             #  64    0x6b  1      OPC=nop                    nop                           #  64    0x78  1      OPC=nop                  
  je .L_126820                    #  65    0x6c  6      OPC=je_label_1             nop                           #  65    0x79  1      OPC=nop                  
  nop                             #  66    0x72  1      OPC=nop                    nop                           #  66    0x7a  1      OPC=nop                  
  nop                             #  67    0x73  1      OPC=nop                    nop                           #  67    0x7b  1      OPC=nop                  
  nop                             #  68    0x74  1      OPC=nop                    nop                           #  68    0x7c  1      OPC=nop                  
  nop                             #  69    0x75  1      OPC=nop                    nop                           #  69    0x7d  1      OPC=nop                  
  nop                             #  70    0x76  1      OPC=nop                    nop                           #  70    0x7e  1      OPC=nop                  
  nop                             #  71    0x77  1      OPC=nop                    nop                           #  71    0x7f  1      OPC=nop                  
  nop                             #  72    0x78  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  73    0x79  1      OPC=nop                    nop                           #  72    0x80  1      OPC=nop                  
  nop                             #  74    0x7a  1      OPC=nop                    nop                           #  73    0x81  1      OPC=nop                  
  nop                             #  75    0x7b  1      OPC=nop                    nop                           #  74    0x82  1      OPC=nop                  
  nop                             #  76    0x7c  1      OPC=nop                    nop                           #  75    0x83  1      OPC=nop                  
  nop                             #  77    0x7d  1      OPC=nop                    nop                           #  76    0x84  1      OPC=nop                  
  nop                             #  78    0x7e  1      OPC=nop                    nop                           #  77    0x85  1      OPC=nop                  
  nop                             #  79    0x7f  1      OPC=nop                    nop                           #  78    0x86  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                movl %edx, %edx               #  79    0x87  2      OPC=movl_r32_r32_1       
  addl $0x1, %edx                 #  80    0x80  3      OPC=addl_r32_imm8          movsbl (%r15,%rdx,1), %esi    #  80    0x89  5      OPC=movsbl_r32_m8        
  movzbq -0x1(%r15,%rdx,1), %rsi  #  81    0x83  6      OPC=movzbq_r64_m8          addl $0x1, %edx               #  81    0x8e  3      OPC=addl_r32_imm8        
  nop                             #  82    0x89  1      OPC=nop                    addl $0x1, %ecx               #  82    0x91  6      OPC=addl_r32_imm32       
  nop                             #  83    0x8a  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  83    0x97  5      OPC=movb_m8_r8           
  nop                             #  84    0x8b  1      OPC=nop                    nop                           #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x8c  1      OPC=nop                    nop                           #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x8d  1      OPC=nop                    nop                           #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x8e  1      OPC=nop                    nop                           #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0x8f  1      OPC=nop                    nop                           #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0x90  1      OPC=nop                    nop                           #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0x91  1      OPC=nop                    andq %rdx, %rsi               #  90    0xa2  3      OPC=andq_r64_r64         
  nop                             #  91    0x92  1      OPC=nop                    nop                           #  91    0xa5  1      OPC=nop                  
  nop                             #  92    0x93  1      OPC=nop                    nop                           #  92    0xa6  1      OPC=nop                  
  nop                             #  93    0x94  1      OPC=nop                    nop                           #  93    0xa7  1      OPC=nop                  
  nop                             #  94    0x95  1      OPC=nop                    nop                           #  94    0xa8  1      OPC=nop                  
  nop                             #  95    0x96  1      OPC=nop                    nop                           #  95    0xa9  1      OPC=nop                  
  nop                             #  96    0x97  1      OPC=nop                    nop                           #  96    0xaa  1      OPC=nop                  
  nop                             #  97    0x98  1      OPC=nop                    jne .L_126860                 #  97    0xab  6      OPC=jne_label_1          
  nop                             #  98    0x99  1      OPC=nop                    nop                           #  98    0xb1  1      OPC=nop                  
  nop                             #  99    0x9a  1      OPC=nop                    nop                           #  99    0xb2  1      OPC=nop                  
  nop                             #  100   0x9b  1      OPC=nop                    popq %r11                     #  100   0xb3  2      OPC=popq_r64_1           
  nop                             #  101   0x9c  1      OPC=nop                    andl $0xe0, %r11d             #  101   0xb5  4      OPC=andl_r32_imm8        
  nop                             #  102   0x9d  1      OPC=nop                    addq %r15, %r11               #  102   0xb9  3      OPC=addq_r64_r64         
  nop                             #  103   0x9e  1      OPC=nop                    jmpq %r11                     #  103   0xbc  3      OPC=jmpq_r64             
  nop                             #  104   0x9f  1      OPC=nop                                                                                                 
  nop                             #  105   0xa0  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  106   0xa1  1      OPC=nop                                                                                                 
  nop                             #  107   0xa2  1      OPC=nop                                                                                                 
  nop                             #  108   0xa3  1      OPC=nop                                                                                                 
  nop                             #  109   0xa4  1      OPC=nop                                                                                                 
  nop                             #  110   0xa5  1      OPC=nop                                                                                                 
  addq $0x1, %rcx                 #  111   0xa6  4      OPC=addq_r64_imm8                                                                                       
  movb %sil, -0x1(%r15,%rcx,1)    #  112   0xaa  5      OPC=movb_m8_r8                                                                                          
  nop                             #  113   0xaf  1      OPC=nop                                                                                                 
  nop                             #  114   0xb0  1      OPC=nop                                                                                                 
  nop                             #  115   0xb1  1      OPC=nop                                                                                                 
  nop                             #  116   0xb2  1      OPC=nop                                                                                                 
  nop                             #  117   0xb3  1      OPC=nop                                                                                                 
  nop                             #  118   0xb4  1      OPC=nop                                                                                                 
  nop                             #  119   0xb5  1      OPC=nop                                                                                                 
  nop                             #  120   0xb6  1      OPC=nop                                                                                                 
  nop                             #  121   0xb7  1      OPC=nop                                                                                                 
  nop                             #  122   0xb8  1      OPC=nop                                                                                                 
  nop                             #  123   0xb9  1      OPC=nop                                                                                                 
  nop                             #  124   0xba  1      OPC=nop                                                                                                 
  nop                             #  125   0xbb  1      OPC=nop                                                                                                 
  nop                             #  126   0xbc  1      OPC=nop                                                                                                 
  negl %esi                       #  127   0xbd  2      OPC=negl_r32                                                                                            
  nop                             #  128   0xbf  1      OPC=nop                                                                                                 
  nop                             #  129   0xc0  1      OPC=nop                                                                                                 
  nop                             #  130   0xc1  1      OPC=nop                                                                                                 
  nop                             #  131   0xc2  1      OPC=nop                                                                                                 
  jne .L_126860                   #  132   0xc3  6      OPC=jne_label_1                                                                                         
  nop                             #  133   0xc9  1      OPC=nop                                                                                                 
  nop                             #  134   0xca  1      OPC=nop                                                                                                 
  nop                             #  135   0xcb  1      OPC=nop                                                                                                 
  nop                             #  136   0xcc  1      OPC=nop                                                                                                 
  nop                             #  137   0xcd  1      OPC=nop                                                                                                 
  nop                             #  138   0xce  1      OPC=nop                                                                                                 
  nop                             #  139   0xcf  1      OPC=nop                                                                                                 
  popq %r11                       #  140   0xd0  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  141   0xd2  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  142   0xd6  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  143   0xd9  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Statistics Update: 

Iterations:                    400000
Elapsed Time:                  160.351s
Iterations/s:                  2494.53

Starting cost:                 72
Lowest cost:                   46
Lowest correct cost:           61

Move Type       Proposed     Succeeded     Accepted     
                                                        
Rotate          8.30625%     6.90325%      3.432%       
Add Nops        8.37375%     8.37375%      4.23425%     
Delete          8.30175%     7.46275%      4.361%       
OpcodeWidth     8.39425%     7.23625%      6.705%       
Instruction     8.24775%     3.56975%      0.1435%      
ReplaceNop      8.27425%     7.4345%       6.50175%     
Opcode          8.278%       7.52325%      6.80975%     
Global Swap     8.454%       6.64875%      5.18%        
Operand         8.24875%     4.61575%      0.856%       
Local Swap      8.378%       5.67625%      4.4115%      
Global Copy     8.35025%     7.361%        7.361%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.393%       5.1345%       0.0015%      
                                                        
Total           100%         77.9398%      49.9973%     

********************************************************************************

Progress Update: 

Lowest Cost Discovered (46)                                                      Lowest Known Correct Cost (49)                                                   
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                    xorb %r15b, %sil                #  7     0x6   3      OPC=xorb_r8_r8_1         
  nop                             #  8     0x7   1      OPC=nop                    nop                             #  8     0x9   1      OPC=nop                  
  nop                             #  9     0x8   1      OPC=nop                    nop                             #  9     0xa   1      OPC=nop                  
  nop                             #  10    0x9   1      OPC=nop                    nop                             #  10    0xb   1      OPC=nop                  
  nop                             #  11    0xa   1      OPC=nop                    nop                             #  11    0xc   1      OPC=nop                  
  nop                             #  12    0xb   1      OPC=nop                    nop                             #  12    0xd   1      OPC=nop                  
  nop                             #  13    0xc   1      OPC=nop                    nop                             #  13    0xe   1      OPC=nop                  
  nop                             #  14    0xd   1      OPC=nop                    nop                             #  14    0xf   1      OPC=nop                  
  nop                             #  15    0xe   1      OPC=nop                    movl %edi, %ecx                 #  15    0x10  2      OPC=movl_r32_r32_1       
  movq %rsi, %rdx                 #  16    0xf   3      OPC=movq_r64_r64_1         nop                             #  16    0x12  1      OPC=nop                  
  nop                             #  17    0x12  1      OPC=nop                    nop                             #  17    0x13  1      OPC=nop                  
  nop                             #  18    0x13  1      OPC=nop                    nop                             #  18    0x14  1      OPC=nop                  
  nop                             #  19    0x14  1      OPC=nop                    nop                             #  19    0x15  1      OPC=nop                  
  movl %edi, %eax                 #  20    0x15  2      OPC=movl_r32_r32           nop                             #  20    0x16  1      OPC=nop                  
  nop                             #  21    0x17  1      OPC=nop                    movq %rsi, %rdx                 #  21    0x17  3      OPC=movq_r64_r64         
  nop                             #  22    0x18  1      OPC=nop                    nop                             #  22    0x1a  1      OPC=nop                  
  nop                             #  23    0x19  1      OPC=nop                    nop                             #  23    0x1b  1      OPC=nop                  
  nop                             #  24    0x1a  1      OPC=nop                    nop                             #  24    0x1c  1      OPC=nop                  
  nop                             #  25    0x1b  1      OPC=nop                    movq %rcx, %rax                 #  25    0x1d  3      OPC=movq_r64_r64_1       
  nop                             #  26    0x1c  1      OPC=nop                    jne .L_126860                   #  26    0x20  6      OPC=jne_label_1          
  nop                             #  27    0x1d  1      OPC=nop                    nop                             #  27    0x26  1      OPC=nop                  
  nop                             #  28    0x1e  1      OPC=nop                    nop                             #  28    0x27  1      OPC=nop                  
  nop                             #  29    0x1f  1      OPC=nop                    nop                             #  29    0x28  1      OPC=nop                  
  nop                             #  30    0x20  1      OPC=nop                    nop                             #  30    0x29  1      OPC=nop                  
  nop                             #  31    0x21  1      OPC=nop                    nop                             #  31    0x2a  1      OPC=nop                  
  nop                             #  32    0x22  1      OPC=nop                    nop                             #  32    0x2b  1      OPC=nop                  
  nop                             #  33    0x23  1      OPC=nop                    nop                             #  33    0x2c  1      OPC=nop                  
  nop                             #  34    0x24  1      OPC=nop                    nop                             #  34    0x2d  1      OPC=nop                  
  movl %eax, %ecx                 #  35    0x25  2      OPC=movl_r32_r32_1         movl %esi, %esi                 #  35    0x2e  2      OPC=movl_r32_r32         
  orb %dl, %sil                   #  36    0x27  3      OPC=orb_r8_r8_1            movl (%r15,%rsi,1), %r8d        #  36    0x30  4      OPC=movl_r32_m32         
  jne .L_126860                   #  37    0x2a  6      OPC=jne_label_1            nop                             #  37    0x34  1      OPC=nop                  
  movl %esi, %esi                 #  38    0x30  2      OPC=movl_r32_r32           nop                             #  38    0x35  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  39    0x32  4      OPC=movq_r64_m64           nop                             #  39    0x36  1      OPC=nop                  
  jne .L_126860                   #  40    0x36  6      OPC=jne_label_1            nop                             #  40    0x37  1      OPC=nop                  
  nop                             #  41    0x3c  1      OPC=nop                    jne .L_126860                   #  41    0x38  6      OPC=jne_label_1          
  nop                             #  42    0x3d  1      OPC=nop                    nop                             #  42    0x3e  1      OPC=nop                  
  nop                             #  43    0x3e  1      OPC=nop                    nop                             #  43    0x3f  1      OPC=nop                  
  nop                             #  44    0x3f  1      OPC=nop                  .L_126820:                        #        0x40  0      OPC=<label>              
.L_126820:                        #        0x40  0      OPC=<label>                addl $0x4, %ecx                 #  44    0x40  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx                 #  45    0x40  3      OPC=addl_r32_imm8          movl %r8d, -0x4(%r15,%rcx,1)    #  45    0x43  5      OPC=movl_m32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)    #  46    0x43  5      OPC=movl_m32_r32           addl $0x4, %edx                 #  46    0x48  3      OPC=addl_r32_imm8        
  addl $0x4, %edx                 #  47    0x48  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d        #  47    0x4b  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d        #  48    0x4b  4      OPC=movl_r32_m32           andl $0x80, %esi                #  48    0x4f  6      OPC=andl_r32_imm32       
  andq $0x80, %rsi                #  49    0x4f  7      OPC=andq_r64_imm32         leal -0x3(,%rcx,4), %esi        #  49    0x55  7      OPC=leal_r32_m64         
  leaq -0x3(,%rcx,4), %rsi        #  50    0x56  8      OPC=leaq_r64_m16           nop                             #  50    0x5c  1      OPC=nop                  
  nop                             #  51    0x5e  1      OPC=nop                    nop                             #  51    0x5d  1      OPC=nop                  
  nop                             #  52    0x5f  1      OPC=nop                    nop                             #  52    0x5e  1      OPC=nop                  
  nop                             #  53    0x60  1      OPC=nop                    nop                             #  53    0x5f  1      OPC=nop                  
  nop                             #  54    0x61  1      OPC=nop                    nop                             #  54    0x60  1      OPC=nop                  
  nop                             #  55    0x62  1      OPC=nop                    je .L_126820                    #  55    0x61  6      OPC=je_label_1           
  nop                             #  56    0x63  1      OPC=nop                    nop                             #  56    0x67  1      OPC=nop                  
  nop                             #  57    0x64  1      OPC=nop                    nop                             #  57    0x68  1      OPC=nop                  
  nop                             #  58    0x65  1      OPC=nop                    nop                             #  58    0x69  1      OPC=nop                  
  nop                             #  59    0x66  1      OPC=nop                    nopl %eax                       #  59    0x6a  3      OPC=nopl_r32             
  nop                             #  60    0x67  1      OPC=nop                    nop                             #  60    0x6d  1      OPC=nop                  
  nop                             #  61    0x68  1      OPC=nop                    nop                             #  61    0x6e  1      OPC=nop                  
  nop                             #  62    0x69  1      OPC=nop                    nop                             #  62    0x6f  1      OPC=nop                  
  nop                             #  63    0x6a  1      OPC=nop                    nop                             #  63    0x70  1      OPC=nop                  
  nop                             #  64    0x6b  1      OPC=nop                    nop                             #  64    0x71  1      OPC=nop                  
  je .L_126820                    #  65    0x6c  6      OPC=je_label_1             nop                             #  65    0x72  1      OPC=nop                  
  nop                             #  66    0x72  1      OPC=nop                    nop                             #  66    0x73  1      OPC=nop                  
  nop                             #  67    0x73  1      OPC=nop                    nop                             #  67    0x74  1      OPC=nop                  
  nop                             #  68    0x74  1      OPC=nop                    nop                             #  68    0x75  1      OPC=nop                  
  nop                             #  69    0x75  1      OPC=nop                    nop                             #  69    0x76  1      OPC=nop                  
  nop                             #  70    0x76  1      OPC=nop                    nop                             #  70    0x77  1      OPC=nop                  
  nop                             #  71    0x77  1      OPC=nop                    nop                             #  71    0x78  1      OPC=nop                  
  nop                             #  72    0x78  1      OPC=nop                    nop                             #  72    0x79  1      OPC=nop                  
  nop                             #  73    0x79  1      OPC=nop                    nop                             #  73    0x7a  1      OPC=nop                  
  nop                             #  74    0x7a  1      OPC=nop                    nop                             #  74    0x7b  1      OPC=nop                  
  nop                             #  75    0x7b  1      OPC=nop                    nop                             #  75    0x7c  1      OPC=nop                  
  nop                             #  76    0x7c  1      OPC=nop                    nop                             #  76    0x7d  1      OPC=nop                  
  nop                             #  77    0x7d  1      OPC=nop                    nop                             #  77    0x7e  1      OPC=nop                  
  nop                             #  78    0x7e  1      OPC=nop                    nop                             #  78    0x7f  1      OPC=nop                  
  nop                             #  79    0x7f  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
.L_126860:                        #        0x80  0      OPC=<label>                nop                             #  79    0x80  1      OPC=nop                  
  addl $0x1, %edx                 #  80    0x80  3      OPC=addl_r32_imm8          nop                             #  80    0x81  1      OPC=nop                  
  movzbq -0x1(%r15,%rdx,1), %rsi  #  81    0x83  6      OPC=movzbq_r64_m8          nop                             #  81    0x82  1      OPC=nop                  
  nop                             #  82    0x89  1      OPC=nop                    nop                             #  82    0x83  1      OPC=nop                  
  nop                             #  83    0x8a  1      OPC=nop                    nop                             #  83    0x84  1      OPC=nop                  
  nop                             #  84    0x8b  1      OPC=nop                    nop                             #  84    0x85  1      OPC=nop                  
  nop                             #  85    0x8c  1      OPC=nop                    nop                             #  85    0x86  1      OPC=nop                  
  nop                             #  86    0x8d  1      OPC=nop                    addl $0x1, %edx                 #  86    0x87  3      OPC=addl_r32_imm8        
  nop                             #  87    0x8e  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  87    0x8a  6      OPC=movsbq_r64_m8        
  nop                             #  88    0x8f  1      OPC=nop                    nop                             #  88    0x90  1      OPC=nop                  
  nop                             #  89    0x90  1      OPC=nop                    nop                             #  89    0x91  1      OPC=nop                  
  nop                             #  90    0x91  1      OPC=nop                    nop                             #  90    0x92  1      OPC=nop                  
  nop                             #  91    0x92  1      OPC=nop                    movzbl %sil, %r9d               #  91    0x93  4      OPC=movzbl_r32_r8        
  nop                             #  92    0x93  1      OPC=nop                    nop                             #  92    0x97  1      OPC=nop                  
  nop                             #  93    0x94  1      OPC=nop                    nop                             #  93    0x98  1      OPC=nop                  
  nop                             #  94    0x95  1      OPC=nop                    nop                             #  94    0x99  1      OPC=nop                  
  nop                             #  95    0x96  1      OPC=nop                    nop                             #  95    0x9a  1      OPC=nop                  
  nop                             #  96    0x97  1      OPC=nop                    nop                             #  96    0x9b  1      OPC=nop                  
  nop                             #  97    0x98  1      OPC=nop                    nop                             #  97    0x9c  1      OPC=nop                  
  nop                             #  98    0x99  1      OPC=nop                    nop                             #  98    0x9d  1      OPC=nop                  
  nop                             #  99    0x9a  1      OPC=nop                    nop                             #  99    0x9e  1      OPC=nop                  
  nop                             #  100   0x9b  1      OPC=nop                    nop                             #  100   0x9f  1      OPC=nop                  
  nop                             #  101   0x9c  1      OPC=nop                    nop                             #  101   0xa0  1      OPC=nop                  
  nop                             #  102   0x9d  1      OPC=nop                    nop                             #  102   0xa1  1      OPC=nop                  
  nop                             #  103   0x9e  1      OPC=nop                    nop                             #  103   0xa2  1      OPC=nop                  
  nop                             #  104   0x9f  1      OPC=nop                    nop                             #  104   0xa3  1      OPC=nop                  
  nop                             #  105   0xa0  1      OPC=nop                    nop                             #  105   0xa4  1      OPC=nop                  
  nop                             #  106   0xa1  1      OPC=nop                    nop                             #  106   0xa5  1      OPC=nop                  
  nop                             #  107   0xa2  1      OPC=nop                    nop                             #  107   0xa6  1      OPC=nop                  
  nop                             #  108   0xa3  1      OPC=nop                    nop                             #  108   0xa7  1      OPC=nop                  
  nop                             #  109   0xa4  1      OPC=nop                    nop                             #  109   0xa8  1      OPC=nop                  
  nop                             #  110   0xa5  1      OPC=nop                    nop                             #  110   0xa9  1      OPC=nop                  
  addq $0x1, %rcx                 #  111   0xa6  4      OPC=addq_r64_imm8          nop                             #  111   0xaa  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  112   0xaa  5      OPC=movb_m8_r8             nop                             #  112   0xab  1      OPC=nop                  
  nop                             #  113   0xaf  1      OPC=nop                    nop                             #  113   0xac  1      OPC=nop                  
  nop                             #  114   0xb0  1      OPC=nop                    nop                             #  114   0xad  1      OPC=nop                  
  nop                             #  115   0xb1  1      OPC=nop                    nop                             #  115   0xae  1      OPC=nop                  
  nop                             #  116   0xb2  1      OPC=nop                    nop                             #  116   0xaf  1      OPC=nop                  
  nop                             #  117   0xb3  1      OPC=nop                    nop                             #  117   0xb0  1      OPC=nop                  
  nop                             #  118   0xb4  1      OPC=nop                    nop                             #  118   0xb1  1      OPC=nop                  
  nop                             #  119   0xb5  1      OPC=nop                    nop                             #  119   0xb2  1      OPC=nop                  
  nop                             #  120   0xb6  1      OPC=nop                    addl $0x1, %ecx                 #  120   0xb3  3      OPC=addl_r32_imm8        
  nop                             #  121   0xb7  1      OPC=nop                    movb %r9b, -0x1(%r15,%rcx,1)    #  121   0xb6  5      OPC=movb_m8_r8           
  nop                             #  122   0xb8  1      OPC=nop                    nop                             #  122   0xbb  1      OPC=nop                  
  nop                             #  123   0xb9  1      OPC=nop                    shrl $0x1, %r9d                 #  123   0xbc  4      OPC=shrl_r32_imm8        
  nop                             #  124   0xba  1      OPC=nop                    jne .L_126860                   #  124   0xc0  6      OPC=jne_label_1          
  nop                             #  125   0xbb  1      OPC=nop                    nop                             #  125   0xc6  1      OPC=nop                  
  nop                             #  126   0xbc  1      OPC=nop                    nop                             #  126   0xc7  1      OPC=nop                  
  negl %esi                       #  127   0xbd  2      OPC=negl_r32               nop                             #  127   0xc8  1      OPC=nop                  
  nop                             #  128   0xbf  1      OPC=nop                    nop                             #  128   0xc9  1      OPC=nop                  
  nop                             #  129   0xc0  1      OPC=nop                    nop                             #  129   0xca  1      OPC=nop                  
  nop                             #  130   0xc1  1      OPC=nop                    nop                             #  130   0xcb  1      OPC=nop                  
  nop                             #  131   0xc2  1      OPC=nop                    nop                             #  131   0xcc  1      OPC=nop                  
  jne .L_126860                   #  132   0xc3  6      OPC=jne_label_1            nop                             #  132   0xcd  1      OPC=nop                  
  nop                             #  133   0xc9  1      OPC=nop                    nop                             #  133   0xce  1      OPC=nop                  
  nop                             #  134   0xca  1      OPC=nop                    nop                             #  134   0xcf  1      OPC=nop                  
  nop                             #  135   0xcb  1      OPC=nop                    nop                             #  135   0xd0  1      OPC=nop                  
  nop                             #  136   0xcc  1      OPC=nop                    nop                             #  136   0xd1  1      OPC=nop                  
  nop                             #  137   0xcd  1      OPC=nop                    popq %r11                       #  137   0xd2  2      OPC=popq_r64_1           
  nop                             #  138   0xce  1      OPC=nop                    andl $0xe0, %r11d               #  138   0xd4  4      OPC=andl_r32_imm8        
  nop                             #  139   0xcf  1      OPC=nop                    addq %r15, %r11                 #  139   0xd8  3      OPC=addq_r64_r64         
  popq %r11                       #  140   0xd0  2      OPC=popq_r64_1             jmpq %r11                       #  140   0xdb  3      OPC=jmpq_r64             
  andl $0xe0, %r11d               #  141   0xd2  4      OPC=andl_r32_imm8                                                                                         
  addq %r15, %r11                 #  142   0xd6  3      OPC=addq_r64_r64         .size strcpy, .-strcpy                                                           
  jmpq %r11                       #  143   0xd9  3      OPC=jmpq_r64                                                                                              
                                                                                                                                                                  
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Statistics Update: 

Iterations:                    500000
Elapsed Time:                  203.423s
Iterations/s:                  2457.93

Starting cost:                 72
Lowest cost:                   46
Lowest correct cost:           49

Move Type       Proposed     Succeeded     Accepted     
                                                        
Rotate          8.314%       6.9402%       3.4112%      
Add Nops        8.349%       8.349%        4.1654%      
Delete          8.3078%      7.477%        4.2928%      
OpcodeWidth     8.3792%      7.2398%       6.738%       
Instruction     8.2374%      3.5316%       0.138%       
ReplaceNop      8.3228%      7.4944%       6.5968%      
Opcode          8.2868%      7.549%        6.8634%      
Global Swap     8.4438%      6.6884%       5.2736%      
Operand         8.2576%      4.576%        0.8464%      
Local Swap      8.398%       5.6984%       4.4418%      
Global Copy     8.3412%      7.3728%       7.3728%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.3624%      5.1074%       0.0012%      
                                                        
Total           100%         78.024%       50.1414%     

********************************************************************************

===========================================
Working on pair / P: 1 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_8|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>)) (== <TMP_BV_8_9|8> <TMP_BV_8_6|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_6|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_8|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>)) (== <TMP_BV_8_9|8> <TMP_BV_8_6|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 1 
2  |       1 0 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 2 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_15|8> <TMP_BV_8_19|8>)) (== <TMP_BV_8_16|8> <TMP_BV_8_18|8>)) (== <TMP_BV_32_20|32> <TMP_BV_32_17|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_17|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_15|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_15|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_15|8> <TMP_BV_8_19|8>)) (== <TMP_BV_8_16|8> <TMP_BV_8_18|8>)) (== <TMP_BV_32_20|32> <TMP_BV_32_17|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 1 
2  |       0 1 0 
3  |         0 1 
4  |           0 
5  |             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 2 offset 0 size 1 (cell size 2)
Access 3 cell 1 offset 0 size 1 (cell size 2)
Access 4 cell 2 offset 1 size 1 (cell size 2)
Access 5 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_27|8> <TMP_BV_8_31|8>)) (== <TMP_BV_16_28|16> <TMP_BV_16_30|16>)) (== <TMP_BV_16_32|16> <TMP_BV_16_29|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_29|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_29|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_27|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_27|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_27|8> <TMP_BV_8_31|8>)) (== <TMP_BV_16_28|16> <TMP_BV_16_30|16>)) (== <TMP_BV_16_32|16> <TMP_BV_16_29|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 1 0 0 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 2 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 2 offset 1 size 1 (cell size 4)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_40|8> <TMP_BV_8_44|8>)) (== <TMP_BV_16_41|16> <TMP_BV_16_43|16>)) (== <TMP_BV_32_45|32> <TMP_BV_32_42|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_42|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_42|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_40|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_40|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_40|8> <TMP_BV_8_44|8>)) (== <TMP_BV_16_41|16> <TMP_BV_16_43|16>)) (== <TMP_BV_32_45|32> <TMP_BV_32_42|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 1 1 0 
3  |         0 0 1 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 5)
Access 2 cell 2 offset 0 size 4 (cell size 8)
Access 3 cell 1 offset 0 size 4 (cell size 5)
Access 4 cell 2 offset 4 size 4 (cell size 8)
Access 5 cell 2 offset 4 size 1 (cell size 8)
Access 6 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 5 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 5 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_52|8> <TMP_BV_8_56|8>)) (== <TMP_BV_40_53|40> <TMP_BV_40_55|40>)) (== <TMP_BV_64_57|64> <TMP_BV_64_54|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_54|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_52|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_52|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_52|8> <TMP_BV_8_56|8>)) (== <TMP_BV_40_53|40> <TMP_BV_40_55|40>)) (== <TMP_BV_64_57|64> <TMP_BV_64_54|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 6)
Access 2 cell 2 offset 0 size 4 (cell size 8)
Access 3 cell 1 offset 0 size 4 (cell size 6)
Access 4 cell 2 offset 4 size 4 (cell size 8)
Access 5 cell 2 offset 4 size 1 (cell size 8)
Access 6 cell 1 offset 4 size 1 (cell size 6)
Access 7 cell 2 offset 5 size 1 (cell size 8)
Access 8 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 6 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_66|8> <TMP_BV_8_70|8>)) (== <TMP_BV_48_67|48> <TMP_BV_48_69|48>)) (== <TMP_BV_64_71|64> <TMP_BV_64_68|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_68|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_68|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_66|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_66|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_66|8> <TMP_BV_8_70|8>)) (== <TMP_BV_48_67|48> <TMP_BV_48_69|48>)) (== <TMP_BV_64_71|64> <TMP_BV_64_68|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 1 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 9)
Access 2 cell 2 offset 0 size 4 (cell size 12)
Access 3 cell 1 offset 0 size 4 (cell size 9)
Access 4 cell 2 offset 4 size 4 (cell size 12)
Access 5 cell 1 offset 4 size 4 (cell size 9)
Access 6 cell 2 offset 8 size 4 (cell size 12)
Access 7 cell 2 offset 8 size 1 (cell size 12)
Access 8 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 9 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_79|8> <TMP_BV_8_83|8>)) (== <TMP_BV_72_80|72> <TMP_BV_72_82|72>)) (== <TMP_BV_96_84|96> <TMP_BV_96_81|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_81|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_79|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_79|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_79|8> <TMP_BV_8_83|8>)) (== <TMP_BV_72_80|72> <TMP_BV_72_82|72>)) (== <TMP_BV_96_84|96> <TMP_BV_96_81|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 1 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 10)
Access 2 cell 2 offset 0 size 4 (cell size 12)
Access 3 cell 1 offset 0 size 4 (cell size 10)
Access 4 cell 2 offset 4 size 4 (cell size 12)
Access 5 cell 1 offset 4 size 4 (cell size 10)
Access 6 cell 2 offset 8 size 4 (cell size 12)
Access 7 cell 2 offset 8 size 1 (cell size 12)
Access 8 cell 1 offset 8 size 1 (cell size 10)
Access 9 cell 2 offset 9 size 1 (cell size 12)
Access 10 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 10 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_94|8> <TMP_BV_8_98|8>)) (== <TMP_BV_80_95|80> <TMP_BV_80_97|80>)) (== <TMP_BV_96_99|96> <TMP_BV_96_96|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_96|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_96|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_94|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_94|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_94|8> <TMP_BV_8_98|8>)) (== <TMP_BV_80_95|80> <TMP_BV_80_97|80>)) (== <TMP_BV_96_99|96> <TMP_BV_96_96|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   1 0 0 0 
1  |     0 0 0 
2  |       0 1 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_105|32> <TMP_BV_32_109|32>)) (== <TMP_BV_8_106|8> <TMP_BV_8_108|8>)) (== <TMP_BV_8_110|8> <TMP_BV_8_107|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_107|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_105|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_105|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_105|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_105|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_105|32> <TMP_BV_32_109|32>)) (== <TMP_BV_8_106|8> <TMP_BV_8_108|8>)) (== <TMP_BV_8_110|8> <TMP_BV_8_107|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   1 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 1 
3  |         1 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 2 offset 0 size 1 (cell size 4)
Access 5 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_117|32> <TMP_BV_32_121|32>)) (== <TMP_BV_8_118|8> <TMP_BV_8_120|8>)) (== <TMP_BV_32_122|32> <TMP_BV_32_119|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_119|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_117|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_117|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_117|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_117|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_117|32> <TMP_BV_32_121|32>)) (== <TMP_BV_8_118|8> <TMP_BV_8_120|8>)) (== <TMP_BV_32_122|32> <TMP_BV_32_119|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 1 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 2 offset 0 size 1 (cell size 2)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 2 offset 1 size 1 (cell size 2)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_130|32> <TMP_BV_32_134|32>)) (== <TMP_BV_16_131|16> <TMP_BV_16_133|16>)) (== <TMP_BV_16_135|16> <TMP_BV_16_132|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_132|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_132|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_130|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_130|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_130|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_130|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_130|32> <TMP_BV_32_134|32>)) (== <TMP_BV_16_131|16> <TMP_BV_16_133|16>)) (== <TMP_BV_16_135|16> <TMP_BV_16_132|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 1 0 0 
3  |         1 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 2 offset 0 size 1 (cell size 4)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 2 offset 1 size 1 (cell size 4)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_144|32> <TMP_BV_32_148|32>)) (== <TMP_BV_16_145|16> <TMP_BV_16_147|16>)) (== <TMP_BV_32_149|32> <TMP_BV_32_146|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_146|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_146|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_144|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_144|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_144|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_144|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_144|32> <TMP_BV_32_148|32>)) (== <TMP_BV_16_145|16> <TMP_BV_16_147|16>)) (== <TMP_BV_32_149|32> <TMP_BV_32_146|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 1 1 0 
4  |           0 0 1 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 5)
Access 3 cell 2 offset 0 size 4 (cell size 8)
Access 4 cell 1 offset 0 size 4 (cell size 5)
Access 5 cell 2 offset 4 size 4 (cell size 8)
Access 6 cell 2 offset 4 size 1 (cell size 8)
Access 7 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 5 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 5 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_157|32> <TMP_BV_32_161|32>)) (== <TMP_BV_40_158|40> <TMP_BV_40_160|40>)) (== <TMP_BV_64_162|64> <TMP_BV_64_159|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_159|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_157|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_157|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_157|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_157|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_157|32> <TMP_BV_32_161|32>)) (== <TMP_BV_40_158|40> <TMP_BV_40_160|40>)) (== <TMP_BV_64_162|64> <TMP_BV_64_159|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 1 0 0 0 
4  |           0 0 1 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 6)
Access 3 cell 2 offset 0 size 4 (cell size 8)
Access 4 cell 1 offset 0 size 4 (cell size 6)
Access 5 cell 2 offset 4 size 4 (cell size 8)
Access 6 cell 2 offset 4 size 1 (cell size 8)
Access 7 cell 1 offset 4 size 1 (cell size 6)
Access 8 cell 2 offset 5 size 1 (cell size 8)
Access 9 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 6 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_172|32> <TMP_BV_32_176|32>)) (== <TMP_BV_48_173|48> <TMP_BV_48_175|48>)) (== <TMP_BV_64_177|64> <TMP_BV_64_174|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_174|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_174|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_172|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_172|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_172|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_172|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_172|32> <TMP_BV_32_176|32>)) (== <TMP_BV_48_173|48> <TMP_BV_48_175|48>)) (== <TMP_BV_64_177|64> <TMP_BV_64_174|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 1 1 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 9)
Access 3 cell 2 offset 0 size 4 (cell size 12)
Access 4 cell 1 offset 0 size 4 (cell size 9)
Access 5 cell 2 offset 4 size 4 (cell size 12)
Access 6 cell 1 offset 4 size 4 (cell size 9)
Access 7 cell 2 offset 8 size 4 (cell size 12)
Access 8 cell 2 offset 8 size 1 (cell size 12)
Access 9 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 9 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_186|32> <TMP_BV_32_190|32>)) (== <TMP_BV_72_187|72> <TMP_BV_72_189|72>)) (== <TMP_BV_96_191|96> <TMP_BV_96_188|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_188|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_186|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_186|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_186|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_186|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_186|32> <TMP_BV_32_190|32>)) (== <TMP_BV_72_187|72> <TMP_BV_72_189|72>)) (== <TMP_BV_96_191|96> <TMP_BV_96_188|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 1 1 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 10)
Access 3 cell 2 offset 0 size 4 (cell size 12)
Access 4 cell 1 offset 0 size 4 (cell size 10)
Access 5 cell 2 offset 4 size 4 (cell size 12)
Access 6 cell 1 offset 4 size 4 (cell size 10)
Access 7 cell 2 offset 8 size 4 (cell size 12)
Access 8 cell 2 offset 8 size 1 (cell size 12)
Access 9 cell 1 offset 8 size 1 (cell size 10)
Access 10 cell 2 offset 9 size 1 (cell size 12)
Access 11 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 10 / offset 0
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_202|32> <TMP_BV_32_206|32>)) (== <TMP_BV_80_203|80> <TMP_BV_80_205|80>)) (== <TMP_BV_96_207|96> <TMP_BV_96_204|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_204|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_204|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_202|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_202|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_202|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_202|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_202|32> <TMP_BV_32_206|32>)) (== <TMP_BV_80_203|80> <TMP_BV_80_205|80>)) (== <TMP_BV_96_207|96> <TMP_BV_96_204|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 1 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_214|16> <TMP_BV_16_218|16>)) (== <TMP_BV_16_215|16> <TMP_BV_16_217|16>)) (== <TMP_BV_8_219|8> <TMP_BV_8_216|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_216|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_214|16> <TMP_BV_16_218|16>)) (== <TMP_BV_16_215|16> <TMP_BV_16_217|16>)) (== <TMP_BV_8_219|8> <TMP_BV_8_216|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 2 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_227|16> <TMP_BV_16_231|16>)) (== <TMP_BV_16_228|16> <TMP_BV_16_230|16>)) (== <TMP_BV_32_232|32> <TMP_BV_32_229|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_229|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_227|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_227|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_227|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_227|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_227|16> <TMP_BV_16_231|16>)) (== <TMP_BV_16_228|16> <TMP_BV_16_230|16>)) (== <TMP_BV_32_232|32> <TMP_BV_32_229|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 1 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 0 0 0 0 0 
1  |     0 1 0 0 0 1 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 1 (cell size 2)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 2 offset 1 size 1 (cell size 2)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_241|16> <TMP_BV_16_245|16>)) (== <TMP_BV_16_242|16> <TMP_BV_16_244|16>)) (== <TMP_BV_16_246|16> <TMP_BV_16_243|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_243|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_243|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_241|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_241|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_241|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_241|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_241|16> <TMP_BV_16_245|16>)) (== <TMP_BV_16_242|16> <TMP_BV_16_244|16>)) (== <TMP_BV_16_246|16> <TMP_BV_16_243|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 1 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 2 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 2 offset 1 size 1 (cell size 4)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_256|16> <TMP_BV_16_260|16>)) (== <TMP_BV_16_257|16> <TMP_BV_16_259|16>)) (== <TMP_BV_32_261|32> <TMP_BV_32_258|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_258|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_258|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_256|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_256|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_256|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_256|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_256|16> <TMP_BV_16_260|16>)) (== <TMP_BV_16_257|16> <TMP_BV_16_259|16>)) (== <TMP_BV_32_261|32> <TMP_BV_32_258|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 1 1 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 5)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 5)
Access 4 cell 2 offset 0 size 4 (cell size 8)
Access 5 cell 1 offset 0 size 4 (cell size 5)
Access 6 cell 2 offset 4 size 4 (cell size 8)
Access 7 cell 2 offset 4 size 1 (cell size 8)
Access 8 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 5 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 5 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 5 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_270|16> <TMP_BV_16_274|16>)) (== <TMP_BV_40_271|40> <TMP_BV_40_273|40>)) (== <TMP_BV_64_275|64> <TMP_BV_64_272|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_272|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_270|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_270|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_270|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_270|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_270|16> <TMP_BV_16_274|16>)) (== <TMP_BV_40_271|40> <TMP_BV_40_273|40>)) (== <TMP_BV_64_275|64> <TMP_BV_64_272|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 1 1 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 6)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 6)
Access 4 cell 2 offset 0 size 4 (cell size 8)
Access 5 cell 1 offset 0 size 4 (cell size 6)
Access 6 cell 2 offset 4 size 4 (cell size 8)
Access 7 cell 2 offset 4 size 1 (cell size 8)
Access 8 cell 1 offset 4 size 1 (cell size 6)
Access 9 cell 2 offset 5 size 1 (cell size 8)
Access 10 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 6 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 6 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_286|16> <TMP_BV_16_290|16>)) (== <TMP_BV_48_287|48> <TMP_BV_48_289|48>)) (== <TMP_BV_64_291|64> <TMP_BV_64_288|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_288|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_288|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_286|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_286|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_286|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_286|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_286|16> <TMP_BV_16_290|16>)) (== <TMP_BV_48_287|48> <TMP_BV_48_289|48>)) (== <TMP_BV_64_291|64> <TMP_BV_64_288|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   1 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 1 0 
7  |                 0 0 1 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 9)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 9)
Access 4 cell 2 offset 0 size 4 (cell size 12)
Access 5 cell 1 offset 0 size 4 (cell size 9)
Access 6 cell 2 offset 4 size 4 (cell size 12)
Access 7 cell 1 offset 4 size 4 (cell size 9)
Access 8 cell 2 offset 8 size 4 (cell size 12)
Access 9 cell 2 offset 8 size 1 (cell size 12)
Access 10 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 9 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 9 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_301|16> <TMP_BV_16_305|16>)) (== <TMP_BV_72_302|72> <TMP_BV_72_304|72>)) (== <TMP_BV_96_306|96> <TMP_BV_96_303|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_303|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_301|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_301|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_301|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_301|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_301|16> <TMP_BV_16_305|16>)) (== <TMP_BV_72_302|72> <TMP_BV_72_304|72>)) (== <TMP_BV_96_306|96> <TMP_BV_96_303|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   1 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 1 0 0 0 
7  |                 0 0 1 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 10)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 10)
Access 4 cell 2 offset 0 size 4 (cell size 12)
Access 5 cell 1 offset 0 size 4 (cell size 10)
Access 6 cell 2 offset 4 size 4 (cell size 12)
Access 7 cell 1 offset 4 size 4 (cell size 10)
Access 8 cell 2 offset 8 size 4 (cell size 12)
Access 9 cell 2 offset 8 size 1 (cell size 12)
Access 10 cell 1 offset 8 size 1 (cell size 10)
Access 11 cell 2 offset 9 size 1 (cell size 12)
Access 12 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 10 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 10 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_318|16> <TMP_BV_16_322|16>)) (== <TMP_BV_80_319|80> <TMP_BV_80_321|80>)) (== <TMP_BV_96_323|96> <TMP_BV_96_320|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_320|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_320|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_318|16> <TMP_BV_16_322|16>)) (== <TMP_BV_80_319|80> <TMP_BV_80_321|80>)) (== <TMP_BV_96_323|96> <TMP_BV_96_320|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 1 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_331|32> <TMP_BV_32_335|32>)) (== <TMP_BV_16_332|16> <TMP_BV_16_334|16>)) (== <TMP_BV_8_336|8> <TMP_BV_8_333|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_333|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_331|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_331|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_331|32> <TMP_BV_32_335|32>)) (== <TMP_BV_16_332|16> <TMP_BV_16_334|16>)) (== <TMP_BV_8_336|8> <TMP_BV_8_333|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 2 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_345|32> <TMP_BV_32_349|32>)) (== <TMP_BV_16_346|16> <TMP_BV_16_348|16>)) (== <TMP_BV_32_350|32> <TMP_BV_32_347|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_347|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_345|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_345|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_345|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_345|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_345|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_345|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_345|32> <TMP_BV_32_349|32>)) (== <TMP_BV_16_346|16> <TMP_BV_16_348|16>)) (== <TMP_BV_32_350|32> <TMP_BV_32_347|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   1 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 1 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 0 0 0 1 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 1 (cell size 2)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 2 offset 1 size 1 (cell size 2)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 2 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_360|32> <TMP_BV_32_364|32>)) (== <TMP_BV_16_361|16> <TMP_BV_16_363|16>)) (== <TMP_BV_16_365|16> <TMP_BV_16_362|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_362|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_362|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_360|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_360|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_360|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_360|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_360|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_360|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_360|32> <TMP_BV_32_364|32>)) (== <TMP_BV_16_361|16> <TMP_BV_16_363|16>)) (== <TMP_BV_16_365|16> <TMP_BV_16_362|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 1 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 1 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 2 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 2)
Access 8 cell 2 offset 1 size 1 (cell size 4)
Access 9 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 2 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_376|32> <TMP_BV_32_380|32>)) (== <TMP_BV_16_377|16> <TMP_BV_16_379|16>)) (== <TMP_BV_32_381|32> <TMP_BV_32_378|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_378|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_378|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_376|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_376|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_376|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_376|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_376|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_376|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_376|32> <TMP_BV_32_380|32>)) (== <TMP_BV_16_377|16> <TMP_BV_16_379|16>)) (== <TMP_BV_32_381|32> <TMP_BV_32_378|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 1 1 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 5)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 8)
Access 6 cell 1 offset 0 size 4 (cell size 5)
Access 7 cell 2 offset 4 size 4 (cell size 8)
Access 8 cell 2 offset 4 size 1 (cell size 8)
Access 9 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 5 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 5 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 5 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_391|32> <TMP_BV_32_395|32>)) (== <TMP_BV_40_392|40> <TMP_BV_40_394|40>)) (== <TMP_BV_64_396|64> <TMP_BV_64_393|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_393|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_391|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_391|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_391|32> <TMP_BV_32_395|32>)) (== <TMP_BV_40_392|40> <TMP_BV_40_394|40>)) (== <TMP_BV_64_396|64> <TMP_BV_64_393|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 1 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 6)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 6)
Access 5 cell 2 offset 0 size 4 (cell size 8)
Access 6 cell 1 offset 0 size 4 (cell size 6)
Access 7 cell 2 offset 4 size 4 (cell size 8)
Access 8 cell 2 offset 4 size 1 (cell size 8)
Access 9 cell 1 offset 4 size 1 (cell size 6)
Access 10 cell 2 offset 5 size 1 (cell size 8)
Access 11 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 6 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 6 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_408|32> <TMP_BV_32_412|32>)) (== <TMP_BV_48_409|48> <TMP_BV_48_411|48>)) (== <TMP_BV_64_413|64> <TMP_BV_64_410|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_410|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_410|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_408|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_408|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_408|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_408|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_408|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_408|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_408|32> <TMP_BV_32_412|32>)) (== <TMP_BV_48_409|48> <TMP_BV_48_411|48>)) (== <TMP_BV_64_413|64> <TMP_BV_64_410|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 9)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 9)
Access 5 cell 2 offset 0 size 4 (cell size 12)
Access 6 cell 1 offset 0 size 4 (cell size 9)
Access 7 cell 2 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 9)
Access 9 cell 2 offset 8 size 4 (cell size 12)
Access 10 cell 2 offset 8 size 1 (cell size 12)
Access 11 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 9 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 9 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_424|32> <TMP_BV_32_428|32>)) (== <TMP_BV_72_425|72> <TMP_BV_72_427|72>)) (== <TMP_BV_96_429|96> <TMP_BV_96_426|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_426|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_424|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_424|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_424|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_424|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_424|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_424|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_424|32> <TMP_BV_32_428|32>)) (== <TMP_BV_72_425|72> <TMP_BV_72_427|72>)) (== <TMP_BV_96_429|96> <TMP_BV_96_426|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 10)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 10)
Access 5 cell 2 offset 0 size 4 (cell size 12)
Access 6 cell 1 offset 0 size 4 (cell size 10)
Access 7 cell 2 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 10)
Access 9 cell 2 offset 8 size 4 (cell size 12)
Access 10 cell 2 offset 8 size 1 (cell size 12)
Access 11 cell 1 offset 8 size 1 (cell size 10)
Access 12 cell 2 offset 9 size 1 (cell size 12)
Access 13 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 10 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 10 / offset 1
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_442|32> <TMP_BV_32_446|32>)) (== <TMP_BV_80_443|80> <TMP_BV_80_445|80>)) (== <TMP_BV_96_447|96> <TMP_BV_96_444|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_444|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_444|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_442|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_442|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_442|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_442|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_442|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_442|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_442|32> <TMP_BV_32_446|32>)) (== <TMP_BV_80_443|80> <TMP_BV_80_445|80>)) (== <TMP_BV_96_447|96> <TMP_BV_96_444|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 1 0 0 0 
1  |     0 0 1 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_454|64> <TMP_BV_64_458|64>)) (== <TMP_BV_40_455|40> <TMP_BV_40_457|40>)) (== <TMP_BV_8_459|8> <TMP_BV_8_456|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_456|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_454|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_454|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_454|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_454|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_454|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_454|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_454|64> <TMP_BV_64_458|64>)) (== <TMP_BV_40_455|40> <TMP_BV_40_457|40>)) (== <TMP_BV_8_459|8> <TMP_BV_8_456|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 
2  |       1 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 1 0 0 0 0 
1  |     0 0 1 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 2 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_467|64> <TMP_BV_64_471|64>)) (== <TMP_BV_40_468|40> <TMP_BV_40_470|40>)) (== <TMP_BV_32_472|32> <TMP_BV_32_469|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_469|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_467|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_467|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_467|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_467|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_467|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_467|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_467|64> <TMP_BV_64_471|64>)) (== <TMP_BV_40_468|40> <TMP_BV_40_470|40>)) (== <TMP_BV_32_472|32> <TMP_BV_32_469|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 1 (cell size 2)
Access 6 cell 1 offset 0 size 1 (cell size 5)
Access 7 cell 2 offset 1 size 1 (cell size 2)
Access 8 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 5 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_481|64> <TMP_BV_64_485|64>)) (== <TMP_BV_40_482|40> <TMP_BV_40_484|40>)) (== <TMP_BV_16_486|16> <TMP_BV_16_483|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_483|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_483|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_481|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_481|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_481|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_481|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_481|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_481|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_481|64> <TMP_BV_64_485|64>)) (== <TMP_BV_40_482|40> <TMP_BV_40_484|40>)) (== <TMP_BV_16_486|16> <TMP_BV_16_483|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 2 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 5)
Access 8 cell 2 offset 1 size 1 (cell size 4)
Access 9 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 5 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_496|64> <TMP_BV_64_500|64>)) (== <TMP_BV_40_497|40> <TMP_BV_40_499|40>)) (== <TMP_BV_32_501|32> <TMP_BV_32_498|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_498|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_498|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_496|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_496|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_496|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_496|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_496|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_496|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_496|64> <TMP_BV_64_500|64>)) (== <TMP_BV_40_497|40> <TMP_BV_40_499|40>)) (== <TMP_BV_32_501|32> <TMP_BV_32_498|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 1 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 1 1 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 8)
Access 6 cell 1 offset 0 size 4 (cell size 5)
Access 7 cell 2 offset 4 size 4 (cell size 8)
Access 8 cell 2 offset 4 size 1 (cell size 8)
Access 9 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 5 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_510|64> <TMP_BV_64_514|64>)) (== <TMP_BV_40_511|40> <TMP_BV_40_513|40>)) (== <TMP_BV_64_515|64> <TMP_BV_64_512|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_512|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_510|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_510|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_510|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_510|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_510|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_510|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_510|64> <TMP_BV_64_514|64>)) (== <TMP_BV_40_511|40> <TMP_BV_40_513|40>)) (== <TMP_BV_64_515|64> <TMP_BV_64_512|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 1 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 1 
5  |             0 1 1 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 2 offset 0 size 4 (cell size 8)
Access 6 cell 1 offset 0 size 4 (cell size 6)
Access 7 cell 2 offset 4 size 4 (cell size 8)
Access 8 cell 2 offset 4 size 1 (cell size 8)
Access 9 cell 1 offset 4 size 1 (cell size 6)
Access 10 cell 2 offset 5 size 1 (cell size 8)
Access 11 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_526|64> <TMP_BV_64_530|64>)) (== <TMP_BV_48_527|48> <TMP_BV_48_529|48>)) (== <TMP_BV_64_531|64> <TMP_BV_64_528|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_528|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_528|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_526|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_526|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_526|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_526|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_526|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_526|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_526|64> <TMP_BV_64_530|64>)) (== <TMP_BV_48_527|48> <TMP_BV_48_529|48>)) (== <TMP_BV_64_531|64> <TMP_BV_64_528|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 1 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 9)
Access 5 cell 2 offset 0 size 4 (cell size 12)
Access 6 cell 1 offset 0 size 4 (cell size 9)
Access 7 cell 2 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 9)
Access 9 cell 2 offset 8 size 4 (cell size 12)
Access 10 cell 2 offset 8 size 1 (cell size 12)
Access 11 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 9 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_541|64> <TMP_BV_64_545|64>)) (== <TMP_BV_72_542|72> <TMP_BV_72_544|72>)) (== <TMP_BV_96_546|96> <TMP_BV_96_543|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_543|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_541|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_541|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_541|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_541|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_541|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_541|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_541|64> <TMP_BV_64_545|64>)) (== <TMP_BV_72_542|72> <TMP_BV_72_544|72>)) (== <TMP_BV_96_546|96> <TMP_BV_96_543|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 10)
Access 5 cell 2 offset 0 size 4 (cell size 12)
Access 6 cell 1 offset 0 size 4 (cell size 10)
Access 7 cell 2 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 10)
Access 9 cell 2 offset 8 size 4 (cell size 12)
Access 10 cell 2 offset 8 size 1 (cell size 12)
Access 11 cell 1 offset 8 size 1 (cell size 10)
Access 12 cell 2 offset 9 size 1 (cell size 12)
Access 13 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 10 / offset 4
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_558|64> <TMP_BV_64_562|64>)) (== <TMP_BV_80_559|80> <TMP_BV_80_561|80>)) (== <TMP_BV_96_563|96> <TMP_BV_96_560|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_560|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_560|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_558|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_558|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_558|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_558|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_558|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_558|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_558|64> <TMP_BV_64_562|64>)) (== <TMP_BV_80_559|80> <TMP_BV_80_561|80>)) (== <TMP_BV_96_563|96> <TMP_BV_96_560|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_572|64> <TMP_BV_64_576|64>)) (== <TMP_BV_48_573|48> <TMP_BV_48_575|48>)) (== <TMP_BV_8_577|8> <TMP_BV_8_574|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_574|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_572|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_572|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_572|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_572|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_572|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_572|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_572|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_572|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_572|64> <TMP_BV_64_576|64>)) (== <TMP_BV_48_573|48> <TMP_BV_48_575|48>)) (== <TMP_BV_8_577|8> <TMP_BV_8_574|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 2 offset 0 size 1 (cell size 4)
Access 9 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_587|64> <TMP_BV_64_591|64>)) (== <TMP_BV_48_588|48> <TMP_BV_48_590|48>)) (== <TMP_BV_32_592|32> <TMP_BV_32_589|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_589|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_587|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_587|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_587|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_587|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_587|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_587|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_587|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_587|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_587|64> <TMP_BV_64_591|64>)) (== <TMP_BV_48_588|48> <TMP_BV_48_590|48>)) (== <TMP_BV_32_592|32> <TMP_BV_32_589|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 1 (cell size 2)
Access 8 cell 1 offset 0 size 1 (cell size 6)
Access 9 cell 2 offset 1 size 1 (cell size 2)
Access 10 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 6 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_603|64> <TMP_BV_64_607|64>)) (== <TMP_BV_48_604|48> <TMP_BV_48_606|48>)) (== <TMP_BV_16_608|16> <TMP_BV_16_605|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_605|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_605|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_603|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_603|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_603|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_603|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_603|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_603|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_603|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_603|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_603|64> <TMP_BV_64_607|64>)) (== <TMP_BV_48_604|48> <TMP_BV_48_606|48>)) (== <TMP_BV_16_608|16> <TMP_BV_16_605|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 2 offset 0 size 1 (cell size 4)
Access 9 cell 1 offset 0 size 1 (cell size 6)
Access 10 cell 2 offset 1 size 1 (cell size 4)
Access 11 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 6 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_620|64> <TMP_BV_64_624|64>)) (== <TMP_BV_48_621|48> <TMP_BV_48_623|48>)) (== <TMP_BV_32_625|32> <TMP_BV_32_622|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_622|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_622|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_620|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_620|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_620|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_620|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_620|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_620|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_620|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_620|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_620|64> <TMP_BV_64_624|64>)) (== <TMP_BV_48_621|48> <TMP_BV_48_623|48>)) (== <TMP_BV_32_625|32> <TMP_BV_32_622|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 1 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 8)
Access 8 cell 1 offset 0 size 4 (cell size 6)
Access 9 cell 2 offset 4 size 4 (cell size 8)
Access 10 cell 2 offset 4 size 1 (cell size 8)
Access 11 cell 1 offset 4 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_636|64> <TMP_BV_64_640|64>)) (== <TMP_BV_48_637|48> <TMP_BV_48_639|48>)) (== <TMP_BV_64_641|64> <TMP_BV_64_638|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_638|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_636|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_636|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_636|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_636|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_636|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_636|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_636|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_636|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_636|64> <TMP_BV_64_640|64>)) (== <TMP_BV_48_637|48> <TMP_BV_48_639|48>)) (== <TMP_BV_64_641|64> <TMP_BV_64_638|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 1 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 1 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 8)
Access 8 cell 1 offset 0 size 4 (cell size 6)
Access 9 cell 2 offset 4 size 4 (cell size 8)
Access 10 cell 2 offset 4 size 1 (cell size 8)
Access 11 cell 1 offset 4 size 1 (cell size 6)
Access 12 cell 2 offset 5 size 1 (cell size 8)
Access 13 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 6 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 6 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_654|64> <TMP_BV_64_658|64>)) (== <TMP_BV_48_655|48> <TMP_BV_48_657|48>)) (== <TMP_BV_64_659|64> <TMP_BV_64_656|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_656|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_656|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_654|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_654|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_654|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_654|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_654|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_654|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_654|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_654|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_654|64> <TMP_BV_64_658|64>)) (== <TMP_BV_48_655|48> <TMP_BV_48_657|48>)) (== <TMP_BV_64_659|64> <TMP_BV_64_656|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 1 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 1 0 0 0 
9  |                     0 1 1 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 9)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 12)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 2 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 9)
Access 11 cell 2 offset 8 size 4 (cell size 12)
Access 12 cell 2 offset 8 size 1 (cell size 12)
Access 13 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 9 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 9 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_671|64> <TMP_BV_64_675|64>)) (== <TMP_BV_72_672|72> <TMP_BV_72_674|72>)) (== <TMP_BV_96_676|96> <TMP_BV_96_673|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_673|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_671|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_671|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_671|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_671|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_671|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_671|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_671|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_671|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_671|64> <TMP_BV_64_675|64>)) (== <TMP_BV_72_672|72> <TMP_BV_72_674|72>)) (== <TMP_BV_96_676|96> <TMP_BV_96_673|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 0 0 
8  |                   0 1 0 0 0 0 0 
9  |                     0 1 1 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 10)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 10)
Access 7 cell 2 offset 0 size 4 (cell size 12)
Access 8 cell 1 offset 0 size 4 (cell size 10)
Access 9 cell 2 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 10)
Access 11 cell 2 offset 8 size 4 (cell size 12)
Access 12 cell 2 offset 8 size 1 (cell size 12)
Access 13 cell 1 offset 8 size 1 (cell size 10)
Access 14 cell 2 offset 9 size 1 (cell size 12)
Access 15 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 10 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 10 / offset 5
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_690|64> <TMP_BV_64_694|64>)) (== <TMP_BV_80_691|80> <TMP_BV_80_693|80>)) (== <TMP_BV_96_695|96> <TMP_BV_96_692|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_692|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_692|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_690|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_690|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_690|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_690|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_690|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_690|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_690|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_690|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_690|64> <TMP_BV_64_694|64>)) (== <TMP_BV_80_691|80> <TMP_BV_80_693|80>)) (== <TMP_BV_96_695|96> <TMP_BV_96_692|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_703|96> <TMP_BV_96_707|96>)) (== <TMP_BV_72_704|72> <TMP_BV_72_706|72>)) (== <TMP_BV_8_708|8> <TMP_BV_8_705|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_705|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_703|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_703|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_703|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_703|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_703|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_703|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_703|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_703|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_703|96> <TMP_BV_96_707|96>)) (== <TMP_BV_72_704|72> <TMP_BV_72_706|72>)) (== <TMP_BV_8_708|8> <TMP_BV_8_705|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           1 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 
3  |         0 0 1 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 2 offset 0 size 1 (cell size 4)
Access 9 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_717|96> <TMP_BV_96_721|96>)) (== <TMP_BV_72_718|72> <TMP_BV_72_720|72>)) (== <TMP_BV_32_722|32> <TMP_BV_32_719|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_719|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_717|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_717|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_717|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_717|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_717|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_717|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_717|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_717|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_717|96> <TMP_BV_96_721|96>)) (== <TMP_BV_72_718|72> <TMP_BV_72_720|72>)) (== <TMP_BV_32_722|32> <TMP_BV_32_719|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 1 (cell size 2)
Access 8 cell 1 offset 0 size 1 (cell size 9)
Access 9 cell 2 offset 1 size 1 (cell size 2)
Access 10 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 9 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_732|96> <TMP_BV_96_736|96>)) (== <TMP_BV_72_733|72> <TMP_BV_72_735|72>)) (== <TMP_BV_16_737|16> <TMP_BV_16_734|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_734|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_734|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_732|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_732|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_732|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_732|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_732|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_732|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_732|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_732|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_732|96> <TMP_BV_96_736|96>)) (== <TMP_BV_72_733|72> <TMP_BV_72_735|72>)) (== <TMP_BV_16_737|16> <TMP_BV_16_734|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 2 offset 0 size 1 (cell size 4)
Access 9 cell 1 offset 0 size 1 (cell size 9)
Access 10 cell 2 offset 1 size 1 (cell size 4)
Access 11 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 9 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_748|96> <TMP_BV_96_752|96>)) (== <TMP_BV_72_749|72> <TMP_BV_72_751|72>)) (== <TMP_BV_32_753|32> <TMP_BV_32_750|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_750|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_750|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_748|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_748|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_748|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_748|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_748|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_748|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_748|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_748|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_748|96> <TMP_BV_96_752|96>)) (== <TMP_BV_72_749|72> <TMP_BV_72_751|72>)) (== <TMP_BV_32_753|32> <TMP_BV_32_750|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 1 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 1 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 8)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 2 offset 4 size 4 (cell size 8)
Access 10 cell 2 offset 4 size 1 (cell size 8)
Access 11 cell 1 offset 4 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 9 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_763|96> <TMP_BV_96_767|96>)) (== <TMP_BV_72_764|72> <TMP_BV_72_766|72>)) (== <TMP_BV_64_768|64> <TMP_BV_64_765|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_765|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_763|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_763|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_763|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_763|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_763|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_763|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_763|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_763|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_763|96> <TMP_BV_96_767|96>)) (== <TMP_BV_72_764|72> <TMP_BV_72_766|72>)) (== <TMP_BV_64_768|64> <TMP_BV_64_765|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 1 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 1 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 8)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 2 offset 4 size 4 (cell size 8)
Access 10 cell 2 offset 4 size 1 (cell size 8)
Access 11 cell 1 offset 4 size 1 (cell size 9)
Access 12 cell 2 offset 5 size 1 (cell size 8)
Access 13 cell 1 offset 5 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 9 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 9 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_780|96> <TMP_BV_96_784|96>)) (== <TMP_BV_72_781|72> <TMP_BV_72_783|72>)) (== <TMP_BV_64_785|64> <TMP_BV_64_782|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_782|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_782|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_780|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_780|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_780|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_780|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_780|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_780|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_780|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_780|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_780|96> <TMP_BV_96_784|96>)) (== <TMP_BV_72_781|72> <TMP_BV_72_783|72>)) (== <TMP_BV_64_785|64> <TMP_BV_64_782|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 1 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 1 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 1 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 1 0 0 0 
9  |                     0 1 1 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 12)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 2 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 9)
Access 11 cell 2 offset 8 size 4 (cell size 12)
Access 12 cell 2 offset 8 size 1 (cell size 12)
Access 13 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 9 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 9 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_796|96> <TMP_BV_96_800|96>)) (== <TMP_BV_72_797|72> <TMP_BV_72_799|72>)) (== <TMP_BV_96_801|96> <TMP_BV_96_798|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_798|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_796|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_796|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_796|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_796|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_796|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_796|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_796|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_796|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_796|96> <TMP_BV_96_800|96>)) (== <TMP_BV_72_797|72> <TMP_BV_72_799|72>)) (== <TMP_BV_96_801|96> <TMP_BV_96_798|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 1 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 1 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 1 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 1 
7  |                 0 1 0 0 0 0 0 0 
8  |                   0 1 0 0 0 0 0 
9  |                     0 1 1 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 2 offset 0 size 4 (cell size 12)
Access 8 cell 1 offset 0 size 4 (cell size 10)
Access 9 cell 2 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 10)
Access 11 cell 2 offset 8 size 4 (cell size 12)
Access 12 cell 2 offset 8 size 1 (cell size 12)
Access 13 cell 1 offset 8 size 1 (cell size 10)
Access 14 cell 2 offset 9 size 1 (cell size 12)
Access 15 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_814|96> <TMP_BV_96_818|96>)) (== <TMP_BV_80_815|80> <TMP_BV_80_817|80>)) (== <TMP_BV_96_819|96> <TMP_BV_96_816|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_816|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_816|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_814|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_814|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_814|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_814|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_814|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_814|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_814|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_814|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_814|96> <TMP_BV_96_818|96>)) (== <TMP_BV_80_815|80> <TMP_BV_80_817|80>)) (== <TMP_BV_96_819|96> <TMP_BV_96_816|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 1 / cell size 1 / offset 0
70 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_829|96> <TMP_BV_96_833|96>)) (== <TMP_BV_80_830|80> <TMP_BV_80_832|80>)) (== <TMP_BV_8_834|8> <TMP_BV_8_831|8>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_8_831|8>)[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_829|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_829|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_829|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_829|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_829|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_829|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_829|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_829|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_829|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_829|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_829|96> <TMP_BV_96_833|96>)) (== <TMP_BV_80_830|80> <TMP_BV_80_832|80>)) (== <TMP_BV_8_834|8> <TMP_BV_8_831|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 2 offset 0 size 1 (cell size 4)
Access 11 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_845|96> <TMP_BV_96_849|96>)) (== <TMP_BV_80_846|80> <TMP_BV_80_848|80>)) (== <TMP_BV_32_850|32> <TMP_BV_32_847|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_847|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_845|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_845|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_845|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_845|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_845|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_845|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_845|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_845|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_845|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_845|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_845|96> <TMP_BV_96_849|96>)) (== <TMP_BV_80_846|80> <TMP_BV_80_848|80>)) (== <TMP_BV_32_850|32> <TMP_BV_32_847|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 1 (cell size 2)
Access 10 cell 1 offset 0 size 1 (cell size 10)
Access 11 cell 2 offset 1 size 1 (cell size 2)
Access 12 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 1 / cell size 2 / offset 0
70 -> 1 (size 1 / cell size 10 / offset 0
83 -> 2 (size 1 / cell size 2 / offset 1
117 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_862|96> <TMP_BV_96_866|96>)) (== <TMP_BV_80_863|80> <TMP_BV_80_865|80>)) (== <TMP_BV_16_867|16> <TMP_BV_16_864|16>))

CONSTRAINTS

(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_864|16>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_16_864|16>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_862|96> <TMP_BV_96_866|96>)) (== <TMP_BV_80_863|80> <TMP_BV_80_865|80>)) (== <TMP_BV_16_867|16> <TMP_BV_16_864|16>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 2 offset 0 size 1 (cell size 4)
Access 11 cell 1 offset 0 size 1 (cell size 10)
Access 12 cell 2 offset 1 size 1 (cell size 4)
Access 13 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 4 / offset 0
51 -> 2 (size 1 / cell size 4 / offset 0
85 -> 1 (size 1 / cell size 10 / offset 0
98 -> 2 (size 1 / cell size 4 / offset 1
132 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_880|96> <TMP_BV_96_884|96>)) (== <TMP_BV_80_881|80> <TMP_BV_80_883|80>)) (== <TMP_BV_32_885|32> <TMP_BV_32_882|32>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_882|32>[7:0])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_32_882|32>[15:8])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_880|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_880|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_880|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_880|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_880|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_880|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_880|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_880|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_880|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_880|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_880|96> <TMP_BV_96_884|96>)) (== <TMP_BV_80_881|80> <TMP_BV_80_883|80>)) (== <TMP_BV_32_885|32> <TMP_BV_32_882|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 1 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 1 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 1 1 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 8)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 2 offset 4 size 4 (cell size 8)
Access 12 cell 2 offset 4 size 1 (cell size 8)
Access 13 cell 1 offset 4 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 10 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_897|96> <TMP_BV_96_901|96>)) (== <TMP_BV_80_898|80> <TMP_BV_80_900|80>)) (== <TMP_BV_64_902|64> <TMP_BV_64_899|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_899|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_897|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_897|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_897|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_897|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_897|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_897|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_897|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_897|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_897|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_897|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_897|96> <TMP_BV_96_901|96>)) (== <TMP_BV_80_898|80> <TMP_BV_80_900|80>)) (== <TMP_BV_64_902|64> <TMP_BV_64_899|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 1 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 1 1 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 8)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 2 offset 4 size 4 (cell size 8)
Access 12 cell 2 offset 4 size 1 (cell size 8)
Access 13 cell 1 offset 4 size 1 (cell size 10)
Access 14 cell 2 offset 5 size 1 (cell size 8)
Access 15 cell 1 offset 5 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 8 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 8 / offset 4
89 -> 2 (size 1 / cell size 8 / offset 4
123 -> 1 (size 1 / cell size 10 / offset 4
136 -> 2 (size 1 / cell size 8 / offset 5
170 -> 1 (size 1 / cell size 10 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_916|96> <TMP_BV_96_920|96>)) (== <TMP_BV_80_917|80> <TMP_BV_80_919|80>)) (== <TMP_BV_64_921|64> <TMP_BV_64_918|64>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_918|64>[39:32])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_64_918|64>[47:40])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_916|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_916|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_916|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_916|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_916|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_916|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_916|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_916|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_916|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_916|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_916|96> <TMP_BV_96_920|96>)) (== <TMP_BV_80_917|80> <TMP_BV_80_919|80>)) (== <TMP_BV_64_921|64> <TMP_BV_64_918|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 1 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             1 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 1 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 1 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 1 0 0 0 0 
10 |                       0 1 0 0 0 
11 |                         0 1 1 0 
12 |                           0 0 1 
13 |                             0 0 
14 |                               0 
15 |                                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 12)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 2 offset 4 size 4 (cell size 12)
Access 12 cell 1 offset 4 size 4 (cell size 10)
Access 13 cell 2 offset 8 size 4 (cell size 12)
Access 14 cell 2 offset 8 size 1 (cell size 12)
Access 15 cell 1 offset 8 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_934|96> <TMP_BV_96_938|96>)) (== <TMP_BV_80_935|80> <TMP_BV_80_937|80>)) (== <TMP_BV_96_939|96> <TMP_BV_96_936|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_936|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_934|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_934|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_934|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_934|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_934|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_934|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_934|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_934|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_934|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_934|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_934|96> <TMP_BV_96_938|96>)) (== <TMP_BV_80_935|80> <TMP_BV_80_937|80>)) (== <TMP_BV_96_939|96> <TMP_BV_96_936|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
xorb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %edi, %ecx
nop 
nop 
nop 
nop 
nop 
movq %rsi, %rdx
nop 
nop 
nop 
movq %rcx, %rax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %ecx
movl %r8d, -0x4(%r15,%rcx,1)
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
andl $0x80, %esi
leal -0x3(,%rcx,4), %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
subl %r8d, %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
nop 
nop 
nop 
movzbl %sil, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %ecx
movb %r9b, -0x1(%r15,%rcx,1)
nop 
shrl $0x1, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 18
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 1 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 1 0 0 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 1 
9  |                     0 0 0 0 0 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 0 0 0 
13 |                             1 0 0 0 
14 |                               0 0 0 
15 |                                 0 0 
16 |                                   0 
17 |                                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 1 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 1 0 0 0 0 0 0 
10 |                       0 1 0 0 0 0 0 
11 |                         0 1 1 0 0 0 
12 |                           0 0 1 0 0 
13 |                             0 0 0 0 
14 |                               0 1 0 
15 |                                 0 1 
16 |                                   0 
17 |                                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 12)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 2 offset 4 size 4 (cell size 12)
Access 12 cell 1 offset 4 size 4 (cell size 10)
Access 13 cell 2 offset 8 size 4 (cell size 12)
Access 14 cell 2 offset 8 size 1 (cell size 12)
Access 15 cell 1 offset 8 size 1 (cell size 10)
Access 16 cell 2 offset 9 size 1 (cell size 12)
Access 17 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
36 -> 2 (size 4 / cell size 12 / offset 0
46 -> 1 (size 4 / cell size 10 / offset 0
48 -> 2 (size 4 / cell size 12 / offset 4
59 -> 1 (size 4 / cell size 10 / offset 4
61 -> 2 (size 4 / cell size 12 / offset 8
102 -> 2 (size 1 / cell size 12 / offset 8
136 -> 1 (size 1 / cell size 10 / offset 8
149 -> 2 (size 1 / cell size 12 / offset 9
183 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_954|96> <TMP_BV_96_958|96>)) (== <TMP_BV_80_955|80> <TMP_BV_80_957|80>)) (== <TMP_BV_96_959|96> <TMP_BV_96_956|96>))

CONSTRAINTS

(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0])[31:0] <0x80|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (plus (sign-extend-64 <0xfffffffd|32>) (<< (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]) <0x2|64>))[31:0])[31:0] <0x80|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_956|96>[71:64])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <%rsi_2_INIT|64>[63:8] (xor <%rsi_2_INIT|64>[7:0] <%r15_2_INIT|64>[7:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (>> (concat (concat <0x0|32> (concat <0x0|24> (sign-extend-64 <TMP_BV_96_956|96>[79:72])[7:0]))[31:0] <0x0|1>) (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>)))[32:1] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x1|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_954|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_954|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_954|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_954|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_954|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_954|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_954|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_954|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_954|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_954|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_954|96> <TMP_BV_96_958|96>)) (== <TMP_BV_80_955|80> <TMP_BV_80_957|80>)) (== <TMP_BV_96_959|96> <TMP_BV_96_956|96>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
################################################################################

Final update:

Total search iterations:       500000
Number of attempted searches:  1
Total search time:             203.424s
Total time:                    258.996s

Statistics of last search

Iterations:                    500000
Elapsed Time:                  203.423s
Iterations/s:                  2457.93

Starting cost:                 72
Lowest cost:                   46
Lowest correct cost:           49

Move Type       Proposed     Succeeded     Accepted     
                                                        
Rotate          8.314%       6.9402%       3.4112%      
Add Nops        8.349%       8.349%        4.1654%      
Delete          8.3078%      7.477%        4.2928%      
OpcodeWidth     8.3792%      7.2398%       6.738%       
Instruction     8.2374%      3.5316%       0.138%       
ReplaceNop      8.3228%      7.4944%       6.5968%      
Opcode          8.2868%      7.549%        6.8634%      
Global Swap     8.4438%      6.6884%       5.2736%      
Operand         8.2576%      4.576%        0.8464%      
Local Swap      8.398%       5.6984%       4.4418%      
Global Copy     8.3412%      7.3728%       7.3728%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.3624%      5.1074%       0.0012%      
                                                        
Total           100%         78.024%       50.1414%     

Lowest Cost Discovered (46)                                                      
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                  
  nop                             #  7     0x6   1      OPC=nop                  
  nop                             #  8     0x7   1      OPC=nop                  
  nop                             #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x9   1      OPC=nop                  
  nop                             #  11    0xa   1      OPC=nop                  
  nop                             #  12    0xb   1      OPC=nop                  
  nop                             #  13    0xc   1      OPC=nop                  
  nop                             #  14    0xd   1      OPC=nop                  
  nop                             #  15    0xe   1      OPC=nop                  
  movq %rsi, %rdx                 #  16    0xf   3      OPC=movq_r64_r64_1       
  nop                             #  17    0x12  1      OPC=nop                  
  nop                             #  18    0x13  1      OPC=nop                  
  nop                             #  19    0x14  1      OPC=nop                  
  movl %edi, %eax                 #  20    0x15  2      OPC=movl_r32_r32         
  nop                             #  21    0x17  1      OPC=nop                  
  nop                             #  22    0x18  1      OPC=nop                  
  nop                             #  23    0x19  1      OPC=nop                  
  nop                             #  24    0x1a  1      OPC=nop                  
  nop                             #  25    0x1b  1      OPC=nop                  
  nop                             #  26    0x1c  1      OPC=nop                  
  nop                             #  27    0x1d  1      OPC=nop                  
  nop                             #  28    0x1e  1      OPC=nop                  
  nop                             #  29    0x1f  1      OPC=nop                  
  nop                             #  30    0x20  1      OPC=nop                  
  nop                             #  31    0x21  1      OPC=nop                  
  nop                             #  32    0x22  1      OPC=nop                  
  nop                             #  33    0x23  1      OPC=nop                  
  nop                             #  34    0x24  1      OPC=nop                  
  movl %eax, %ecx                 #  35    0x25  2      OPC=movl_r32_r32_1       
  orb %dl, %sil                   #  36    0x27  3      OPC=orb_r8_r8_1          
  jne .L_126860                   #  37    0x2a  6      OPC=jne_label_1          
  movl %esi, %esi                 #  38    0x30  2      OPC=movl_r32_r32         
  movq (%r15,%rsi,1), %r8         #  39    0x32  4      OPC=movq_r64_m64         
  jne .L_126860                   #  40    0x36  6      OPC=jne_label_1          
  nop                             #  41    0x3c  1      OPC=nop                  
  nop                             #  42    0x3d  1      OPC=nop                  
  nop                             #  43    0x3e  1      OPC=nop                  
  nop                             #  44    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  45    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)    #  46    0x43  5      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  47    0x48  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d        #  48    0x4b  4      OPC=movl_r32_m32         
  andq $0x80, %rsi                #  49    0x4f  7      OPC=andq_r64_imm32       
  leaq -0x3(,%rcx,4), %rsi        #  50    0x56  8      OPC=leaq_r64_m16         
  nop                             #  51    0x5e  1      OPC=nop                  
  nop                             #  52    0x5f  1      OPC=nop                  
  nop                             #  53    0x60  1      OPC=nop                  
  nop                             #  54    0x61  1      OPC=nop                  
  nop                             #  55    0x62  1      OPC=nop                  
  nop                             #  56    0x63  1      OPC=nop                  
  nop                             #  57    0x64  1      OPC=nop                  
  nop                             #  58    0x65  1      OPC=nop                  
  nop                             #  59    0x66  1      OPC=nop                  
  nop                             #  60    0x67  1      OPC=nop                  
  nop                             #  61    0x68  1      OPC=nop                  
  nop                             #  62    0x69  1      OPC=nop                  
  nop                             #  63    0x6a  1      OPC=nop                  
  nop                             #  64    0x6b  1      OPC=nop                  
  je .L_126820                    #  65    0x6c  6      OPC=je_label_1           
  nop                             #  66    0x72  1      OPC=nop                  
  nop                             #  67    0x73  1      OPC=nop                  
  nop                             #  68    0x74  1      OPC=nop                  
  nop                             #  69    0x75  1      OPC=nop                  
  nop                             #  70    0x76  1      OPC=nop                  
  nop                             #  71    0x77  1      OPC=nop                  
  nop                             #  72    0x78  1      OPC=nop                  
  nop                             #  73    0x79  1      OPC=nop                  
  nop                             #  74    0x7a  1      OPC=nop                  
  nop                             #  75    0x7b  1      OPC=nop                  
  nop                             #  76    0x7c  1      OPC=nop                  
  nop                             #  77    0x7d  1      OPC=nop                  
  nop                             #  78    0x7e  1      OPC=nop                  
  nop                             #  79    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  addl $0x1, %edx                 #  80    0x80  3      OPC=addl_r32_imm8        
  movzbq -0x1(%r15,%rdx,1), %rsi  #  81    0x83  6      OPC=movzbq_r64_m8        
  nop                             #  82    0x89  1      OPC=nop                  
  nop                             #  83    0x8a  1      OPC=nop                  
  nop                             #  84    0x8b  1      OPC=nop                  
  nop                             #  85    0x8c  1      OPC=nop                  
  nop                             #  86    0x8d  1      OPC=nop                  
  nop                             #  87    0x8e  1      OPC=nop                  
  nop                             #  88    0x8f  1      OPC=nop                  
  nop                             #  89    0x90  1      OPC=nop                  
  nop                             #  90    0x91  1      OPC=nop                  
  nop                             #  91    0x92  1      OPC=nop                  
  nop                             #  92    0x93  1      OPC=nop                  
  nop                             #  93    0x94  1      OPC=nop                  
  nop                             #  94    0x95  1      OPC=nop                  
  nop                             #  95    0x96  1      OPC=nop                  
  nop                             #  96    0x97  1      OPC=nop                  
  nop                             #  97    0x98  1      OPC=nop                  
  nop                             #  98    0x99  1      OPC=nop                  
  nop                             #  99    0x9a  1      OPC=nop                  
  nop                             #  100   0x9b  1      OPC=nop                  
  nop                             #  101   0x9c  1      OPC=nop                  
  nop                             #  102   0x9d  1      OPC=nop                  
  nop                             #  103   0x9e  1      OPC=nop                  
  nop                             #  104   0x9f  1      OPC=nop                  
  nop                             #  105   0xa0  1      OPC=nop                  
  nop                             #  106   0xa1  1      OPC=nop                  
  nop                             #  107   0xa2  1      OPC=nop                  
  nop                             #  108   0xa3  1      OPC=nop                  
  nop                             #  109   0xa4  1      OPC=nop                  
  nop                             #  110   0xa5  1      OPC=nop                  
  addq $0x1, %rcx                 #  111   0xa6  4      OPC=addq_r64_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  112   0xaa  5      OPC=movb_m8_r8           
  nop                             #  113   0xaf  1      OPC=nop                  
  nop                             #  114   0xb0  1      OPC=nop                  
  nop                             #  115   0xb1  1      OPC=nop                  
  nop                             #  116   0xb2  1      OPC=nop                  
  nop                             #  117   0xb3  1      OPC=nop                  
  nop                             #  118   0xb4  1      OPC=nop                  
  nop                             #  119   0xb5  1      OPC=nop                  
  nop                             #  120   0xb6  1      OPC=nop                  
  nop                             #  121   0xb7  1      OPC=nop                  
  nop                             #  122   0xb8  1      OPC=nop                  
  nop                             #  123   0xb9  1      OPC=nop                  
  nop                             #  124   0xba  1      OPC=nop                  
  nop                             #  125   0xbb  1      OPC=nop                  
  nop                             #  126   0xbc  1      OPC=nop                  
  negl %esi                       #  127   0xbd  2      OPC=negl_r32             
  nop                             #  128   0xbf  1      OPC=nop                  
  nop                             #  129   0xc0  1      OPC=nop                  
  nop                             #  130   0xc1  1      OPC=nop                  
  nop                             #  131   0xc2  1      OPC=nop                  
  jne .L_126860                   #  132   0xc3  6      OPC=jne_label_1          
  nop                             #  133   0xc9  1      OPC=nop                  
  nop                             #  134   0xca  1      OPC=nop                  
  nop                             #  135   0xcb  1      OPC=nop                  
  nop                             #  136   0xcc  1      OPC=nop                  
  nop                             #  137   0xcd  1      OPC=nop                  
  nop                             #  138   0xce  1      OPC=nop                  
  nop                             #  139   0xcf  1      OPC=nop                  
  popq %r11                       #  140   0xd0  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  141   0xd2  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  142   0xd6  3      OPC=addq_r64_r64         
  jmpq %r11                       #  143   0xd9  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
Lowest Known Correct Cost (49)                                                   
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                  
  xorb %r15b, %sil                #  7     0x6   3      OPC=xorb_r8_r8_1         
  nop                             #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                  
  nop                             #  10    0xb   1      OPC=nop                  
  nop                             #  11    0xc   1      OPC=nop                  
  nop                             #  12    0xd   1      OPC=nop                  
  nop                             #  13    0xe   1      OPC=nop                  
  nop                             #  14    0xf   1      OPC=nop                  
  movl %edi, %ecx                 #  15    0x10  2      OPC=movl_r32_r32_1       
  nop                             #  16    0x12  1      OPC=nop                  
  nop                             #  17    0x13  1      OPC=nop                  
  nop                             #  18    0x14  1      OPC=nop                  
  nop                             #  19    0x15  1      OPC=nop                  
  nop                             #  20    0x16  1      OPC=nop                  
  movq %rsi, %rdx                 #  21    0x17  3      OPC=movq_r64_r64         
  nop                             #  22    0x1a  1      OPC=nop                  
  nop                             #  23    0x1b  1      OPC=nop                  
  nop                             #  24    0x1c  1      OPC=nop                  
  movq %rcx, %rax                 #  25    0x1d  3      OPC=movq_r64_r64_1       
  jne .L_126860                   #  26    0x20  6      OPC=jne_label_1          
  nop                             #  27    0x26  1      OPC=nop                  
  nop                             #  28    0x27  1      OPC=nop                  
  nop                             #  29    0x28  1      OPC=nop                  
  nop                             #  30    0x29  1      OPC=nop                  
  nop                             #  31    0x2a  1      OPC=nop                  
  nop                             #  32    0x2b  1      OPC=nop                  
  nop                             #  33    0x2c  1      OPC=nop                  
  nop                             #  34    0x2d  1      OPC=nop                  
  movl %esi, %esi                 #  35    0x2e  2      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d        #  36    0x30  4      OPC=movl_r32_m32         
  nop                             #  37    0x34  1      OPC=nop                  
  nop                             #  38    0x35  1      OPC=nop                  
  nop                             #  39    0x36  1      OPC=nop                  
  nop                             #  40    0x37  1      OPC=nop                  
  jne .L_126860                   #  41    0x38  6      OPC=jne_label_1          
  nop                             #  42    0x3e  1      OPC=nop                  
  nop                             #  43    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  44    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)    #  45    0x43  5      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  46    0x48  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d        #  47    0x4b  4      OPC=movl_r32_m32         
  andl $0x80, %esi                #  48    0x4f  6      OPC=andl_r32_imm32       
  leal -0x3(,%rcx,4), %esi        #  49    0x55  7      OPC=leal_r32_m64         
  nop                             #  50    0x5c  1      OPC=nop                  
  nop                             #  51    0x5d  1      OPC=nop                  
  nop                             #  52    0x5e  1      OPC=nop                  
  nop                             #  53    0x5f  1      OPC=nop                  
  nop                             #  54    0x60  1      OPC=nop                  
  je .L_126820                    #  55    0x61  6      OPC=je_label_1           
  nop                             #  56    0x67  1      OPC=nop                  
  nop                             #  57    0x68  1      OPC=nop                  
  nop                             #  58    0x69  1      OPC=nop                  
  nopl %eax                       #  59    0x6a  3      OPC=nopl_r32             
  nop                             #  60    0x6d  1      OPC=nop                  
  nop                             #  61    0x6e  1      OPC=nop                  
  nop                             #  62    0x6f  1      OPC=nop                  
  nop                             #  63    0x70  1      OPC=nop                  
  nop                             #  64    0x71  1      OPC=nop                  
  nop                             #  65    0x72  1      OPC=nop                  
  nop                             #  66    0x73  1      OPC=nop                  
  nop                             #  67    0x74  1      OPC=nop                  
  nop                             #  68    0x75  1      OPC=nop                  
  nop                             #  69    0x76  1      OPC=nop                  
  nop                             #  70    0x77  1      OPC=nop                  
  nop                             #  71    0x78  1      OPC=nop                  
  nop                             #  72    0x79  1      OPC=nop                  
  nop                             #  73    0x7a  1      OPC=nop                  
  nop                             #  74    0x7b  1      OPC=nop                  
  nop                             #  75    0x7c  1      OPC=nop                  
  nop                             #  76    0x7d  1      OPC=nop                  
  nop                             #  77    0x7e  1      OPC=nop                  
  nop                             #  78    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  79    0x80  1      OPC=nop                  
  nop                             #  80    0x81  1      OPC=nop                  
  nop                             #  81    0x82  1      OPC=nop                  
  nop                             #  82    0x83  1      OPC=nop                  
  nop                             #  83    0x84  1      OPC=nop                  
  nop                             #  84    0x85  1      OPC=nop                  
  nop                             #  85    0x86  1      OPC=nop                  
  addl $0x1, %edx                 #  86    0x87  3      OPC=addl_r32_imm8        
  movsbq -0x1(%r15,%rdx,1), %rsi  #  87    0x8a  6      OPC=movsbq_r64_m8        
  nop                             #  88    0x90  1      OPC=nop                  
  nop                             #  89    0x91  1      OPC=nop                  
  nop                             #  90    0x92  1      OPC=nop                  
  movzbl %sil, %r9d               #  91    0x93  4      OPC=movzbl_r32_r8        
  nop                             #  92    0x97  1      OPC=nop                  
  nop                             #  93    0x98  1      OPC=nop                  
  nop                             #  94    0x99  1      OPC=nop                  
  nop                             #  95    0x9a  1      OPC=nop                  
  nop                             #  96    0x9b  1      OPC=nop                  
  nop                             #  97    0x9c  1      OPC=nop                  
  nop                             #  98    0x9d  1      OPC=nop                  
  nop                             #  99    0x9e  1      OPC=nop                  
  nop                             #  100   0x9f  1      OPC=nop                  
  nop                             #  101   0xa0  1      OPC=nop                  
  nop                             #  102   0xa1  1      OPC=nop                  
  nop                             #  103   0xa2  1      OPC=nop                  
  nop                             #  104   0xa3  1      OPC=nop                  
  nop                             #  105   0xa4  1      OPC=nop                  
  nop                             #  106   0xa5  1      OPC=nop                  
  nop                             #  107   0xa6  1      OPC=nop                  
  nop                             #  108   0xa7  1      OPC=nop                  
  nop                             #  109   0xa8  1      OPC=nop                  
  nop                             #  110   0xa9  1      OPC=nop                  
  nop                             #  111   0xaa  1      OPC=nop                  
  nop                             #  112   0xab  1      OPC=nop                  
  nop                             #  113   0xac  1      OPC=nop                  
  nop                             #  114   0xad  1      OPC=nop                  
  nop                             #  115   0xae  1      OPC=nop                  
  nop                             #  116   0xaf  1      OPC=nop                  
  nop                             #  117   0xb0  1      OPC=nop                  
  nop                             #  118   0xb1  1      OPC=nop                  
  nop                             #  119   0xb2  1      OPC=nop                  
  addl $0x1, %ecx                 #  120   0xb3  3      OPC=addl_r32_imm8        
  movb %r9b, -0x1(%r15,%rcx,1)    #  121   0xb6  5      OPC=movb_m8_r8           
  nop                             #  122   0xbb  1      OPC=nop                  
  shrl $0x1, %r9d                 #  123   0xbc  4      OPC=shrl_r32_imm8        
  jne .L_126860                   #  124   0xc0  6      OPC=jne_label_1          
  nop                             #  125   0xc6  1      OPC=nop                  
  nop                             #  126   0xc7  1      OPC=nop                  
  nop                             #  127   0xc8  1      OPC=nop                  
  nop                             #  128   0xc9  1      OPC=nop                  
  nop                             #  129   0xca  1      OPC=nop                  
  nop                             #  130   0xcb  1      OPC=nop                  
  nop                             #  131   0xcc  1      OPC=nop                  
  nop                             #  132   0xcd  1      OPC=nop                  
  nop                             #  133   0xce  1      OPC=nop                  
  nop                             #  134   0xcf  1      OPC=nop                  
  nop                             #  135   0xd0  1      OPC=nop                  
  nop                             #  136   0xd1  1      OPC=nop                  
  popq %r11                       #  137   0xd2  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  138   0xd4  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  139   0xd8  3      OPC=addq_r64_r64         
  jmpq %r11                       #  140   0xdb  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
                                                                                 

################################################################################

Search terminated successfully with a verified rewrite!

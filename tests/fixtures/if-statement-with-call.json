
{
  "name": "if-statement-with-call",
  "comment": "CFG has 3 blocks: A->B, B->C, A->C.  Call in B.",
  "code": [ 
            //BB A 
						".foo:",
            "incq %rax",        // RAX, RCX, RDX, R8, R9, XMM...
            "cmpq %rax, %rcx",  // RAX, RCX, RDX, R8, R9, XMM...
            "jle .L1",          // RAX, RDX, RCX, R8, R9, XMM...

            //BB B
            "subq $0x10, %rcx", // RDX, RCX, R8, R9, XMM...
            "movq %rcx, %rsi",  // RDX, RCX, R8, R9, XMM...
            "movq %rcx, %rdi",  // RSI, RDX, RCX, R8, R9, XMM...
		// eds -- 
		// This was causing some cfg invariants to fail for lack of precise knowledge
		// about what this function does now that we're more strict about data-flow assertions.
		// If this is a problem, we can add a summary for this function in the test harness.
            // "callq .L2",        // RSI, RDI, RDX, RCX, R8, R9, XMM...
            "addq $0x10, %rcx", // RAX
                                // RAX

            //BB C
            ".L1:",             // RAX
            "incq %rax",        // RAX
            "retq",

            //...
            ".L2:" ],

  "tests": {

    "is_sound": {
      "live_in": ["%rax", "%rcx"],
      "live_out": ["%rax"],
      "result": false //rcx read after call is undefined.
    },

    "cfg": {
      "num_blocks": 6,
      "num_instrs": [0, 4, 5, 3, 1, 0],
      "get_exit":   5,
      "reachable":  [0, 1, 2, 3, 5],
      "nesting_depth": [0, 0, 0, 0, 0, 0]
    },

    "normalization": {
      "chunks": 4
    },

    "liveness": {
      "given liveout":   ["%rax"],
      "expected livein": ["%rax", "%rcx", "%rdx", "%r8", "%r9", 
                          "%xmm0", "%xmm1", "%xmm2", "%xmm3",
                          "%xmm4", "%xmm5", "%xmm6", "%xmm7"]
    }
  }

}

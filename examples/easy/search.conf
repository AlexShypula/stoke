##### /home/berkeley/stoke/bin/stoke_search

##### Search Options:

# Instruction move proposal mass
# --instruction_mass <int>
# Default: 1

# Opcode move proposal mass
# --opcode_mass <int>
# Default: 1

# Operand move proposal mass
# --operand_mass <int>
# Default: 1

# Local swap move proposal mass
# --local_swap_mass <int>
# Default: 1

# Global swap move proposal mass
# --global_swap_mass <int>
# Default: 1

# Resize move proposal mass
# --resize_mass <int>
# Default: 1

# Extension move proposal mass
# --extension_mass <int>
# Default: 0

# Number of proposals to execute before giving up
# --timeout <int>
# Default: 100000000
--timeout 10000000

# Number of proposals to execute per round (requires --timeout_action list)
# --timeout_list { <int> <int> ... }
# Default: { 10000 10000 10000 10000 10000 10000 10000 100000 100000 100000 1000000 }

# Maximum runtime (in seconds) before giving up
# --timeout_sec <int>
# Default: 1800

# Annealing constant
# --beta <double>
# Default: 1

# The maximum number of instructions allowed in a rewrite
# --max_instrs <int>
# Default: 16

# Initial search state
# --init (empty|zero|target|previous|extension)
# Default: zero

##### Target Options:

# Target code
# --target <path/to/file.s>
--target bins/calc.s

##### Cost Function Evaluation Options:

# Give up once cost exceeds this value
# --max_cost <int>
# Default: 4611686018427387903

# The cost function.  Can be an arbitrary expression involving the following constructs:
# - arithmetic operators: + - * / % == << >> < > >= <= & |
# - binsize: Size of the binary
# - correctness: Correctness according to the testcases
# - latency: Latency of the instructions
# - measured: Measured latency (more precise for loops than 'latency')
# - size: The number of instructions
# - sseavx: 1 if both sse and avx instructions are used, 0 otherwise
# --cost <string>
# Default: "correctness+latency"
--cost "correctness+latency"

# Expression to check if code is correct
# --correctness <string>
# Default: "correctness == 0"
--correctness "correctness == 0"

##### Correctness Options:

# Metric for measuring distance between states
# --distance (hamming|ulp|extension)
# Default: hamming

# Reduction method
# --reduction (max|sum|extension)
# Default: sum

# Number of bytes in sse elements
# --sse_width (1|2|4|8)
# Default: 8

# Number of values in sse registers
# --sse_count <int>
# Default: 4

# Disallow correct values in incorrect register locations
# --no_relax_reg 

# Allow correct values in incorrect memory locations
# --relax_mem 

# Enables an optimized version of relax_mem that assumes heap writes occur in 128-bit blocks
# --blocked_heap_opt 

# Penalty for correct values in incorrect locations
# --misalign_penalty <int>
# Default: 1

# Penalty for incorrect signal behavior
# --sig_penalty <int>
# Default: 10000

# Minimum ULP value to record
# --min_ulp <int>
# Default: 0

# Add penalty if assembled rewrite exceeds this size. (when non-zero)
# --max_size_bytes <int>
# Default: 0

# The one-time cost for having a rewrite too large.
# --max_size_base_penalty <int>
# Default: 0

# The cost per bytes for having a rewrite too large.
# --max_size_linear_penalty <int>
# Default: 0

##### Input/Output Register/Memory Options:

# Registers defined on entry
# --def_in { %rax %rsp ... }
# Default: { %rax %rcx %rdx %rsi %rdi %r8 %r9 %xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7 }
--def_in "{ %rdi }"

# Registers live on exit
# --live_out { %rax %rsp ... }
# Default: { %rax %rdx %xmm0 %xmm1 }
--live_out "{ %rax }"

# Is stack defined on exit?
# --stack_out 

# Is heap defined on exit?
# --heap_out 

# Remove the default rounding control bit (%mxcsr[rc]) from def_in
# --no_default_mxcsr 

##### "latency" Cost Function Options:

# Latency multiplier for nested code
# --nesting_penalty <int>
# Default: 5

##### Auxiliary Function Options:

# Directory containing helper functions
# --functions <path/to/dir>

# Automatically remove target and unreachable functions from functions directory
# --prune 

##### Sandbox Options:

# Report SIGSEGV for abi violations
# --abi_check 

# Report SIGSEGV for stack smashing violations
# --stack_check 

# Maximum jumps before exit due to infinite loop
# --max_jumps <int>
# Default: 1024

##### Search State Options:

# Initial rewrite; used with --init previous
# --previous <path/to/file.s>

##### Random Seed Options:

# Random seed for stoke tools; set to zero for random
# --seed <int>
# Default: 0

##### Formal Validator Options:

# SMT Solver backend
# --solver (cvc4|z3)
# Default: cvc4

# Timeout in milliseconds for SMT solver before giving up.  0 for no limit.
# --solver_timeout <int>
# Default: 0

##### Testcase Options:

# Testcases
# --testcases <path/to/file>
--testcases testcases.tc

# Shuffle testcase ordering
# --shuffle_testcases 

# Subset of testcase indices to use for training sets
# --training_set { 0 1 ... 9 }
# Default: { 0 ... 9999 }
--training_set "{ 0 1 2 3 4 100 500 }"

# Subset of testcase indices to use for test sets
# --test_set { 0 1 ... 9 }
# Default: { 0 ... 9999 }

# Testcase index
# --index <int>
# Default: 0

##### Transform Options:

# Propose instruction and opcode moves that use this CPU ID flag set
# --cpu_flags { flag1 flag2 ... flagn }
# Default: { fpu tsc msr cx8 sep cmov clflush mmx fxsr sse sse2 syscall rdtscp rep_good nopl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm abm xsaveopt fsgsbase bmi1 hle avx2 bmi2 erms invpcid rtm }

# Don't propose any instructions from this set (takes precedence over --opc_whitelist)
# --opc_blacklist { opcode1 ... opcoden; e.g., xorl or xorl_r32_r32 }
# Default: { }

# Only proprose instructions from this set (unless they are not proposed for other reasons, e.g. --opc_blacklist, --propose_call, --cpu_flags, --force_mem_read, --force_mem_write, instructions not supported by stoke, etc.); empty whitelist means no whitelist
# --opc_whitelist { opcode1 ... opcoden; e.g., xorl or xorl_r32_r32 }
# Default: { adcb_al_imm8$ adcw_ax_imm16$ adcl_eax_imm32$ adcw_m16_imm16$ adcw_m16_imm8$ adcw_m16_r16$ adcl_m32_imm32$ adcl_m32_imm8$ adcl_m32_r32$ adcq_m64_imm32$ adcq_m64_imm8$ adcq_m64_r64$ adcb_m8_imm8$ adcb_m8_r8$ adcw_r16_imm16$ adcw_r16_imm8$ adcw_r16_m16$ adcw_r16_r16$ adcl_r32_imm32$ adcl_r32_imm8$ adcl_r32_m32$ adcl_r32_r32$ adcq_r64_imm32$ adcq_r64_imm8$ adcq_r64_m64$ adcq_r64_r64$ adcb_r8_imm8$ adcb_r8_m8$ adcb_r8_r8$ adcq_rax_imm32$ addb_al_imm8$ addl_eax_imm32$ addl_m32_imm32$ addl_m32_imm8$ addl_m32_r32$ addb_m8_imm8$ addb_m8_r8$ addl_r32_imm32$ addl_r32_imm8$ addl_r32_m32$ addl_r32_r32$ addb_r8_imm8$ addb_r8_m8$ addb_r8_r8$ andb_al_imm8$ andl_eax_imm32$ andl_m32_imm32$ andl_m32_imm8$ andl_m32_r32$ andb_m8_imm8$ andb_m8_r8$ andl_r32_imm32$ andl_r32_imm8$ andl_r32_m32$ andl_r32_r32$ andb_r8_imm8$ andb_r8_m8$ andb_r8_r8$ andnl_r32_r32_m32$ andnl_r32_r32_r32$ bextrl_r32_m32_r32$ bextrl_r32_r32_r32$ bextrq_r64_m64_r64$ bextrq_r64_r64_r64$ blendvps_xmm_xmm_xmm0$ blsil_r32_m32$ blsil_r32_r32$ blsiq_r64_m64$ blsiq_r64_r64$ blsmskl_r32_m32$ blsmskl_r32_r32$ blsmskq_r64_m64$ blsmskq_r64_r64$ blsrl_r32_m32$ blsrl_r32_r32$ blsrq_r64_m64$ blsrq_r64_r64$ bsfl_r32_m32$ bsfl_r32_r32$ bsfq_r64_m64$ bsfq_r64_r64$ bsrw_r16_m16$ bsrw_r16_r16$ bsrl_r32_m32$ bsrl_r32_r32$ bsrq_r64_m64$ bsrq_r64_r64$ bswap_r32$ bswap_r64$ btl_m32_imm8$ btl_m32_r32$ btq_m64_imm8$ btq_m64_r64$ btl_r32_imm8$ btl_r32_r32$ btq_r64_imm8$ btq_r64_r64$ btcw_m16_imm8$ btcw_m16_r16$ btcl_m32_imm8$ btcl_m32_r32$ btcq_m64_imm8$ btcq_m64_r64$ btcw_r16_imm8$ btcw_r16_r16$ btcl_r32_imm8$ btcl_r32_r32$ btcq_r64_imm8$ btcq_r64_r64$ btrw_m16_imm8$ btrw_m16_r16$ btrl_m32_imm8$ btrl_m32_r32$ btrq_m64_imm8$ btrq_m64_r64$ btrw_r16_imm8$ btrw_r16_r16$ btrl_r32_imm8$ btrl_r32_r32$ btrq_r64_imm8$ btrq_r64_r64$ btsw_m16_imm8$ btsw_m16_r16$ btsl_m32_imm8$ btsl_m32_r32$ btsq_m64_imm8$ btsq_m64_r64$ btsw_r16_imm8$ btsw_r16_r16$ btsl_r32_imm8$ btsl_r32_r32$ btsq_r64_imm8$ btsq_r64_r64$ callq_m64$ callq_r64$ clc$ cld$ clflush_m8$ cmc$ cmovaw_r16_m16$ cmovaw_r16_r16$ cmoval_r32_m32$ cmoval_r32_r32$ cmovaq_r64_m64$ cmovaq_r64_r64$ cmovaew_r16_m16$ cmovaew_r16_r16$ cmovael_r32_m32$ cmovael_r32_r32$ cmovaeq_r64_m64$ cmovaeq_r64_r64$ cmovbw_r16_m16$ cmovbw_r16_r16$ cmovbl_r32_m32$ cmovbl_r32_r32$ cmovbq_r64_m64$ cmovbq_r64_r64$ cmovbew_r16_m16$ cmovbew_r16_r16$ cmovbel_r32_m32$ cmovbel_r32_r32$ cmovbeq_r64_m64$ cmovbeq_r64_r64$ cmovew_r16_m16$ cmovew_r16_r16$ cmovel_r32_m32$ cmovel_r32_r32$ cmoveq_r64_m64$ cmoveq_r64_r64$ cmovgw_r16_m16$ cmovgw_r16_r16$ cmovgl_r32_m32$ cmovgl_r32_r32$ cmovgq_r64_m64$ cmovgq_r64_r64$ cmovgew_r16_m16$ cmovgew_r16_r16$ cmovgel_r32_m32$ cmovgel_r32_r32$ cmovgeq_r64_m64$ cmovgeq_r64_r64$ cmovlw_r16_m16$ cmovlw_r16_r16$ cmovll_r32_m32$ cmovll_r32_r32$ cmovlq_r64_m64$ cmovlq_r64_r64$ cmovlew_r16_m16$ cmovlew_r16_r16$ cmovlel_r32_m32$ cmovlel_r32_r32$ cmovleq_r64_m64$ cmovleq_r64_r64$ cmovnew_r16_m16$ cmovnew_r16_r16$ cmovnel_r32_m32$ cmovnel_r32_r32$ cmovneq_r64_m64$ cmovneq_r64_r64$ cmovnow_r16_m16$ cmovnow_r16_r16$ cmovnol_r32_m32$ cmovnol_r32_r32$ cmovnoq_r64_m64$ cmovnoq_r64_r64$ cmovnpw_r16_m16$ cmovnpw_r16_r16$ cmovnpl_r32_m32$ cmovnpl_r32_r32$ cmovnpq_r64_m64$ cmovnpq_r64_r64$ cmovnsw_r16_m16$ cmovnsw_r16_r16$ cmovnsl_r32_m32$ cmovnsl_r32_r32$ cmovnsq_r64_m64$ cmovnsq_r64_r64$ cmovow_r16_m16$ cmovow_r16_r16$ cmovol_r32_m32$ cmovol_r32_r32$ cmovoq_r64_m64$ cmovoq_r64_r64$ cmovpl_r32_m32$ cmovpl_r32_r32$ cmovsw_r16_m16$ cmovsw_r16_r16$ cmovsl_r32_m32$ cmovsl_r32_r32$ cmovsq_r64_m64$ cmovsq_r64_r64$ cmpb_al_imm8$ cmpl_eax_imm32$ cmpl_m32_imm32$ cmpl_m32_imm8$ cmpl_m32_r32$ cmpb_m8_imm8$ cmpb_m8_r8$ cmpl_r32_imm32$ cmpl_r32_imm8$ cmpl_r32_m32$ cmpl_r32_r32$ cmpb_r8_imm8$ cmpb_r8_m8$ cmpb_r8_r8$ cmppd_xmm_xmm_imm8$ cmpps_xmm_xmm_imm8$ cmpxchgw_m16_r16$ cmpxchgq_m64_r64$ cmpxchgb_m8_r8$ cmpxchgw_r16_r16$ cmpxchgq_r64_r64$ cmpxchgb_r8_r8$ cmpxchg8b_m64$ cpuid$ cvtdq2pd_xmm_xmm$ cvtdq2ps_xmm_xmm$ cvtpd2dq_xmm_xmm$ cvtpd2ps_xmm_xmm$ cvtps2dq_xmm_xmm$ cvtps2pd_xmm_xmm$ cvttpd2dq_xmm_xmm$ cvttps2dq_xmm_xmm$ decw_m16$ decl_m32$ decq_m64$ decb_m8$ decw_r16$ decl_r32$ decq_r64$ decb_r8$ divl_m32$ divb_m8$ divl_r32$ divb_r8$ divpd_xmm_xmm$ divps_xmm_xmm$ dppd_xmm_xmm_imm8$ dpps_xmm_xmm_imm8$ enterq_imm8_imm16$ extractps_r32_xmm_imm8$ extractps_r64_xmm_imm8$ haddpd_xmm_xmm$ haddps_xmm_xmm$ hsubpd_xmm_xmm$ hsubps_xmm_xmm$ idivw_m16$ idivl_m32$ idivq_m64$ idivb_m8$ idivw_r16$ idivl_r32$ idivq_r64$ idivb_r8$ imulw_m16$ imull_m32$ imulq_m64$ imulb_m8$ imulw_r16$ imulw_r16_m16$ imulw_r16_m16_imm16$ imulw_r16_m16_imm8$ imulw_r16_r16$ imulw_r16_r16_imm16$ imulw_r16_r16_imm8$ imull_r32$ imull_r32_m32$ imull_r32_m32_imm32$ imull_r32_m32_imm8$ imull_r32_r32$ imull_r32_r32_imm32$ imull_r32_r32_imm8$ imulq_r64$ imulq_r64_m64$ imulq_r64_m64_imm32$ imulq_r64_m64_imm8$ imulq_r64_r64$ imulq_r64_r64_imm32$ imulq_r64_r64_imm8$ imulb_r8$ inb_al_imm8$ incw_m16$ incl_m32$ incq_m64$ incb_m8$ incw_r16$ incl_r32$ incq_r64$ incb_r8$ int_imm8$ jmpq_m64$ jmpq_r64$ lahf$ leal_r32_m16$ leal_r32_m32$ leal_r32_m64$ leaq_r64_m16$ leaq_r64_m32$ leaq_r64_m64$ leaveq$ lfence$ lzcntw_r16_m16$ lzcntw_r16_r16$ lzcntq_r64_m64$ lzcntq_r64_r64$ maskmovdqu_xmm_xmm$ maxpd_xmm_xmm$ maxps_xmm_xmm$ mfence$ minpd_xmm_xmm$ minps_xmm_xmm$ movapd_xmm_xmm$ movaps_xmm_xmm$ movbew_m16_r16$ movbel_m32_r32$ movbeq_m64_r64$ movbew_r16_m16$ movbel_r32_m32$ movbeq_r64_m64$ movdqa_xmm_xmm$ movdqu_xmm_xmm$ movhlps_xmm_xmm$ movhps_m64_xmm$ movhps_xmm_m64$ movmskpd_r32_xmm$ movmskpd_r64_xmm$ movmskps_r32_xmm$ movmskps_r64_xmm$ movnti_m32_r32$ movnti_m64_r64$ movshdup_xmm_xmm$ movsldup_xmm_xmm$ movupd_xmm_xmm$ mpsadbw_xmm_xmm_imm8$ mull_m32$ mulb_m8$ mull_r32$ mulb_r8$ mulpd_xmm_xmm$ mulps_xmm_xmm$ negw_m16$ negl_m32$ negq_m64$ negb_m8$ negw_r16$ negl_r32$ negq_r64$ negb_r8$ nop$ nopw_m16$ nopw_r16$ notw_m16$ notl_m32$ notq_m64$ notb_m8$ notw_r16$ notl_r32$ notq_r64$ notb_r8$ orb_al_imm8$ orl_eax_imm32$ orl_m32_imm32$ orl_m32_imm8$ orl_m32_r32$ orb_m8_imm8$ orb_m8_r8$ orl_r32_imm32$ orl_r32_imm8$ orl_r32_m32$ orl_r32_r32$ orb_r8_imm8$ orb_r8_m8$ orb_r8_r8$ orpd_xmm_xmm$ orps_xmm_xmm$ outb_imm8_al$ outl_imm8_eax$ pabsb_xmm_xmm$ pabsd_xmm_xmm$ pabsw_xmm_xmm$ packssdw_xmm_xmm$ packsswb_xmm_xmm$ packusdw_xmm_xmm$ packuswb_xmm_xmm$ paddb_xmm_xmm$ paddd_xmm_xmm$ paddq_xmm_xmm$ paddsb_xmm_xmm$ paddsw_xmm_xmm$ paddusb_xmm_xmm$ paddusw_xmm_xmm$ paddw_xmm_xmm$ palignr_xmm_xmm_imm8$ pause$ pavgb_xmm_xmm$ pavgw_xmm_xmm$ pblendvb_xmm_xmm_xmm0$ pblendw_xmm_xmm_imm8$ pclmulqdq_xmm_xmm_imm8$ pcmpeqb_xmm_xmm$ pcmpeqd_xmm_xmm$ pcmpeqq_xmm_xmm$ pcmpeqw_xmm_xmm$ pcmpgtb_xmm_xmm$ pcmpgtd_xmm_xmm$ pcmpgtq_xmm_xmm$ pcmpgtw_xmm_xmm$ pextrb_m8_xmm_imm8$ pextrb_r32_xmm_imm8$ pextrb_r64_xmm_imm8$ pextrq_m64_xmm_imm8$ pextrq_r64_xmm_imm8$ pextrw_m16_xmm_imm8$ pextrw_r32_xmm_imm8$ pextrw_r64_xmm_imm8$ phaddd_xmm_xmm$ phaddsw_xmm_xmm$ phaddw_xmm_xmm$ phminposuw_xmm_xmm$ phsubd_xmm_xmm$ phsubsw_xmm_xmm$ phsubw_xmm_xmm$ pinsrb_xmm_m8_imm8$ pinsrb_xmm_r32_imm8$ pinsrw_xmm_m16_imm8$ pinsrw_xmm_r32_imm8$ pmaddubsw_xmm_xmm$ pmaddwd_xmm_xmm$ pmaxsb_xmm_xmm$ pmaxsd_xmm_xmm$ pmaxsw_xmm_xmm$ pmaxub_xmm_xmm$ pmaxud_xmm_xmm$ pmaxuw_xmm_xmm$ pminsb_xmm_xmm$ pminsd_xmm_xmm$ pminsw_xmm_xmm$ pminub_xmm_xmm$ pminud_xmm_xmm$ pminuw_xmm_xmm$ pmovmskb_r32_xmm$ pmovmskb_r64_xmm$ pmovsxbd_xmm_xmm$ pmovsxbq_xmm_xmm$ pmovsxbw_xmm_xmm$ pmovsxdq_xmm_xmm$ pmovsxwd_xmm_xmm$ pmovsxwq_xmm_xmm$ pmovzxbd_xmm_xmm$ pmovzxbq_xmm_xmm$ pmovzxbw_xmm_xmm$ pmovzxdq_xmm_xmm$ pmovzxwd_xmm_xmm$ pmovzxwq_xmm_xmm$ pmuldq_xmm_xmm$ pmulhrsw_xmm_xmm$ pmulhuw_xmm_xmm$ pmulhw_xmm_xmm$ pmulld_xmm_xmm$ pmullw_xmm_xmm$ pmuludq_xmm_xmm$ popw_m16$ popq_m64$ popw_r16$ popq_r64$ popcntw_r16_m16$ popcntw_r16_r16$ popcntq_r64_m64$ popcntq_r64_r64$ popf$ por_xmm_xmm$ prefetchnta_m8$ prefetcht0_m8$ prefetcht1_m8$ prefetcht2_m8$ psadbw_xmm_xmm$ pshufb_xmm_xmm$ pshufd_xmm_xmm_imm8$ psignb_xmm_xmm$ psignd_xmm_xmm$ psignw_xmm_xmm$ pslld_xmm_imm8$ pslld_xmm_xmm$ pslldq_xmm_imm8$ psllq_xmm_imm8$ psllq_xmm_xmm$ psllw_xmm_imm8$ psllw_xmm_xmm$ psrad_xmm_imm8$ psrad_xmm_xmm$ psraw_xmm_imm8$ psraw_xmm_xmm$ psrld_xmm_imm8$ psrld_xmm_xmm$ psrldq_xmm_imm8$ psrlq_xmm_imm8$ psrlq_xmm_xmm$ psrlw_xmm_imm8$ psrlw_xmm_xmm$ psubb_xmm_xmm$ psubd_xmm_xmm$ psubq_xmm_xmm$ psubsb_xmm_xmm$ psubsw_xmm_xmm$ psubusb_xmm_xmm$ psubusw_xmm_xmm$ psubw_xmm_xmm$ pushq_imm16$ pushq_imm8$ pushw_m16$ pushq_m64$ pushw_r16$ pushq_r64$ pushf$ pxor_xmm_xmm$ rclw_m16_cl$ rclw_m16_imm8$ rcll_m32_cl$ rcll_m32_imm8$ rclq_m64_cl$ rclq_m64_imm8$ rclb_m8_cl$ rclb_m8_imm8$ rclw_r16_cl$ rclw_r16_imm8$ rcll_r32_cl$ rcll_r32_imm8$ rclq_r64_cl$ rclq_r64_imm8$ rclb_r8_cl$ rclb_r8_imm8$ rcpps_xmm_xmm$ rcrw_m16_cl$ rcrw_m16_imm8$ rcrl_m32_cl$ rcrl_m32_imm8$ rcrq_m64_cl$ rcrq_m64_imm8$ rcrb_m8_cl$ rcrb_m8_imm8$ rcrw_r16_cl$ rcrw_r16_imm8$ rcrl_r32_cl$ rcrl_r32_imm8$ rcrq_r64_cl$ rcrq_r64_imm8$ rcrb_r8_cl$ rcrb_r8_imm8$ rolw_m16_cl$ rolw_m16_imm8$ roll_m32_cl$ roll_m32_imm8$ rolq_m64_cl$ rolq_m64_imm8$ rolb_m8_cl$ rolb_m8_imm8$ rolw_r16_cl$ rolw_r16_imm8$ roll_r32_cl$ roll_r32_imm8$ rolq_r64_cl$ rolq_r64_imm8$ rolb_r8_cl$ rolb_r8_imm8$ rorw_m16_cl$ rorw_m16_imm8$ rorl_m32_cl$ rorl_m32_imm8$ rorq_m64_cl$ rorq_m64_imm8$ rorb_m8_cl$ rorb_m8_imm8$ rorw_r16_cl$ rorw_r16_imm8$ rorl_r32_cl$ rorl_r32_imm8$ rorq_r64_cl$ rorq_r64_imm8$ rorb_r8_cl$ rorb_r8_imm8$ roundpd_xmm_xmm_imm8$ roundps_xmm_xmm_imm8$ rsqrtps_xmm_xmm$ sahf$ sarw_m16_cl$ sarw_m16_imm8$ sarl_m32_cl$ sarl_m32_imm8$ sarq_m64_cl$ sarq_m64_imm8$ sarb_m8_cl$ sarb_m8_imm8$ sarw_r16_cl$ sarw_r16_imm8$ sarl_r32_cl$ sarl_r32_imm8$ sarq_r64_cl$ sarq_r64_imm8$ sarb_r8_cl$ sarb_r8_imm8$ sbbb_al_imm8$ sbbw_ax_imm16$ sbbl_eax_imm32$ sbbw_m16_imm16$ sbbw_m16_imm8$ sbbw_m16_r16$ sbbl_m32_imm32$ sbbl_m32_imm8$ sbbl_m32_r32$ sbbq_m64_imm32$ sbbq_m64_imm8$ sbbq_m64_r64$ sbbb_m8_imm8$ sbbb_m8_r8$ sbbw_r16_imm16$ sbbw_r16_imm8$ sbbw_r16_m16$ sbbw_r16_r16$ sbbl_r32_imm32$ sbbl_r32_imm8$ sbbl_r32_m32$ sbbl_r32_r32$ sbbq_r64_imm32$ sbbq_r64_imm8$ sbbq_r64_m64$ sbbq_r64_r64$ sbbb_r8_imm8$ sbbb_r8_m8$ sbbb_r8_r8$ sbbq_rax_imm32$ seta_r8$ shlb_m8_cl$ shlb_m8_imm8$ shlb_r8_cl$ shlb_r8_imm8$ shufpd_xmm_xmm_imm8$ shufps_xmm_xmm_imm8$ sqrtpd_xmm_xmm$ sqrtps_xmm_xmm$ subpd_xmm_xmm$ subps_xmm_xmm$ unpckhps_xmm_xmm$ unpcklps_xmm_xmm$ vblendvps_xmm_xmm_xmm_xmm$ vblendvps_ymm_ymm_ymm_ymm$ vcmppd_xmm_xmm_xmm_imm8$ vcmppd_ymm_ymm_ymm_imm8$ vcmpps_xmm_xmm_xmm_imm8$ vcmpps_ymm_ymm_ymm_imm8$ vcvtdq2pd_xmm_xmm$ vcvtdq2pd_ymm_ymm$ vcvtdq2ps_xmm_xmm$ vcvtdq2ps_ymm_ymm$ vcvtpd2dqx_xmm_xmm$ vcvtpd2dq_xmm_ymm$ vcvtpd2ps_xmm_xmm$ vcvtpd2ps_xmm_ymm$ vcvtph2ps_xmm_xmm$ vcvtph2ps_ymm_xmm$ vcvtps2dq_xmm_xmm$ vcvtps2dq_ymm_ymm$ vcvtps2pd_xmm_xmm$ vcvtps2pd_ymm_xmm$ vcvtps2ph_xmm_xmm_imm8$ vcvtps2ph_xmm_ymm_imm8$ vcvttpd2dq_xmm_xmm$ vcvttpd2dq_xmm_ymm$ vcvttps2dq_xmm_xmm$ vcvttps2dq_ymm_ymm$ vdivpd_xmm_xmm_xmm$ vdivpd_ymm_ymm_ymm$ vdivps_xmm_xmm_xmm$ vdivps_ymm_ymm_ymm$ vdppd_xmm_xmm_xmm_imm8$ vdpps_xmm_xmm_xmm_imm8$ vdpps_ymm_ymm_ymm_imm8$ vfmadd132pd_xmm_xmm_xmm$ vfmadd132pd_ymm_ymm_ymm$ vfmadd132ps_xmm_xmm_xmm$ vfmadd132ps_ymm_ymm_ymm$ vfmadd213pd_xmm_xmm_xmm$ vfmadd213pd_ymm_ymm_ymm$ vfmadd213ps_xmm_xmm_xmm$ vfmadd213ps_ymm_ymm_ymm$ vfmadd231pd_xmm_xmm_xmm$ vfmadd231pd_ymm_ymm_ymm$ vfmadd231ps_xmm_xmm_xmm$ vfmadd231ps_ymm_ymm_ymm$ vfmaddsub132pd_xmm_xmm_xmm$ vfmaddsub132pd_ymm_ymm_ymm$ vfmaddsub132ps_xmm_xmm_xmm$ vfmaddsub132ps_ymm_ymm_ymm$ vfmaddsub213pd_xmm_xmm_xmm$ vfmaddsub213pd_ymm_ymm_ymm$ vfmaddsub213ps_xmm_xmm_xmm$ vfmaddsub213ps_ymm_ymm_ymm$ vfmaddsub231pd_xmm_xmm_xmm$ vfmaddsub231pd_ymm_ymm_ymm$ vfmaddsub231ps_xmm_xmm_xmm$ vfmaddsub231ps_ymm_ymm_ymm$ vfmsub132pd_xmm_xmm_xmm$ vfmsub132pd_ymm_ymm_ymm$ vfmsub132ps_xmm_xmm_xmm$ vfmsub132ps_ymm_ymm_ymm$ vfmsub213pd_xmm_xmm_xmm$ vfmsub213pd_ymm_ymm_ymm$ vfmsub213ps_xmm_xmm_xmm$ vfmsub213ps_ymm_ymm_ymm$ vfmsub231pd_xmm_xmm_xmm$ vfmsub231pd_ymm_ymm_ymm$ vfmsub231ps_xmm_xmm_xmm$ vfmsub231ps_ymm_ymm_ymm$ vfmsubadd132pd_xmm_xmm_xmm$ vfmsubadd132pd_ymm_ymm_ymm$ vfmsubadd132ps_xmm_xmm_xmm$ vfmsubadd132ps_ymm_ymm_ymm$ vfmsubadd213pd_xmm_xmm_xmm$ vfmsubadd213pd_ymm_ymm_ymm$ vfmsubadd213ps_xmm_xmm_xmm$ vfmsubadd213ps_ymm_ymm_ymm$ vfmsubadd231pd_xmm_xmm_xmm$ vfmsubadd231pd_ymm_ymm_ymm$ vfmsubadd231ps_xmm_xmm_xmm$ vfmsubadd231ps_ymm_ymm_ymm$ vfnmadd132pd_xmm_xmm_xmm$ vfnmadd132pd_ymm_ymm_ymm$ vfnmadd132ps_xmm_xmm_xmm$ vfnmadd132ps_ymm_ymm_ymm$ vfnmadd213pd_xmm_xmm_xmm$ vfnmadd213pd_ymm_ymm_ymm$ vfnmadd213ps_xmm_xmm_xmm$ vfnmadd213ps_ymm_ymm_ymm$ vfnmadd231pd_xmm_xmm_xmm$ vfnmadd231pd_ymm_ymm_ymm$ vfnmadd231ps_xmm_xmm_xmm$ vfnmadd231ps_ymm_ymm_ymm$ vfnmsub132pd_xmm_xmm_xmm$ vfnmsub132pd_ymm_ymm_ymm$ vfnmsub132ps_xmm_xmm_xmm$ vfnmsub132ps_ymm_ymm_ymm$ vfnmsub213pd_xmm_xmm_xmm$ vfnmsub213pd_ymm_ymm_ymm$ vfnmsub213ps_xmm_xmm_xmm$ vfnmsub213ps_ymm_ymm_ymm$ vfnmsub231pd_xmm_xmm_xmm$ vfnmsub231pd_ymm_ymm_ymm$ vfnmsub231ps_xmm_xmm_xmm$ vfnmsub231ps_ymm_ymm_ymm$ vhaddpd_xmm_xmm_xmm$ vhaddpd_ymm_ymm_ymm$ vhaddps_xmm_xmm_xmm$ vhaddps_ymm_ymm_ymm$ vhsubpd_xmm_xmm_xmm$ vhsubpd_ymm_ymm_ymm$ vhsubps_xmm_xmm_xmm$ vhsubps_ymm_ymm_ymm$ vmaskmovdqu_xmm_xmm$ vmaxpd_xmm_xmm_xmm$ vmaxpd_ymm_ymm_ymm$ vmaxps_xmm_xmm_xmm$ vmaxps_ymm_ymm_ymm$ vminpd_xmm_xmm_xmm$ vminpd_ymm_ymm_ymm$ vminps_xmm_xmm_xmm$ vminps_ymm_ymm_ymm$ vmovapd_xmm_xmm$ vmovapd_ymm_ymm$ vmovaps_xmm_xmm$ vmovaps_ymm_ymm$ vmovddup_ymm_ymm$ vmovdqa_xmm_xmm$ vmovdqa_ymm_ymm$ vmovdqu_xmm_xmm$ vmovdqu_ymm_ymm$ vmovhlps_xmm_xmm_xmm$ vmovhpd_m64_xmm$ vmovhpd_xmm_xmm_m64$ vmovhps_m64_xmm$ vmovhps_xmm_xmm_m64$ vmovlhps_xmm_xmm_xmm$ vmovlps_m64_xmm$ vmovlps_xmm_xmm_m64$ vmovshdup_xmm_xmm$ vmovshdup_ymm_ymm$ vmovsldup_xmm_xmm$ vmovsldup_ymm_ymm$ vmovupd_xmm_xmm$ vmovupd_ymm_ymm$ vmovups_xmm_xmm$ vmovups_ymm_ymm$ vmpsadbw_xmm_xmm_xmm_imm8$ vmpsadbw_ymm_ymm_ymm_imm8$ vmulpd_xmm_xmm_xmm$ vmulpd_ymm_ymm_ymm$ vmulps_xmm_xmm_xmm$ vmulps_ymm_ymm_ymm$ vorpd_xmm_xmm_xmm$ vorpd_ymm_ymm_ymm$ vorps_xmm_xmm_xmm$ vorps_ymm_ymm_ymm$ vpabsb_xmm_xmm$ vpabsb_ymm_ymm$ vpabsd_xmm_xmm$ vpabsd_ymm_ymm$ vpabsw_xmm_xmm$ vpabsw_ymm_ymm$ vpackssdw_xmm_xmm_xmm$ vpackssdw_ymm_ymm_ymm$ vpacksswb_xmm_xmm_xmm$ vpacksswb_ymm_ymm_ymm$ vpackusdw_xmm_xmm_xmm$ vpackusdw_ymm_ymm_ymm$ vpackuswb_xmm_xmm_xmm$ vpackuswb_ymm_ymm_ymm$ vpaddb_xmm_xmm_xmm$ vpaddb_ymm_ymm_ymm$ vpaddd_xmm_xmm_xmm$ vpaddd_ymm_ymm_ymm$ vpaddq_xmm_xmm_xmm$ vpaddq_ymm_ymm_ymm$ vpaddsb_xmm_xmm_xmm$ vpaddsb_ymm_ymm_ymm$ vpaddsw_xmm_xmm_xmm$ vpaddsw_ymm_ymm_ymm$ vpaddusb_xmm_xmm_xmm$ vpaddusb_ymm_ymm_ymm$ vpaddusw_xmm_xmm_xmm$ vpaddusw_ymm_ymm_ymm$ vpaddw_xmm_xmm_xmm$ vpaddw_ymm_ymm_ymm$ vpalignr_xmm_xmm_xmm_imm8$ vpalignr_ymm_ymm_ymm_imm8$ vpand_ymm_ymm_ymm$ vpandn_ymm_ymm_ymm$ vpavgb_xmm_xmm_xmm$ vpavgb_ymm_ymm_ymm$ vpavgw_xmm_xmm_xmm$ vpavgw_ymm_ymm_ymm$ vpblendd_xmm_xmm_xmm_imm8$ vpblendd_ymm_ymm_ymm_imm8$ vpblendvb_xmm_xmm_xmm_xmm$ vpblendvb_ymm_ymm_ymm_ymm$ vpblendw_xmm_xmm_xmm_imm8$ vpblendw_ymm_ymm_ymm_imm8$ vpbroadcastb_xmm_m8$ vpbroadcastb_ymm_m8$ vpbroadcastq_xmm_m64$ vpbroadcastq_ymm_m64$ vpbroadcastw_xmm_m16$ vpbroadcastw_ymm_m16$ vpcmpeqb_xmm_xmm_xmm$ vpcmpeqb_ymm_ymm_ymm$ vpcmpeqd_xmm_xmm_xmm$ vpcmpeqd_ymm_ymm_ymm$ vpcmpeqq_xmm_xmm_xmm$ vpcmpeqq_ymm_ymm_ymm$ vpcmpeqw_xmm_xmm_xmm$ vpcmpeqw_ymm_ymm_ymm$ vpcmpgtb_xmm_xmm_xmm$ vpcmpgtb_ymm_ymm_ymm$ vpcmpgtd_xmm_xmm_xmm$ vpcmpgtd_ymm_ymm_ymm$ vpcmpgtq_xmm_xmm_xmm$ vpcmpgtw_xmm_xmm_xmm$ vpcmpgtw_ymm_ymm_ymm$ vperm2f128_ymm_ymm_ymm_imm8$ vperm2i128_ymm_ymm_ymm_imm8$ vpermd_ymm_ymm_ymm$ vpermilpd_xmm_xmm_imm8$ vpermilpd_xmm_xmm_xmm$ vpermilpd_ymm_ymm_imm8$ vpermilpd_ymm_ymm_ymm$ vpermilps_xmm_xmm_imm8$ vpermilps_xmm_xmm_xmm$ vpermilps_ymm_ymm_imm8$ vpermilps_ymm_ymm_ymm$ vpermpd_ymm_ymm_imm8$ vpermps_ymm_ymm_ymm$ vpermq_ymm_ymm_imm8$ vpextrb_m8_xmm_imm8$ vpextrq_m64_xmm_imm8$ vpextrq_r64_xmm_imm8$ vpextrw_m16_xmm_imm8$ vphaddd_xmm_xmm_xmm$ vphaddd_ymm_ymm_ymm$ vphaddsw_xmm_xmm_xmm$ vphaddsw_ymm_ymm_ymm$ vphaddw_xmm_xmm_xmm$ vphaddw_ymm_ymm_ymm$ vphsubd_xmm_xmm_xmm$ vphsubd_ymm_ymm_ymm$ vphsubsw_xmm_xmm_xmm$ vphsubsw_ymm_ymm_ymm$ vphsubw_xmm_xmm_xmm$ vphsubw_ymm_ymm_ymm$ vpinsrb_xmm_xmm_m8_imm8$ vpinsrw_xmm_xmm_m16_imm8$ vpmaddubsw_xmm_xmm_xmm$ vpmaddubsw_ymm_ymm_ymm$ vpmaddwd_xmm_xmm_xmm$ vpmaddwd_ymm_ymm_ymm$ vpmaxsb_xmm_xmm_xmm$ vpmaxsb_ymm_ymm_ymm$ vpmaxsd_xmm_xmm_xmm$ vpmaxsd_ymm_ymm_ymm$ vpmaxsw_xmm_xmm_xmm$ vpmaxsw_ymm_ymm_ymm$ vpmaxub_xmm_xmm_xmm$ vpmaxub_ymm_ymm_ymm$ vpmaxud_xmm_xmm_xmm$ vpmaxud_ymm_ymm_ymm$ vpmaxuw_xmm_xmm_xmm$ vpmaxuw_ymm_ymm_ymm$ vpminsb_xmm_xmm_xmm$ vpminsb_ymm_ymm_ymm$ vpminsd_xmm_xmm_xmm$ vpminsd_ymm_ymm_ymm$ vpminsw_xmm_xmm_xmm$ vpminub_xmm_xmm_xmm$ vpminub_ymm_ymm_ymm$ vpminud_xmm_xmm_xmm$ vpminud_ymm_ymm_ymm$ vpminuw_xmm_xmm_xmm$ vpminuw_ymm_ymm_ymm$ vpmovsxbd_xmm_xmm$ vpmovsxbd_ymm_xmm$ vpmovsxbq_xmm_xmm$ vpmovsxbq_ymm_xmm$ vpmovsxbw_xmm_xmm$ vpmovsxbw_ymm_xmm$ vpmovsxdq_xmm_xmm$ vpmovsxdq_ymm_xmm$ vpmovsxwd_xmm_xmm$ vpmovsxwd_ymm_xmm$ vpmovsxwq_xmm_xmm$ vpmovsxwq_ymm_xmm$ vpmovzxbd_xmm_xmm$ vpmovzxbd_ymm_xmm$ vpmovzxbq_xmm_xmm$ vpmovzxbq_ymm_xmm$ vpmovzxbw_xmm_xmm$ vpmovzxbw_ymm_xmm$ vpmovzxdq_xmm_xmm$ vpmovzxdq_ymm_xmm$ vpmovzxwd_xmm_xmm$ vpmovzxwd_ymm_xmm$ vpmovzxwq_xmm_xmm$ vpmovzxwq_ymm_xmm$ vpmuldq_xmm_xmm_xmm$ vpmuldq_ymm_ymm_ymm$ vpmulhrsw_xmm_xmm_xmm$ vpmulhrsw_ymm_ymm_ymm$ vpmulhuw_xmm_xmm_xmm$ vpmulhuw_ymm_ymm_ymm$ vpmulhw_xmm_xmm_xmm$ vpmulhw_ymm_ymm_ymm$ vpmulld_xmm_xmm_xmm$ vpmulld_ymm_ymm_ymm$ vpmullw_xmm_xmm_xmm$ vpmullw_ymm_ymm_ymm$ vpmuludq_xmm_xmm_xmm$ vpmuludq_ymm_ymm_ymm$ vpor_ymm_ymm_ymm$ vpsadbw_xmm_xmm_xmm$ vpsadbw_ymm_ymm_ymm$ vpshufb_xmm_xmm_xmm$ vpshufb_ymm_ymm_ymm$ vpshufd_xmm_xmm_imm8$ vpshufd_ymm_ymm_imm8$ vpshufhw_xmm_xmm_imm8$ vpshufhw_ymm_ymm_imm8$ vpshuflw_xmm_xmm_imm8$ vpshuflw_ymm_ymm_imm8$ vpsignb_xmm_xmm_xmm$ vpsignd_xmm_xmm_xmm$ vpsignw_xmm_xmm_xmm$ vpslld_xmm_xmm_imm8$ vpslld_ymm_ymm_imm8$ vpslldq_xmm_xmm_imm8$ vpsllq_xmm_xmm_imm8$ vpsllq_ymm_ymm_imm8$ vpsllvd_xmm_xmm_xmm$ vpsllvd_ymm_ymm_ymm$ vpsllvq_xmm_xmm_xmm$ vpsllvq_ymm_ymm_ymm$ vpsllw_xmm_xmm_imm8$ vpsllw_ymm_ymm_imm8$ vpsrad_xmm_xmm_imm8$ vpsrad_ymm_ymm_imm8$ vpsravd_xmm_xmm_xmm$ vpsravd_ymm_ymm_ymm$ vpsraw_xmm_xmm_imm8$ vpsraw_ymm_ymm_imm8$ vpsrld_xmm_xmm_imm8$ vpsrld_ymm_ymm_imm8$ vpsrldq_xmm_xmm_imm8$ vpsrlq_xmm_xmm_imm8$ vpsrlq_ymm_ymm_imm8$ vpsrlvd_xmm_xmm_xmm$ vpsrlvd_ymm_ymm_ymm$ vpsrlvq_xmm_xmm_xmm$ vpsrlvq_ymm_ymm_ymm$ vpsrlw_xmm_xmm_imm8$ vpsrlw_ymm_ymm_imm8$ vpsubb_xmm_xmm_xmm$ vpsubb_ymm_ymm_ymm$ vpsubd_xmm_xmm_xmm$ vpsubd_ymm_ymm_ymm$ vpsubq_xmm_xmm_xmm$ vpsubq_ymm_ymm_ymm$ vpsubsb_xmm_xmm_xmm$ vpsubsb_ymm_ymm_ymm$ vpsubsw_xmm_xmm_xmm$ vpsubsw_ymm_ymm_ymm$ vpsubusb_xmm_xmm_xmm$ vpsubusb_ymm_ymm_ymm$ vpsubusw_xmm_xmm_xmm$ vpsubusw_ymm_ymm_ymm$ vpsubw_xmm_xmm_xmm$ vpsubw_ymm_ymm_ymm$ vptest_ymm_ymm$ vpunpckhbw_xmm_xmm_xmm$ vpunpckhbw_ymm_ymm_ymm$ vpunpckhdq_xmm_xmm_xmm$ vpunpckhdq_ymm_ymm_ymm$ vpunpckhqdq_xmm_xmm_xmm$ vpunpckhqdq_ymm_ymm_ymm$ vpunpckhwd_xmm_xmm_xmm$ vpunpckhwd_ymm_ymm_ymm$ vpunpcklbw_xmm_xmm_xmm$ vpunpcklbw_ymm_ymm_ymm$ vpunpckldq_xmm_xmm_xmm$ vpunpckldq_ymm_ymm_ymm$ vpunpcklqdq_xmm_xmm_xmm$ vpunpcklqdq_ymm_ymm_ymm$ vpunpcklwd_xmm_xmm_xmm$ vpunpcklwd_ymm_ymm_ymm$ vpxor_ymm_ymm_ymm$ vrcpps_xmm_xmm$ vrcpps_ymm_ymm$ vroundpd_xmm_xmm_imm8$ vroundpd_ymm_ymm_imm8$ vroundps_xmm_xmm_imm8$ vroundps_ymm_ymm_imm8$ vrsqrtps_xmm_xmm$ vrsqrtps_ymm_ymm$ vshufpd_xmm_xmm_xmm_imm8$ vshufpd_ymm_ymm_ymm_imm8$ vshufps_xmm_xmm_xmm_imm8$ vshufps_ymm_ymm_ymm_imm8$ vsqrtpd_xmm_xmm$ vsqrtpd_ymm_ymm$ vsqrtps_xmm_xmm$ vsqrtps_ymm_ymm$ vsubpd_xmm_xmm_xmm$ vsubpd_ymm_ymm_ymm$ vsubps_xmm_xmm_xmm$ vsubps_ymm_ymm_ymm$ vtestpd_xmm_xmm$ vtestpd_ymm_ymm$ vtestps_xmm_xmm$ vtestps_ymm_ymm$ vunpckhpd_xmm_xmm_xmm$ vunpckhpd_ymm_ymm_ymm$ vunpckhps_xmm_xmm_xmm$ vunpckhps_ymm_ymm_ymm$ vunpcklpd_xmm_xmm_xmm$ vunpcklpd_ymm_ymm_ymm$ vunpcklps_xmm_xmm_xmm$ vunpcklps_ymm_ymm_ymm$ vxorpd_xmm_xmm_xmm$ vxorpd_ymm_ymm_ymm$ vxorps_xmm_xmm_xmm$ vxorps_ymm_ymm_ymm$ vzeroall$ vzeroupper$ xgetbv$ xorpd_xmm_xmm$ xorps_xmm_xmm$ }

# Number of additional call opcodes in the opcode pool
# --call_weight <int>
# Default: 0

# Override the value of preserve_regs to the empty set
# --callee_save 

# Only propose rewrites that the STOKE formal validator can support
# --validator_must_support 

# Prevent STOKE from proposing instructions that modify these registers
# --preserve_regs { %rax %rsp ... }
# Default: { %rbx %rsp %rbp %r12 %r13 %r14 %r15 }

# Additional immediates to propose as operands
# --immediates { imm1 imm2 ... }
# Default: { }

# Additional addresses to propose as operands
# --mem_ops { (%rax) (%rdi, %rsp) ... }
# Default: { }

# Additional global rip offsets to propose as operands
# --rips { rip1 rip2 ... }
# Default: { }

##### Verifier Options:

# Verification strategy
# --strategy (none|hold_out|formal|extension)
# Default: none
--strategy formal

##### Output Options:

# File to write successful results to
# --out <path/to/file.s>
# Default: "result.s"

##### Statistics Options:

# Number of iterations between statistics updates
# --statistics_interval <int>
# Default: 1000000

##### Automation Options:

# Action to take when search times out
# --timeout_action (quit|restart|list|testcase)
# Default: restart
--timeout_action testcase

# Number of timeout cycles to attempt before giving up
# --timeout_cycles <int>
# Default: 16

# Exponential scaling factor of timeout iterations per cycle (requires timeout_action==restart)
# --exp_scaling <double>
# Default: 1

# Postprocessing of the program found by STOKE (simple removes nops and unreachable blocks, and full additionally removes redundant statements without side-effects)
# --postprocessing (none|simple|full)
# Default: full

# Don't show a progress update whenever a new best program is discovered
# --no_progress_update 

##### Help and argument utilities:

# Print this message and quit
# --help 

# Print program arguments and quit
# --debug_args 

# Read program args from a configuration file
# --config <path/to/file.conf>

# Print an example configuration file
# --example_config <path/to/file.conf>


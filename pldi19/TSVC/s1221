VERSION: dd991bd17e436dd14f434f15eae23f641b5fb067-dirty

Seeding with 18446744073709551488
COLLECTING DATA ON 192 TCs...
BUILDING MATRIX...
STARTING MATRIX IS 192 x 14
DEBUGGING FREQUENCY MATRICIES
 R18446744073709551615
 T0
 T1
 T2
 T3
 T4
 T5
 R0
 R1
 R2
 R3
 R4
 R5
 R6
  1  1  1  0  0  1  0  1  1  0  0  1  0  0
  1  1  1  1  4  1  0  1  1  1  1  1  0  0
  1  1  1  1  12  1  0  1  1  1  3  1  0  0
  1  1  1  1  20  1  0  1  1  1  5  1  0  0
  1  1  1  1  28  1  0  1  1  1  7  1  0  0
  1  1  1  1  36  1  0  1  1  1  9  1  0  0
  1  1  1  1  44  1  0  1  1  1  11  1  0  0
  1  1  1  1  52  1  0  1  1  1  13  1  0  0
  1  1  1  1  60  1  0  1  1  1  15  1  0  0
  1  1  1  1  68  1  0  1  1  1  17  1  0  0
  1  1  1  1  76  1  0  1  1  1  19  1  0  0
  1  1  1  1  84  1  0  1  1  1  21  1  0  0
  1  1  1  1  92  1  0  1  1  1  23  1  0  0
  1  1  1  1  100  1  0  1  1  1  25  1  0  0
  1  1  1  1  108  1  0  1  1  1  27  1  0  0
  1  1  1  1  116  1  0  1  1  1  29  1  0  0
[sage] running...
harness_file = /home/berkeley/stoke/bin/sage_harness.sage
Temporary file at /tmp/file0AMPqM.sage
Wrote to buffer
1{6}R = 0
1{5}R = 0
-1+1{4}R = 0
-1{3}T+4{3}R = 0
-1{2}T+1{2}R = 0
-1+1{1}R = 0
-1+1{0}R = 0
1{5}T = 0
-1+1{4}T = 0
-1+1{1}T = 0
-1+1{0}T = 0
MATRIX
0  0  0  0  0  0  0  0  0  0  0  0  0  1  
0  0  0  0  0  0  0  0  0  0  0  0  1  0  
-1  0  0  0  0  0  0  0  0  0  0  1  0  0  
0  0  0  0  -1  0  0  0  0  0  4  0  0  0  
0  0  0  -1  0  0  0  0  0  1  0  0  0  0  
-1  0  0  0  0  0  0  0  1  0  0  0  0  0  
-1  0  0  0  0  0  0  1  0  0  0  0  0  0  
0  0  0  0  0  0  1  0  0  0  0  0  0  0  
-1  0  0  0  0  1  0  0  0  0  0  0  0  0  
-1  0  1  0  0  0  0  0  0  0  0  0  0  0  
-1  1  0  0  0  0  0  0  0  0  0  0  0  0  
Database connection open.
make_tables() complete
Database connection open.
make_tables() complete
PROCESSING RO TESTCASE
PROCESSING RO SEGMENT
PROCESSING RO SEGMENT
PROCESSING RO SEGMENT
PROCESSING RO SEGMENT
  Adding invariant 0x601c80' == 1
  Adding invariant 0x601c81' == 0
  Adding invariant 0x601c82' == 0
  Adding invariant 0x601c83' == 0
  Adding invariant 0x601c84' == 1
  Adding invariant 0x601c85' == 0
  Adding invariant 0x601c86' == 0
  Adding invariant 0x601c87' == 0
  Adding invariant 0x601c88' == 1
  Adding invariant 0x601c89' == 0
  Adding invariant 0x601c8a' == 0
  Adding invariant 0x601c8b' == 0
  Adding invariant 0x601c8c' == 1
  Adding invariant 0x601c8d' == 0
  Adding invariant 0x601c8e' == 0
  Adding invariant 0x601c8f' == 0
PROCESSING RO SEGMENT
  Adding invariant 0x601a80' == 1
  Adding invariant 0x601a81' == 0
  Adding invariant 0x601a82' == 0
  Adding invariant 0x601a83' == 0
  Adding invariant 0x601a84' == 1
  Adding invariant 0x601a85' == 0
  Adding invariant 0x601a86' == 0
  Adding invariant 0x601a87' == 0
  Adding invariant 0x601a88' == 1
  Adding invariant 0x601a89' == 0
  Adding invariant 0x601a8a' == 0
  Adding invariant 0x601a8b' == 0
  Adding invariant 0x601a8c' == 1
  Adding invariant 0x601a8d' == 0
  Adding invariant 0x601a8e' == 0
  Adding invariant 0x601a8f' == 0
  Adding invariant 0x601a90' == 0
  Adding invariant 0x601a91' == 0
  Adding invariant 0x601a92' == 0
  Adding invariant 0x601a93' == 0
  Adding invariant 0x601a94' == 1
  Adding invariant 0x601a95' == 0
  Adding invariant 0x601a96' == 0
  Adding invariant 0x601a97' == 0
  Adding invariant 0x601a98' == 2
  Adding invariant 0x601a99' == 0
  Adding invariant 0x601a9a' == 0
  Adding invariant 0x601a9b' == 0
  Adding invariant 0x601a9c' == 3
  Adding invariant 0x601a9d' == 0
  Adding invariant 0x601a9e' == 0
  Adding invariant 0x601a9f' == 0
  Adding invariant 0x601aa0' == 4
  Adding invariant 0x601aa1' == 0
  Adding invariant 0x601aa2' == 0
  Adding invariant 0x601aa3' == 0
  Adding invariant 0x601aa4' == 4
  Adding invariant 0x601aa5' == 0
  Adding invariant 0x601aa6' == 0
  Adding invariant 0x601aa7' == 0
  Adding invariant 0x601aa8' == 4
  Adding invariant 0x601aa9' == 0
  Adding invariant 0x601aaa' == 0
  Adding invariant 0x601aab' == 0
  Adding invariant 0x601aac' == 4
  Adding invariant 0x601aad' == 0
  Adding invariant 0x601aae' == 0
  Adding invariant 0x601aaf' == 0
Target                      Rewrite                        
                                                           
.s1221:                     .s1221:                        
leal (,%rdi,8), %eax        leal (,%rdi,8), %eax           
cmpl $0x4, %eax             cmpl $0x4, %eax                
jle .L_6023d4               jle .L_602a82                  
subl $0x5, %eax             subl $0x8, %eax                
leaq 0x4(,%rax,4), %rcx     movdqa -0x19d7(%rip), %xmm0    
movl $0x0, %eax             shrl $0x2, %eax                
.L_6023b9:                  xorl %edx, %edx                
movl 0x601290(%rax), %edx   leal 0x1(%rax), %ecx           
addl 0x601080(%rax), %edx   xorl %eax, %eax                
movl %edx, 0x601090(%rax)   nop                            
addq $0x4, %rax             nop                            
cmpq %rcx, %rax             nop                            
jne .L_6023b9               nop                            
.L_6023d4:                  nop                            
movl $0x0, %eax             nop                            
retq                        nop                            
                            .L_602a68:                     
                            addl $0x1, %edx                
                            paddd 0x601290(%rax), %xmm0    
                            addq $0x10, %rax               
                            movaps %xmm0, 0x601080(%rax)   
                            cmpl %edx, %ecx                
                            ja .L_602a68                   
                            .L_602a82:                     
                            xorl %eax, %eax                
                            retq                           
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                            nop                            
                                                           
COLLECTING DATA...
... DONE
* getting pairs of testcases
  * processing testcase 0 / 192
COLLECTING DATA...
... DONE
  * processing testcase 1 / 192
  * processing testcase 2 / 192
  * processing testcase 3 / 192
  * processing testcase 4 / 192
  * processing testcase 5 / 192
  * processing testcase 6 / 192
  * processing testcase 7 / 192
  * processing testcase 8 / 192
  * processing testcase 9 / 192
  * processing testcase 10 / 192
  * processing testcase 11 / 192
  * processing testcase 12 / 192
  * processing testcase 13 / 192
  * processing testcase 14 / 192
  * processing testcase 15 / 192
  * processing testcase 16 / 192
  * processing testcase 17 / 192
  * processing testcase 18 / 192
  * processing testcase 19 / 192
  * processing testcase 20 / 192
  * processing testcase 21 / 192
  * processing testcase 22 / 192
  * processing testcase 23 / 192
  * processing testcase 24 / 192
  * processing testcase 25 / 192
  * processing testcase 26 / 192
  * processing testcase 27 / 192
  * processing testcase 28 / 192
  * processing testcase 29 / 192
  * processing testcase 30 / 192
  * processing testcase 31 / 192
  * processing testcase 32 / 192
  * processing testcase 33 / 192
  * processing testcase 34 / 192
  * processing testcase 35 / 192
  * processing testcase 36 / 192
  * processing testcase 37 / 192
  * processing testcase 38 / 192
  * processing testcase 39 / 192
  * processing testcase 40 / 192
  * processing testcase 41 / 192
  * processing testcase 42 / 192
  * processing testcase 43 / 192
  * processing testcase 44 / 192
  * processing testcase 45 / 192
  * processing testcase 46 / 192
  * processing testcase 47 / 192
  * processing testcase 48 / 192
  * processing testcase 49 / 192
  * processing testcase 50 / 192
  * processing testcase 51 / 192
  * processing testcase 52 / 192
  * processing testcase 53 / 192
  * processing testcase 54 / 192
  * processing testcase 55 / 192
  * processing testcase 56 / 192
  * processing testcase 57 / 192
  * processing testcase 58 / 192
  * processing testcase 59 / 192
  * processing testcase 60 / 192
  * processing testcase 61 / 192
  * processing testcase 62 / 192
  * processing testcase 63 / 192
  * processing testcase 64 / 192
  * processing testcase 65 / 192
  * processing testcase 66 / 192
  * processing testcase 67 / 192
  * processing testcase 68 / 192
  * processing testcase 69 / 192
  * processing testcase 70 / 192
  * processing testcase 71 / 192
  * processing testcase 72 / 192
  * processing testcase 73 / 192
  * processing testcase 74 / 192
  * processing testcase 75 / 192
  * processing testcase 76 / 192
  * processing testcase 77 / 192
  * processing testcase 78 / 192
  * processing testcase 79 / 192
  * processing testcase 80 / 192
  * processing testcase 81 / 192
  * processing testcase 82 / 192
  * processing testcase 83 / 192
  * processing testcase 84 / 192
  * processing testcase 85 / 192
  * processing testcase 86 / 192
  * processing testcase 87 / 192
  * processing testcase 88 / 192
  * processing testcase 89 / 192
  * processing testcase 90 / 192
  * processing testcase 91 / 192
  * processing testcase 92 / 192
  * processing testcase 93 / 192
  * processing testcase 94 / 192
  * processing testcase 95 / 192
  * processing testcase 96 / 192
  * processing testcase 97 / 192
  * processing testcase 98 / 192
  * processing testcase 99 / 192
  * processing testcase 100 / 192
  * processing testcase 101 / 192
  * processing testcase 102 / 192
  * processing testcase 103 / 192
  * processing testcase 104 / 192
  * processing testcase 105 / 192
  * processing testcase 106 / 192
  * processing testcase 107 / 192
  * processing testcase 108 / 192
  * processing testcase 109 / 192
  * processing testcase 110 / 192
  * processing testcase 111 / 192
  * processing testcase 112 / 192
  * processing testcase 113 / 192
  * processing testcase 114 / 192
  * processing testcase 115 / 192
  * processing testcase 116 / 192
  * processing testcase 117 / 192
  * processing testcase 118 / 192
  * processing testcase 119 / 192
  * processing testcase 120 / 192
  * processing testcase 121 / 192
  * processing testcase 122 / 192
  * processing testcase 123 / 192
  * processing testcase 124 / 192
  * processing testcase 125 / 192
  * processing testcase 126 / 192
  * processing testcase 127 / 192
  * processing testcase 128 / 192
  * processing testcase 129 / 192
  * processing testcase 130 / 192
  * processing testcase 131 / 192
  * processing testcase 132 / 192
  * processing testcase 133 / 192
  * processing testcase 134 / 192
  * processing testcase 135 / 192
  * processing testcase 136 / 192
  * processing testcase 137 / 192
  * processing testcase 138 / 192
  * processing testcase 139 / 192
  * processing testcase 140 / 192
  * processing testcase 141 / 192
  * processing testcase 142 / 192
  * processing testcase 143 / 192
  * processing testcase 144 / 192
  * processing testcase 145 / 192
  * processing testcase 146 / 192
  * processing testcase 147 / 192
  * processing testcase 148 / 192
  * processing testcase 149 / 192
  * processing testcase 150 / 192
  * processing testcase 151 / 192
  * processing testcase 152 / 192
  * processing testcase 153 / 192
  * processing testcase 154 / 192
  * processing testcase 155 / 192
  * processing testcase 156 / 192
  * processing testcase 157 / 192
  * processing testcase 158 / 192
  * processing testcase 159 / 192
  * processing testcase 160 / 192
  * processing testcase 161 / 192
  * processing testcase 162 / 192
  * processing testcase 163 / 192
  * processing testcase 164 / 192
  * processing testcase 165 / 192
  * processing testcase 166 / 192
  * processing testcase 167 / 192
  * processing testcase 168 / 192
  * processing testcase 169 / 192
  * processing testcase 170 / 192
  * processing testcase 171 / 192
  * processing testcase 172 / 192
  * processing testcase 173 / 192
  * processing testcase 174 / 192
  * processing testcase 175 / 192
  * processing testcase 176 / 192
  * processing testcase 177 / 192
  * processing testcase 178 / 192
  * processing testcase 179 / 192
  * processing testcase 180 / 192
  * processing testcase 181 / 192
  * processing testcase 182 / 192
  * processing testcase 183 / 192
  * processing testcase 184 / 192
  * processing testcase 185 / 192
  * processing testcase 186 / 192
  * processing testcase 187 / 192
  * processing testcase 188 / 192
  * processing testcase 189 / 192
  * processing testcase 190 / 192
  * processing testcase 191 / 192
COLLECTING DATA ON 192 TCs...
BUILDING MATRIX...
STARTING MATRIX IS 192 x 14
DEBUGGING FREQUENCY MATRICIES
 R18446744073709551615
 T0
 T1
 T2
 T3
 T4
 T5
 R0
 R1
 R2
 R3
 R4
 R5
 R6
  1  1  1  0  0  1  0  1  1  0  0  1  0  0
  1  1  1  1  4  1  0  1  1  1  1  1  0  0
  1  1  1  1  12  1  0  1  1  1  3  1  0  0
  1  1  1  1  20  1  0  1  1  1  5  1  0  0
  1  1  1  1  28  1  0  1  1  1  7  1  0  0
  1  1  1  1  36  1  0  1  1  1  9  1  0  0
  1  1  1  1  44  1  0  1  1  1  11  1  0  0
  1  1  1  1  52  1  0  1  1  1  13  1  0  0
  1  1  1  1  60  1  0  1  1  1  15  1  0  0
  1  1  1  1  68  1  0  1  1  1  17  1  0  0
  1  1  1  1  76  1  0  1  1  1  19  1  0  0
  1  1  1  1  84  1  0  1  1  1  21  1  0  0
  1  1  1  1  92  1  0  1  1  1  23  1  0  0
  1  1  1  1  100  1  0  1  1  1  25  1  0  0
  1  1  1  1  108  1  0  1  1  1  27  1  0  0
  1  1  1  1  116  1  0  1  1  1  29  1  0  0
[sage] running...
Temporary file at /tmp/fileAYDNwq.sage
Wrote to buffer
1{6}R = 0
1{5}R = 0
-1+1{4}R = 0
-1{3}T+4{3}R = 0
-1{2}T+1{2}R = 0
-1+1{1}R = 0
-1+1{0}R = 0
1{5}T = 0
-1+1{4}T = 0
-1+1{1}T = 0
-1+1{0}T = 0
MATRIX
0  0  0  0  0  0  0  0  0  0  0  0  0  1  
0  0  0  0  0  0  0  0  0  0  0  0  1  0  
-1  0  0  0  0  0  0  0  0  0  0  1  0  0  
0  0  0  0  -1  0  0  0  0  0  4  0  0  0  
0  0  0  -1  0  0  0  0  0  1  0  0  0  0  
-1  0  0  0  0  0  0  0  1  0  0  0  0  0  
-1  0  0  0  0  0  0  1  0  0  0  0  0  0  
0  0  0  0  0  0  1  0  0  0  0  0  0  0  
-1  0  0  0  0  1  0  0  0  0  0  0  0  0  
-1  0  1  0  0  0  0  0  0  0  0  0  0  0  
-1  1  0  0  0  0  0  0  0  0  0  0  0  0  
============================================================
Learning inductive paths and invariants
Target SCCs: 1
Rewrite SCCs: 1
TRYING SCCS 0 / 0
LEARNING PATHS AT BLOCKS 3 / 3
Target paths for 3 bound=1
    3
Rewrite paths for 3 bound=1
    3
For pair 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
Target paths for 3 bound=2
    3
    3 3
Rewrite paths for 3 bound=2
    3
    3 3
For pair 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
Target paths for 3 bound=4
    3
    3 3
    3 3 3
    3 3 3 3
Rewrite paths for 3 bound=4
    3
    3 3
    3 3 3
    3 3 3 3
For pair 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 | 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 | 3 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 | 3 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 | 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 | 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 | 3 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 3 | 3 the following failed.
Found inductive pair 3 3 3 3 and 3
For pair 3 3 3 3 | 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 3 | 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
For pair 3 3 3 3 | 3 3 3 3 the following failed.
    -1{3}T+4{3}R = 0
===== INVARIANT AFTER BLOCKS 3 / 3 =====
* picking variables
     %rax
     %rcx
     %rax'
     %xmm0'[63:0]
     %xmm0'[127:64]
* learning equalities
generating n0' = 0x1
generating n1' = 0x1
generating n2' = 0x1
generating n4' = 0x0
generating n5' = 0x0
generating n0 = 0x1
generating n1 = 0x1
generating n2 = 0x1
generating n4 = 0x0
CONSTANT INVARIANTS
    n0' = 0x1 ^ 
    n1' = 0x1 ^ 
    n2' = 0x1 ^ 
    n4' = 0x0 ^ 
    n5' = 0x0 ^ 
    n0 = 0x1 ^ 
    n1 = 0x1 ^ 
    n2 = 0x1 ^ 
    n4 = 0x0

 - Checking if column n3' matches n3
 - Checking if column n3' matches %rax
 - Checking if column n3' matches %rcx
 - Checking if column n3' matches %rax'
 - Checking if column n3' matches %xmm0'[63:0]
 - Checking if column n3' matches %xmm0'[127:64]
 - Checking if column n3 matches %rax
 - Checking if column n3 matches %rcx
 - Checking if column n3 matches %rax'
 - Checking if column n3 matches %xmm0'[63:0]
 - Checking if column n3 matches %xmm0'[127:64]
 - Checking if column %rax matches %rcx
 - Checking if column %rax matches %rax'
 - Checking if column %rax matches %xmm0'[63:0]
 - Checking if column %rax matches %xmm0'[127:64]
 - Checking if column %rcx matches %rax'
 - Checking if column %rcx matches %xmm0'[63:0]
 - Checking if column %rcx matches %xmm0'[127:64]
 - Checking if column %rax' matches %xmm0'[63:0]
 - Checking if column %rax' matches %xmm0'[127:64]
 - Checking if column %xmm0'[63:0] matches %xmm0'[127:64]
EQUAL INVARIANTS
    true

REMAINING COLS
n3'
n3
%rax
%rcx
%rax'
%xmm0'[63:0]
%xmm0'[127:64]
VERIFYING MATRIX
14  67  268  272  224  -5774761207924313965  6612443431283662486  1  
18  29  116  336  288  860351528223869851  -1431724213370107153  1  
4  3  12  144  64  2845555946396006301  -3697568807599886349  1  
17  32  128  272  272  -5657684150854488951  4222565912526046832  1  
12  11  44  208  192  -1740730893310084163  -7483958222155751065  1  
2  19  76  112  32  -4704188626632198929  -5222809621403382574  1  
7  43  172  432  112  -5680003674047134991  -4427547681202829903  1  
12  21  84  240  192  3231375694693696401  2521624617796131448  1  
5  12  48  208  80  -4771965621717791949  873566709673827707  1  
14  42  168  336  224  -3357230574283265393  -4633874640874211787  1  
20  58  232  336  320  -1993578072757930004  2767556090321245117  1  
9  49  196  368  144  764904424998622694  -1767886078318189363  1  
22  66  264  368  352  6626454962038489828  8290785761065496720  1  
3  53  212  304  48  7521935909089153314  -5426911186351609808  1  
13  73  292  336  208  6931667121843321065  7083022871538529825  1  
3  8  32  304  48  1173322274929864312  -5532946894727686430  1  
7  27  108  112  112  7147841351584730656  1939546491377557769  1  
7  32  128  144  112  6091116107661158246  7186111395274618100  1  
5  52  208  368  80  -8194882228907752253  1024187057816974172  1  
7  26  104  144  112  -7900443190557914160  -216979581331112363  1  
18  87  348  464  288  1867461699618380083  -918821416815350370  1  
3  27  108  400  48  4986295395268113656  -2601073239642339990  1  
4  9  36  336  64  -5902453161825798431  8553128400180684063  1  
4  9  36  176  64  -9218382066298066774  -4690905519125283578  1  
14  61  244  304  224  1933789375655264132  -1454229711384091527  1  
[sage] running...
Temporary file at /tmp/fileeLHRrf.sage
Wrote to buffer
NULLSPACE
0  0  0  576460752303423488  0  0  0  -9223372036854775808  
0  -4  1  0  0  0  0  0  
-16  0  0  0  1  0  0  0  
INVARIANTS
Got matrix with 3 rows and 8 cols
    800000000000000*%rcx = 0x8000000000000000 ^ 
    -4*n3 + %rax = 0x0 ^ 
    -10*n3' + %rax' = 0x0
Column count: 17
[fil] Checking invariant...
[fil] ... these invariants hold over all test data.
    n0' = 0x1 ^ 
    n1' = 0x1 ^ 
    n2' = 0x1 ^ 
    n4' = 0x0 ^ 
    n5' = 0x0 ^ 
    n0 = 0x1 ^ 
    n1 = 0x1 ^ 
    n2 = 0x1 ^ 
    n4 = 0x0 ^ 
    800000000000000*%rcx = 0x8000000000000000 ^ 
    -4*n3 + %rax = 0x0 ^ 
    -10*n3' + %rax' = 0x0
  == performing transform 3  3 == 
    with paths 3 3 3 3 / 3
     looked for n0' on path 3 and found 0 with multiplier 1
     looked for n1' on path 3 and found 0 with multiplier 1
     looked for n2' on path 3 and found 0 with multiplier 1
     looked for n4' on path 3 and found 0 with multiplier 1
     looked for n5' on path 3 and found 0 with multiplier 1
     looked for n0 on path 3 3 3 3 and found 0 with multiplier 1
     looked for n1 on path 3 3 3 3 and found 0 with multiplier 1
     looked for n2 on path 3 3 3 3 and found 0 with multiplier 1
     looked for n4 on path 3 3 3 3 and found 0 with multiplier 1
     looked for -4*n3 on path 3 3 3 3 and found 4 with multiplier -4
     looked for -16*n3' on path 3 and found 1 with multiplier -16
DEBUGGING TRANSFORM MATRIX
0  0  0  0  0  0  0  0  0  0  -16  -16  
[sage] running...
Temporary file at /tmp/filefCGiOn.sage
Wrote to buffer
DEBUGGING TRANSFORM MATRIX NULLSPACE
0  0  0  0  0  0  0  0  0  0  -1  1  
0  0  0  0  0  0  0  0  0  1  0  0  
0  0  0  0  0  0  0  0  1  0  0  0  
0  0  0  0  0  0  0  1  0  0  0  0  
0  0  0  0  0  0  1  0  0  0  0  0  
0  0  0  0  0  1  0  0  0  0  0  0  
0  0  0  0  1  0  0  0  0  0  0  0  
0  0  0  1  0  0  0  0  0  0  0  0  
0  0  1  0  0  0  0  0  0  0  0  0  
0  1  0  0  0  0  0  0  0  0  0  0  
1  0  0  0  0  0  0  0  0  0  0  0  
   adding -1 copies of -4*n3 + %rax = 0x0
         -4*n3
         %rax
   adding 1 copies of -10*n3' + %rax' = 0x0
         -16*n3'
         %rax'
   adding 1 copies of 800000000000000*%rcx = 0x8000000000000000
         576460752303423488*%rcx
   adding 1 copies of n4 = 0x0
         n4
   adding 1 copies of n2 = 0x1
         n2
   adding 1 copies of n1 = 0x1
         n1
   adding 1 copies of n0 = 0x1
         n0
   adding 1 copies of n5' = 0x0
         n5'
   adding 1 copies of n4' = 0x0
         n4'
   adding 1 copies of n2' = 0x1
         n2'
   adding 1 copies of n1' = 0x1
         n1'
   adding 1 copies of n0' = 0x1
         n0'
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0 ^ 
    800000000000000*%rcx = 0x0
TARGET REGS: { %rax %rcx }
   Found %rax in 4*n3 + -1*%rax + -10*n3' + %rax' = 0x0 via -1*%rax
   Found %rcx in 800000000000000*%rcx = 0x0 via 576460752303423488*%rcx
REWRITE REGS: { %rax %ecx %edx %xmm0 }
   Found %rax in 4*n3 + -1*%rax + -10*n3' + %rax' = 0x0 via %rax'
CONSTRAINED: 3 TOTAL: 5
 quality = 0.6
   (best yet)
FOUND SOMETHING FOR THIS SCC!
--------- FOUND A GOOD NODE -----------
PATHS
  3 3 3 3 / 3
INVARIANTS
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0 ^ 
    800000000000000*%rcx = 0x0
         4*n3
         -1*%rax
         -16*n3'
         %rax'
         576460752303423488*%rcx

STATE (3, 3)
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0
    to (3, 3) via target: 3  3  3  3  rewrite: 3  
STATE (5, 6)
    false
STATE FAIL
    false
TOPOLOGIAL SORT 
(0, 0)   (3, 3)   (5, 6)   

[DdecValidator::verify()] debugging equivalence classes to try
STATE (3, 3)
[get_class_for_state] pair 1 2 3 / 1 2 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3 3
classification = 18446744073709551572  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3 3 3
classification = 18446744073709551556  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3 3
classification = 18446744073709551576  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3 3 3
classification = 18446744073709551560  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3 3
classification = 18446744073709551580  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551564  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551584  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551568  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551572  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551576  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551580  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551584  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 28  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 32  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 36  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 40  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 44  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 28  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 48  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 32  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 52  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 36  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 56  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 40  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
     * 
     0 
     4 
     8 
    12 
    16 
    20 
    24 
    28 
    32 
    36 
    40 
    44 
    48 
    52 
    56 
   18446744073709551556 
   18446744073709551560 
   18446744073709551564 
   18446744073709551568 
   18446744073709551572 
   18446744073709551576 
   18446744073709551580 
   18446744073709551584 
   18446744073709551588 
   18446744073709551592 
   18446744073709551596 
   18446744073709551600 
   18446744073709551604 
   18446744073709551608 
   18446744073709551612 
[get_class_for_state] pair 1 2 3 / 1 2 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3 3
classification = 18446744073709551572  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 / 1 2 3 3 3 3
classification = 18446744073709551556  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3 3
classification = 18446744073709551576  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 / 1 2 3 3 3 3
classification = 18446744073709551560  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3 3
classification = 18446744073709551580  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551564  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551584  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551568  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551572  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551576  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551580  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551584  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551588  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551592  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 28  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551596  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 32  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551600  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 36  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551604  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 40  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551608  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 44  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 28  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 12  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 18446744073709551612  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 48  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 32  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 16  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 0  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 52  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 36  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 20  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 4  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
classification = 56  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
classification = 40  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
classification = 24  
done.size() = 2
Made 2 wildcard classes
[get_class_for_state] pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
classification = 8  
done.size() = 2
Made 2 wildcard classes
DDEC tells class checker to assume
    0x601c80' == 1
    0x601c81' == 0
    0x601c82' == 0
    0x601c83' == 0
    0x601c84' == 1
    0x601c85' == 0
    0x601c86' == 0
    0x601c87' == 0
    0x601c88' == 1
    0x601c89' == 0
    0x601c8a' == 0
    0x601c8b' == 0
    0x601c8c' == 1
    0x601c8d' == 0
    0x601c8e' == 0
    0x601c8f' == 0
    0x601a80' == 1
    0x601a81' == 0
    0x601a82' == 0
    0x601a83' == 0
    0x601a84' == 1
    0x601a85' == 0
    0x601a86' == 0
    0x601a87' == 0
    0x601a88' == 1
    0x601a89' == 0
    0x601a8a' == 0
    0x601a8b' == 0
    0x601a8c' == 1
    0x601a8d' == 0
    0x601a8e' == 0
    0x601a8f' == 0
    0x601a90' == 0
    0x601a91' == 0
    0x601a92' == 0
    0x601a93' == 0
    0x601a94' == 1
    0x601a95' == 0
    0x601a96' == 0
    0x601a97' == 0
    0x601a98' == 2
    0x601a99' == 0
    0x601a9a' == 0
    0x601a9b' == 0
    0x601a9c' == 3
    0x601a9d' == 0
    0x601a9e' == 0
    0x601a9f' == 0
    0x601aa0' == 4
    0x601aa1' == 0
    0x601aa2' == 0
    0x601aa3' == 0
    0x601aa4' == 4
    0x601aa5' == 0
    0x601aa6' == 0
    0x601aa7' == 0
    0x601aa8' == 4
    0x601aa9' == 0
    0x601aaa' == 0
    0x601aab' == 0
    0x601aac' == 4
    0x601aad' == 0
    0x601aae' == 0
    0x601aaf' == 0
Next class to try 
1
3 3
1
N 
[next] generating initial POD
frontiers? 0 and 3
==== Next Frontier ==== 0
   [my_exit_data] at (0, 0)
     - 0 0 0 0 0 0 1 0 0 0 1
Looking for paths from (0, 0) to (3, 3) bound=18/4
Processing pair 1 2 3 / 1 2 3
  classification of this edge pair: 18446744073709551604
   - this edge works
Processing pair 1 2 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551588
   - this edge works
Processing pair 1 2 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551572
   - this edge works
Processing pair 1 2 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551556
   - this edge works
Processing pair 1 2 3 3 / 1 2 3
  classification of this edge pair: 18446744073709551608
   - this edge works
Processing pair 1 2 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551592
   - this edge works
Processing pair 1 2 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551576
   - this edge works
Processing pair 1 2 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551560
   - this edge works
Processing pair 1 2 3 3 3 / 1 2 3
  classification of this edge pair: 18446744073709551612
   - this edge works
Processing pair 1 2 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551596
   - this edge works
Processing pair 1 2 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551580
   - this edge works
Processing pair 1 2 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551564
   - this edge works
Processing pair 1 2 3 3 3 3 / 1 2 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551600
   - this edge works
Processing pair 1 2 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551584
   - this edge works
Processing pair 1 2 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551568
   - this edge works
Processing pair 1 2 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 4
   - this edge works
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551604
   - this edge works
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551588
   - this edge works
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551572
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 8
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551608
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551592
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551576
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 12
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551612
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551596
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551580
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 16
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551600
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551584
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 20
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 4
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551604
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551588
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 24
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 8
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551608
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551592
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 28
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 12
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551612
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551596
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 32
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 16
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551600
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 36
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 20
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 4
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551604
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 40
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 24
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 8
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551608
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 44
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 28
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 12
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551612
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 48
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 32
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 16
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 52
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 36
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 20
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 4
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 56
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 40
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 24
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 8
   - this edge works
Looking for paths from (0, 0) to (5, 6) bound=18/4
Processing pair 1 2 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 15 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 15 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 4 6   vector=0 0 1 -1 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 14 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 14 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 4 6   vector=0 0 1 -2 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 13 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -3 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 12 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -4 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -5 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -6 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -7 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -8 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -9 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -10 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -11 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -11 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -12 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -12 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -13 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -13 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -14 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -14 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -15 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -15 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -12 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -16 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -16 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -13 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -17 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -17 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -14 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -18 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -18 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 4 6   vector=0 0 1 4 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 4 6   vector=0 0 1 8 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 12 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 12 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 16 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 16 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Adding frontier...
###### FRONTIER
head = (0, 0)
    (0, 0) -> (3, 3) ; 1 2 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 4 5  ; 1 4 6 
frontiers? 1 and 3
==== Next Frontier ==== 1
   [my_exit_data] at (3, 3)
     - 0 0 0 -14 0 1 1 0 0 1 1
     - 0 0 0 -13 0 1 1 0 0 1 1
     - 0 0 0 -12 0 1 1 0 0 1 1
     - 0 0 0 -11 0 1 1 0 0 1 1
     - 0 0 0 -10 0 1 1 0 0 1 1
     - 0 0 0 -9 0 1 1 0 0 1 1
     - 0 0 0 -8 0 1 1 0 0 1 1
     - 0 0 0 -7 0 1 1 0 0 1 1
     - 0 0 0 -6 0 1 1 0 0 1 1
     - 0 0 0 -5 0 1 1 0 0 1 1
     - 0 0 0 -4 0 1 1 0 0 1 1
     - 0 0 0 -3 0 1 1 0 0 1 1
     - 0 0 0 -2 0 1 1 0 0 1 1
     - 0 0 0 -1 0 1 1 0 0 1 1
     - 0 0 0 0 0 1 1 0 0 1 1
     - 0 0 0 1 0 1 1 0 0 1 1
     - 0 0 0 2 0 1 1 0 0 1 1
     - 0 0 0 3 0 1 1 0 0 1 1
     - 0 0 0 4 0 1 1 0 0 1 1
     - 0 0 0 5 0 1 1 0 0 1 1
     - 0 0 0 6 0 1 1 0 0 1 1
     - 0 0 0 7 0 1 1 0 0 1 1
     - 0 0 0 8 0 1 1 0 0 1 1
     - 0 0 0 9 0 1 1 0 0 1 1
     - 0 0 0 10 0 1 1 0 0 1 1
     - 0 0 0 11 0 1 1 0 0 1 1
     - 0 0 0 12 0 1 1 0 0 1 1
     - 0 0 0 13 0 1 1 0 0 1 1
     - 0 0 0 14 0 1 1 0 0 1 1
     - 0 0 0 15 0 1 1 0 0 1 1
Looking for paths from (3, 3) to (5, 6) bound=18/4
Processing pair 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 3 4 6   vector=0 0 1 8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 3 3 4 6   vector=0 0 1 12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 4 6   vector=0 0 1 7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 3 4 6   vector=0 0 1 11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 4 6   vector=0 0 1 6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -13 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -14 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -28 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 14 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -15 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -29 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -28 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 14 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 15 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -16 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -30 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -29 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -28 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 14 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 15 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -17 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -31 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -30 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -29 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -28 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 14 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 15 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -13 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -27 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -26 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -25 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -24 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 10 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 11 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 12 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 13 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -23 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -22 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -21 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -20 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 6 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 7 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 8 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 9 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 -14 0 1 1 0 0 1 1
             test        =0 0 1 -19 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -13 0 1 1 0 0 1 1
             test        =0 0 1 -18 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -12 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -11 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -10 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -9 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -8 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -7 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -6 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -5 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -4 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -3 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -2 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 -1 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 1 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 2 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 3 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 4 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
[exit_works] start vector=0 0 0 5 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Adding frontier...
###### FRONTIER
head = (3, 3)
    (3, 3) -> (5, 6) ; 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
frontiers? 2 and 3
==== Next Frontier ==== 2
   [my_exit_data] at (5, 6)
Adding frontier...
###### FRONTIER
head = (5, 6)
frontiers? 3 and 3
ABOUT TO DO SANITY CHECK
STATE (0, 0)
    false
    to (3, 3) via target: 1  2  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (5, 6) via target: 1  2  3  3  3  3  4  5  rewrite: 1  2  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  3  3  4  6  
    to (5, 6) via target: 1  4  5  rewrite: 1  4  6  
STATE (3, 3)
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0
    to (3, 3) via target: 3  3  3  3  rewrite: 3  
    to (5, 6) via target: 4  5  rewrite: 4  6  
    to (5, 6) via target: 4  5  rewrite: 3  4  6  
    to (5, 6) via target: 4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
STATE (5, 6)
    false
STATE FAIL
    false
TOPOLOGIAL SORT 
(0, 0)   (3, 3)   (5, 6)   
[sanity] global reachable: (0, 0)  (3, 3)  (5, 6)  
[sanity] states reachable from (0, 0) are (0, 0)  (3, 3)  (5, 6)  
[sanity] states reachable from (3, 3) are (3, 3)  (5, 6)  
[sanity] states reachable from (5, 6) are (5, 6)  
STATE (0, 0)
    false
    to (3, 3) via target: 1  2  3  rewrite: 1  2  3  
    to (5, 6) via target: 1  4  5  rewrite: 1  4  6  
STATE (3, 3)
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0
    to (3, 3) via target: 3  3  3  3  rewrite: 3  
    to (5, 6) via target: 4  5  rewrite: 4  6  
    to (5, 6) via target: 4  5  rewrite: 3  4  6  
    to (5, 6) via target: 4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  4  5  rewrite: 3  3  3  4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 4  6  
STATE (5, 6)
    false
STATE (5, 6)
    false
STATE FAIL
    false
TOPOLOGIAL SORT 
(0, 0)   (3, 3)   (5, 6)   
COLLECTING DATA...
... DONE
COLLECTING DATA...
... DONE
TESTCASE 0
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 1
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  ; 1  2  3  
    on this path memory states differ.
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
   - Could not find matching edge
[learn_invariants] lsd returned FALSE!
[verify_dual] Learning invariants failed!
[class_checker_callback] number=18446744073709551615
  verified=0
  error=0
  message=Learning state data/invariants failed
Equivalence class: 
1
3 3
1
N 
Class for checker job 0
1
3 3
1
N 
Next class to try 
1
3 3
1
Y 0 
[next] generating initial POD
frontiers? 0 and 3
==== Next Frontier ==== 0
   [my_exit_data] at (0, 0)
     - 0 0 0 0 0 0 1 0 0 0 1
Looking for paths from (0, 0) to (3, 3) bound=18/4
Processing pair 1 2 3 / 1 2 3
  classification of this edge pair: 18446744073709551604
   - skipping this edge (handhold)
Processing pair 1 2 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551588
   - skipping this edge (handhold)
Processing pair 1 2 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551572
   - skipping this edge (handhold)
Processing pair 1 2 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551556
   - skipping this edge (handhold)
Processing pair 1 2 3 3 / 1 2 3
  classification of this edge pair: 18446744073709551608
   - skipping this edge (handhold)
Processing pair 1 2 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551592
   - skipping this edge (handhold)
Processing pair 1 2 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551576
   - skipping this edge (handhold)
Processing pair 1 2 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551560
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 / 1 2 3
  classification of this edge pair: 18446744073709551612
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551596
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551580
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551564
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 / 1 2 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551600
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551584
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551568
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 4
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551604
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551588
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551572
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 8
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551608
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551592
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551576
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 12
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 18446744073709551612
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551596
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551580
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 16
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551600
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551584
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 20
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 4
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551604
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551588
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 24
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 8
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551608
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551592
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 28
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 12
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 18446744073709551612
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551596
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 32
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 16
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551600
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 36
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 20
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 4
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551604
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 40
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 24
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 8
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551608
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 44
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 28
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 12
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 18446744073709551612
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 48
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 32
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 16
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 0
   - this edge works
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 52
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 36
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 20
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 4
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3
  classification of this edge pair: 56
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3
  classification of this edge pair: 40
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3
  classification of this edge pair: 24
   - skipping this edge (handhold)
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 / 1 2 3 3 3 3
  classification of this edge pair: 8
   - skipping this edge (handhold)
Looking for paths from (0, 0) to (5, 6) bound=18/4
Processing pair 1 2 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 15 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 15 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 4 5  ; 1 4 6   vector=0 0 1 -1 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 14 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 14 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 4 5  ; 1 4 6   vector=0 0 1 -2 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 13 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -3 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 12 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -4 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -5 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -6 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -7 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -8 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -9 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -10 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -11 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -11 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -12 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -12 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -13 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -13 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -14 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -14 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -11 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -7 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -3 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -15 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -15 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -12 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -8 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -4 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -16 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -16 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -13 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -9 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -5 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 -1 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -17 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -17 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 4 6   vector=0 0 1 -14 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6   vector=0 0 1 -10 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 -6 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 -2 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 4 6   vector=0 0 1 -18 -1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 -18 -1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 4 6   vector=0 0 1 4 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 4 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 4 6   vector=0 0 1 8 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 8 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 3 4 6   vector=0 0 1 12 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 12 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 2 3 3 3 3 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 2 3 3 3 3 4 6   vector=0 0 1 16 1 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 16 1 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 1 4 5 / 1 4 6
[exit_works] for (0, 0) -> (5, 6) ; 1 4 5  ; 1 4 6   vector=0 0 1 0 0 1 0 0 1 1 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 0 1 0 0 0 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Adding frontier...
###### FRONTIER
head = (0, 0)
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3  ; 1 2 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3  ; 1 2 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 
    (0, 0) -> (3, 3) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  ; 1 2 3 3 3 3 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 4 5  ; 1 2 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 1 2 3 3 3 3 4 6 
    (0, 0) -> (5, 6) ; 1 4 5  ; 1 4 6 
frontiers? 1 and 3
==== Next Frontier ==== 1
   [my_exit_data] at (3, 3)
     - 0 0 0 0 0 1 1 0 0 1 1
Looking for paths from (3, 3) to (5, 6) bound=18/4
Processing pair 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 3 4 6   vector=0 0 1 8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 4 5  ; 3 3 3 4 6   vector=0 0 1 12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 4 6   vector=0 0 1 7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 4 5  ; 3 3 3 4 6   vector=0 0 1 11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 4 6   vector=0 0 1 6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 0 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 0 0 1 1 0 1 1 1
      - does it work? 1
   - this exit edge looks okay
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -13 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -1 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -1 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -14 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -14 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -10 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -10 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -6 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -6 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -2 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -2 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -15 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -15 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -11 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -11 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -7 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -7 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -3 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -3 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -16 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -16 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -12 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -12 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -8 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -8 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -4 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -4 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 4 6   vector=0 0 1 -17 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -17 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 4 6   vector=0 0 1 -13 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -13 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6   vector=0 0 1 -9 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -9 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Processing pair 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 / 3 3 3 4 6
[exit_works] for (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6   vector=0 0 1 -5 0 0 0 0 1 0 0
             goal is 0 0 -1 0 0 -1 -1 0 -1 -1 -1
[exit_works] start vector=0 0 0 0 0 1 1 0 0 1 1
             test        =0 0 1 -5 0 1 1 0 1 1 1
      - does it work? 0
   - this exit edge won't work; skipping
Adding frontier...
###### FRONTIER
head = (3, 3)
    (3, 3) -> (5, 6) ; 4 5  ; 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 4 5  ; 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 4 5  ; 3 3 4 6 
    (3, 3) -> (5, 6) ; 3 3 3 3 3 3 3 3 3 3 3 3 4 5  ; 3 3 3 4 6 
frontiers? 2 and 3
==== Next Frontier ==== 2
   [my_exit_data] at (5, 6)
Adding frontier...
###### FRONTIER
head = (5, 6)
frontiers? 3 and 3
ABOUT TO DO SANITY CHECK
STATE (0, 0)
    false
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  
    to (3, 3) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  rewrite: 1  2  3  3  3  3  
    to (5, 6) via target: 1  2  3  3  3  3  4  5  rewrite: 1  2  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  3  4  6  
    to (5, 6) via target: 1  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 1  2  3  3  3  3  4  6  
    to (5, 6) via target: 1  4  5  rewrite: 1  4  6  
STATE (3, 3)
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0
    to (3, 3) via target: 3  3  3  3  rewrite: 3  
    to (5, 6) via target: 4  5  rewrite: 4  6  
    to (5, 6) via target: 3  3  3  3  4  5  rewrite: 3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  4  6  
    to (5, 6) via target: 3  3  3  3  3  3  3  3  3  3  3  3  4  5  rewrite: 3  3  3  4  6  
STATE (5, 6)
    false
STATE FAIL
    false
TOPOLOGIAL SORT 
(0, 0)   (3, 3)   (5, 6)   
[sanity] global reachable: (0, 0)  (3, 3)  (5, 6)  
[sanity] states reachable from (0, 0) are (0, 0)  (3, 3)  (5, 6)  
[sanity] states reachable from (3, 3) are (3, 3)  (5, 6)  
[sanity] states reachable from (5, 6) are (5, 6)  
STATE (0, 0)
    false
    to (3, 3) via target: 1  2  3  3  3  3  rewrite: 1  2  3  
    to (5, 6) via target: 1  4  5  rewrite: 1  4  6  
STATE (3, 3)
    4*n3 + -1*%rax + -10*n3' + %rax' = 0x0
    to (3, 3) via target: 3  3  3  3  rewrite: 3  
    to (5, 6) via target: 4  5  rewrite: 4  6  
STATE (5, 6)
    false
STATE (5, 6)
    false
STATE FAIL
    false
TOPOLOGIAL SORT 
(0, 0)   (3, 3)   (5, 6)   
TESTCASE 0
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 1
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 2
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 3
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 4
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 5
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 6
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 7
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 8
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 9
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 10
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 11
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 12
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 13
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 14
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 15
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 16
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 17
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 18
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 19
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 20
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 21
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 22
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 23
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 24
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 25
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 26
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 27
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 28
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 29
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 30
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 31
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 32
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 33
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 34
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 35
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 36
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 37
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 38
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 39
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 40
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 41
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 42
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 43
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 44
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 45
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 46
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 47
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 48
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 49
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 50
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 51
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 52
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 53
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 54
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 55
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 56
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 57
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 58
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 59
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 60
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 61
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 62
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 63
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 64
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 65
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 66
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 67
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 68
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 69
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 70
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 71
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 72
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 73
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 74
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 75
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 76
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 77
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 78
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 79
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 80
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 81
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 82
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 83
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 84
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 85
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 86
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 87
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 88
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 89
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 90
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 91
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 92
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 93
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 94
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 95
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 96
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 97
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 98
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 99
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 100
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 101
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 102
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 103
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 104
[learn_invariants] target trace: 0 1 4 5
[learn_invariants] rewrite trace: 0 1 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 4 5
[lsd]            rewrite rem = 1 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
     target prefix fail
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
   - REACHABLE: (5, 6)
TESTCASE 105
[learn_invariants] target trace: 0 1 2 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 106
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 107
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 108
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 109
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 110
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 111
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 4 5
[lsd]            rewrite rem = 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 4 5
[lsd]            rewrite rem = 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
     target prefix fail
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
   - REACHABLE: (5, 6)
TESTCASE 112
[learn_invariants] target trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[learn_invariants] rewrite trace: 0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd] processing trace state @ (0, 0)
[lsd]            target rem  = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (0, 0) -> (3, 3)
     1  2  3  3  3  3  ; 1  2  3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (0, 0) -> (5, 6)
     1  4  5  ; 1  4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)
[lsd]   Considering edge: (3, 3) -> (5, 6)
     4  5  ; 4  6  
     target prefix fail
[lsd] processing trace state @ (3, 3)
[lsd]            target rem  = 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5
[lsd]            rewrite rem = 3 3 3 3 3 3 3 3 3 3 3 3 3 4 6
[lsd]   Considering edge: (3, 3) -> (3, 3)
     3  3  3  3  ; 3  
   - REACHABLE: (3, 3)

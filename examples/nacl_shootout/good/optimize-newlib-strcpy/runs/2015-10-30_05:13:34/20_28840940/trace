Training TCs: 20
flags for addb_al_imm8: { }
flags for addw_ax_imm16: { }
flags for addl_eax_imm32: { }
flags for addw_m16_imm16: { }
flags for addw_m16_imm8: { }
flags for addw_m16_r16: { }
flags for addl_m32_imm32: { }
flags for addl_m32_imm8: { }
flags for addl_m32_r32: { }
flags for addq_m64_imm32: { }
flags for addq_m64_imm8: { }
flags for addq_m64_r64: { }
flags for addb_m8_imm8: { }
flags for addb_m8_r8: { }
flags for addb_m8_rh: { }
flags for addw_r16_imm16: { }
flags for addw_r16_imm8: { }
flags for addw_r16_m16: { }
flags for addw_r16_r16: { }
flags for addw_r16_r16_1: { }
flags for addl_r32_imm32: { }
flags for addl_r32_imm8: { }
flags for addl_r32_m32: { }
flags for addl_r32_r32: { }
flags for addl_r32_r32_1: { }
flags for addq_r64_imm32: { }
flags for addq_r64_imm8: { }
flags for addq_r64_m64: { }
flags for addq_r64_r64: { }
flags for addq_r64_r64_1: { }
flags for addb_r8_imm8: { }
flags for addb_r8_m8: { }
flags for addb_r8_r8: { }
flags for addb_r8_r8_1: { }
flags for addb_r8_rh: { }
flags for addb_r8_rh_1: { }
flags for addq_rax_imm32: { }
flags for addb_rh_imm8: { }
flags for addb_rh_m8: { }
flags for addb_rh_r8: { }
flags for addb_rh_r8_1: { }
flags for addb_rh_rh: { }
flags for addb_rh_rh_1: { }
flags for addpd_xmm_m128: { sse2 }
flags for addpd_xmm_xmm: { sse2 }
flags for addps_xmm_m128: { sse }
flags for addps_xmm_xmm: { sse }
flags for addsd_xmm_m64: { sse2 }
flags for addsd_xmm_xmm: { sse2 }
flags for addss_xmm_m32: { sse }
flags for addss_xmm_xmm: { sse }
flags for addsubpd_xmm_m128: { pni }
flags for addsubpd_xmm_xmm: { pni }
flags for addsubps_xmm_m128: { pni }
flags for addsubps_xmm_xmm: { pni }
flags for aesdec_xmm_m128: { aes }
flags for aesdec_xmm_xmm: { aes }
flags for aesdeclast_xmm_m128: { aes }
flags for aesdeclast_xmm_xmm: { aes }
flags for aesenc_xmm_m128: { aes }
flags for aesenc_xmm_xmm: { aes }
flags for aesenclast_xmm_m128: { aes }
flags for aesenclast_xmm_xmm: { aes }
flags for aesimc_xmm_m128: { aes }
flags for aesimc_xmm_xmm: { aes }
flags for aeskeygenassist_xmm_m128_imm8: { aes }
flags for aeskeygenassist_xmm_xmm_imm8: { aes }
flags for andb_al_imm8: { }
flags for andw_ax_imm16: { }
flags for andl_eax_imm32: { }
flags for andw_m16_imm16: { }
flags for andw_m16_imm8: { }
flags for andw_m16_r16: { }
flags for andl_m32_imm32: { }
flags for andl_m32_imm8: { }
flags for andl_m32_r32: { }
flags for andq_m64_imm32: { }
flags for andq_m64_imm8: { }
flags for andq_m64_r64: { }
flags for andb_m8_imm8: { }
flags for andb_m8_r8: { }
flags for andb_m8_rh: { }
flags for andw_r16_imm16: { }
flags for andw_r16_imm8: { }
flags for andw_r16_m16: { }
flags for andw_r16_r16: { }
flags for andw_r16_r16_1: { }
flags for andl_r32_imm32: { }
flags for andl_r32_imm8: { }
flags for andl_r32_m32: { }
flags for andl_r32_r32: { }
flags for andl_r32_r32_1: { }
flags for andq_r64_imm32: { }
flags for andq_r64_imm8: { }
flags for andq_r64_m64: { }
flags for andq_r64_r64: { }
flags for andq_r64_r64_1: { }
flags for andb_r8_imm8: { }
flags for andb_r8_m8: { }
flags for andb_r8_r8: { }
flags for andb_r8_r8_1: { }
flags for andb_r8_rh: { }
flags for andb_r8_rh_1: { }
flags for andq_rax_imm32: { }
flags for andb_rh_imm8: { }
flags for andb_rh_m8: { }
flags for andb_rh_r8: { }
flags for andb_rh_r8_1: { }
flags for andb_rh_rh: { }
flags for andb_rh_rh_1: { }
flags for andnl_r32_r32_m32: { bmi1 }
flags for andnl_r32_r32_r32: { bmi1 }
flags for andnq_r64_r64_m64: { bmi1 }
flags for andnq_r64_r64_r64: { bmi1 }
flags for andnpd_xmm_m128: { sse2 }
flags for andnpd_xmm_xmm: { sse2 }
flags for andnps_xmm_m128: { sse }
flags for andnps_xmm_xmm: { sse }
flags for andpd_xmm_m128: { sse2 }
flags for andpd_xmm_xmm: { sse2 }
flags for andps_xmm_m128: { sse }
flags for andps_xmm_xmm: { sse }
flags for bextrl_r32_m32_r32: { bmi1 }
flags for bextrl_r32_r32_r32: { bmi1 }
flags for bextrq_r64_m64_r64: { bmi1 }
flags for bextrq_r64_r64_r64: { bmi1 }
flags for blendpd_xmm_m128_imm8: { sse4_1 }
flags for blendpd_xmm_xmm_imm8: { sse4_1 }
flags for blendps_xmm_m128_imm8: { sse4_1 }
flags for blendps_xmm_xmm_imm8: { sse4_1 }
flags for blendvpd_xmm_m128_xmm0: { sse4_1 }
flags for blendvpd_xmm_xmm_xmm0: { sse4_1 }
flags for blendvps_xmm_m128_xmm0: { sse4_1 }
flags for blendvps_xmm_xmm_xmm0: { sse4_1 }
flags for blsil_r32_m32: { bmi1 }
flags for blsil_r32_r32: { bmi1 }
flags for blsiq_r64_m64: { bmi1 }
flags for blsiq_r64_r64: { bmi1 }
flags for blsmskl_r32_m32: { bmi1 }
flags for blsmskl_r32_r32: { bmi1 }
flags for blsmskq_r64_m64: { bmi1 }
flags for blsmskq_r64_r64: { bmi1 }
flags for blsrl_r32_m32: { bmi1 }
flags for blsrl_r32_r32: { bmi1 }
flags for blsrq_r64_m64: { bmi1 }
flags for blsrq_r64_r64: { bmi1 }
flags for bzhil_r32_m32_r32: { bmi2 }
flags for bzhil_r32_r32_r32: { bmi2 }
flags for bzhiq_r64_m64_r64: { bmi2 }
flags for bzhiq_r64_r64_r64: { bmi2 }
flags for cli: { }
flags for cmovaw_r16_m16: { cmov }
flags for cmovaw_r16_r16: { cmov }
flags for cmoval_r32_m32: { cmov }
flags for cmoval_r32_r32: { cmov }
flags for cmovaq_r64_m64: { cmov }
flags for cmovaq_r64_r64: { cmov }
flags for cmovaew_r16_m16: { cmov }
flags for cmovaew_r16_r16: { cmov }
flags for cmovael_r32_m32: { cmov }
flags for cmovael_r32_r32: { cmov }
flags for cmovaeq_r64_m64: { cmov }
flags for cmovaeq_r64_r64: { cmov }
flags for cmovbw_r16_m16: { cmov }
flags for cmovbw_r16_r16: { cmov }
flags for cmovbl_r32_m32: { cmov }
flags for cmovbl_r32_r32: { cmov }
flags for cmovbq_r64_m64: { cmov }
flags for cmovbq_r64_r64: { cmov }
flags for cmovbew_r16_m16: { cmov }
flags for cmovbew_r16_r16: { cmov }
flags for cmovbel_r32_m32: { cmov }
flags for cmovbel_r32_r32: { cmov }
flags for cmovbeq_r64_m64: { cmov }
flags for cmovbeq_r64_r64: { cmov }
flags for cmovcw_r16_m16: { cmov }
flags for cmovcw_r16_r16: { cmov }
flags for cmovcl_r32_m32: { cmov }
flags for cmovcl_r32_r32: { cmov }
flags for cmovcq_r64_m64: { cmov }
flags for cmovcq_r64_r64: { cmov }
flags for cmovew_r16_m16: { cmov }
flags for cmovew_r16_r16: { cmov }
flags for cmovel_r32_m32: { cmov }
flags for cmovel_r32_r32: { cmov }
flags for cmoveq_r64_m64: { cmov }
flags for cmoveq_r64_r64: { cmov }
flags for cmovgw_r16_m16: { cmov }
flags for cmovgw_r16_r16: { cmov }
flags for cmovgl_r32_m32: { cmov }
flags for cmovgl_r32_r32: { cmov }
flags for cmovgq_r64_m64: { cmov }
flags for cmovgq_r64_r64: { cmov }
flags for cmovgew_r16_m16: { cmov }
flags for cmovgew_r16_r16: { cmov }
flags for cmovgel_r32_m32: { cmov }
flags for cmovgel_r32_r32: { cmov }
flags for cmovgeq_r64_m64: { cmov }
flags for cmovgeq_r64_r64: { cmov }
flags for cmovlw_r16_m16: { cmov }
flags for cmovlw_r16_r16: { cmov }
flags for cmovll_r32_m32: { cmov }
flags for cmovll_r32_r32: { cmov }
flags for cmovlq_r64_m64: { cmov }
flags for cmovlq_r64_r64: { cmov }
flags for cmovlew_r16_m16: { cmov }
flags for cmovlew_r16_r16: { cmov }
flags for cmovlel_r32_m32: { cmov }
flags for cmovlel_r32_r32: { cmov }
flags for cmovleq_r64_m64: { cmov }
flags for cmovleq_r64_r64: { cmov }
flags for cmovnaw_r16_m16: { cmov }
flags for cmovnaw_r16_r16: { cmov }
flags for cmovnal_r32_m32: { cmov }
flags for cmovnal_r32_r32: { cmov }
flags for cmovnaq_r64_m64: { cmov }
flags for cmovnaq_r64_r64: { cmov }
flags for cmovnaew_r16_m16: { cmov }
flags for cmovnaew_r16_r16: { cmov }
flags for cmovnael_r32_m32: { cmov }
flags for cmovnael_r32_r32: { cmov }
flags for cmovnaeq_r64_m64: { cmov }
flags for cmovnaeq_r64_r64: { cmov }
flags for cmovnbw_r16_m16: { cmov }
flags for cmovnbw_r16_r16: { cmov }
flags for cmovnbl_r32_m32: { cmov }
flags for cmovnbl_r32_r32: { cmov }
flags for cmovnbq_r64_m64: { cmov }
flags for cmovnbq_r64_r64: { cmov }
flags for cmovnbew_r16_m16: { cmov }
flags for cmovnbew_r16_r16: { cmov }
flags for cmovnbel_r32_m32: { cmov }
flags for cmovnbel_r32_r32: { cmov }
flags for cmovnbeq_r64_m64: { cmov }
flags for cmovnbeq_r64_r64: { cmov }
flags for cmovncw_r16_m16: { cmov }
flags for cmovncw_r16_r16: { cmov }
flags for cmovncl_r32_m32: { cmov }
flags for cmovncl_r32_r32: { cmov }
flags for cmovncq_r64_m64: { cmov }
flags for cmovncq_r64_r64: { cmov }
flags for cmovnew_r16_m16: { cmov }
flags for cmovnew_r16_r16: { cmov }
flags for cmovnel_r32_m32: { cmov }
flags for cmovnel_r32_r32: { cmov }
flags for cmovneq_r64_m64: { cmov }
flags for cmovneq_r64_r64: { cmov }
flags for cmovngw_r16_m16: { cmov }
flags for cmovngw_r16_r16: { cmov }
flags for cmovngl_r32_m32: { cmov }
flags for cmovngl_r32_r32: { cmov }
flags for cmovngq_r64_m64: { cmov }
flags for cmovngq_r64_r64: { cmov }
flags for cmovngew_r16_m16: { cmov }
flags for cmovngew_r16_r16: { cmov }
flags for cmovngel_r32_m32: { cmov }
flags for cmovngel_r32_r32: { cmov }
flags for cmovngeq_r64_m64: { cmov }
flags for cmovngeq_r64_r64: { cmov }
flags for cmovnlw_r16_m16: { cmov }
flags for cmovnlw_r16_r16: { cmov }
flags for cmovnll_r32_m32: { cmov }
flags for cmovnll_r32_r32: { cmov }
flags for cmovnlq_r64_m64: { cmov }
flags for cmovnlq_r64_r64: { cmov }
flags for cmovnlew_r16_m16: { cmov }
flags for cmovnlew_r16_r16: { cmov }
flags for cmovnlel_r32_m32: { cmov }
flags for cmovnlel_r32_r32: { cmov }
flags for cmovnleq_r64_m64: { cmov }
flags for cmovnleq_r64_r64: { cmov }
flags for cmovnow_r16_m16: { cmov }
flags for cmovnow_r16_r16: { cmov }
flags for cmovnol_r32_m32: { cmov }
flags for cmovnol_r32_r32: { cmov }
flags for cmovnoq_r64_m64: { cmov }
flags for cmovnoq_r64_r64: { cmov }
flags for cmovnpw_r16_m16: { cmov }
flags for cmovnpw_r16_r16: { cmov }
flags for cmovnpl_r32_m32: { cmov }
flags for cmovnpl_r32_r32: { cmov }
flags for cmovnpq_r64_m64: { cmov }
flags for cmovnpq_r64_r64: { cmov }
flags for cmovnsw_r16_m16: { cmov }
flags for cmovnsw_r16_r16: { cmov }
flags for cmovnsl_r32_m32: { cmov }
flags for cmovnsl_r32_r32: { cmov }
flags for cmovnsq_r64_m64: { cmov }
flags for cmovnsq_r64_r64: { cmov }
flags for cmovnzw_r16_m16: { cmov }
flags for cmovnzw_r16_r16: { cmov }
flags for cmovnzl_r32_m32: { cmov }
flags for cmovnzl_r32_r32: { cmov }
flags for cmovnzq_r64_m64: { cmov }
flags for cmovnzq_r64_r64: { cmov }
flags for cmovow_r16_m16: { cmov }
flags for cmovow_r16_r16: { cmov }
flags for cmovol_r32_m32: { cmov }
flags for cmovol_r32_r32: { cmov }
flags for cmovoq_r64_m64: { cmov }
flags for cmovoq_r64_r64: { cmov }
flags for cmovpw_r16_m16: { cmov }
flags for cmovpw_r16_r16: { cmov }
flags for cmovpl_r32_m32: { cmov }
flags for cmovpl_r32_r32: { cmov }
flags for cmovpq_r64_m64: { cmov }
flags for cmovpq_r64_r64: { cmov }
flags for cmovpew_r16_m16: { cmov }
flags for cmovpew_r16_r16: { cmov }
flags for cmovpel_r32_m32: { cmov }
flags for cmovpel_r32_r32: { cmov }
flags for cmovpeq_r64_m64: { cmov }
flags for cmovpeq_r64_r64: { cmov }
flags for cmovpow_r16_m16: { cmov }
flags for cmovpow_r16_r16: { cmov }
flags for cmovpol_r32_m32: { cmov }
flags for cmovpol_r32_r32: { cmov }
flags for cmovpoq_r64_m64: { cmov }
flags for cmovpoq_r64_r64: { cmov }
flags for cmovsw_r16_m16: { cmov }
flags for cmovsw_r16_r16: { cmov }
flags for cmovsl_r32_m32: { cmov }
flags for cmovsl_r32_r32: { cmov }
flags for cmovsq_r64_m64: { cmov }
flags for cmovsq_r64_r64: { cmov }
flags for cmovzw_r16_m16: { cmov }
flags for cmovzw_r16_r16: { cmov }
flags for cmovzl_r32_m32: { cmov }
flags for cmovzl_r32_r32: { cmov }
flags for cmovzq_r64_m64: { cmov }
flags for cmovzq_r64_r64: { cmov }
flags for comisd_xmm_m64: { sse2 }
flags for comisd_xmm_xmm: { sse2 }
flags for comiss_xmm_m32: { sse }
flags for comiss_xmm_xmm: { sse }
flags for cpuid: { }
flags for cvtdq2pd_xmm_m64: { sse2 }
flags for cvtdq2pd_xmm_xmm: { sse2 }
flags for cvtdq2ps_xmm_m128: { sse2 }
flags for cvtdq2ps_xmm_xmm: { sse2 }
flags for cvtpd2dq_xmm_m128: { sse2 }
flags for cvtpd2dq_xmm_xmm: { sse2 }
flags for cvtpd2pi_mm_m128: { }
flags for cvtpd2pi_mm_xmm: { }
flags for cvtpd2ps_xmm_m128: { sse2 }
flags for cvtpd2ps_xmm_xmm: { sse2 }
flags for cvtpi2pd_xmm_m64: { }
flags for cvtpi2pd_xmm_mm: { }
flags for cvtpi2ps_xmm_m64: { }
flags for cvtpi2ps_xmm_mm: { }
flags for cvtps2dq_xmm_m128: { sse2 }
flags for cvtps2dq_xmm_xmm: { sse2 }
flags for cvtps2pd_xmm_m64: { sse2 }
flags for cvtps2pd_xmm_xmm: { sse2 }
flags for cvtps2pi_mm_m64: { }
flags for cvtps2pi_mm_xmm: { }
flags for cvtsd2sil_r32_m64: { sse2 }
flags for cvtsd2sil_r32_xmm: { sse2 }
flags for cvtsd2siq_r64_m64: { sse2 }
flags for cvtsd2siq_r64_xmm: { sse2 }
flags for cvtsd2ss_xmm_m64: { sse2 }
flags for cvtsd2ss_xmm_xmm: { sse2 }
flags for cvtsi2sdl_xmm_m32: { sse2 }
flags for cvtsi2sdq_xmm_m64: { sse2 }
flags for cvtsi2sdl_xmm_r32: { sse2 }
flags for cvtsi2sdq_xmm_r64: { sse2 }
flags for cvtsi2ssl_xmm_m32: { sse }
flags for cvtsi2ssq_xmm_m64: { sse }
flags for cvtsi2ssl_xmm_r32: { sse }
flags for cvtsi2ssq_xmm_r64: { sse }
flags for cvtss2sd_xmm_m32: { sse2 }
flags for cvtss2sd_xmm_xmm: { sse2 }
flags for cvtss2sil_r32_m32: { sse }
flags for cvtss2sil_r32_xmm: { sse }
flags for cvtss2siq_r64_m32: { sse }
flags for cvtss2siq_r64_xmm: { sse }
flags for cvttpd2dq_xmm_m128: { sse2 }
flags for cvttpd2dq_xmm_xmm: { sse2 }
flags for cvttpd2pi_mm_m128: { }
flags for cvttpd2pi_mm_xmm: { }
flags for cvttps2dq_xmm_m128: { sse2 }
flags for cvttps2dq_xmm_xmm: { sse2 }
flags for cvttps2pi_mm_m64: { }
flags for cvttps2pi_mm_xmm: { }
flags for cvttsd2sil_r32_m64: { sse2 }
flags for cvttsd2sil_r32_xmm: { sse2 }
flags for cvttsd2siq_r64_m64: { sse2 }
flags for cvttsd2siq_r64_xmm: { sse2 }
flags for cvttss2sil_r32_m32: { sse }
flags for cvttss2sil_r32_xmm: { sse }
flags for cvttss2siq_r64_m32: { sse }
flags for cvttss2siq_r64_xmm: { sse }
flags for decw_m16: { }
flags for decl_m32: { }
flags for decq_m64: { }
flags for decb_m8: { }
flags for decw_r16: { }
flags for decl_r32: { }
flags for decq_r64: { }
flags for decb_r8: { }
flags for decb_rh: { }
flags for dppd_xmm_m128_imm8: { sse4_1 }
flags for dppd_xmm_xmm_imm8: { sse4_1 }
flags for dpps_xmm_m128_imm8: { sse4_1 }
flags for dpps_xmm_xmm_imm8: { sse4_1 }
flags for extractps_m32_xmm_imm8: { sse4_1 }
flags for extractps_r32_xmm_imm8: { sse4_1 }
flags for extractps_r64_xmm_imm8: { sse4_1 }
flags for f2xm1: { fpu }
flags for fabs: { fpu }
flags for fadds_m32fp: { fpu }
flags for faddl_m64fp: { fpu }
flags for faddp: { fpu }
flags for fbld_m80bcd: { fpu }
flags for fbstp_m80bcd: { fpu }
flags for fchs: { fpu }
flags for fclex: { fpu }
flags for fcom: { fpu }
flags for fcoms_m32fp: { fpu }
flags for fcoml_m64fp: { fpu }
flags for fcomp: { fpu }
flags for fcomps_m32fp: { fpu }
flags for fcompl_m64fp: { fpu }
flags for fcompp: { fpu }
flags for fcos: { fpu }
flags for fdecstp: { fpu }
flags for fdivs_m32fp: { fpu }
flags for fdivl_m64fp: { fpu }
flags for fdivp: { fpu }
flags for fdivrs_m32fp: { fpu }
flags for fdivrl_m64fp: { fpu }
flags for fdivrp: { fpu }
flags for fiadd_m16int: { fpu }
flags for fiaddl_m32int: { fpu }
flags for ficom_m16int: { fpu }
flags for ficoml_m32int: { fpu }
flags for ficomp_m16int: { fpu }
flags for ficompl_m32int: { fpu }
flags for fidiv_m16int: { fpu }
flags for fidivl_m32int: { fpu }
flags for fidivr_m16int: { fpu }
flags for fidivrl_m32int: { fpu }
flags for fild_m16int: { fpu }
flags for fildl_m32int: { fpu }
flags for fildll_m64int: { fpu }
flags for fimul_m16int: { fpu }
flags for fimull_m32int: { fpu }
flags for fincstp: { fpu }
flags for finit: { fpu }
flags for fist_m16int: { fpu }
flags for fistl_m32int: { fpu }
flags for fistp_m16int: { fpu }
flags for fistpl_m32int: { fpu }
flags for fistpll_m64int: { fpu }
flags for fisttp_m16int: { fpu }
flags for fisttpl_m32int: { fpu }
flags for fisttpll_m64int: { fpu }
flags for fisub_m16int: { fpu }
flags for fisubl_m32int: { fpu }
flags for fisubr_m16int: { fpu }
flags for fisubrl_m32int: { fpu }
flags for flds_m32fp: { fpu }
flags for fldl_m64fp: { fpu }
flags for fldt_m80fp: { fpu }
flags for fld1: { fpu }
flags for fldl2e: { fpu }
flags for fldl2t: { fpu }
flags for fldlg2: { fpu }
flags for fldln2: { fpu }
flags for fldpi: { fpu }
flags for fldz: { fpu }
flags for fmuls_m32fp: { fpu }
flags for fmull_m64fp: { fpu }
flags for fmulp: { fpu }
flags for fnclex: { fpu }
flags for fninit: { fpu }
flags for fnop: { fpu }
flags for fnstsw_ax: { fpu }
flags for fpatan: { fpu }
flags for fprem: { fpu }
flags for fprem1: { fpu }
flags for fptan: { fpu }
flags for frndint: { fpu }
flags for fscale: { fpu }
flags for fsin: { fpu }
flags for fsincos: { fpu }
flags for fsqrt: { fpu }
flags for fsts_m32fp: { fpu }
flags for fstl_m64fp: { fpu }
flags for fstps_m32fp: { fpu }
flags for fstpl_m64fp: { fpu }
flags for fstpt_m80fp: { fpu }
flags for fstsw_ax: { fpu }
flags for fsubs_m32fp: { fpu }
flags for fsubl_m64fp: { fpu }
flags for fsubp: { fpu }
flags for fsubrs_m32fp: { fpu }
flags for fsubrl_m64fp: { fpu }
flags for fsubrp: { fpu }
flags for ftst: { fpu }
flags for fucom: { fpu }
flags for fucomp: { fpu }
flags for fucompp: { fpu }
flags for fwait: { fpu }
flags for fxam: { fpu }
flags for fxch: { fpu }
flags for fxtract: { fpu }
flags for fyl2x: { fpu }
flags for fyl2xp1: { fpu }
flags for haddpd_xmm_m128: { pni }
flags for haddpd_xmm_xmm: { pni }
flags for haddps_xmm_m128: { pni }
flags for haddps_xmm_xmm: { pni }
flags for hsubpd_xmm_m128: { pni }
flags for hsubpd_xmm_xmm: { pni }
flags for hsubps_xmm_m128: { pni }
flags for hsubps_xmm_xmm: { pni }
flags for incw_m16: { }
flags for incl_m32: { }
flags for incq_m64: { }
flags for incb_m8: { }
flags for incw_r16: { }
flags for incl_r32: { }
flags for incq_r64: { }
flags for incb_r8: { }
flags for incb_rh: { }
flags for insertps_xmm_m32_imm8: { sse4_1 }
flags for insertps_xmm_xmm_imm8: { sse4_1 }
flags for int_imm8: { }
flags for int_three: { }
flags for lahf: { lahf_lm }
flags for lddqu_xmm_m128: { pni }
flags for leaw_r16_m16: { }
flags for leaw_r16_m32: { }
flags for leaw_r16_m64: { }
flags for leal_r32_m16: { }
flags for leal_r32_m32: { }
flags for leal_r32_m64: { }
flags for leaq_r64_m16: { }
flags for leaq_r64_m32: { }
flags for leaq_r64_m64: { }
flags for lzcntw_r16_m16: { bmi1 }
flags for lzcntw_r16_r16: { bmi1 }
flags for lzcntl_r32_m32: { bmi1 }
flags for lzcntl_r32_r32: { bmi1 }
flags for lzcntq_r64_m64: { bmi1 }
flags for lzcntq_r64_r64: { bmi1 }
flags for maxpd_xmm_m128: { sse2 }
flags for maxpd_xmm_xmm: { sse2 }
flags for maxps_xmm_m128: { sse }
flags for maxps_xmm_xmm: { sse }
flags for maxsd_xmm_m64: { sse2 }
flags for maxsd_xmm_xmm: { sse2 }
flags for maxss_xmm_m32: { sse }
flags for maxss_xmm_xmm: { sse }
flags for minpd_xmm_m128: { sse2 }
flags for minpd_xmm_xmm: { sse2 }
flags for minps_xmm_m128: { sse }
flags for minps_xmm_xmm: { sse }
flags for minsd_xmm_m64: { sse2 }
flags for minsd_xmm_xmm: { sse2 }
flags for minss_xmm_m32: { sse }
flags for minss_xmm_xmm: { sse }
flags for movw_m16_imm16: { }
flags for movw_m16_r16: { }
flags for movl_m32_imm32: { }
flags for movl_m32_r32: { }
flags for movq_m64_imm32: { }
flags for movq_m64_r64: { }
flags for movb_m8_imm8: { }
flags for movb_m8_r8: { }
flags for movb_m8_rh: { }
flags for movw_r16_imm16: { }
flags for movw_r16_imm16_1: { }
flags for movw_r16_m16: { }
flags for movw_r16_r16: { }
flags for movw_r16_r16_1: { }
flags for movl_r32_imm32: { }
flags for movl_r32_imm32_1: { }
flags for movl_r32_m32: { }
flags for movl_r32_r32: { }
flags for movl_r32_r32_1: { }
flags for movq_r64_imm32: { }
flags for movq_r64_imm64: { }
flags for movq_r64_m64: { }
flags for movq_r64_r64: { }
flags for movq_r64_r64_1: { }
flags for movb_r8_imm8: { }
flags for movb_r8_imm8_1: { }
flags for movb_r8_m8: { }
flags for movb_r8_r8: { }
flags for movb_r8_r8_1: { }
flags for movb_r8_rh: { }
flags for movb_r8_rh_1: { }
flags for movb_rh_imm8: { }
flags for movb_rh_imm8_1: { }
flags for movb_rh_m8: { }
flags for movb_rh_r8: { }
flags for movb_rh_r8_1: { }
flags for movb_rh_rh: { }
flags for movb_rh_rh_1: { }
flags for movapd_m128_xmm: { sse2 }
flags for movapd_xmm_m128: { sse2 }
flags for movapd_xmm_xmm: { sse2 }
flags for movapd_xmm_xmm_1: { sse2 }
flags for movaps_m128_xmm: { sse }
flags for movaps_xmm_m128: { sse }
flags for movaps_xmm_xmm: { sse }
flags for movaps_xmm_xmm_1: { sse }
flags for movbew_m16_r16: { movbe }
flags for movbel_m32_r32: { movbe }
flags for movbeq_m64_r64: { movbe }
flags for movbew_r16_m16: { movbe }
flags for movbel_r32_m32: { movbe }
flags for movbeq_r64_m64: { movbe }
flags for movd_m32_mm: { mmx }
flags for movd_m32_xmm: { sse2 }
flags for movd_mm_m32: { mmx }
flags for movd_mm_r32: { mmx }
flags for movd_r32_mm: { mmx }
flags for movd_r32_xmm: { sse2 }
flags for movd_xmm_m32: { sse2 }
flags for movd_xmm_r32: { sse2 }
flags for movddup_xmm_m64: { pni }
flags for movddup_xmm_xmm: { pni }
flags for movdq2q_mm_xmm: { mmx }
flags for movdqa_m128_xmm: { sse2 }
flags for movdqa_xmm_m128: { sse2 }
flags for movdqa_xmm_xmm: { sse2 }
flags for movdqa_xmm_xmm_1: { sse2 }
flags for movdqu_m128_xmm: { sse2 }
flags for movdqu_xmm_m128: { sse2 }
flags for movdqu_xmm_xmm: { sse2 }
flags for movdqu_xmm_xmm_1: { sse2 }
flags for movhlps_xmm_xmm: { sse }
flags for movhpd_m64_xmm: { sse2 }
flags for movhpd_xmm_m64: { sse2 }
flags for movhps_m64_xmm: { sse }
flags for movhps_xmm_m64: { sse }
flags for movlhps_xmm_xmm: { sse }
flags for movlpd_m64_xmm: { sse2 }
flags for movlpd_xmm_m64: { sse2 }
flags for movlps_m64_xmm: { sse }
flags for movlps_xmm_m64: { sse }
flags for movmskpd_r32_xmm: { sse2 }
flags for movmskpd_r64_xmm: { sse2 }
flags for movmskps_r32_xmm: { sse }
flags for movmskps_r64_xmm: { sse }
flags for movntdq_m128_xmm: { sse2 }
flags for movntdq_m256_ymm: { avx }
flags for movntdqa_xmm_m128: { sse4_1 }
flags for movnti_m32_r32: { }
flags for movnti_m64_r64: { }
flags for movntpd_m128_xmm: { sse2 }
flags for movntps_m128_xmm: { sse }
flags for movntq_m64_mm: { }
flags for movq_m64_mm: { mmx }
flags for movq_m64_mm_1: { mmx }
flags for movq_m64_xmm: { sse2 }
flags for movq_m64_xmm_1: { sse2 }
flags for movq_mm_m64: { mmx }
flags for movq_mm_m64_1: { mmx }
flags for movq_mm_mm: { mmx }
flags for movq_mm_mm_1: { mmx }
flags for movq_mm_r64: { mmx }
flags for movq_r64_mm: { mmx }
flags for movq_r64_xmm: { sse2 }
flags for movq_xmm_m64: { sse2 }
flags for movq_xmm_m64_1: { sse2 }
flags for movq_xmm_r64: { sse2 }
flags for movq_xmm_xmm: { sse2 }
flags for movq_xmm_xmm_1: { sse2 }
flags for movq2dq_xmm_mm: { mmx }
flags for movsd_m64_xmm: { sse2 }
flags for movsd_xmm_m64: { sse2 }
flags for movsd_xmm_xmm: { sse2 }
flags for movsd_xmm_xmm_1: { sse2 }
flags for movshdup_xmm_m128: { pni }
flags for movshdup_xmm_xmm: { pni }
flags for movsldup_xmm_m128: { pni }
flags for movsldup_xmm_xmm: { pni }
flags for movss_m32_xmm: { sse }
flags for movss_xmm_m32: { sse }
flags for movss_xmm_xmm: { sse }
flags for movss_xmm_xmm_1: { sse }
flags for movsbw_r16_m8: { }
flags for movsbw_r16_r8: { }
flags for movsbw_r16_rh: { }
flags for movswl_r32_m16: { }
flags for movsbl_r32_m8: { }
flags for movswl_r32_r16: { }
flags for movsbl_r32_r8: { }
flags for movsbl_r32_rh: { }
flags for movswq_r64_m16: { }
flags for movsbq_r64_m8: { }
flags for movswq_r64_r16: { }
flags for movsbq_r64_r8: { }
flags for movslq_r64_m32: { }
flags for movslq_r64_r32: { }
flags for movupd_m128_xmm: { sse2 }
flags for movupd_xmm_m128: { sse2 }
flags for movupd_xmm_xmm: { sse2 }
flags for movupd_xmm_xmm_1: { sse2 }
flags for movups_m128_xmm: { sse }
flags for movups_xmm_m128: { sse }
flags for movups_xmm_xmm: { sse }
flags for movups_xmm_xmm_1: { sse }
flags for movzbw_r16_m8: { }
flags for movzbw_r16_r8: { }
flags for movzbw_r16_rh: { }
flags for movzwl_r32_m16: { }
flags for movzbl_r32_m8: { }
flags for movzwl_r32_r16: { }
flags for movzbl_r32_r8: { }
flags for movzbl_r32_rh: { }
flags for movzwq_r64_m16: { }
flags for movzbq_r64_m8: { }
flags for movzwq_r64_r16: { }
flags for movzbq_r64_r8: { }
flags for mpsadbw_xmm_m128_imm8: { sse4_1 }
flags for mpsadbw_xmm_xmm_imm8: { sse4_1 }
flags for negw_m16: { }
flags for negl_m32: { }
flags for negq_m64: { }
flags for negb_m8: { }
flags for negw_r16: { }
flags for negl_r32: { }
flags for negq_r64: { }
flags for negb_r8: { }
flags for negb_rh: { }
flags for nop: { }
flags for nopw_m16: { nopl }
flags for nopl_m32: { nopl }
flags for nopw_r16: { nopl }
flags for nopl_r32: { nopl }
flags for notw_m16: { }
flags for notl_m32: { }
flags for notq_m64: { }
flags for notb_m8: { }
flags for notw_r16: { }
flags for notl_r32: { }
flags for notq_r64: { }
flags for notb_r8: { }
flags for notb_rh: { }
flags for orb_al_imm8: { }
flags for orw_ax_imm16: { }
flags for orl_eax_imm32: { }
flags for orw_m16_imm16: { }
flags for orw_m16_imm8: { }
flags for orw_m16_r16: { }
flags for orl_m32_imm32: { }
flags for orl_m32_imm8: { }
flags for orl_m32_r32: { }
flags for orq_m64_imm32: { }
flags for orq_m64_imm8: { }
flags for orq_m64_r64: { }
flags for orb_m8_imm8: { }
flags for orb_m8_r8: { }
flags for orb_m8_rh: { }
flags for orw_r16_imm16: { }
flags for orw_r16_imm8: { }
flags for orw_r16_m16: { }
flags for orw_r16_r16: { }
flags for orw_r16_r16_1: { }
flags for orl_r32_imm32: { }
flags for orl_r32_imm8: { }
flags for orl_r32_m32: { }
flags for orl_r32_r32: { }
flags for orl_r32_r32_1: { }
flags for orq_r64_imm32: { }
flags for orq_r64_imm8: { }
flags for orq_r64_m64: { }
flags for orq_r64_r64: { }
flags for orq_r64_r64_1: { }
flags for orb_r8_imm8: { }
flags for orb_r8_m8: { }
flags for orb_r8_r8: { }
flags for orb_r8_r8_1: { }
flags for orb_r8_rh: { }
flags for orb_r8_rh_1: { }
flags for orq_rax_imm32: { }
flags for orb_rh_imm8: { }
flags for orb_rh_m8: { }
flags for orb_rh_r8: { }
flags for orb_rh_r8_1: { }
flags for orb_rh_rh: { }
flags for orb_rh_rh_1: { }
flags for orpd_xmm_m128: { sse2 }
flags for orpd_xmm_xmm: { sse2 }
flags for orps_xmm_m128: { sse }
flags for orps_xmm_xmm: { sse }
flags for pabsb_mm_m64: { ssse3 }
flags for pabsb_mm_mm: { ssse3 }
flags for pabsb_xmm_m128: { ssse3 }
flags for pabsb_xmm_xmm: { ssse3 }
flags for pabsd_mm_m64: { ssse3 }
flags for pabsd_mm_mm: { ssse3 }
flags for pabsd_xmm_m128: { ssse3 }
flags for pabsd_xmm_xmm: { ssse3 }
flags for pabsw_mm_m64: { ssse3 }
flags for pabsw_mm_mm: { ssse3 }
flags for pabsw_xmm_m128: { ssse3 }
flags for pabsw_xmm_xmm: { ssse3 }
flags for packssdw_mm_m64: { mmx }
flags for packssdw_mm_mm: { mmx }
flags for packssdw_xmm_m128: { sse2 }
flags for packssdw_xmm_xmm: { sse2 }
flags for packsswb_mm_m64: { mmx }
flags for packsswb_mm_mm: { mmx }
flags for packsswb_xmm_m128: { sse2 }
flags for packsswb_xmm_xmm: { sse2 }
flags for packusdw_xmm_m128: { sse4_1 }
flags for packusdw_xmm_xmm: { sse4_1 }
flags for packuswb_mm_m64: { mmx }
flags for packuswb_mm_mm: { mmx }
flags for packuswb_xmm_m128: { sse2 }
flags for packuswb_xmm_xmm: { sse2 }
flags for paddb_mm_m64: { mmx }
flags for paddb_mm_mm: { mmx }
flags for paddb_xmm_m128: { sse2 }
flags for paddb_xmm_xmm: { sse2 }
flags for paddd_mm_m64: { mmx }
flags for paddd_mm_mm: { mmx }
flags for paddd_xmm_m128: { sse2 }
flags for paddd_xmm_xmm: { sse2 }
flags for paddq_mm_m64: { sse2 }
flags for paddq_mm_mm: { sse2 }
flags for paddq_xmm_m128: { sse2 }
flags for paddq_xmm_xmm: { sse2 }
flags for paddsb_mm_m64: { mmx }
flags for paddsb_mm_mm: { mmx }
flags for paddsb_xmm_m128: { sse2 }
flags for paddsb_xmm_xmm: { sse2 }
flags for paddsw_mm_m64: { mmx }
flags for paddsw_mm_mm: { mmx }
flags for paddsw_xmm_m128: { sse2 }
flags for paddsw_xmm_xmm: { sse2 }
flags for paddusb_mm_m64: { mmx }
flags for paddusb_mm_mm: { mmx }
flags for paddusb_xmm_m128: { sse2 }
flags for paddusb_xmm_xmm: { sse2 }
flags for paddusw_mm_m64: { mmx }
flags for paddusw_mm_mm: { mmx }
flags for paddusw_xmm_m128: { sse2 }
flags for paddusw_xmm_xmm: { sse2 }
flags for paddw_mm_m64: { mmx }
flags for paddw_mm_mm: { mmx }
flags for paddw_xmm_m128: { sse2 }
flags for paddw_xmm_xmm: { sse2 }
flags for palignr_mm_m64_imm8: { ssse3 }
flags for palignr_mm_mm_imm8: { ssse3 }
flags for palignr_xmm_m128_imm8: { ssse3 }
flags for palignr_xmm_xmm_imm8: { ssse3 }
flags for pand_mm_m64: { mmx }
flags for pand_mm_mm: { mmx }
flags for pand_xmm_m128: { sse2 }
flags for pand_xmm_xmm: { sse2 }
flags for pandn_mm_m64: { mmx }
flags for pandn_mm_mm: { mmx }
flags for pandn_xmm_m128: { sse2 }
flags for pandn_xmm_xmm: { sse2 }
flags for pavgb_mm_m64: { sse }
flags for pavgb_mm_mm: { sse }
flags for pavgb_xmm_m128: { sse2 }
flags for pavgb_xmm_xmm: { sse2 }
flags for pavgw_mm_m64: { sse }
flags for pavgw_mm_mm: { sse }
flags for pavgw_xmm_m128: { sse2 }
flags for pavgw_xmm_xmm: { sse2 }
flags for pblendvb_xmm_m128_xmm0: { sse4_1 }
flags for pblendvb_xmm_xmm_xmm0: { sse4_1 }
flags for pblendw_xmm_m128_imm8: { sse4_1 }
flags for pblendw_xmm_xmm_imm8: { sse4_1 }
flags for pclmulqdq_xmm_m128_imm8: { pclmulqdq }
flags for pclmulqdq_xmm_xmm_imm8: { pclmulqdq }
flags for pcmpeqb_mm_m64: { mmx }
flags for pcmpeqb_mm_mm: { mmx }
flags for pcmpeqb_xmm_m128: { sse2 }
flags for pcmpeqb_xmm_xmm: { sse2 }
flags for pcmpeqd_mm_m64: { mmx }
flags for pcmpeqd_mm_mm: { mmx }
flags for pcmpeqd_xmm_m128: { sse2 }
flags for pcmpeqd_xmm_xmm: { sse2 }
flags for pcmpeqq_xmm_m128: { sse4_1 }
flags for pcmpeqq_xmm_xmm: { sse4_1 }
flags for pcmpeqw_mm_m64: { mmx }
flags for pcmpeqw_mm_mm: { mmx }
flags for pcmpeqw_xmm_m128: { sse2 }
flags for pcmpeqw_xmm_xmm: { sse2 }
flags for pcmpestri_xmm_m128_imm8: { sse4_2 }
flags for pcmpestri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpestrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpestrm_xmm_xmm_imm8: { sse4_2 }
flags for pcmpgtb_mm_m64: { mmx }
flags for pcmpgtb_mm_mm: { mmx }
flags for pcmpgtb_xmm_m128: { sse2 }
flags for pcmpgtb_xmm_xmm: { sse2 }
flags for pcmpgtd_mm_m64: { mmx }
flags for pcmpgtd_mm_mm: { mmx }
flags for pcmpgtd_xmm_m128: { sse2 }
flags for pcmpgtd_xmm_xmm: { sse2 }
flags for pcmpgtq_xmm_m128: { sse4_2 }
flags for pcmpgtq_xmm_xmm: { sse4_2 }
flags for pcmpgtw_mm_m64: { mmx }
flags for pcmpgtw_mm_mm: { mmx }
flags for pcmpgtw_xmm_m128: { sse2 }
flags for pcmpgtw_xmm_xmm: { sse2 }
flags for pcmpistri_xmm_m128_imm8: { sse4_2 }
flags for pcmpistri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpistrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpistrm_xmm_xmm_imm8: { sse4_2 }
flags for pdepl_r32_r32_m32: { bmi2 }
flags for pdepl_r32_r32_r32: { bmi2 }
flags for pdepq_r64_r64_m64: { bmi2 }
flags for pdepq_r64_r64_r64: { bmi2 }
flags for pextl_r32_r32_m32: { bmi2 }
flags for pextl_r32_r32_r32: { bmi2 }
flags for pextq_r64_r64_m64: { bmi2 }
flags for pextq_r64_r64_r64: { bmi2 }
flags for pextrb_m8_xmm_imm8: { sse4_1 }
flags for pextrb_r32_xmm_imm8: { sse4_1 }
flags for pextrb_r64_xmm_imm8: { sse4_1 }
flags for pextrd_m32_xmm_imm8: { sse4_1 }
flags for pextrd_r32_xmm_imm8: { sse4_1 }
flags for pextrq_m64_xmm_imm8: { sse4_1 }
flags for pextrq_r64_xmm_imm8: { sse4_1 }
flags for pextrw_m16_xmm_imm8: { sse4_1 }
flags for pextrw_r32_mm_imm8: { sse }
flags for pextrw_r32_xmm_imm8: { sse2 }
flags for pextrw_r32_xmm_imm8_1: { sse4_1 }
flags for pextrw_r64_mm_imm8: { sse }
flags for pextrw_r64_xmm_imm8: { sse2 }
flags for pextrw_r64_xmm_imm8_1: { sse4_1 }
flags for phaddd_mm_m64: { ssse3 }
flags for phaddd_mm_mm: { ssse3 }
flags for phaddd_xmm_m128: { ssse3 }
flags for phaddd_xmm_xmm: { ssse3 }
flags for phaddsw_mm_m64: { ssse3 }
flags for phaddsw_mm_mm: { ssse3 }
flags for phaddsw_xmm_m128: { ssse3 }
flags for phaddsw_xmm_xmm: { ssse3 }
flags for phaddw_mm_m64: { ssse3 }
flags for phaddw_mm_mm: { ssse3 }
flags for phaddw_xmm_m128: { ssse3 }
flags for phaddw_xmm_xmm: { ssse3 }
flags for phminposuw_xmm_m128: { sse4_1 }
flags for phminposuw_xmm_xmm: { sse4_1 }
flags for phsubd_mm_m64: { ssse3 }
flags for phsubd_mm_mm: { ssse3 }
flags for phsubd_xmm_m128: { ssse3 }
flags for phsubd_xmm_xmm: { ssse3 }
flags for phsubsw_mm_m64: { ssse3 }
flags for phsubsw_mm_mm: { ssse3 }
flags for phsubsw_xmm_m128: { ssse3 }
flags for phsubsw_xmm_xmm: { ssse3 }
flags for phsubw_mm_m64: { ssse3 }
flags for phsubw_mm_mm: { ssse3 }
flags for phsubw_xmm_m128: { ssse3 }
flags for phsubw_xmm_xmm: { ssse3 }
flags for pinsrb_xmm_m8_imm8: { sse4_1 }
flags for pinsrb_xmm_r32_imm8: { sse4_1 }
flags for pinsrd_xmm_m32_imm8: { sse4_1 }
flags for pinsrd_xmm_r32_imm8: { sse4_1 }
flags for pinsrw_mm_m16_imm8: { sse }
flags for pinsrw_mm_r32_imm8: { sse }
flags for pinsrw_xmm_m16_imm8: { sse2 }
flags for pinsrw_xmm_r32_imm8: { sse2 }
flags for pmaddubsw_mm_m64: { mmx ssse3 }
flags for pmaddubsw_mm_mm: { mmx ssse3 }
flags for pmaddubsw_xmm_m128: { ssse3 }
flags for pmaddubsw_xmm_xmm: { ssse3 }
flags for pmaddwd_mm_m64: { mmx }
flags for pmaddwd_mm_mm: { mmx }
flags for pmaddwd_xmm_m128: { sse2 }
flags for pmaddwd_xmm_xmm: { sse2 }
flags for pmaxsb_xmm_m128: { sse4_1 }
flags for pmaxsb_xmm_xmm: { sse4_1 }
flags for pmaxsd_xmm_m128: { sse4_1 }
flags for pmaxsd_xmm_xmm: { sse4_1 }
flags for pmaxsw_mm_m64: { sse }
flags for pmaxsw_mm_mm: { sse }
flags for pmaxsw_xmm_m128: { sse2 }
flags for pmaxsw_xmm_xmm: { sse2 }
flags for pmaxub_mm_m64: { sse }
flags for pmaxub_mm_mm: { sse }
flags for pmaxub_xmm_m128: { sse2 }
flags for pmaxub_xmm_xmm: { sse2 }
flags for pmaxud_xmm_m128: { sse4_1 }
flags for pmaxud_xmm_xmm: { sse4_1 }
flags for pmaxuw_xmm_m128: { sse4_1 }
flags for pmaxuw_xmm_xmm: { sse4_1 }
flags for pminsb_xmm_m128: { sse4_1 }
flags for pminsb_xmm_xmm: { sse4_1 }
flags for pminsd_xmm_m128: { sse4_1 }
flags for pminsd_xmm_xmm: { sse4_1 }
flags for pminsw_mm_m64: { sse }
flags for pminsw_mm_mm: { sse }
flags for pminsw_xmm_m128: { sse2 }
flags for pminsw_xmm_xmm: { sse2 }
flags for pminub_mm_m64: { sse }
flags for pminub_mm_mm: { sse }
flags for pminub_xmm_m128: { sse2 }
flags for pminub_xmm_xmm: { sse2 }
flags for pminud_xmm_m128: { sse4_1 }
flags for pminud_xmm_xmm: { sse4_1 }
flags for pminuw_xmm_m128: { sse4_1 }
flags for pminuw_xmm_xmm: { sse4_1 }
flags for pmovmskb_r32_mm: { sse }
flags for pmovmskb_r32_xmm: { sse2 }
flags for pmovmskb_r64_mm: { sse }
flags for pmovmskb_r64_xmm: { sse2 }
flags for pmovsxbd_xmm_m32: { sse4_1 }
flags for pmovsxbd_xmm_xmm: { sse4_1 }
flags for pmovsxbq_xmm_m16: { sse4_1 }
flags for pmovsxbq_xmm_xmm: { sse4_1 }
flags for pmovsxbw_xmm_m64: { sse4_1 }
flags for pmovsxbw_xmm_xmm: { sse4_1 }
flags for pmovsxdq_xmm_m64: { sse4_1 }
flags for pmovsxdq_xmm_xmm: { sse4_1 }
flags for pmovsxwd_xmm_m64: { sse4_1 }
flags for pmovsxwd_xmm_xmm: { sse4_1 }
flags for pmovsxwq_xmm_m32: { sse4_1 }
flags for pmovsxwq_xmm_xmm: { sse4_1 }
flags for pmovzxbd_xmm_m32: { sse4_1 }
flags for pmovzxbd_xmm_xmm: { sse4_1 }
flags for pmovzxbq_xmm_m16: { sse4_1 }
flags for pmovzxbq_xmm_xmm: { sse4_1 }
flags for pmovzxbw_xmm_m64: { sse4_1 }
flags for pmovzxbw_xmm_xmm: { sse4_1 }
flags for pmovzxdq_xmm_m64: { sse4_1 }
flags for pmovzxdq_xmm_xmm: { sse4_1 }
flags for pmovzxwd_xmm_m64: { sse4_1 }
flags for pmovzxwd_xmm_xmm: { sse4_1 }
flags for pmovzxwq_xmm_m32: { sse4_1 }
flags for pmovzxwq_xmm_xmm: { sse4_1 }
flags for pmuldq_xmm_m128: { sse4_1 }
flags for pmuldq_xmm_xmm: { sse4_1 }
flags for pmulhrsw_mm_m64: { ssse3 }
flags for pmulhrsw_mm_mm: { ssse3 }
flags for pmulhrsw_xmm_m128: { ssse3 }
flags for pmulhrsw_xmm_xmm: { ssse3 }
flags for pmulhuw_mm_m64: { sse }
flags for pmulhuw_mm_mm: { sse }
flags for pmulhuw_xmm_m128: { sse2 }
flags for pmulhuw_xmm_xmm: { sse2 }
flags for pmulhw_mm_m64: { mmx }
flags for pmulhw_mm_mm: { mmx }
flags for pmulhw_xmm_m128: { sse2 }
flags for pmulhw_xmm_xmm: { sse2 }
flags for pmulld_xmm_m128: { sse4_1 }
flags for pmulld_xmm_xmm: { sse4_1 }
flags for pmullw_mm_m64: { mmx }
flags for pmullw_mm_mm: { mmx }
flags for pmullw_xmm_m128: { sse2 }
flags for pmullw_xmm_xmm: { sse2 }
flags for pmuludq_mm_m64: { sse2 }
flags for pmuludq_mm_mm: { sse2 }
flags for pmuludq_xmm_m128: { sse2 }
flags for pmuludq_xmm_xmm: { sse2 }
flags for popw_m16: { }
flags for popq_m64: { }
flags for popw_r16: { }
flags for popw_r16_1: { }
flags for popq_r64: { }
flags for popq_r64_1: { }
flags for popcntw_r16_m16: { popcnt }
flags for popcntw_r16_r16: { popcnt }
flags for popcntl_r32_m32: { popcnt }
flags for popcntl_r32_r32: { popcnt }
flags for popcntq_r64_m64: { popcnt }
flags for popcntq_r64_r64: { popcnt }
flags for popf: { }
flags for popfq: { }
flags for por_mm_m64: { mmx }
flags for por_mm_mm: { mmx }
flags for por_xmm_m128: { sse2 }
flags for por_xmm_xmm: { sse2 }
flags for psadbw_mm_m64: { sse }
flags for psadbw_mm_mm: { sse }
flags for psadbw_xmm_m128: { sse2 }
flags for psadbw_xmm_xmm: { sse2 }
flags for pshufb_mm_m64: { ssse3 }
flags for pshufb_mm_mm: { ssse3 }
flags for pshufb_xmm_m128: { ssse3 }
flags for pshufb_xmm_xmm: { ssse3 }
flags for pshufd_xmm_m128_imm8: { sse2 }
flags for pshufd_xmm_xmm_imm8: { sse2 }
flags for pshufhw_xmm_m128_imm8: { sse2 }
flags for pshufhw_xmm_xmm_imm8: { sse2 }
flags for pshuflw_xmm_m128_imm8: { sse2 }
flags for pshuflw_xmm_xmm_imm8: { sse2 }
flags for pshufw_mm_m64_imm8: { }
flags for pshufw_mm_mm_imm8: { }
flags for psignb_mm_m64: { ssse3 }
flags for psignb_mm_mm: { ssse3 }
flags for psignb_xmm_m128: { ssse3 }
flags for psignb_xmm_xmm: { ssse3 }
flags for psignd_mm_m64: { ssse3 }
flags for psignd_mm_mm: { ssse3 }
flags for psignd_xmm_m128: { ssse3 }
flags for psignd_xmm_xmm: { ssse3 }
flags for psignw_mm_m64: { ssse3 }
flags for psignw_mm_mm: { ssse3 }
flags for psignw_xmm_m128: { ssse3 }
flags for psignw_xmm_xmm: { ssse3 }
flags for pslld_mm_imm8: { mmx }
flags for pslld_mm_m64: { mmx }
flags for pslld_mm_mm: { mmx }
flags for pslld_xmm_imm8: { sse2 }
flags for pslld_xmm_m128: { sse2 }
flags for pslld_xmm_xmm: { sse2 }
flags for pslldq_xmm_imm8: { sse2 }
flags for psllq_mm_imm8: { mmx }
flags for psllq_mm_m64: { mmx }
flags for psllq_mm_mm: { mmx }
flags for psllq_xmm_imm8: { sse2 }
flags for psllq_xmm_m128: { sse2 }
flags for psllq_xmm_xmm: { sse2 }
flags for psllw_mm_imm8: { mmx }
flags for psllw_mm_m64: { mmx }
flags for psllw_mm_mm: { mmx }
flags for psllw_xmm_imm8: { sse2 }
flags for psllw_xmm_m128: { sse2 }
flags for psllw_xmm_xmm: { sse2 }
flags for psrad_mm_imm8: { mmx }
flags for psrad_mm_m64: { mmx }
flags for psrad_mm_mm: { mmx }
flags for psrad_xmm_imm8: { sse2 }
flags for psrad_xmm_m128: { sse2 }
flags for psrad_xmm_xmm: { sse2 }
flags for psraw_mm_imm8: { mmx }
flags for psraw_mm_m64: { mmx }
flags for psraw_mm_mm: { mmx }
flags for psraw_xmm_imm8: { sse2 }
flags for psraw_xmm_m128: { sse2 }
flags for psraw_xmm_xmm: { sse2 }
flags for psrld_mm_imm8: { mmx }
flags for psrld_mm_m64: { mmx }
flags for psrld_mm_mm: { mmx }
flags for psrld_xmm_imm8: { sse2 }
flags for psrld_xmm_m128: { sse2 }
flags for psrld_xmm_xmm: { sse2 }
flags for psrldq_xmm_imm8: { sse2 }
flags for psrlq_mm_imm8: { mmx }
flags for psrlq_mm_m64: { mmx }
flags for psrlq_mm_mm: { mmx }
flags for psrlq_xmm_imm8: { sse2 }
flags for psrlq_xmm_m128: { sse2 }
flags for psrlq_xmm_xmm: { sse2 }
flags for psrlw_mm_imm8: { mmx }
flags for psrlw_mm_m64: { mmx }
flags for psrlw_mm_mm: { mmx }
flags for psrlw_xmm_imm8: { sse2 }
flags for psrlw_xmm_m128: { sse2 }
flags for psrlw_xmm_xmm: { sse2 }
flags for psubb_mm_m64: { mmx }
flags for psubb_mm_mm: { mmx }
flags for psubb_xmm_m128: { sse2 }
flags for psubb_xmm_xmm: { sse2 }
flags for psubd_mm_m64: { mmx }
flags for psubd_mm_mm: { mmx }
flags for psubd_xmm_m128: { sse2 }
flags for psubd_xmm_xmm: { sse2 }
flags for psubq_mm_m64: { sse2 }
flags for psubq_mm_mm: { sse2 }
flags for psubq_xmm_m128: { sse2 }
flags for psubq_xmm_xmm: { sse2 }
flags for psubsb_mm_m64: { mmx }
flags for psubsb_mm_mm: { mmx }
flags for psubsb_xmm_m128: { sse2 }
flags for psubsb_xmm_xmm: { sse2 }
flags for psubsw_mm_m64: { mmx }
flags for psubsw_mm_mm: { mmx }
flags for psubsw_xmm_m128: { sse2 }
flags for psubsw_xmm_xmm: { sse2 }
flags for psubusb_mm_m64: { mmx }
flags for psubusb_mm_mm: { mmx }
flags for psubusb_xmm_m128: { sse2 }
flags for psubusb_xmm_xmm: { sse2 }
flags for psubusw_mm_m64: { mmx }
flags for psubusw_mm_mm: { mmx }
flags for psubusw_xmm_m128: { sse2 }
flags for psubusw_xmm_xmm: { sse2 }
flags for psubw_mm_m64: { mmx }
flags for psubw_mm_mm: { mmx }
flags for psubw_xmm_m128: { sse2 }
flags for psubw_xmm_xmm: { sse2 }
flags for ptest_xmm_m128: { sse4_1 }
flags for ptest_xmm_xmm: { sse4_1 }
flags for punpckhbw_mm_m64: { mmx }
flags for punpckhbw_mm_mm: { mmx }
flags for punpckhbw_xmm_m128: { sse2 }
flags for punpckhbw_xmm_xmm: { sse2 }
flags for punpckhdq_mm_m64: { mmx }
flags for punpckhdq_mm_mm: { mmx }
flags for punpckhdq_xmm_m128: { sse2 }
flags for punpckhdq_xmm_xmm: { sse2 }
flags for punpckhqdq_xmm_m128: { sse2 }
flags for punpckhqdq_xmm_xmm: { sse2 }
flags for punpckhwd_mm_m64: { mmx }
flags for punpckhwd_mm_mm: { mmx }
flags for punpckhwd_xmm_m128: { sse2 }
flags for punpckhwd_xmm_xmm: { sse2 }
flags for punpcklbw_mm_m32: { mmx }
flags for punpcklbw_mm_mm: { mmx }
flags for punpcklbw_xmm_m128: { sse2 }
flags for punpcklbw_xmm_xmm: { sse2 }
flags for punpckldq_mm_m32: { mmx }
flags for punpckldq_mm_mm: { mmx }
flags for punpckldq_xmm_m128: { sse2 }
flags for punpckldq_xmm_xmm: { sse2 }
flags for punpcklqdq_xmm_m128: { sse2 }
flags for punpcklqdq_xmm_xmm: { sse2 }
flags for punpcklwd_mm_m32: { mmx }
flags for punpcklwd_mm_mm: { mmx }
flags for punpcklwd_xmm_m128: { sse2 }
flags for punpcklwd_xmm_xmm: { sse2 }
flags for pushq_imm16: { }
flags for pushq_imm32: { }
flags for pushq_imm8: { }
flags for pushw_m16: { }
flags for pushq_m64: { }
flags for pushw_r16: { }
flags for pushw_r16_1: { }
flags for pushq_r64: { }
flags for pushq_r64_1: { }
flags for pushf: { }
flags for pushfq: { }
flags for pxor_mm_m64: { mmx }
flags for pxor_mm_mm: { mmx }
flags for pxor_xmm_m128: { sse2 }
flags for pxor_xmm_xmm: { sse2 }
flags for rcpps_xmm_m128: { sse }
flags for rcpps_xmm_xmm: { sse }
flags for rcpss_xmm_m32: { sse }
flags for rcpss_xmm_xmm: { sse }
flags for rdrand_r16: { rdrand }
flags for rdrand_r32: { rdrand }
flags for rdrand_r64: { rdrand }
flags for repz scasb_m8_1: { rep_good }
flags for roundpd_xmm_m128_imm8: { sse4_1 }
flags for roundpd_xmm_xmm_imm8: { sse4_1 }
flags for roundps_xmm_m128_imm8: { sse4_1 }
flags for roundps_xmm_xmm_imm8: { sse4_1 }
flags for roundsd_xmm_m64_imm8: { sse4_1 }
flags for roundsd_xmm_xmm_imm8: { sse4_1 }
flags for roundss_xmm_m32_imm8: { sse4_1 }
flags for roundss_xmm_xmm_imm8: { sse4_1 }
flags for rsqrtps_xmm_m128: { sse }
flags for rsqrtps_xmm_xmm: { sse }
flags for rsqrtss_xmm_m32: { sse }
flags for rsqrtss_xmm_xmm: { sse }
flags for sahf: { lahf_lm }
flags for salw_m16_cl: { }
flags for salw_m16_imm8: { }
flags for salw_m16_one: { }
flags for sall_m32_cl: { }
flags for sall_m32_imm8: { }
flags for sall_m32_one: { }
flags for salq_m64_cl: { }
flags for salq_m64_imm8: { }
flags for salq_m64_one: { }
flags for salb_m8_cl: { }
flags for salb_m8_imm8: { }
flags for salb_m8_one: { }
flags for salw_r16_cl: { }
flags for salw_r16_imm8: { }
flags for salw_r16_one: { }
flags for sall_r32_cl: { }
flags for sall_r32_imm8: { }
flags for sall_r32_one: { }
flags for salq_r64_cl: { }
flags for salq_r64_imm8: { }
flags for salq_r64_one: { }
flags for salb_r8_cl: { }
flags for salb_r8_imm8: { }
flags for salb_r8_one: { }
flags for salb_rh_cl: { }
flags for salb_rh_imm8: { }
flags for salb_rh_one: { }
flags for sarw_m16_cl: { }
flags for sarw_m16_imm8: { }
flags for sarw_m16_one: { }
flags for sarl_m32_cl: { }
flags for sarl_m32_imm8: { }
flags for sarl_m32_one: { }
flags for sarq_m64_cl: { }
flags for sarq_m64_imm8: { }
flags for sarq_m64_one: { }
flags for sarb_m8_cl: { }
flags for sarb_m8_imm8: { }
flags for sarb_m8_one: { }
flags for sarw_r16_cl: { }
flags for sarw_r16_imm8: { }
flags for sarw_r16_one: { }
flags for sarl_r32_cl: { }
flags for sarl_r32_imm8: { }
flags for sarl_r32_one: { }
flags for sarq_r64_cl: { }
flags for sarq_r64_imm8: { }
flags for sarq_r64_one: { }
flags for sarb_r8_cl: { }
flags for sarb_r8_imm8: { }
flags for sarb_r8_one: { }
flags for sarb_rh_cl: { }
flags for sarb_rh_imm8: { }
flags for sarb_rh_one: { }
flags for sarxl_r32_m32_r32: { bmi2 }
flags for sarxl_r32_r32_r32: { bmi2 }
flags for sarxq_r64_m64_r64: { bmi2 }
flags for sarxq_r64_r64_r64: { bmi2 }
flags for shlw_m16_cl: { }
flags for shlw_m16_imm8: { }
flags for shlw_m16_one: { }
flags for shll_m32_cl: { }
flags for shll_m32_imm8: { }
flags for shll_m32_one: { }
flags for shlq_m64_cl: { }
flags for shlq_m64_imm8: { }
flags for shlq_m64_one: { }
flags for shlb_m8_cl: { }
flags for shlb_m8_imm8: { }
flags for shlb_m8_one: { }
flags for shlw_r16_cl: { }
flags for shlw_r16_imm8: { }
flags for shlw_r16_one: { }
flags for shll_r32_cl: { }
flags for shll_r32_imm8: { }
flags for shll_r32_one: { }
flags for shlq_r64_cl: { }
flags for shlq_r64_imm8: { }
flags for shlq_r64_one: { }
flags for shlb_r8_cl: { }
flags for shlb_r8_imm8: { }
flags for shlb_r8_one: { }
flags for shlb_rh_cl: { }
flags for shlb_rh_imm8: { }
flags for shlb_rh_one: { }
flags for shldw_m16_r16_cl: { }
flags for shldw_m16_r16_imm8: { }
flags for shldl_m32_r32_cl: { }
flags for shldl_m32_r32_imm8: { }
flags for shldq_m64_r64_cl: { }
flags for shldq_m64_r64_imm8: { }
flags for shldw_r16_r16_cl: { }
flags for shldw_r16_r16_imm8: { }
flags for shldl_r32_r32_cl: { }
flags for shldl_r32_r32_imm8: { }
flags for shldq_r64_r64_cl: { }
flags for shldq_r64_r64_imm8: { }
flags for shlxl_r32_m32_r32: { bmi2 }
flags for shlxl_r32_r32_r32: { bmi2 }
flags for shlxq_r64_m64_r64: { bmi2 }
flags for shlxq_r64_r64_r64: { bmi2 }
flags for shrw_m16_cl: { }
flags for shrw_m16_imm8: { }
flags for shrw_m16_one: { }
flags for shrl_m32_cl: { }
flags for shrl_m32_imm8: { }
flags for shrl_m32_one: { }
flags for shrq_m64_cl: { }
flags for shrq_m64_imm8: { }
flags for shrq_m64_one: { }
flags for shrb_m8_cl: { }
flags for shrb_m8_imm8: { }
flags for shrb_m8_one: { }
flags for shrw_r16_cl: { }
flags for shrw_r16_imm8: { }
flags for shrw_r16_one: { }
flags for shrl_r32_cl: { }
flags for shrl_r32_imm8: { }
flags for shrl_r32_one: { }
flags for shrq_r64_cl: { }
flags for shrq_r64_imm8: { }
flags for shrq_r64_one: { }
flags for shrb_r8_cl: { }
flags for shrb_r8_imm8: { }
flags for shrb_r8_one: { }
flags for shrb_rh_cl: { }
flags for shrb_rh_imm8: { }
flags for shrb_rh_one: { }
flags for shrxl_r32_m32_r32: { bmi2 }
flags for shrxl_r32_r32_r32: { bmi2 }
flags for shrxq_r64_m64_r64: { bmi2 }
flags for shrxq_r64_r64_r64: { bmi2 }
flags for shufpd_xmm_m128_imm8: { sse2 }
flags for shufpd_xmm_xmm_imm8: { sse2 }
flags for shufps_xmm_m128_imm8: { sse }
flags for shufps_xmm_xmm_imm8: { sse }
flags for sqrtpd_xmm_m128: { sse2 }
flags for sqrtpd_xmm_xmm: { sse2 }
flags for sqrtps_xmm_m128: { sse }
flags for sqrtps_xmm_xmm: { sse }
flags for sqrtsd_xmm_m64: { sse2 }
flags for sqrtsd_xmm_xmm: { sse2 }
flags for sqrtss_xmm_m32: { sse }
flags for sqrtss_xmm_xmm: { sse }
flags for sti: { }
flags for subb_al_imm8: { }
flags for subw_ax_imm16: { }
flags for subl_eax_imm32: { }
flags for subw_m16_imm16: { }
flags for subw_m16_imm8: { }
flags for subw_m16_r16: { }
flags for subl_m32_imm32: { }
flags for subl_m32_imm8: { }
flags for subl_m32_r32: { }
flags for subq_m64_imm32: { }
flags for subq_m64_imm8: { }
flags for subq_m64_r64: { }
flags for subb_m8_imm8: { }
flags for subb_m8_r8: { }
flags for subb_m8_rh: { }
flags for subw_r16_imm16: { }
flags for subw_r16_imm8: { }
flags for subw_r16_m16: { }
flags for subw_r16_r16: { }
flags for subw_r16_r16_1: { }
flags for subl_r32_imm32: { }
flags for subl_r32_imm8: { }
flags for subl_r32_m32: { }
flags for subl_r32_r32: { }
flags for subl_r32_r32_1: { }
flags for subq_r64_imm32: { }
flags for subq_r64_imm8: { }
flags for subq_r64_m64: { }
flags for subq_r64_r64: { }
flags for subq_r64_r64_1: { }
flags for subb_r8_imm8: { }
flags for subb_r8_m8: { }
flags for subb_r8_r8: { }
flags for subb_r8_r8_1: { }
flags for subb_r8_rh: { }
flags for subb_r8_rh_1: { }
flags for subq_rax_imm32: { }
flags for subb_rh_imm8: { }
flags for subb_rh_m8: { }
flags for subb_rh_r8: { }
flags for subb_rh_r8_1: { }
flags for subb_rh_rh: { }
flags for subb_rh_rh_1: { }
flags for subpd_xmm_m128: { sse2 }
flags for subpd_xmm_xmm: { sse2 }
flags for subps_xmm_m128: { sse }
flags for subps_xmm_xmm: { sse }
flags for subsd_xmm_m64: { sse2 }
flags for subsd_xmm_xmm: { sse2 }
flags for subss_xmm_m32: { sse }
flags for subss_xmm_xmm: { sse }
flags for tzcntw_r16_m16: { bmi1 }
flags for tzcntw_r16_r16: { bmi1 }
flags for tzcntl_r32_m32: { bmi1 }
flags for tzcntl_r32_r32: { bmi1 }
flags for tzcntq_r64_m64: { bmi1 }
flags for tzcntq_r64_r64: { bmi1 }
flags for ucomisd_xmm_m64: { sse2 }
flags for ucomisd_xmm_xmm: { sse2 }
flags for ucomiss_xmm_m32: { sse }
flags for ucomiss_xmm_xmm: { sse }
flags for unpckhpd_xmm_m128: { sse2 }
flags for unpckhpd_xmm_xmm: { sse2 }
flags for unpckhps_xmm_m128: { sse }
flags for unpckhps_xmm_xmm: { sse }
flags for unpcklpd_xmm_m128: { sse2 }
flags for unpcklpd_xmm_xmm: { sse2 }
flags for unpcklps_xmm_m128: { sse }
flags for unpcklps_xmm_xmm: { sse }
flags for vaddpd_xmm_xmm_m128: { avx }
flags for vaddpd_xmm_xmm_xmm: { avx }
flags for vaddpd_ymm_ymm_m256: { avx }
flags for vaddpd_ymm_ymm_ymm: { avx }
flags for vaddps_xmm_xmm_m128: { avx }
flags for vaddps_xmm_xmm_xmm: { avx }
flags for vaddps_ymm_ymm_m256: { avx }
flags for vaddps_ymm_ymm_ymm: { avx }
flags for vaddsd_xmm_xmm_m64: { avx }
flags for vaddsd_xmm_xmm_xmm: { avx }
flags for vaddss_xmm_xmm_m32: { avx }
flags for vaddss_xmm_xmm_xmm: { avx }
flags for vaddsubpd_xmm_xmm_m128: { avx }
flags for vaddsubpd_xmm_xmm_xmm: { avx }
flags for vaddsubpd_ymm_ymm_m256: { avx }
flags for vaddsubpd_ymm_ymm_ymm: { avx }
flags for vaddsubps_xmm_xmm_m128: { avx }
flags for vaddsubps_xmm_xmm_xmm: { avx }
flags for vaddsubps_ymm_ymm_m256: { avx }
flags for vaddsubps_ymm_ymm_ymm: { avx }
flags for vaesdec_xmm_xmm_m128: { aes avx }
flags for vaesdec_xmm_xmm_xmm: { aes avx }
flags for vaesdeclast_xmm_xmm_m128: { aes avx }
flags for vaesdeclast_xmm_xmm_xmm: { aes avx }
flags for vaesenc_xmm_xmm_m128: { aes avx }
flags for vaesenc_xmm_xmm_xmm: { aes avx }
flags for vaesenclast_xmm_xmm_m128: { aes avx }
flags for vaesenclast_xmm_xmm_xmm: { aes avx }
flags for vaesimc_xmm_m128: { aes avx }
flags for vaesimc_xmm_xmm: { aes avx }
flags for vaeskeygenassist_xmm_m128_imm8: { aes avx }
flags for vaeskeygenassist_xmm_xmm_imm8: { aes avx }
flags for vandnpd_xmm_xmm_m128: { avx }
flags for vandnpd_xmm_xmm_xmm: { avx }
flags for vandnpd_ymm_ymm_m256: { avx }
flags for vandnpd_ymm_ymm_ymm: { avx }
flags for vandnps_xmm_xmm_m128: { avx }
flags for vandnps_xmm_xmm_xmm: { avx }
flags for vandnps_ymm_ymm_m256: { avx }
flags for vandnps_ymm_ymm_ymm: { avx }
flags for vandpd_xmm_xmm_m128: { avx }
flags for vandpd_xmm_xmm_xmm: { avx }
flags for vandpd_ymm_ymm_m256: { avx }
flags for vandpd_ymm_ymm_ymm: { avx }
flags for vandps_xmm_xmm_m128: { avx }
flags for vandps_xmm_xmm_xmm: { avx }
flags for vandps_ymm_ymm_m256: { avx }
flags for vandps_ymm_ymm_ymm: { avx }
flags for vblendpd_xmm_xmm_m128_imm8: { avx }
flags for vblendpd_xmm_xmm_xmm_imm8: { avx }
flags for vblendpd_ymm_ymm_m256_imm8: { avx }
flags for vblendpd_ymm_ymm_ymm_imm8: { avx }
flags for vblendps_xmm_xmm_m128_imm8: { avx }
flags for vblendps_xmm_xmm_xmm_imm8: { avx }
flags for vblendps_ymm_ymm_m256_imm8: { avx }
flags for vblendps_ymm_ymm_ymm_imm8: { avx }
flags for vblendvpd_xmm_xmm_m128_xmm: { avx }
flags for vblendvpd_xmm_xmm_xmm_xmm: { avx }
flags for vblendvpd_ymm_ymm_m256_ymm: { avx }
flags for vblendvpd_ymm_ymm_ymm_ymm: { avx }
flags for vblendvps_xmm_xmm_m128_xmm: { avx }
flags for vblendvps_xmm_xmm_xmm_xmm: { avx }
flags for vblendvps_ymm_ymm_m256_ymm: { avx }
flags for vblendvps_ymm_ymm_ymm_ymm: { avx }
flags for vbroadcastf128_ymm_m128: { avx }
flags for vpbroadcasti128_ymm_m128: { avx2 }
flags for vbroadcastsd_ymm_m64: { avx }
flags for vbroadcastsd_ymm_xmm: { avx2 }
flags for vbroadcastss_xmm_m32: { avx }
flags for vbroadcastss_xmm_xmm: { avx2 }
flags for vbroadcastss_ymm_m32: { avx }
flags for vbroadcastss_ymm_xmm: { avx2 }
flags for vcmppd_xmm_xmm_m128_imm8: { avx }
flags for vcmppd_xmm_xmm_xmm_imm8: { avx }
flags for vcmppd_ymm_ymm_m256_imm8: { avx }
flags for vcmppd_ymm_ymm_ymm_imm8: { avx }
flags for vcmpps_xmm_xmm_m128_imm8: { avx }
flags for vcmpps_xmm_xmm_xmm_imm8: { avx }
flags for vcmpps_ymm_ymm_m256_imm8: { avx }
flags for vcmpps_ymm_ymm_ymm_imm8: { avx }
flags for vcmpsd_xmm_xmm_m64_imm8: { avx }
flags for vcmpsd_xmm_xmm_xmm_imm8: { avx }
flags for vcmpss_xmm_xmm_m32_imm8: { avx }
flags for vcmpss_xmm_xmm_xmm_imm8: { avx }
flags for vcomisd_xmm_m64: { avx }
flags for vcomisd_xmm_xmm: { avx }
flags for vcomiss_xmm_m32: { avx }
flags for vcomiss_xmm_xmm: { avx }
flags for vcvtdq2pd_xmm_m64: { avx }
flags for vcvtdq2pd_xmm_xmm: { avx }
flags for vcvtdq2pd_ymm_m128: { avx }
flags for vcvtdq2pd_ymm_ymm: { avx }
flags for vcvtdq2ps_xmm_m128: { avx }
flags for vcvtdq2ps_xmm_xmm: { avx }
flags for vcvtdq2ps_ymm_m256: { avx }
flags for vcvtdq2ps_ymm_ymm: { avx }
flags for vcvtpd2dqx_xmm_m128: { avx }
flags for vcvtpd2dq_xmm_m256: { avx }
flags for vcvtpd2dqx_xmm_xmm: { avx }
flags for vcvtpd2dq_xmm_ymm: { avx }
flags for vcvtpd2ps_xmm_m128: { avx }
flags for vcvtpd2ps_xmm_m256: { avx }
flags for vcvtpd2ps_xmm_xmm: { avx }
flags for vcvtpd2ps_xmm_ymm: { avx }
flags for vcvtph2ps_xmm_m64: { f16c }
flags for vcvtph2ps_xmm_xmm: { f16c }
flags for vcvtph2ps_ymm_m128: { f16c }
flags for vcvtph2ps_ymm_xmm: { f16c }
flags for vcvtps2dq_xmm_m128: { avx }
flags for vcvtps2dq_xmm_xmm: { avx }
flags for vcvtps2dq_ymm_m256: { avx }
flags for vcvtps2dq_ymm_ymm: { avx }
flags for vcvtps2pd_xmm_m64: { avx }
flags for vcvtps2pd_xmm_xmm: { avx }
flags for vcvtps2pd_ymm_m128: { avx }
flags for vcvtps2pd_ymm_xmm: { avx }
flags for vcvtps2ph_m128_ymm_imm8: { f16c }
flags for vcvtps2ph_m64_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_ymm_imm8: { f16c }
flags for vcvtsd2sil_r32_m64: { avx }
flags for vcvtsd2sil_r32_xmm: { avx }
flags for vcvtsd2siq_r64_m64: { avx }
flags for vcvtsd2siq_r64_xmm: { avx }
flags for vcvtsd2ss_xmm_xmm_m64: { avx }
flags for vcvtsd2ss_xmm_xmm_xmm: { avx }
flags for vcvtsi2sdl_xmm_xmm_m32: { avx }
flags for vcvtsi2sdq_xmm_xmm_m64: { avx }
flags for vcvtsi2sdl_xmm_xmm_r32: { avx }
flags for vcvtsi2sdq_xmm_xmm_r64: { avx }
flags for vcvtsi2ssl_xmm_xmm_m32: { avx }
flags for vcvtsi2ssq_xmm_xmm_m64: { avx }
flags for vcvtsi2ssl_xmm_xmm_r32: { avx }
flags for vcvtsi2ssq_xmm_xmm_r64: { avx }
flags for vcvtss2sd_xmm_xmm_m32: { avx }
flags for vcvtss2sd_xmm_xmm_xmm: { avx }
flags for vcvtss2sil_r32_m32: { avx }
flags for vcvtss2sil_r32_xmm: { avx }
flags for vcvtss2siq_r64_m32: { avx }
flags for vcvtss2siq_r64_xmm: { avx }
flags for vcvttpd2dq_xmm_m128: { avx }
flags for vcvttpd2dq_xmm_m256: { avx }
flags for vcvttpd2dq_xmm_xmm: { avx }
flags for vcvttpd2dq_xmm_ymm: { avx }
flags for vcvttps2dq_xmm_m128: { avx }
flags for vcvttps2dq_xmm_xmm: { avx }
flags for vcvttps2dq_ymm_m256: { avx }
flags for vcvttps2dq_ymm_ymm: { avx }
flags for vcvttsd2sil_r32_m64: { avx }
flags for vcvttsd2sil_r32_xmm: { avx }
flags for vcvttsd2siq_r64_m64: { avx }
flags for vcvttsd2siq_r64_xmm: { avx }
flags for vcvttss2sil_r32_m32: { avx }
flags for vcvttss2sil_r32_xmm: { avx }
flags for vcvttss2siq_r64_m32: { avx }
flags for vcvttss2siq_r64_xmm: { avx }
flags for vdivpd_xmm_xmm_m128: { avx }
flags for vdivpd_xmm_xmm_xmm: { avx }
flags for vdivpd_ymm_ymm_m256: { avx }
flags for vdivpd_ymm_ymm_ymm: { avx }
flags for vdivps_xmm_xmm_m128: { avx }
flags for vdivps_xmm_xmm_xmm: { avx }
flags for vdivps_ymm_ymm_m256: { avx }
flags for vdivps_ymm_ymm_ymm: { avx }
flags for vdivsd_xmm_xmm_m64: { avx }
flags for vdivsd_xmm_xmm_xmm: { avx }
flags for vdivss_xmm_xmm_m32: { avx }
flags for vdivss_xmm_xmm_xmm: { avx }
flags for vdppd_xmm_xmm_m128_imm8: { avx }
flags for vdppd_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_xmm_xmm_m128_imm8: { avx }
flags for vdpps_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_ymm_ymm_m256_imm8: { avx }
flags for vdpps_ymm_ymm_ymm_imm8: { avx }
flags for vextractf128_m128_ymm_imm8: { avx }
flags for vextractf128_xmm_ymm_imm8: { avx }
flags for vextracti128_m128_ymm_imm8: { avx2 }
flags for vextracti128_xmm_ymm_imm8: { avx2 }
flags for vextractps_m32_xmm_imm8: { avx }
flags for vextractps_r32_xmm_imm8: { avx }
flags for vfmadd132pd_xmm_xmm_m128: { fma }
flags for vfmadd132pd_xmm_xmm_xmm: { fma }
flags for vfmadd132pd_ymm_ymm_m256: { fma }
flags for vfmadd132pd_ymm_ymm_ymm: { fma }
flags for vfmadd132ps_xmm_xmm_m128: { fma }
flags for vfmadd132ps_xmm_xmm_xmm: { fma }
flags for vfmadd132ps_ymm_ymm_m256: { fma }
flags for vfmadd132ps_ymm_ymm_ymm: { fma }
flags for vfmadd132sd_xmm_xmm_m64: { fma }
flags for vfmadd132sd_xmm_xmm_xmm: { fma }
flags for vfmadd132ss_xmm_xmm_m32: { fma }
flags for vfmadd132ss_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_xmm_xmm_m128: { fma }
flags for vfmadd213pd_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_ymm_ymm_m256: { fma }
flags for vfmadd213pd_ymm_ymm_ymm: { fma }
flags for vfmadd213ps_xmm_xmm_m128: { fma }
flags for vfmadd213ps_xmm_xmm_xmm: { fma }
flags for vfmadd213ps_ymm_ymm_m256: { fma }
flags for vfmadd213ps_ymm_ymm_ymm: { fma }
flags for vfmadd213sd_xmm_xmm_m64: { fma }
flags for vfmadd213sd_xmm_xmm_xmm: { fma }
flags for vfmadd213ss_xmm_xmm_m32: { fma }
flags for vfmadd213ss_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_xmm_xmm_m128: { fma }
flags for vfmadd231pd_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_ymm_ymm_m256: { fma }
flags for vfmadd231pd_ymm_ymm_ymm: { fma }
flags for vfmadd231ps_xmm_xmm_m128: { fma }
flags for vfmadd231ps_xmm_xmm_xmm: { fma }
flags for vfmadd231ps_ymm_ymm_m256: { fma }
flags for vfmadd231ps_ymm_ymm_ymm: { fma }
flags for vfmadd231sd_xmm_xmm_m64: { fma }
flags for vfmadd231sd_xmm_xmm_xmm: { fma }
flags for vfmadd231ss_xmm_xmm_m32: { fma }
flags for vfmadd231ss_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_xmm_xmm_m128: { fma }
flags for vfmaddsub132pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_ymm_ymm_m256: { fma }
flags for vfmaddsub132pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub132ps_xmm_xmm_m128: { fma }
flags for vfmaddsub132ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub132ps_ymm_ymm_m256: { fma }
flags for vfmaddsub132ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub213pd_xmm_xmm_m128: { fma }
flags for vfmaddsub213pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub213pd_ymm_ymm_m256: { fma }
flags for vfmaddsub213pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub213ps_xmm_xmm_m128: { fma }
flags for vfmaddsub213ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub213ps_ymm_ymm_m256: { fma }
flags for vfmaddsub213ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub231pd_xmm_xmm_m128: { fma }
flags for vfmaddsub231pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub231pd_ymm_ymm_m256: { fma }
flags for vfmaddsub231pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub231ps_xmm_xmm_m128: { fma }
flags for vfmaddsub231ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub231ps_ymm_ymm_m256: { fma }
flags for vfmaddsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub132pd_xmm_xmm_m128: { fma }
flags for vfmsub132pd_xmm_xmm_xmm: { fma }
flags for vfmsub132pd_ymm_ymm_m256: { fma }
flags for vfmsub132pd_ymm_ymm_ymm: { fma }
flags for vfmsub132ps_xmm_xmm_m128: { fma }
flags for vfmsub132ps_xmm_xmm_xmm: { fma }
flags for vfmsub132ps_ymm_ymm_m256: { fma }
flags for vfmsub132ps_ymm_ymm_ymm: { fma }
flags for vfmsub132sd_xmm_xmm_m64: { fma }
flags for vfmsub132sd_xmm_xmm_xmm: { fma }
flags for vfmsub132ss_xmm_xmm_m32: { fma }
flags for vfmsub132ss_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_xmm_xmm_m128: { fma }
flags for vfmsub213pd_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_ymm_ymm_m256: { fma }
flags for vfmsub213pd_ymm_ymm_ymm: { fma }
flags for vfmsub213ps_xmm_xmm_m128: { fma }
flags for vfmsub213ps_xmm_xmm_xmm: { fma }
flags for vfmsub213ps_ymm_ymm_m256: { fma }
flags for vfmsub213ps_ymm_ymm_ymm: { fma }
flags for vfmsub213sd_xmm_xmm_m64: { fma }
flags for vfmsub213sd_xmm_xmm_xmm: { fma }
flags for vfmsub213ss_xmm_xmm_m32: { fma }
flags for vfmsub213ss_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_xmm_xmm_m128: { fma }
flags for vfmsub231pd_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_ymm_ymm_m256: { fma }
flags for vfmsub231pd_ymm_ymm_ymm: { fma }
flags for vfmsub231ps_xmm_xmm_m128: { fma }
flags for vfmsub231ps_xmm_xmm_xmm: { fma }
flags for vfmsub231ps_ymm_ymm_m256: { fma }
flags for vfmsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub231sd_xmm_xmm_m64: { fma }
flags for vfmsub231sd_xmm_xmm_xmm: { fma }
flags for vfmsub231ss_xmm_xmm_m32: { fma }
flags for vfmsub231ss_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_xmm_xmm_m128: { fma }
flags for vfmsubadd132pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_ymm_ymm_m256: { fma }
flags for vfmsubadd132pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd132ps_xmm_xmm_m128: { fma }
flags for vfmsubadd132ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd132ps_ymm_ymm_m256: { fma }
flags for vfmsubadd132ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd213pd_xmm_xmm_m128: { fma }
flags for vfmsubadd213pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd213pd_ymm_ymm_m256: { fma }
flags for vfmsubadd213pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd213ps_xmm_xmm_m128: { fma }
flags for vfmsubadd213ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd213ps_ymm_ymm_m256: { fma }
flags for vfmsubadd213ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd231pd_xmm_xmm_m128: { fma }
flags for vfmsubadd231pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd231pd_ymm_ymm_m256: { fma }
flags for vfmsubadd231pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd231ps_xmm_xmm_m128: { fma }
flags for vfmsubadd231ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd231ps_ymm_ymm_m256: { fma }
flags for vfmsubadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132pd_xmm_xmm_m128: { fma }
flags for vfnmadd132pd_xmm_xmm_xmm: { fma }
flags for vfnmadd132pd_ymm_ymm_m256: { fma }
flags for vfnmadd132pd_ymm_ymm_ymm: { fma }
flags for vfnmadd132ps_xmm_xmm_m128: { fma }
flags for vfnmadd132ps_xmm_xmm_xmm: { fma }
flags for vfnmadd132ps_ymm_ymm_m256: { fma }
flags for vfnmadd132ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132sd_xmm_xmm_m64: { fma }
flags for vfnmadd132sd_xmm_xmm_xmm: { fma }
flags for vfnmadd132ss_xmm_xmm_m32: { fma }
flags for vfnmadd132ss_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_xmm_xmm_m128: { fma }
flags for vfnmadd213pd_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_ymm_ymm_m256: { fma }
flags for vfnmadd213pd_ymm_ymm_ymm: { fma }
flags for vfnmadd213ps_xmm_xmm_m128: { fma }
flags for vfnmadd213ps_xmm_xmm_xmm: { fma }
flags for vfnmadd213ps_ymm_ymm_m256: { fma }
flags for vfnmadd213ps_ymm_ymm_ymm: { fma }
flags for vfnmadd213sd_xmm_xmm_m64: { fma }
flags for vfnmadd213sd_xmm_xmm_xmm: { fma }
flags for vfnmadd213ss_xmm_xmm_m32: { fma }
flags for vfnmadd213ss_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_xmm_xmm_m128: { fma }
flags for vfnmadd231pd_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_ymm_ymm_m256: { fma }
flags for vfnmadd231pd_ymm_ymm_ymm: { fma }
flags for vfnmadd231ps_xmm_xmm_m128: { fma }
flags for vfnmadd231ps_xmm_xmm_xmm: { fma }
flags for vfnmadd231ps_ymm_ymm_m256: { fma }
flags for vfnmadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd231sd_xmm_xmm_m64: { fma }
flags for vfnmadd231sd_xmm_xmm_xmm: { fma }
flags for vfnmadd231ss_xmm_xmm_m32: { fma }
flags for vfnmadd231ss_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_xmm_xmm_m128: { fma }
flags for vfnmsub132pd_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_ymm_ymm_m256: { fma }
flags for vfnmsub132pd_ymm_ymm_ymm: { fma }
flags for vfnmsub132ps_xmm_xmm_m128: { fma }
flags for vfnmsub132ps_xmm_xmm_xmm: { fma }
flags for vfnmsub132ps_ymm_ymm_m256: { fma }
flags for vfnmsub132ps_ymm_ymm_ymm: { fma }
flags for vfnmsub132sd_xmm_xmm_m64: { fma }
flags for vfnmsub132sd_xmm_xmm_xmm: { fma }
flags for vfnmsub132ss_xmm_xmm_m32: { fma }
flags for vfnmsub132ss_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_xmm_xmm_m128: { fma }
flags for vfnmsub213pd_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_ymm_ymm_m256: { fma }
flags for vfnmsub213pd_ymm_ymm_ymm: { fma }
flags for vfnmsub213ps_xmm_xmm_m128: { fma }
flags for vfnmsub213ps_xmm_xmm_xmm: { fma }
flags for vfnmsub213ps_ymm_ymm_m256: { fma }
flags for vfnmsub213ps_ymm_ymm_ymm: { fma }
flags for vfnmsub213sd_xmm_xmm_m64: { fma }
flags for vfnmsub213sd_xmm_xmm_xmm: { fma }
flags for vfnmsub213ss_xmm_xmm_m32: { fma }
flags for vfnmsub213ss_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_xmm_xmm_m128: { fma }
flags for vfnmsub231pd_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_ymm_ymm_m256: { fma }
flags for vfnmsub231pd_ymm_ymm_ymm: { fma }
flags for vfnmsub231ps_xmm_xmm_m128: { fma }
flags for vfnmsub231ps_xmm_xmm_xmm: { fma }
flags for vfnmsub231ps_ymm_ymm_m256: { fma }
flags for vfnmsub231ps_ymm_ymm_ymm: { fma }
flags for vfnmsub231sd_xmm_xmm_m64: { fma }
flags for vfnmsub231sd_xmm_xmm_xmm: { fma }
flags for vfnmsub231ss_xmm_xmm_m32: { fma }
flags for vfnmsub231ss_xmm_xmm_xmm: { fma }
flags for vgatherdpd_xmm_m32_xmm: { avx2 }
flags for vgatherdpd_ymm_m32_ymm: { avx2 }
flags for vgatherdps_xmm_m32_xmm: { avx2 }
flags for vgatherdps_ymm_m32_ymm: { avx2 }
flags for vgatherqpd_xmm_m64_xmm: { avx2 }
flags for vgatherqpd_ymm_m64_ymm: { avx2 }
flags for vgatherqps_xmm_m64_xmm: { avx2 }
flags for vgatherqps_xmm_m64_xmm_1: { avx2 }
flags for vhaddpd_xmm_xmm_m128: { avx }
flags for vhaddpd_xmm_xmm_xmm: { avx }
flags for vhaddpd_ymm_ymm_m256: { avx }
flags for vhaddpd_ymm_ymm_ymm: { avx }
flags for vhaddps_xmm_xmm_m128: { avx }
flags for vhaddps_xmm_xmm_xmm: { avx }
flags for vhaddps_ymm_ymm_m256: { avx }
flags for vhaddps_ymm_ymm_ymm: { avx }
flags for vhsubpd_xmm_xmm_m128: { avx }
flags for vhsubpd_xmm_xmm_xmm: { avx }
flags for vhsubpd_ymm_ymm_m256: { avx }
flags for vhsubpd_ymm_ymm_ymm: { avx }
flags for vhsubps_xmm_xmm_m128: { avx }
flags for vhsubps_xmm_xmm_xmm: { avx }
flags for vhsubps_ymm_ymm_m256: { avx }
flags for vhsubps_ymm_ymm_ymm: { avx }
flags for vinsertf128_ymm_ymm_m128_imm8: { avx }
flags for vinsertf128_ymm_ymm_xmm_imm8: { avx }
flags for vinserti128_ymm_ymm_m128_imm8: { avx2 }
flags for vinserti128_ymm_ymm_xmm_imm8: { avx2 }
flags for vinsertps_xmm_xmm_m32_imm8: { avx }
flags for vinsertps_xmm_xmm_xmm_imm8: { avx }
flags for vlddqu_xmm_m128: { avx }
flags for vlddqu_ymm_m256: { avx }
flags for vmaskmovpd_m128_xmm_xmm: { avx }
flags for vmaskmovpd_m256_ymm_ymm: { avx }
flags for vmaskmovpd_xmm_xmm_m128: { avx }
flags for vmaskmovpd_ymm_ymm_m256: { avx }
flags for vmaskmovps_m128_xmm_xmm: { avx }
flags for vmaskmovps_m256_ymm_ymm: { avx }
flags for vmaskmovps_xmm_xmm_m128: { avx }
flags for vmaskmovps_ymm_ymm_m256: { avx }
flags for vmaxpd_xmm_xmm_m128: { avx }
flags for vmaxpd_xmm_xmm_xmm: { avx }
flags for vmaxpd_ymm_ymm_m256: { avx }
flags for vmaxpd_ymm_ymm_ymm: { avx }
flags for vmaxps_xmm_xmm_m128: { avx }
flags for vmaxps_xmm_xmm_xmm: { avx }
flags for vmaxps_ymm_ymm_m256: { avx }
flags for vmaxps_ymm_ymm_ymm: { avx }
flags for vmaxsd_xmm_xmm_m64: { avx }
flags for vmaxsd_xmm_xmm_xmm: { avx }
flags for vmaxss_xmm_xmm_m32: { avx }
flags for vmaxss_xmm_xmm_xmm: { avx }
flags for vminpd_xmm_xmm_m128: { avx }
flags for vminpd_xmm_xmm_xmm: { avx }
flags for vminpd_ymm_ymm_m256: { avx }
flags for vminpd_ymm_ymm_ymm: { avx }
flags for vminps_xmm_xmm_m128: { avx }
flags for vminps_xmm_xmm_xmm: { avx }
flags for vminps_ymm_ymm_m256: { avx }
flags for vminps_ymm_ymm_ymm: { avx }
flags for vminsd_xmm_xmm_m64: { avx }
flags for vminsd_xmm_xmm_xmm: { avx }
flags for vminss_xmm_xmm_m32: { avx }
flags for vminss_xmm_xmm_xmm: { avx }
flags for vmovapd_m128_xmm: { avx }
flags for vmovapd_m256_ymm: { avx }
flags for vmovapd_xmm_m128: { avx }
flags for vmovapd_xmm_xmm: { avx }
flags for vmovapd_xmm_xmm_1: { avx }
flags for vmovapd_ymm_m256: { avx }
flags for vmovapd_ymm_ymm: { avx }
flags for vmovapd_ymm_ymm_1: { avx }
flags for vmovaps_m128_xmm: { avx }
flags for vmovaps_m256_ymm: { avx }
flags for vmovaps_xmm_m128: { avx }
flags for vmovaps_xmm_xmm: { avx }
flags for vmovaps_xmm_xmm_1: { avx }
flags for vmovaps_ymm_m256: { avx }
flags for vmovaps_ymm_ymm: { avx }
flags for vmovaps_ymm_ymm_1: { avx }
flags for vmovd_m32_xmm: { avx }
flags for vmovd_r32_xmm: { avx }
flags for vmovd_xmm_m32: { avx }
flags for vmovd_xmm_r32: { avx }
flags for vmovddup_xmm_m64: { avx }
flags for vmovddup_xmm_xmm: { avx }
flags for vmovddup_ymm_m256: { avx }
flags for vmovddup_ymm_ymm: { avx }
flags for vmovdqa_m128_xmm: { avx }
flags for vmovdqa_m256_ymm: { avx }
flags for vmovdqa_xmm_m128: { avx }
flags for vmovdqa_xmm_xmm: { avx }
flags for vmovdqa_xmm_xmm_1: { avx }
flags for vmovdqa_ymm_m256: { avx }
flags for vmovdqa_ymm_ymm: { avx }
flags for vmovdqa_ymm_ymm_1: { avx }
flags for vmovdqu_m128_xmm: { avx }
flags for vmovdqu_m256_ymm: { avx }
flags for vmovdqu_xmm_m128: { avx }
flags for vmovdqu_xmm_xmm: { avx }
flags for vmovdqu_xmm_xmm_1: { avx }
flags for vmovdqu_ymm_m256: { avx }
flags for vmovdqu_ymm_ymm: { avx }
flags for vmovdqu_ymm_ymm_1: { avx }
flags for vmovhlps_xmm_xmm_xmm: { avx }
flags for vmovhpd_m64_xmm: { avx }
flags for vmovhpd_xmm_xmm_m64: { avx }
flags for vmovhps_m64_xmm: { avx }
flags for vmovhps_xmm_xmm_m64: { avx }
flags for vmovlhps_xmm_xmm_xmm: { avx }
flags for vmovlpd_m64_xmm: { avx }
flags for vmovlpd_xmm_xmm_m64: { avx }
flags for vmovlps_m64_xmm: { avx }
flags for vmovlps_xmm_xmm_m64: { avx }
flags for vmovmskpd_r32_xmm: { avx }
flags for vmovmskpd_r32_ymm: { avx }
flags for vmovmskpd_r64_xmm: { avx }
flags for vmovmskpd_r64_ymm: { avx }
flags for vmovmskps_r32_xmm: { avx }
flags for vmovmskps_r32_ymm: { avx }
flags for vmovmskps_r64_xmm: { avx }
flags for vmovmskps_r64_ymm: { avx }
flags for vmovntdqa_m128_xmm: { avx }
flags for vmovntdqa_xmm_m128: { avx }
flags for vmovntdqa_ymm_m256: { avx2 }
flags for vmovntpd_m128_xmm: { avx }
flags for vmovntpd_m256_ymm: { avx }
flags for vmovntps_m128_xmm: { avx }
flags for vmovntps_m256_ymm: { avx }
flags for vmovq_m64_xmm: { avx }
flags for vmovq_m64_xmm_1: { avx }
flags for vmovq_r64_xmm: { avx }
flags for vmovq_xmm_m64: { avx }
flags for vmovq_xmm_m64_1: { avx }
flags for vmovq_xmm_r64: { avx }
flags for vmovq_xmm_xmm: { avx }
flags for vmovq_xmm_xmm_1: { avx }
flags for vmovsd_m64_xmm: { avx }
flags for vmovsd_xmm_m64: { avx }
flags for vmovsd_xmm_xmm_xmm: { avx }
flags for vmovsd_xmm_xmm_xmm_1: { avx }
flags for vmovshdup_xmm_m128: { avx }
flags for vmovshdup_xmm_xmm: { avx }
flags for vmovshdup_ymm_m256: { avx }
flags for vmovshdup_ymm_ymm: { avx }
flags for vmovsldup_xmm_m128: { avx }
flags for vmovsldup_xmm_xmm: { avx }
flags for vmovsldup_ymm_m256: { avx }
flags for vmovsldup_ymm_ymm: { avx }
flags for vmovss_m32_xmm: { avx }
flags for vmovss_xmm_m32: { avx }
flags for vmovss_xmm_xmm_xmm: { avx }
flags for vmovss_xmm_xmm_xmm_1: { avx }
flags for vmovupd_m128_xmm: { avx }
flags for vmovupd_m256_ymm: { avx }
flags for vmovupd_xmm_m128: { avx }
flags for vmovupd_xmm_xmm: { avx }
flags for vmovupd_xmm_xmm_1: { avx }
flags for vmovupd_ymm_m256: { avx }
flags for vmovupd_ymm_ymm: { avx }
flags for vmovupd_ymm_ymm_1: { avx }
flags for vmovups_m128_xmm: { avx }
flags for vmovups_m256_ymm: { avx }
flags for vmovups_xmm_m128: { avx }
flags for vmovups_xmm_xmm: { avx }
flags for vmovups_xmm_xmm_1: { avx }
flags for vmovups_ymm_m256: { avx }
flags for vmovups_ymm_ymm: { avx }
flags for vmovups_ymm_ymm_1: { avx }
flags for vmpsadbw_xmm_xmm_m128_imm8: { avx }
flags for vmpsadbw_xmm_xmm_xmm_imm8: { avx }
flags for vmpsadbw_ymm_ymm_m256_imm8: { avx2 }
flags for vmpsadbw_ymm_ymm_ymm_imm8: { avx2 }
flags for vmulpd_xmm_xmm_m128: { avx }
flags for vmulpd_xmm_xmm_xmm: { avx }
flags for vmulpd_ymm_ymm_m256: { avx }
flags for vmulpd_ymm_ymm_ymm: { avx }
flags for vmulps_xmm_xmm_m128: { avx }
flags for vmulps_xmm_xmm_xmm: { avx }
flags for vmulps_ymm_ymm_m256: { avx }
flags for vmulps_ymm_ymm_ymm: { avx }
flags for vmulsd_xmm_xmm_m64: { avx }
flags for vmulsd_xmm_xmm_xmm: { avx }
flags for vmulss_xmm_xmm_m32: { avx }
flags for vmulss_xmm_xmm_xmm: { avx }
flags for vorpd_xmm_xmm_m128: { avx }
flags for vorpd_xmm_xmm_xmm: { avx }
flags for vorpd_ymm_ymm_m256: { avx }
flags for vorpd_ymm_ymm_ymm: { avx }
flags for vorps_xmm_xmm_m128: { avx }
flags for vorps_xmm_xmm_xmm: { avx }
flags for vorps_ymm_ymm_m256: { avx }
flags for vorps_ymm_ymm_ymm: { avx }
flags for vpabsb_xmm_m128: { avx }
flags for vpabsb_xmm_xmm: { avx }
flags for vpabsb_ymm_m256: { avx2 }
flags for vpabsb_ymm_ymm: { avx2 }
flags for vpabsd_xmm_m128: { avx }
flags for vpabsd_xmm_xmm: { avx }
flags for vpabsd_ymm_m256: { avx2 }
flags for vpabsd_ymm_ymm: { avx2 }
flags for vpabsw_xmm_m128: { avx }
flags for vpabsw_xmm_xmm: { avx }
flags for vpabsw_ymm_m256: { avx2 }
flags for vpabsw_ymm_ymm: { avx2 }
flags for vpackssdw_xmm_xmm_m128: { avx }
flags for vpackssdw_xmm_xmm_xmm: { avx }
flags for vpackssdw_ymm_ymm_m256: { avx2 }
flags for vpackssdw_ymm_ymm_ymm: { avx2 }
flags for vpacksswb_xmm_xmm_m128: { avx }
flags for vpacksswb_xmm_xmm_xmm: { avx }
flags for vpacksswb_ymm_ymm_m256: { avx2 }
flags for vpacksswb_ymm_ymm_ymm: { avx2 }
flags for vpackusdw_xmm_xmm_m128: { avx }
flags for vpackusdw_xmm_xmm_xmm: { avx }
flags for vpackusdw_ymm_ymm_m256: { avx2 }
flags for vpackusdw_ymm_ymm_ymm: { avx2 }
flags for vpackuswb_xmm_xmm_m128: { avx }
flags for vpackuswb_xmm_xmm_xmm: { avx }
flags for vpackuswb_ymm_ymm_m256: { avx2 }
flags for vpackuswb_ymm_ymm_ymm: { avx2 }
flags for vpaddb_xmm_xmm_m128: { avx }
flags for vpaddb_xmm_xmm_xmm: { avx }
flags for vpaddb_ymm_ymm_m256: { avx2 }
flags for vpaddb_ymm_ymm_ymm: { avx2 }
flags for vpaddd_xmm_xmm_m128: { avx }
flags for vpaddd_xmm_xmm_xmm: { avx }
flags for vpaddd_ymm_ymm_m256: { avx2 }
flags for vpaddd_ymm_ymm_ymm: { avx2 }
flags for vpaddq_xmm_xmm_m128: { avx }
flags for vpaddq_xmm_xmm_xmm: { avx }
flags for vpaddq_ymm_ymm_m256: { avx2 }
flags for vpaddq_ymm_ymm_ymm: { avx2 }
flags for vpaddsb_xmm_xmm_m128: { avx }
flags for vpaddsb_xmm_xmm_xmm: { avx }
flags for vpaddsb_ymm_ymm_m256: { avx2 }
flags for vpaddsb_ymm_ymm_ymm: { avx2 }
flags for vpaddsw_xmm_xmm_m128: { avx }
flags for vpaddsw_xmm_xmm_xmm: { avx }
flags for vpaddsw_ymm_ymm_m256: { avx2 }
flags for vpaddsw_ymm_ymm_ymm: { avx2 }
flags for vpaddusb_xmm_xmm_m128: { avx }
flags for vpaddusb_xmm_xmm_xmm: { avx }
flags for vpaddusb_ymm_ymm_m256: { avx2 }
flags for vpaddusb_ymm_ymm_ymm: { avx2 }
flags for vpaddusw_xmm_xmm_m128: { avx }
flags for vpaddusw_xmm_xmm_xmm: { avx }
flags for vpaddusw_ymm_ymm_m256: { avx2 }
flags for vpaddusw_ymm_ymm_ymm: { avx2 }
flags for vpaddw_xmm_xmm_m128: { avx }
flags for vpaddw_xmm_xmm_xmm: { avx }
flags for vpaddw_ymm_ymm_m256: { avx2 }
flags for vpaddw_ymm_ymm_ymm: { avx2 }
flags for vpalignr_xmm_xmm_m128_imm8: { avx }
flags for vpalignr_xmm_xmm_xmm_imm8: { avx }
flags for vpalignr_ymm_ymm_m256_imm8: { avx2 }
flags for vpalignr_ymm_ymm_ymm_imm8: { avx2 }
flags for vpand_xmm_xmm_m128: { avx }
flags for vpand_xmm_xmm_xmm: { avx }
flags for vpand_ymm_ymm_m256: { avx2 }
flags for vpand_ymm_ymm_ymm: { avx2 }
flags for vpandn_xmm_xmm_m128: { avx }
flags for vpandn_xmm_xmm_xmm: { avx }
flags for vpandn_ymm_ymm_m256: { avx2 }
flags for vpandn_ymm_ymm_ymm: { avx2 }
flags for vpavgb_xmm_xmm_m128: { avx }
flags for vpavgb_xmm_xmm_xmm: { avx }
flags for vpavgb_ymm_ymm_m256: { avx2 }
flags for vpavgb_ymm_ymm_ymm: { avx2 }
flags for vpavgw_xmm_xmm_m128: { avx }
flags for vpavgw_xmm_xmm_xmm: { avx }
flags for vpavgw_ymm_ymm_m256: { avx2 }
flags for vpavgw_ymm_ymm_ymm: { avx2 }
flags for vpblendd_xmm_xmm_m128_imm8: { avx2 }
flags for vpblendd_xmm_xmm_xmm_imm8: { avx2 }
flags for vpblendd_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendd_ymm_ymm_ymm_imm8: { avx2 }
flags for vpblendvb_xmm_xmm_m128_xmm: { avx }
flags for vpblendvb_xmm_xmm_xmm_xmm: { avx }
flags for vpblendvb_ymm_ymm_m256_ymm: { avx2 }
flags for vpblendvb_ymm_ymm_ymm_ymm: { avx2 }
flags for vpblendw_xmm_xmm_m128_imm8: { avx }
flags for vpblendw_xmm_xmm_xmm_imm8: { avx }
flags for vpblendw_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendw_ymm_ymm_ymm_imm8: { avx2 }
flags for vpbroadcastb_xmm_m8: { avx2 }
flags for vpbroadcastb_xmm_xmm: { avx2 }
flags for vpbroadcastb_ymm_m8: { avx2 }
flags for vpbroadcastb_ymm_xmm: { avx2 }
flags for vpbroadcastd_xmm_m32: { avx2 }
flags for vpbroadcastd_xmm_xmm: { avx2 }
flags for vpbroadcastd_ymm_m32: { avx2 }
flags for vpbroadcastd_ymm_xmm: { avx2 }
flags for vpbroadcastq_xmm_m64: { avx2 }
flags for vpbroadcastq_xmm_xmm: { avx2 }
flags for vpbroadcastq_ymm_m64: { avx2 }
flags for vpbroadcastq_ymm_xmm: { avx2 }
flags for vpbroadcastw_xmm_m16: { avx2 }
flags for vpbroadcastw_xmm_xmm: { avx2 }
flags for vpbroadcastw_ymm_m16: { avx2 }
flags for vpbroadcastw_ymm_xmm: { avx2 }
flags for vpclmulqdq_xmm_xmm_m128_imm8: { pclmulqdq avx }
flags for vpclmulqdq_xmm_xmm_xmm_imm8: { pclmulqdq avx }
flags for vpcmpeqb_xmm_xmm_m128: { avx }
flags for vpcmpeqb_xmm_xmm_xmm: { avx }
flags for vpcmpeqb_ymm_ymm_m256: { avx2 }
flags for vpcmpeqb_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqd_xmm_xmm_m128: { avx }
flags for vpcmpeqd_xmm_xmm_xmm: { avx }
flags for vpcmpeqd_ymm_ymm_m256: { avx2 }
flags for vpcmpeqd_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqq_xmm_xmm_m128: { avx }
flags for vpcmpeqq_xmm_xmm_xmm: { avx }
flags for vpcmpeqq_ymm_ymm_m256: { avx2 }
flags for vpcmpeqq_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqw_xmm_xmm_m128: { avx }
flags for vpcmpeqw_xmm_xmm_xmm: { avx }
flags for vpcmpeqw_ymm_ymm_m256: { avx2 }
flags for vpcmpeqw_ymm_ymm_ymm: { avx2 }
flags for vpcmpestri_xmm_m128_imm8: { avx }
flags for vpcmpestri_xmm_xmm_imm8: { avx }
flags for vpcmpestrm_xmm_m128_imm8: { avx }
flags for vpcmpestrm_xmm_xmm_imm8: { avx }
flags for vpcmpgtb_xmm_xmm_m128: { avx }
flags for vpcmpgtb_xmm_xmm_xmm: { avx }
flags for vpcmpgtb_ymm_ymm_m256: { avx }
flags for vpcmpgtb_ymm_ymm_ymm: { avx }
flags for vpcmpgtd_xmm_xmm_m128: { avx }
flags for vpcmpgtd_xmm_xmm_xmm: { avx }
flags for vpcmpgtd_ymm_ymm_m256: { avx2 }
flags for vpcmpgtd_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtq_xmm_xmm_m128: { avx }
flags for vpcmpgtq_xmm_xmm_xmm: { avx }
flags for vpvmpgtq_ymm_ymm_m256: { avx2 }
flags for vpvmpgtq_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtw_xmm_xmm_m128: { avx }
flags for vpcmpgtw_xmm_xmm_xmm: { avx }
flags for vpcmpgtw_ymm_ymm_m256: { avx2 }
flags for vpcmpgtw_ymm_ymm_ymm: { avx2 }
flags for vpcmpistri_xmm_m128_imm8: { avx }
flags for vpcmpistri_xmm_xmm_imm8: { avx }
flags for vpcmpistrm_xmm_m128_imm8: { avx }
flags for vpcmpistrm_xmm_xmm_imm8: { avx }
flags for vperm2f128_ymm_ymm_m256_imm8: { avx }
flags for vperm2f128_ymm_ymm_ymm_imm8: { avx }
flags for vperm2i128_ymm_ymm_m256_imm8: { avx2 }
flags for vperm2i128_ymm_ymm_ymm_imm8: { avx2 }
flags for vpermd_ymm_ymm_m256: { avx2 }
flags for vpermd_ymm_ymm_ymm: { avx2 }
flags for vpermilpd_xmm_m128_imm8: { avx }
flags for vpermilpd_xmm_xmm_imm8: { avx }
flags for vpermilpd_xmm_xmm_m128: { avx }
flags for vpermilpd_xmm_xmm_xmm: { avx }
flags for vpermilpd_ymm_m256_imm8: { avx }
flags for vpermilpd_ymm_ymm_imm8: { avx }
flags for vpermilpd_ymm_ymm_m256: { avx }
flags for vpermilpd_ymm_ymm_ymm: { avx }
flags for vpermilps_xmm_m128_imm8: { avx }
flags for vpermilps_xmm_xmm_imm8: { avx }
flags for vpermilps_xmm_xmm_m128: { avx }
flags for vpermilps_xmm_xmm_xmm: { avx }
flags for vpermilps_ymm_m256_imm8: { avx }
flags for vpermilps_ymm_ymm_imm8: { avx }
flags for vpermilps_ymm_ymm_m256: { avx }
flags for vpermilps_ymm_ymm_ymm: { avx }
flags for vpermpd_ymm_m256_imm8: { avx2 }
flags for vpermpd_ymm_ymm_imm8: { avx2 }
flags for vpermps_ymm_ymm_m256: { avx2 }
flags for vpermps_ymm_ymm_ymm: { avx2 }
flags for vpermq_ymm_m256_imm8: { avx2 }
flags for vpermq_ymm_ymm_imm8: { avx2 }
flags for vpextrb_m8_xmm_imm8: { avx }
flags for vpextrb_r32_xmm_imm8: { avx }
flags for vpextrb_r64_xmm_imm8: { avx }
flags for vpextrd_m32_xmm_imm8: { avx }
flags for vpextrd_r32_xmm_imm8: { avx }
flags for vpextrq_m64_xmm_imm8: { avx }
flags for vpextrq_r64_xmm_imm8: { avx }
flags for vpextrw_m16_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8_1: { avx }
flags for vpextrw_r64_xmm_imm8: { avx }
flags for vpextrw_r64_xmm_imm8_1: { avx }
flags for vpgatherdd_xmm_m32_xmm: { avx2 }
flags for vpgatherdd_ymm_m32_ymm: { avx2 }
flags for vpgatherdq_xmm_m32_xmm: { avx2 }
flags for vpgatherdq_ymm_m32_ymm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm_1: { avx2 }
flags for vpgatherqq_xmm_m64_xmm: { avx2 }
flags for vpgatherqq_ymm_m64_ymm: { avx2 }
flags for vphaddd_xmm_xmm_m128: { avx }
flags for vphaddd_xmm_xmm_xmm: { avx }
flags for vphaddd_ymm_ymm_m256: { avx2 }
flags for vphaddd_ymm_ymm_ymm: { avx2 }
flags for vphaddsw_xmm_xmm_m128: { avx }
flags for vphaddsw_xmm_xmm_xmm: { avx }
flags for vphaddsw_ymm_ymm_m256: { avx2 }
flags for vphaddsw_ymm_ymm_ymm: { avx2 }
flags for vphaddw_xmm_xmm_m128: { avx }
flags for vphaddw_xmm_xmm_xmm: { avx }
flags for vphaddw_ymm_ymm_m256: { avx2 }
flags for vphaddw_ymm_ymm_ymm: { avx2 }
flags for vphminposuw_xmm_m128: { avx }
flags for vphminposuw_xmm_xmm: { avx }
flags for vphsubd_xmm_xmm_m128: { avx }
flags for vphsubd_xmm_xmm_xmm: { avx }
flags for vphsubd_ymm_ymm_m256: { avx2 }
flags for vphsubd_ymm_ymm_ymm: { avx2 }
flags for vphsubsw_xmm_xmm_m128: { avx }
flags for vphsubsw_xmm_xmm_xmm: { avx }
flags for vphsubsw_ymm_ymm_m256: { avx2 }
flags for vphsubsw_ymm_ymm_ymm: { avx2 }
flags for vphsubw_xmm_xmm_m128: { avx }
flags for vphsubw_xmm_xmm_xmm: { avx }
flags for vphsubw_ymm_ymm_m256: { avx2 }
flags for vphsubw_ymm_ymm_ymm: { avx2 }
flags for vpinsrb_xmm_xmm_m8_imm8: { avx }
flags for vpinsrb_xmm_xmm_r32_imm8: { avx }
flags for vpinsrd_xmm_xmm_m32_imm8: { avx }
flags for vpinsrd_xmm_xmm_r32_imm8: { avx }
flags for vpinsrq_xmm_xmm_m64_imm8: { avx }
flags for vpinsrq_xmm_xmm_r64_imm8: { avx }
flags for vpinsrw_xmm_xmm_m16_imm8: { avx }
flags for vpinsrw_xmm_xmm_r32_imm8: { avx }
flags for vpmaddubsw_xmm_xmm_m128: { avx }
flags for vpmaddubsw_xmm_xmm_xmm: { avx }
flags for vpmaddubsw_ymm_ymm_m256: { avx2 }
flags for vpmaddubsw_ymm_ymm_ymm: { avx2 }
flags for vpmaddwd_xmm_xmm_m128: { avx }
flags for vpmaddwd_xmm_xmm_xmm: { avx }
flags for vpmaddwd_ymm_ymm_m256: { avx2 }
flags for vpmaddwd_ymm_ymm_ymm: { avx2 }
flags for vpmaskmovd_m128_xmm_xmm: { avx2 }
flags for vpmaskmovd_m256_ymm_ymm: { avx2 }
flags for vpmaskmovd_xmm_xmm_m128: { avx2 }
flags for vpmaskmovd_ymm_ymm_m256: { avx2 }
flags for vpmaskmovq_m128_xmm_xmm: { avx2 }
flags for vpmaskmovq_m256_ymm_ymm: { avx2 }
flags for vpmaskmovq_xmm_xmm_m128: { avx2 }
flags for vpmaskmovq_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_xmm_xmm_m128: { avx }
flags for vpmaxsb_xmm_xmm_xmm: { avx }
flags for vpmaxsb_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_ymm_ymm_ymm: { avx2 }
flags for vpmaxsd_xmm_xmm_m128: { avx }
flags for vpmaxsd_xmm_xmm_xmm: { avx }
flags for vpmaxsd_ymm_ymm_m256: { avx2 }
flags for vpmaxsd_ymm_ymm_ymm: { avx2 }
flags for vpmaxsw_xmm_xmm_m128: { avx }
flags for vpmaxsw_xmm_xmm_xmm: { avx }
flags for vpmaxsw_ymm_ymm_m256: { avx2 }
flags for vpmaxsw_ymm_ymm_ymm: { avx2 }
flags for vpmaxub_xmm_xmm_m128: { avx }
flags for vpmaxub_xmm_xmm_xmm: { avx }
flags for vpmaxub_ymm_ymm_m256: { avx2 }
flags for vpmaxub_ymm_ymm_ymm: { avx2 }
flags for vpmaxud_xmm_xmm_m128: { avx }
flags for vpmaxud_xmm_xmm_xmm: { avx }
flags for vpmaxud_ymm_ymm_m256: { avx2 }
flags for vpmaxud_ymm_ymm_ymm: { avx2 }
flags for vpmaxuw_xmm_xmm_m128: { avx }
flags for vpmaxuw_xmm_xmm_xmm: { avx }
flags for vpmaxuw_ymm_ymm_m256: { avx2 }
flags for vpmaxuw_ymm_ymm_ymm: { avx2 }
flags for vpminsb_xmm_xmm_m128: { avx }
flags for vpminsb_xmm_xmm_xmm: { avx }
flags for vpminsb_ymm_ymm_m256: { avx2 }
flags for vpminsb_ymm_ymm_ymm: { avx2 }
flags for vpminsd_xmm_xmm_m128: { avx }
flags for vpminsd_xmm_xmm_xmm: { avx }
flags for vpminsd_ymm_ymm_m256: { avx2 }
flags for vpminsd_ymm_ymm_ymm: { avx2 }
flags for vpminsw_xmm_xmm_m128: { avx }
flags for vpminsw_xmm_xmm_xmm: { avx }
flags for vpminub_xmm_xmm_m128: { avx }
flags for vpminub_xmm_xmm_xmm: { avx }
flags for vpminub_ymm_ymm_m256: { avx2 }
flags for vpminub_ymm_ymm_ymm: { avx2 }
flags for vpminud_xmm_xmm_m128: { avx }
flags for vpminud_xmm_xmm_xmm: { avx }
flags for vpminud_ymm_ymm_m256: { avx2 }
flags for vpminud_ymm_ymm_ymm: { avx2 }
flags for vpminuw_xmm_xmm_m128: { avx }
flags for vpminuw_xmm_xmm_xmm: { avx }
flags for vpminuw_ymm_ymm_m256: { avx2 }
flags for vpminuw_ymm_ymm_ymm: { avx2 }
flags for vpmovmskb_r32_xmm: { avx }
flags for vpmovmskb_r32_ymm: { avx2 }
flags for vpmovmskb_r64_xmm: { avx }
flags for vpmovmskb_r64_ymm: { avx2 }
flags for vpmovsxbd_xmm_m32: { avx }
flags for vpmovsxbd_xmm_xmm: { avx }
flags for vpmovsxbd_ymm_m64: { avx2 }
flags for vpmovsxbd_ymm_xmm: { avx2 }
flags for vpmovsxbq_xmm_m16: { avx }
flags for vpmovsxbq_xmm_xmm: { avx }
flags for vpmovsxbq_ymm_m32: { avx2 }
flags for vpmovsxbq_ymm_xmm: { avx2 }
flags for vpmovsxbw_xmm_m64: { avx }
flags for vpmovsxbw_xmm_xmm: { avx }
flags for vpmovsxbw_ymm_m128: { avx2 }
flags for vpmovsxbw_ymm_xmm: { avx2 }
flags for vpmovsxdq_xmm_m64: { avx }
flags for vpmovsxdq_xmm_xmm: { avx }
flags for vpmovsxdq_ymm_m128: { avx2 }
flags for vpmovsxdq_ymm_xmm: { avx2 }
flags for vpmovsxwd_xmm_m64: { avx }
flags for vpmovsxwd_xmm_xmm: { avx }
flags for vpmovsxwd_ymm_m128: { avx2 }
flags for vpmovsxwd_ymm_xmm: { avx2 }
flags for vpmovsxwq_xmm_m32: { avx }
flags for vpmovsxwq_xmm_xmm: { avx }
flags for vpmovsxwq_ymm_m64: { avx2 }
flags for vpmovsxwq_ymm_xmm: { avx2 }
flags for vpmovzxbd_xmm_m32: { avx }
flags for vpmovzxbd_xmm_xmm: { avx }
flags for vpmovzxbd_ymm_m64: { avx2 }
flags for vpmovzxbd_ymm_xmm: { avx2 }
flags for vpmovzxbq_xmm_m16: { avx }
flags for vpmovzxbq_xmm_xmm: { avx }
flags for vpmovzxbq_ymm_m32: { avx2 }
flags for vpmovzxbq_ymm_xmm: { avx2 }
flags for vpmovzxbw_xmm_m64: { avx }
flags for vpmovzxbw_xmm_xmm: { avx }
flags for vpmovzxbw_ymm_m128: { avx2 }
flags for vpmovzxbw_ymm_xmm: { avx2 }
flags for vpmovzxdq_xmm_m64: { avx }
flags for vpmovzxdq_xmm_xmm: { avx }
flags for vpmovzxdq_ymm_m128: { avx2 }
flags for vpmovzxdq_ymm_xmm: { avx2 }
flags for vpmovzxwd_xmm_m64: { avx }
flags for vpmovzxwd_xmm_xmm: { avx }
flags for vpmovzxwd_ymm_m128: { avx2 }
flags for vpmovzxwd_ymm_xmm: { avx2 }
flags for vpmovzxwq_xmm_m32: { avx }
flags for vpmovzxwq_xmm_xmm: { avx }
flags for vpmovzxwq_ymm_m64: { avx2 }
flags for vpmovzxwq_ymm_xmm: { avx2 }
flags for vpmuldq_xmm_xmm_m128: { avx }
flags for vpmuldq_xmm_xmm_xmm: { avx }
flags for vpmuldq_ymm_ymm_m256: { avx2 }
flags for vpmuldq_ymm_ymm_ymm: { avx2 }
flags for vpmulhrsw_xmm_xmm_m128: { avx }
flags for vpmulhrsw_xmm_xmm_xmm: { avx }
flags for vpmulhrsw_ymm_ymm_m256: { avx2 }
flags for vpmulhrsw_ymm_ymm_ymm: { avx2 }
flags for vpmulhuw_xmm_xmm_m128: { avx }
flags for vpmulhuw_xmm_xmm_xmm: { avx }
flags for vpmulhuw_ymm_ymm_m256: { avx2 }
flags for vpmulhuw_ymm_ymm_ymm: { avx2 }
flags for vpmulhw_xmm_xmm_m128: { avx }
flags for vpmulhw_xmm_xmm_xmm: { avx }
flags for vpmulhw_ymm_ymm_m256: { avx2 }
flags for vpmulhw_ymm_ymm_ymm: { avx2 }
flags for vpmulld_xmm_xmm_m128: { avx }
flags for vpmulld_xmm_xmm_xmm: { avx }
flags for vpmulld_ymm_ymm_m256: { avx2 }
flags for vpmulld_ymm_ymm_ymm: { avx2 }
flags for vpmullw_xmm_xmm_m128: { avx }
flags for vpmullw_xmm_xmm_xmm: { avx }
flags for vpmullw_ymm_ymm_m256: { avx2 }
flags for vpmullw_ymm_ymm_ymm: { avx2 }
flags for vpmuludq_xmm_xmm_m128: { avx }
flags for vpmuludq_xmm_xmm_xmm: { avx }
flags for vpmuludq_ymm_ymm_m256: { avx2 }
flags for vpmuludq_ymm_ymm_ymm: { avx2 }
flags for vpor_xmm_xmm_m128: { avx }
flags for vpor_xmm_xmm_xmm: { avx }
flags for vpor_ymm_ymm_m256: { avx2 }
flags for vpor_ymm_ymm_ymm: { avx2 }
flags for vpsadbw_xmm_xmm_m128: { avx }
flags for vpsadbw_xmm_xmm_xmm: { avx }
flags for vpsadbw_ymm_ymm_m256: { avx2 }
flags for vpsadbw_ymm_ymm_ymm: { avx2 }
flags for vpshufb_xmm_xmm_m128: { avx }
flags for vpshufb_xmm_xmm_xmm: { avx }
flags for vpshufb_ymm_ymm_m256: { avx2 }
flags for vpshufb_ymm_ymm_ymm: { avx2 }
flags for vpshufd_xmm_m128_imm8: { avx }
flags for vpshufd_xmm_xmm_imm8: { avx }
flags for vpshufd_ymm_m256_imm8: { avx2 }
flags for vpshufd_ymm_ymm_imm8: { avx2 }
flags for vpshufhw_xmm_m128_imm8: { avx }
flags for vpshufhw_xmm_xmm_imm8: { avx }
flags for vpshufhw_ymm_m256_imm8: { avx2 }
flags for vpshufhw_ymm_ymm_imm8: { avx2 }
flags for vpshuflw_xmm_m128_imm8: { avx }
flags for vpshuflw_xmm_xmm_imm8: { avx }
flags for vpshuflw_ymm_m256_imm8: { avx2 }
flags for vpshuflw_ymm_ymm_imm8: { avx2 }
flags for vpsignb_xmm_xmm_m128: { avx }
flags for vpsignb_xmm_xmm_xmm: { avx }
flags for vpsignd_xmm_xmm_m128: { avx }
flags for vpsignd_xmm_xmm_xmm: { avx }
flags for vpsignw_xmm_xmm_m128: { avx }
flags for vpsignw_xmm_xmm_xmm: { avx }
flags for vpslld_xmm_xmm_imm8: { avx }
flags for vpslld_xmm_xmm_m128: { avx }
flags for vpslld_xmm_xmm_xmm: { avx }
flags for vpslld_ymm_ymm_imm8: { avx2 }
flags for vpslld_ymm_ymm_m128: { avx2 }
flags for vpslld_ymm_ymm_xmm: { avx2 }
flags for vpslldq_xmm_xmm_imm8: { avx }
flags for vpslldq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_xmm_xmm_imm8: { avx }
flags for vpsllq_xmm_xmm_m128: { avx }
flags for vpsllq_xmm_xmm_xmm: { avx }
flags for vpsllq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_ymm_ymm_m128: { avx2 }
flags for vpsllq_ymm_ymm_xmm: { avx2 }
flags for vpsllvd_xmm_xmm_m128: { avx2 }
flags for vpsllvd_xmm_xmm_xmm: { avx2 }
flags for vpsllvd_ymm_ymm_m256: { avx2 }
flags for vpsllvd_ymm_ymm_ymm: { avx2 }
flags for vpsllvq_xmm_xmm_m128: { avx2 }
flags for vpsllvq_xmm_xmm_xmm: { avx2 }
flags for vpsllvq_ymm_ymm_m256: { avx2 }
flags for vpsllvq_ymm_ymm_ymm: { avx2 }
flags for vpsllw_xmm_xmm_imm8: { avx }
flags for vpsllw_xmm_xmm_m128: { avx }
flags for vpsllw_xmm_xmm_xmm: { avx }
flags for vpsllw_ymm_ymm_imm8: { avx2 }
flags for vpsllw_ymm_ymm_m128: { avx2 }
flags for vpsllw_ymm_ymm_xmm: { avx2 }
flags for vpsrad_xmm_xmm_imm8: { avx }
flags for vpsrad_xmm_xmm_m128: { avx }
flags for vpsrad_xmm_xmm_xmm: { avx }
flags for vpsrad_ymm_ymm_imm8: { avx2 }
flags for vpsrad_ymm_ymm_m128: { avx2 }
flags for vpsrad_ymm_ymm_xmm: { avx2 }
flags for vpsravd_xmm_xmm_m128: { avx2 }
flags for vpsravd_xmm_xmm_xmm: { avx2 }
flags for vpsravd_ymm_ymm_m256: { avx2 }
flags for vpsravd_ymm_ymm_ymm: { avx2 }
flags for vpsraw_xmm_xmm_imm8: { avx }
flags for vpsraw_xmm_xmm_m128: { avx }
flags for vpsraw_xmm_xmm_xmm: { avx }
flags for vpsraw_ymm_ymm_imm8: { avx2 }
flags for vpsraw_ymm_ymm_m128: { avx2 }
flags for vpsraw_ymm_ymm_xmm: { avx2 }
flags for vpsrld_xmm_xmm_imm8: { avx }
flags for vpsrld_xmm_xmm_m128: { avx }
flags for vpsrld_xmm_xmm_xmm: { avx }
flags for vpsrld_ymm_ymm_imm8: { avx2 }
flags for vpsrld_ymm_ymm_m128: { avx2 }
flags for vpsrld_ymm_ymm_xmm: { avx2 }
flags for vpsrldq_xmm_xmm_imm8: { avx }
flags for vpsrldq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_xmm_xmm_imm8: { avx }
flags for vpsrlq_xmm_xmm_m128: { avx }
flags for vpsrlq_xmm_xmm_xmm: { avx }
flags for vpsrlq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_ymm_ymm_m128: { avx2 }
flags for vpsrlq_ymm_ymm_xmm: { avx2 }
flags for vpsrlvd_xmm_xmm_m128: { avx2 }
flags for vpsrlvd_xmm_xmm_xmm: { avx2 }
flags for vpsrlvd_ymm_ymm_m256: { avx2 }
flags for vpsrlvd_ymm_ymm_ymm: { avx2 }
flags for vpsrlvq_xmm_xmm_m128: { avx2 }
flags for vpsrlvq_xmm_xmm_xmm: { avx2 }
flags for vpsrlvq_ymm_ymm_m256: { avx2 }
flags for vpsrlvq_ymm_ymm_ymm: { avx2 }
flags for vpsrlw_xmm_xmm_imm8: { avx }
flags for vpsrlw_xmm_xmm_m128: { avx }
flags for vpsrlw_xmm_xmm_xmm: { avx }
flags for vpsrlw_ymm_ymm_imm8: { avx2 }
flags for vpsrlw_ymm_ymm_m128: { avx2 }
flags for vpsrlw_ymm_ymm_xmm: { avx2 }
flags for vpsubb_xmm_xmm_m128: { avx }
flags for vpsubb_xmm_xmm_xmm: { avx }
flags for vpsubb_ymm_ymm_m256: { avx2 }
flags for vpsubb_ymm_ymm_ymm: { avx2 }
flags for vpsubd_xmm_xmm_m128: { avx }
flags for vpsubd_xmm_xmm_xmm: { avx }
flags for vpsubd_ymm_ymm_m256: { avx2 }
flags for vpsubd_ymm_ymm_ymm: { avx2 }
flags for vpsubq_xmm_xmm_m128: { avx }
flags for vpsubq_xmm_xmm_xmm: { avx }
flags for vpsubq_ymm_ymm_m256: { avx2 }
flags for vpsubq_ymm_ymm_ymm: { avx2 }
flags for vpsubsb_xmm_xmm_m128: { avx }
flags for vpsubsb_xmm_xmm_xmm: { avx }
flags for vpsubsb_ymm_ymm_m256: { avx2 }
flags for vpsubsb_ymm_ymm_ymm: { avx2 }
flags for vpsubsw_xmm_xmm_m128: { avx }
flags for vpsubsw_xmm_xmm_xmm: { avx }
flags for vpsubsw_ymm_ymm_m256: { avx2 }
flags for vpsubsw_ymm_ymm_ymm: { avx2 }
flags for vpsubusb_xmm_xmm_m128: { avx }
flags for vpsubusb_xmm_xmm_xmm: { avx }
flags for vpsubusb_ymm_ymm_m256: { avx2 }
flags for vpsubusb_ymm_ymm_ymm: { avx2 }
flags for vpsubusw_xmm_xmm_m128: { avx }
flags for vpsubusw_xmm_xmm_xmm: { avx }
flags for vpsubusw_ymm_ymm_m256: { avx2 }
flags for vpsubusw_ymm_ymm_ymm: { avx2 }
flags for vpsubw_xmm_xmm_m128: { avx }
flags for vpsubw_xmm_xmm_xmm: { avx }
flags for vpsubw_ymm_ymm_m256: { avx2 }
flags for vpsubw_ymm_ymm_ymm: { avx2 }
flags for vptest_xmm_m128: { avx }
flags for vptest_xmm_xmm: { avx }
flags for vptest_ymm_m256: { avx }
flags for vptest_ymm_ymm: { avx }
flags for vpunpckhbw_xmm_xmm_m128: { avx }
flags for vpunpckhbw_xmm_xmm_xmm: { avx }
flags for vpunpckhbw_ymm_ymm_m256: { avx2 }
flags for vpunpckhbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckhdq_xmm_xmm_m128: { avx }
flags for vpunpckhdq_xmm_xmm_xmm: { avx }
flags for vpunpckhdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhqdq_xmm_xmm_m128: { avx }
flags for vpunpckhqdq_xmm_xmm_xmm: { avx }
flags for vpunpckhqdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhwd_xmm_xmm_m128: { avx }
flags for vpunpckhwd_xmm_xmm_xmm: { avx }
flags for vpunpckhwd_ymm_ymm_m256: { avx2 }
flags for vpunpckhwd_ymm_ymm_ymm: { avx2 }
flags for vpunpcklbw_xmm_xmm_m128: { avx }
flags for vpunpcklbw_xmm_xmm_xmm: { avx }
flags for vpunpcklbw_ymm_ymm_m256: { avx2 }
flags for vpunpcklbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckldq_xmm_xmm_m128: { avx }
flags for vpunpckldq_xmm_xmm_xmm: { avx }
flags for vpunpckldq_ymm_ymm_m256: { avx2 }
flags for vpunpckldq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklqdq_xmm_xmm_m128: { avx }
flags for vpunpcklqdq_xmm_xmm_xmm: { avx }
flags for vpunpcklqdq_ymm_ymm_m256: { avx2 }
flags for vpunpcklqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklwd_xmm_xmm_m128: { avx }
flags for vpunpcklwd_xmm_xmm_xmm: { avx }
flags for vpunpcklwd_ymm_ymm_m256: { avx2 }
flags for vpunpcklwd_ymm_ymm_ymm: { avx2 }
flags for vpxor_xmm_xmm_m128: { avx }
flags for vpxor_xmm_xmm_xmm: { avx }
flags for vpxor_ymm_ymm_m256: { avx2 }
flags for vpxor_ymm_ymm_ymm: { avx2 }
flags for vrcpps_xmm_m128: { avx }
flags for vrcpps_xmm_xmm: { avx }
flags for vrcpps_ymm_m256: { avx }
flags for vrcpps_ymm_ymm: { avx }
flags for vrcpss_xmm_xmm_m32: { avx }
flags for vrcpss_xmm_xmm_xmm: { avx }
flags for vroundpd_xmm_m128_imm8: { avx }
flags for vroundpd_xmm_xmm_imm8: { avx }
flags for vroundpd_ymm_m256_imm8: { avx }
flags for vroundpd_ymm_ymm_imm8: { avx }
flags for vroundps_xmm_m128_imm8: { avx }
flags for vroundps_xmm_xmm_imm8: { avx }
flags for vroundps_ymm_m256_imm8: { avx }
flags for vroundps_ymm_ymm_imm8: { avx }
flags for vroundsd_xmm_xmm_m64_imm8: { avx }
flags for vroundsd_xmm_xmm_xmm_imm8: { avx }
flags for vroundss_xmm_xmm_m32_imm8: { avx }
flags for vroundss_xmm_xmm_xmm_imm8: { avx }
flags for vrsqrtps_xmm_m128: { avx }
flags for vrsqrtps_xmm_xmm: { avx }
flags for vrsqrtps_ymm_m256: { avx }
flags for vrsqrtps_ymm_ymm: { avx }
flags for vrsqrtss_xmm_xmm_m32: { avx }
flags for vrsqrtss_xmm_xmm_xmm: { avx }
flags for vshufpd_xmm_xmm_m128_imm8: { avx }
flags for vshufpd_xmm_xmm_xmm_imm8: { avx }
flags for vshufpd_ymm_ymm_m256_imm8: { avx }
flags for vshufpd_ymm_ymm_ymm_imm8: { avx }
flags for vshufps_xmm_xmm_m128_imm8: { avx }
flags for vshufps_xmm_xmm_xmm_imm8: { avx }
flags for vshufps_ymm_ymm_m256_imm8: { avx }
flags for vshufps_ymm_ymm_ymm_imm8: { avx }
flags for vsqrtpd_xmm_m128: { avx }
flags for vsqrtpd_xmm_xmm: { avx }
flags for vsqrtpd_ymm_m256: { avx }
flags for vsqrtpd_ymm_ymm: { avx }
flags for vsqrtps_xmm_m128: { avx }
flags for vsqrtps_xmm_xmm: { avx }
flags for vsqrtps_ymm_m256: { avx }
flags for vsqrtps_ymm_ymm: { avx }
flags for vsqrtsd_xmm_xmm_m64: { avx }
flags for vsqrtsd_xmm_xmm_xmm: { avx }
flags for vsqrtss_xmm_xmm_m32: { avx }
flags for vsqrtss_xmm_xmm_xmm: { avx }
flags for vsubpd_xmm_xmm_m128: { avx }
flags for vsubpd_xmm_xmm_xmm: { avx }
flags for vsubpd_ymm_ymm_m256: { avx }
flags for vsubpd_ymm_ymm_ymm: { avx }
flags for vsubps_xmm_xmm_m128: { avx }
flags for vsubps_xmm_xmm_xmm: { avx }
flags for vsubps_ymm_ymm_m256: { avx }
flags for vsubps_ymm_ymm_ymm: { avx }
flags for vsubsd_xmm_xmm_m64: { avx }
flags for vsubsd_xmm_xmm_xmm: { avx }
flags for vsubss_xmm_xmm_m32: { avx }
flags for vsubss_xmm_xmm_xmm: { avx }
flags for vtestpd_xmm_m128: { avx }
flags for vtestpd_xmm_xmm: { avx }
flags for vtestpd_ymm_m256: { avx }
flags for vtestpd_ymm_ymm: { avx }
flags for vtestps_xmm_m128: { avx }
flags for vtestps_xmm_xmm: { avx }
flags for vtestps_ymm_m256: { avx }
flags for vtestps_ymm_ymm: { avx }
flags for vucomisd_xmm_m64: { avx }
flags for vucomisd_xmm_xmm: { avx }
flags for vucomiss_xmm_m32: { avx }
flags for vucomiss_xmm_xmm: { avx }
flags for vunpckhpd_xmm_xmm_m128: { avx }
flags for vunpckhpd_xmm_xmm_xmm: { avx }
flags for vunpckhpd_ymm_ymm_m256: { avx }
flags for vunpckhpd_ymm_ymm_ymm: { avx }
flags for vunpckhps_xmm_xmm_m128: { avx }
flags for vunpckhps_xmm_xmm_xmm: { avx }
flags for vunpckhps_ymm_ymm_m256: { avx }
flags for vunpckhps_ymm_ymm_ymm: { avx }
flags for vunpcklpd_xmm_xmm_m128: { avx }
flags for vunpcklpd_xmm_xmm_xmm: { avx }
flags for vunpcklpd_ymm_ymm_m256: { avx }
flags for vunpcklpd_ymm_ymm_ymm: { avx }
flags for vunpcklps_xmm_xmm_m128: { avx }
flags for vunpcklps_xmm_xmm_xmm: { avx }
flags for vunpcklps_ymm_ymm_m256: { avx }
flags for vunpcklps_ymm_ymm_ymm: { avx }
flags for vxorpd_xmm_xmm_m128: { avx }
flags for vxorpd_xmm_xmm_xmm: { avx }
flags for vxorpd_ymm_ymm_m256: { avx }
flags for vxorpd_ymm_ymm_ymm: { avx }
flags for vxorps_xmm_xmm_m128: { avx }
flags for vxorps_xmm_xmm_xmm: { avx }
flags for vxorps_ymm_ymm_m256: { avx }
flags for vxorps_ymm_ymm_ymm: { avx }
flags for vzeroall: { avx }
flags for vzeroupper: { avx }
flags for wait: { fpu }
flags for xabort_imm8: { rtm }
flags for xacquire: { hle }
flags for xbegin_label: { rtm }
flags for xend: { rtm }
flags for xlat_m8: { }
flags for xlatb: { }
flags for xorb_al_imm8: { }
flags for xorw_ax_imm16: { }
flags for xorl_eax_imm32: { }
flags for xorw_m16_imm16: { }
flags for xorw_m16_imm8: { }
flags for xorw_m16_r16: { }
flags for xorl_m32_imm32: { }
flags for xorl_m32_imm8: { }
flags for xorl_m32_r32: { }
flags for xorq_m64_imm32: { }
flags for xorq_m64_imm8: { }
flags for xorq_m64_r64: { }
flags for xorb_m8_imm8: { }
flags for xorb_m8_r8: { }
flags for xorb_m8_rh: { }
flags for xorw_r16_imm16: { }
flags for xorw_r16_imm8: { }
flags for xorw_r16_m16: { }
flags for xorw_r16_r16: { }
flags for xorw_r16_r16_1: { }
flags for xorl_r32_imm32: { }
flags for xorl_r32_imm8: { }
flags for xorl_r32_m32: { }
flags for xorl_r32_r32: { }
flags for xorl_r32_r32_1: { }
flags for xorq_r64_imm32: { }
flags for xorq_r64_imm8: { }
flags for xorq_r64_m64: { }
flags for xorq_r64_r64: { }
flags for xorq_r64_r64_1: { }
flags for xorb_r8_imm8: { }
flags for xorb_r8_m8: { }
flags for xorb_r8_r8: { }
flags for xorb_r8_r8_1: { }
flags for xorb_r8_rh: { }
flags for xorb_r8_rh_1: { }
flags for xorq_rax_imm32: { }
flags for xorb_rh_imm8: { }
flags for xorb_rh_m8: { }
flags for xorb_rh_r8: { }
flags for xorb_rh_r8_1: { }
flags for xorb_rh_rh: { }
flags for xorb_rh_rh_1: { }
flags for xorpd_xmm_m128: { sse2 }
flags for xorpd_xmm_xmm: { sse2 }
flags for xorps_xmm_m128: { sse }
flags for xorps_xmm_xmm: { sse }
flags for xrelease: { hle }
flags for xtest: { rtm }
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Running search (timeout is 500000 iterations):

Progress Update: 

Lowest Cost Discovered (406)                                                 Lowest Known Correct Cost (411)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x7   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  6     0x9   3      OPC=movq_r64_r64           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  addl %eax, %edi             #  7     0xc   2      OPC=addl_r32_r32           andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xe   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  andl $0x3, %edi             #  9     0xf   3      OPC=andl_r32_imm8          movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  jne .L_126860               #  10    0x12  6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  orl %esp, %esi              #  11    0x18  2      OPC=orl_r32_r32            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x1a  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl %r8d, %esi             #  13    0x1e  3      OPC=movl_r32_r32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  leal -0x1010101(%r8), %edi  #  14    0x21  7      OPC=leal_r32_m16           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  notl %esi                   #  15    0x28  2      OPC=notl_r32               andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  andl %edi, %esi             #  16    0x2a  2      OPC=andl_r32_r32           jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x2c  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2d  6      OPC=andl_r32_imm32         nop                         #  18    0x38  1      OPC=nop                  
  jne .L_126860               #  19    0x33  6      OPC=jne_label_1            nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x39  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x3a  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3b  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3c  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3d  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3e  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3f  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x40  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
.L_126820:                    #        0x41  0      OPC=<label>                movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  addl $0x4, %edx             #  28    0x41  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  movl %ecx, %ecx             #  29    0x44  2      OPC=movl_r32_r32           addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  30    0x46  4      OPC=movl_m32_r32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  31    0x4a  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %edx, %edx             #  32    0x4d  2      OPC=movl_r32_r32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  33    0x4f  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl %r8d, %r9d             #  34    0x53  3      OPC=movl_r32_r32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  leaq -0x1010101(%r8), %rsi  #  35    0x56  7      OPC=leaq_r64_m64           nop                         #  35    0x5f  1      OPC=nop                  
  notq %r9                    #  36    0x5d  3      OPC=notq_r64               andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  37    0x60  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x61  3      OPC=andl_r32_r32           je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  39    0x64  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x6b  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x71  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x72  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x73  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x74  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x75  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x76  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x77  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x78  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x79  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x7a  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7b  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7c  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7d  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7e  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7f  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x80  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x81  0      OPC=<label>                movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %edx, %edx             #  57    0x81  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movzbl (%r15,%rdx,1), %esi  #  58    0x83  5      OPC=movzbl_r32_m8          movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  59    0x88  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movl %ecx, %ecx             #  60    0x8b  2      OPC=movl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8d  4      OPC=movb_m8_r8             testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %ecx             #  62    0x91  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  testb %sil, %sil            #  63    0x94  3      OPC=testb_r8_r8            nop                         #  63    0x9c  1      OPC=nop                  
  jne .L_126860               #  64    0x97  6      OPC=jne_label_1            nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9d  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9e  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9f  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0xa0  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa1  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa2  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa3  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  popq %r11                   #  72    0xa4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  73    0xa6  4      OPC=andl_r32_imm8        .size strcpy, .-strcpy                                                       
  addq %r15, %r11             #  74    0xaa  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  75    0xad  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (297)                                                 Lowest Known Correct Cost (411)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x5   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  addl %eax, %edi             #  6     0xa   2      OPC=addl_r32_r32           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  jne .L_126860               #  9     0x10  6      OPC=jne_label_1            movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  orl %esp, %esi              #  10    0x16  2      OPC=orl_r32_r32            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x18  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl %r8d, %esi             #  12    0x1c  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  leal -0x1010101(%r8), %edi  #  13    0x1f  7      OPC=leal_r32_m16           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  notl %esi                   #  14    0x26  2      OPC=notl_r32               andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  andl %edi, %esi             #  15    0x28  2      OPC=andl_r32_r32           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x2a  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  17    0x2b  6      OPC=andl_r32_imm32         nop                         #  17    0x37  1      OPC=nop                  
  jne .L_126860               #  18    0x31  6      OPC=jne_label_1            nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x37  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x38  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x39  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x3f  0      OPC=<label>                addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  27    0x3f  3      OPC=addl_r32_imm8          movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  movl %ecx, %ecx             #  28    0x42  2      OPC=movl_r32_r32           movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)    #  29    0x44  4      OPC=movl_m32_r32           addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx             #  30    0x48  3      OPC=addl_r32_imm8          movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  31    0x4b  2      OPC=movl_r32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d    #  32    0x4d  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  33    0x51  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  leaq -0x1010101(%r8), %rsi  #  34    0x54  7      OPC=leaq_r64_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  notq %r9                    #  35    0x5b  3      OPC=notq_r64               nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  36    0x5e  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  andl %esi, %r9d             #  37    0x5f  3      OPC=andl_r32_r32           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl $0x80808080, %r9d      #  38    0x62  7      OPC=andl_r32_imm32         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  je .L_126820                #  39    0x69  6      OPC=je_label_1             nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
.L_126860:                    #        0x7e  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  movl %edx, %edx             #  55    0x7e  2      OPC=movl_r32_r32           movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  movzbl (%r15,%rdx,1), %esi  #  56    0x80  5      OPC=movzbl_r32_m8          movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  addl $0x1, %edx             #  57    0x85  3      OPC=addl_r32_imm8          addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  58    0x88  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  59    0x8a  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  addl $0x1, %ecx             #  60    0x8e  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  testb %sil, %sil            #  61    0x91  3      OPC=testb_r8_r8            testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  jne .L_126860               #  62    0x94  6      OPC=jne_label_1            jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  63    0x9a  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9b  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa0  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  popq %r11                   #  70    0xa1  2      OPC=popq_r64_1             addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  andl $0xe0, %r11d           #  71    0xa3  4      OPC=andl_r32_imm8          jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  addq %r15, %r11             #  72    0xa7  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  73    0xaa  3      OPC=jmpq_r64             .size strcpy, .-strcpy                                                       
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (296)                                                 Lowest Known Correct Cost (411)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x5   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  addl %eax, %edi             #  6     0xa   2      OPC=addl_r32_r32           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  jne .L_126860               #  9     0x10  6      OPC=jne_label_1            movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  orl %esp, %esi              #  10    0x16  2      OPC=orl_r32_r32            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x18  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl %r8d, %esi             #  12    0x1c  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  leal -0x1010101(%r8), %edi  #  13    0x1f  7      OPC=leal_r32_m16           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  notl %esi                   #  14    0x26  2      OPC=notl_r32               andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  andl %edi, %esi             #  15    0x28  2      OPC=andl_r32_r32           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x2a  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  17    0x2b  6      OPC=andl_r32_imm32         nop                         #  17    0x37  1      OPC=nop                  
  jne .L_126860               #  18    0x31  6      OPC=jne_label_1            nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x37  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x38  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x39  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x3f  0      OPC=<label>                addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  27    0x3f  3      OPC=addl_r32_imm8          movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  movl %ecx, %ecx             #  28    0x42  2      OPC=movl_r32_r32           movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)    #  29    0x44  4      OPC=movl_m32_r32           addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx             #  30    0x48  3      OPC=addl_r32_imm8          movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  31    0x4b  2      OPC=movl_r32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d    #  32    0x4d  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  33    0x51  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  leaq -0x1010101(%r8), %rsi  #  34    0x54  7      OPC=leaq_r64_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  notq %r9                    #  35    0x5b  3      OPC=notq_r64               nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  36    0x5e  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  andl %esi, %r9d             #  37    0x5f  3      OPC=andl_r32_r32           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl $0x80808080, %r9d      #  38    0x62  7      OPC=andl_r32_imm32         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  je .L_126820                #  39    0x69  6      OPC=je_label_1             nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nopl %eax                   #  53    0x7c  3      OPC=nopl_r32               nop                         #  53    0x7e  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  54    0x7f  1      OPC=nop                  
  movl %edx, %edx             #  54    0x7f  2      OPC=movl_r32_r32         .L_126860:                    #        0x80  0      OPC=<label>              
  movzbl (%r15,%rdx,1), %esi  #  55    0x81  5      OPC=movzbl_r32_m8          movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  56    0x86  3      OPC=addl_r32_imm8          movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %ecx, %ecx             #  57    0x89  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  58    0x8b  4      OPC=movb_m8_r8             movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  59    0x8f  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  60    0x92  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  jne .L_126860               #  61    0x95  6      OPC=jne_label_1            testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  62    0x9b  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  63    0x9c  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9d  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9e  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9f  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0xa0  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0xa1  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa2  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  popq %r11                   #  70    0xa3  2      OPC=popq_r64_1             addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  andl $0xe0, %r11d           #  71    0xa5  4      OPC=andl_r32_imm8          jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  addq %r15, %r11             #  72    0xa9  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  73    0xac  3      OPC=jmpq_r64             .size strcpy, .-strcpy                                                       
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (296)                                                 Lowest Known Correct Cost (296)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64         
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           nop                         #  2     0x3   1      OPC=nop                  
  nop                         #  3     0x5   1      OPC=nop                    movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    nop                         #  4     0x6   1      OPC=nop                  
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64         
  addl %eax, %edi             #  6     0xa   2      OPC=addl_r32_r32           nop                         #  6     0xa   1      OPC=nop                  
  nop                         #  7     0xc   1      OPC=nop                    andl %eax, %edi             #  7     0xb   2      OPC=andl_r32_r32_1       
  andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0x10  6      OPC=jne_label_1            jne .L_126860               #  9     0x10  6      OPC=jne_label_1          
  orl %esp, %esi              #  10    0x16  2      OPC=orl_r32_r32            nop                         #  10    0x16  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  11    0x18  4      OPC=movl_r32_m32           orl %esp, %esi              #  11    0x17  2      OPC=orl_r32_r32          
  movl %r8d, %esi             #  12    0x1c  3      OPC=movl_r32_r32           movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %edi  #  13    0x1f  7      OPC=leal_r32_m16           movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32         
  notl %esi                   #  14    0x26  2      OPC=notl_r32               leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16         
  andl %edi, %esi             #  15    0x28  2      OPC=andl_r32_r32           notl %esi                   #  15    0x27  2      OPC=notl_r32             
  nop                         #  16    0x2a  1      OPC=nop                    andl %edi, %esi             #  16    0x29  2      OPC=andl_r32_r32         
  andl $0x80808080, %esi      #  17    0x2b  6      OPC=andl_r32_imm32         nop                         #  17    0x2b  1      OPC=nop                  
  jne .L_126860               #  18    0x31  6      OPC=jne_label_1            nop                         #  18    0x2c  1      OPC=nop                  
  nop                         #  19    0x37  1      OPC=nop                    nop                         #  19    0x2d  1      OPC=nop                  
  nop                         #  20    0x38  1      OPC=nop                    andl $0x80808080, %esi      #  20    0x2e  6      OPC=andl_r32_imm32       
  nop                         #  21    0x39  1      OPC=nop                    jne .L_126860               #  21    0x34  6      OPC=jne_label_1          
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3a  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3b  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3c  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3d  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                    nop                         #  26    0x3e  1      OPC=nop                  
.L_126820:                    #        0x3f  0      OPC=<label>                nop                         #  27    0x3f  1      OPC=nop                  
  addl $0x4, %edx             #  27    0x3f  3      OPC=addl_r32_imm8        .L_126820:                    #        0x40  0      OPC=<label>              
  movl %ecx, %ecx             #  28    0x42  2      OPC=movl_r32_r32           addl $0x4, %edx             #  28    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  29    0x44  4      OPC=movl_m32_r32           movl %ecx, %ecx             #  29    0x43  2      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  30    0x48  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  30    0x45  4      OPC=movl_m32_r32         
  movl %edx, %edx             #  31    0x4b  2      OPC=movl_r32_r32           addl $0x4, %ecx             #  31    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  32    0x4d  4      OPC=movl_r32_m32           movl %edx, %edx             #  32    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  33    0x51  3      OPC=movl_r32_r32           movl (%r15,%rdx,1), %r8d    #  33    0x4e  4      OPC=movl_r32_m32         
  leaq -0x1010101(%r8), %rsi  #  34    0x54  7      OPC=leaq_r64_m32           movl %r8d, %r9d             #  34    0x52  3      OPC=movl_r32_r32         
  notq %r9                    #  35    0x5b  3      OPC=notq_r64               nop                         #  35    0x55  1      OPC=nop                  
  nop                         #  36    0x5e  1      OPC=nop                    notq %r9                    #  36    0x56  3      OPC=notq_r64             
  andl %esi, %r9d             #  37    0x5f  3      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rsi  #  37    0x59  7      OPC=leaq_r64_m32         
  andl $0x80808080, %r9d      #  38    0x62  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  38    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  39    0x69  6      OPC=je_label_1             andl $0x80808080, %r9d      #  39    0x63  7      OPC=andl_r32_imm32       
  nop                         #  40    0x6f  1      OPC=nop                    je .L_126820                #  40    0x6a  6      OPC=je_label_1           
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x70  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x71  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x72  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x73  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x74  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x75  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x76  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x77  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x78  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x79  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7a  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7b  1      OPC=nop                  
  nopl %eax                   #  53    0x7c  3      OPC=nopl_r32               nop                         #  53    0x7c  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  54    0x7d  1      OPC=nop                  
  movl %edx, %edx             #  54    0x7f  2      OPC=movl_r32_r32           nop                         #  55    0x7e  1      OPC=nop                  
  movzbl (%r15,%rdx,1), %esi  #  55    0x81  5      OPC=movzbl_r32_m8          nop                         #  56    0x7f  1      OPC=nop                  
  addl $0x1, %edx             #  56    0x86  3      OPC=addl_r32_imm8        .L_126860:                    #        0x80  0      OPC=<label>              
  movl %ecx, %ecx             #  57    0x89  2      OPC=movl_r32_r32           movl %edx, %edx             #  57    0x80  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  58    0x8b  4      OPC=movb_m8_r8             movsbl (%r15,%rdx,1), %esi  #  58    0x82  5      OPC=movsbl_r32_m8        
  addl $0x1, %ecx             #  59    0x8f  3      OPC=addl_r32_imm8          addl $0x1, %edx             #  59    0x87  3      OPC=addl_r32_imm8        
  testb %sil, %sil            #  60    0x92  3      OPC=testb_r8_r8            movl %ecx, %ecx             #  60    0x8a  2      OPC=movl_r32_r32         
  jne .L_126860               #  61    0x95  6      OPC=jne_label_1            movb %sil, (%r15,%rcx,1)    #  61    0x8c  4      OPC=movb_m8_r8           
  nop                         #  62    0x9b  1      OPC=nop                    addl $0x1, %ecx             #  62    0x90  3      OPC=addl_r32_imm8        
  nop                         #  63    0x9c  1      OPC=nop                    testb %sil, %sil            #  63    0x93  3      OPC=testb_r8_r8          
  nop                         #  64    0x9d  1      OPC=nop                    jne .L_126860               #  64    0x96  6      OPC=jne_label_1          
  nop                         #  65    0x9e  1      OPC=nop                    nop                         #  65    0x9c  1      OPC=nop                  
  nop                         #  66    0x9f  1      OPC=nop                    nop                         #  66    0x9d  1      OPC=nop                  
  nop                         #  67    0xa0  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0xa1  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0xa2  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  popq %r11                   #  70    0xa3  2      OPC=popq_r64_1             nop                         #  70    0xa1  1      OPC=nop                  
  andl $0xe0, %r11d           #  71    0xa5  4      OPC=andl_r32_imm8          nop                         #  71    0xa2  1      OPC=nop                  
  addq %r15, %r11             #  72    0xa9  3      OPC=addq_r64_r64           nop                         #  72    0xa3  1      OPC=nop                  
  jmpq %r11                   #  73    0xac  3      OPC=jmpq_r64               nop                         #  73    0xa4  1      OPC=nop                  
                                                                               nop                         #  74    0xa5  1      OPC=nop                  
.size strcpy, .-strcpy                                                         popq %r11                   #  75    0xa6  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  76    0xa8  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  77    0xac  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  78    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (287)                                                 Lowest Known Correct Cost (296)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64         
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x3   1      OPC=nop                  
  movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32           movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    nop                         #  4     0x6   1      OPC=nop                  
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0xa   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  andl %eax, %edi             #  7     0xb   2      OPC=andl_r32_r32_1         andl %eax, %edi             #  7     0xb   2      OPC=andl_r32_r32_1       
  andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0x10  6      OPC=jne_label_1            jne .L_126860               #  9     0x10  6      OPC=jne_label_1          
  nop                         #  10    0x16  1      OPC=nop                    nop                         #  10    0x16  1      OPC=nop                  
  orl %esp, %esi              #  11    0x17  2      OPC=orl_r32_r32            orl %esp, %esi              #  11    0x17  2      OPC=orl_r32_r32          
  movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32         
  movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32           movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16         
  notl %esi                   #  15    0x27  2      OPC=notl_r32               notl %esi                   #  15    0x27  2      OPC=notl_r32             
  andl %edi, %esi             #  16    0x29  2      OPC=andl_r32_r32           andl %edi, %esi             #  16    0x29  2      OPC=andl_r32_r32         
  nop                         #  17    0x2b  1      OPC=nop                    nop                         #  17    0x2b  1      OPC=nop                  
  nop                         #  18    0x2c  1      OPC=nop                    nop                         #  18    0x2c  1      OPC=nop                  
  nop                         #  19    0x2d  1      OPC=nop                    nop                         #  19    0x2d  1      OPC=nop                  
  andl $0x80808080, %esi      #  20    0x2e  6      OPC=andl_r32_imm32         andl $0x80808080, %esi      #  20    0x2e  6      OPC=andl_r32_imm32       
  jne .L_126860               #  21    0x34  6      OPC=jne_label_1            jne .L_126860               #  21    0x34  6      OPC=jne_label_1          
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3a  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3b  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3c  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3d  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                    nop                         #  26    0x3e  1      OPC=nop                  
  nop                         #  27    0x3f  1      OPC=nop                    nop                         #  27    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  addl $0x4, %edx             #  28    0x40  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  28    0x40  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  29    0x43  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  29    0x43  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  30    0x45  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  30    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  31    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  31    0x49  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  32    0x4c  2      OPC=movl_r32_r32           movl %edx, %edx             #  32    0x4c  2      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  33    0x4e  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  33    0x4e  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  34    0x52  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  34    0x52  3      OPC=movl_r32_r32         
  notq %r9                    #  35    0x55  3      OPC=notq_r64               nop                         #  35    0x55  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi  #  36    0x58  7      OPC=leaq_r64_m32           notq %r9                    #  36    0x56  3      OPC=notq_r64             
  andl %esi, %r9d             #  37    0x5f  3      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rsi  #  37    0x59  7      OPC=leaq_r64_m32         
  andl $0x80808080, %r9d      #  38    0x62  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  38    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  39    0x69  6      OPC=je_label_1             andl $0x80808080, %r9d      #  39    0x63  7      OPC=andl_r32_imm32       
  nop                         #  40    0x6f  1      OPC=nop                    je .L_126820                #  40    0x6a  6      OPC=je_label_1           
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x70  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x71  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x72  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x73  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x74  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x75  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x76  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x77  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x78  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x79  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7a  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7b  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7c  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x7d  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                    nop                         #  55    0x7e  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  56    0x7f  1      OPC=nop                  
  movl %edx, %edx             #  56    0x7f  2      OPC=movl_r32_r32         .L_126860:                    #        0x80  0      OPC=<label>              
  movsbl (%r15,%rdx,1), %esi  #  57    0x81  5      OPC=movsbl_r32_m8          movl %edx, %edx             #  57    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  58    0x86  3      OPC=addl_r32_imm8          movsbl (%r15,%rdx,1), %esi  #  58    0x82  5      OPC=movsbl_r32_m8        
  movl %ecx, %ecx             #  59    0x89  2      OPC=movl_r32_r32           addl $0x1, %edx             #  59    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  60    0x8b  4      OPC=movb_m8_r8             movl %ecx, %ecx             #  60    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  61    0x8f  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  61    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  62    0x92  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  62    0x90  3      OPC=addl_r32_imm8        
  nop                         #  63    0x95  1      OPC=nop                    testb %sil, %sil            #  63    0x93  3      OPC=testb_r8_r8          
  jne .L_126860               #  64    0x96  6      OPC=jne_label_1            jne .L_126860               #  64    0x96  6      OPC=jne_label_1          
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  65    0x9c  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9d  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0xa0  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa1  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa2  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa3  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa4  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa5  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  popq %r11                   #  75    0xa6  2      OPC=popq_r64_1             popq %r11                   #  75    0xa6  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  76    0xa8  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  76    0xa8  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  77    0xac  3      OPC=addq_r64_r64           addq %r15, %r11             #  77    0xac  3      OPC=addq_r64_r64         
  jmpq %r11                   #  78    0xaf  3      OPC=jmpq_r64               jmpq %r11                   #  78    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (286)                                                 Lowest Known Correct Cost (296)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64         
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           nop                         #  2     0x3   1      OPC=nop                  
  movq %rax, %rcx             #  3     0x5   3      OPC=movq_r64_r64           movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x8   1      OPC=nop                    nop                         #  4     0x6   1      OPC=nop                  
  nop                         #  5     0x9   1      OPC=nop                    movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0xa   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  andl $0x1, %edi             #  7     0xb   3      OPC=andl_r32_imm8          andl %eax, %edi             #  7     0xb   2      OPC=andl_r32_r32_1       
  nop                         #  8     0xe   1      OPC=nop                    andl $0x3, %edi             #  8     0xd   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            jne .L_126860               #  9     0x10  6      OPC=jne_label_1          
  nop                         #  10    0x15  1      OPC=nop                    nop                         #  10    0x16  1      OPC=nop                  
  addl %esp, %esi             #  11    0x16  2      OPC=addl_r32_r32_1         orl %esp, %esi              #  11    0x17  2      OPC=orl_r32_r32          
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32         
  movl %r8d, %esi             #  13    0x1c  3      OPC=movl_r32_r32           movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32         
  nop                         #  14    0x1f  1      OPC=nop                    leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16         
  nop                         #  15    0x20  1      OPC=nop                    notl %esi                   #  15    0x27  2      OPC=notl_r32             
  leaq -0x1010101(%r8), %rdi  #  16    0x21  7      OPC=leaq_r64_m32           andl %edi, %esi             #  16    0x29  2      OPC=andl_r32_r32         
  notl %esi                   #  17    0x28  2      OPC=notl_r32               nop                         #  17    0x2b  1      OPC=nop                  
  andl %edi, %esi             #  18    0x2a  2      OPC=andl_r32_r32           nop                         #  18    0x2c  1      OPC=nop                  
  nop                         #  19    0x2c  1      OPC=nop                    nop                         #  19    0x2d  1      OPC=nop                  
  nop                         #  20    0x2d  1      OPC=nop                    andl $0x80808080, %esi      #  20    0x2e  6      OPC=andl_r32_imm32       
  nop                         #  21    0x2e  1      OPC=nop                    jne .L_126860               #  21    0x34  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32         nop                         #  22    0x3a  1      OPC=nop                  
  jne .L_126860               #  23    0x35  6      OPC=jne_label_1            nop                         #  23    0x3b  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3c  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3d  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3e  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3f  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                addl $0x4, %edx             #  28    0x40  3      OPC=addl_r32_imm8        
  nop                         #  29    0x40  1      OPC=nop                    movl %ecx, %ecx             #  29    0x43  2      OPC=movl_r32_r32         
  nop                         #  30    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  30    0x45  4      OPC=movl_m32_r32         
  nop                         #  31    0x42  1      OPC=nop                    addl $0x4, %ecx             #  31    0x49  3      OPC=addl_r32_imm8        
  andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32           movl %edx, %edx             #  32    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  33    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  34    0x52  3      OPC=movl_r32_r32         
  addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8          nop                         #  35    0x55  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32           notq %r9                    #  36    0x56  3      OPC=notq_r64             
  movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32           leaq -0x1010101(%r8), %rsi  #  37    0x59  7      OPC=leaq_r64_m32         
  notq %r9                    #  38    0x56  3      OPC=notq_r64               andl %esi, %r9d             #  38    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16           andl $0x80808080, %r9d      #  39    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32           je .L_126820                #  40    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32         nop                         #  41    0x70  1      OPC=nop                  
  je .L_126820                #  42    0x6a  6      OPC=je_label_1             nop                         #  42    0x71  1      OPC=nop                  
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x72  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x73  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x74  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x75  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x76  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x77  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x78  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x79  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x7a  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x7b  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7c  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7d  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7e  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7f  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  58    0x7f  1      OPC=nop                    movl %edx, %edx             #  57    0x80  2      OPC=movl_r32_r32         
  nop                         #  59    0x80  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  58    0x82  5      OPC=movsbl_r32_m8        
.L_126860:                    #        0x81  0      OPC=<label>                addl $0x1, %edx             #  59    0x87  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  60    0x81  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  60    0x8a  2      OPC=movl_r32_r32         
  movsbl (%r15,%rdx,1), %esi  #  61    0x83  5      OPC=movsbl_r32_m8          movb %sil, (%r15,%rcx,1)    #  61    0x8c  4      OPC=movb_m8_r8           
  addl $0x1, %edx             #  62    0x88  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  62    0x90  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  63    0x8b  2      OPC=movl_r32_r32           testb %sil, %sil            #  63    0x93  3      OPC=testb_r8_r8          
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             jne .L_126860               #  64    0x96  6      OPC=jne_label_1          
  addl $0x1, %ecx             #  65    0x91  3      OPC=addl_r32_imm8          nop                         #  65    0x9c  1      OPC=nop                  
  testb %sil, %sil            #  66    0x94  3      OPC=testb_r8_r8            nop                         #  66    0x9d  1      OPC=nop                  
  nop                         #  67    0x97  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0x98  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0x99  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  jne .L_126860               #  70    0x9a  6      OPC=jne_label_1            nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa0  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa1  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa2  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa3  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa4  1      OPC=nop                    popq %r11                   #  75    0xa6  2      OPC=popq_r64_1           
  nop                         #  76    0xa5  1      OPC=nop                    andl $0xe0, %r11d           #  76    0xa8  4      OPC=andl_r32_imm8        
  nop                         #  77    0xa6  1      OPC=nop                    addq %r15, %r11             #  77    0xac  3      OPC=addq_r64_r64         
  nop                         #  78    0xa7  1      OPC=nop                    jmpq %r11                   #  78    0xaf  3      OPC=jmpq_r64             
  popq %r11                   #  79    0xa8  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  80    0xaa  4      OPC=andl_r32_imm8        .size strcpy, .-strcpy                                                       
  addq %r15, %r11             #  81    0xae  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  82    0xb1  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (286)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  movq %rax, %rcx             #  3     0x5   3      OPC=movq_r64_r64           movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  nop                         #  4     0x8   1      OPC=nop                    movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  nop                         #  5     0x9   1      OPC=nop                    movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0xa   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  andl $0x1, %edi             #  7     0xb   3      OPC=andl_r32_imm8          nop                         #  7     0xb   1      OPC=nop                  
  nop                         #  8     0xe   1      OPC=nop                    andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            nop                         #  9     0xf   1      OPC=nop                  
  nop                         #  10    0x15  1      OPC=nop                    jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  addl %esp, %esi             #  11    0x16  2      OPC=addl_r32_r32_1         nop                         #  11    0x16  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  movl %r8d, %esi             #  13    0x1c  3      OPC=movl_r32_r32           movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  nop                         #  14    0x1f  1      OPC=nop                    movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  nop                         #  15    0x20  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  16    0x21  7      OPC=leaq_r64_m32           nop                         #  16    0x21  1      OPC=nop                  
  notl %esi                   #  17    0x28  2      OPC=notl_r32               leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  andl %edi, %esi             #  18    0x2a  2      OPC=andl_r32_r32           notl %esi                   #  18    0x29  2      OPC=notl_r32             
  nop                         #  19    0x2c  1      OPC=nop                    andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  nop                         #  20    0x2d  1      OPC=nop                    nop                         #  20    0x2d  1      OPC=nop                  
  nop                         #  21    0x2e  1      OPC=nop                    nop                         #  21    0x2e  1      OPC=nop                  
  andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32         andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  jne .L_126860               #  23    0x35  6      OPC=jne_label_1            jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32           andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  notq %r9                    #  38    0x56  3      OPC=notq_r64               notq %r9                    #  38    0x56  3      OPC=notq_r64             
  leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32           andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                #  42    0x6a  6      OPC=je_label_1             je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x70  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x71  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x72  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7f  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x81  0      OPC=<label>                movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  60    0x81  2      OPC=movl_r32_r32           movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi  #  61    0x83  5      OPC=movsbl_r32_m8          addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  addl $0x1, %edx             #  62    0x88  3      OPC=addl_r32_imm8          orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  movl %ecx, %ecx             #  63    0x8b  2      OPC=movl_r32_r32           movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx             #  65    0x91  3      OPC=addl_r32_imm8          testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  testb %sil, %sil            #  66    0x94  3      OPC=testb_r8_r8            nop                         #  66    0x96  1      OPC=nop                  
  nop                         #  67    0x97  1      OPC=nop                    nop                         #  67    0x97  1      OPC=nop                  
  nop                         #  68    0x98  1      OPC=nop                    nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0x99  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  jne .L_126860               #  70    0x9a  6      OPC=jne_label_1            nop                         #  70    0x9f  1      OPC=nop                  
  nop                         #  71    0xa0  1      OPC=nop                    nop                         #  71    0xa0  1      OPC=nop                  
  nop                         #  72    0xa1  1      OPC=nop                    nop                         #  72    0xa1  1      OPC=nop                  
  nop                         #  73    0xa2  1      OPC=nop                    nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  nop                         #  74    0xa3  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa4  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa5  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xa6  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xa7  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  popq %r11                   #  79    0xa8  2      OPC=popq_r64_1             popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  80    0xaa  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  81    0xae  3      OPC=addq_r64_r64           addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
  jmpq %r11                   #  82    0xb1  3      OPC=jmpq_r64               jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (280)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32           movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  movq %rax, %rcx             #  4     0x6   3      OPC=movq_r64_r64           movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  nop                         #  5     0x9   1      OPC=nop                    movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0xa   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  andl $0x1, %edi             #  7     0xb   3      OPC=andl_r32_imm8          nop                         #  7     0xb   1      OPC=nop                  
  nop                         #  8     0xe   1      OPC=nop                    andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            nop                         #  9     0xf   1      OPC=nop                  
  nop                         #  10    0x15  1      OPC=nop                    jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  addl %esp, %esi             #  11    0x16  2      OPC=addl_r32_r32_1         nop                         #  11    0x16  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  nop                         #  13    0x1c  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           nop                         #  15    0x20  1      OPC=nop                  
  notl %esi                   #  16    0x27  2      OPC=notl_r32               nop                         #  16    0x21  1      OPC=nop                  
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2b  1      OPC=nop                    notl %esi                   #  18    0x29  2      OPC=notl_r32             
  nop                         #  19    0x2c  1      OPC=nop                    andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  nop                         #  20    0x2d  1      OPC=nop                    nop                         #  20    0x2d  1      OPC=nop                  
  andl $0x80808080, %esi      #  21    0x2e  6      OPC=andl_r32_imm32         nop                         #  21    0x2e  1      OPC=nop                  
  jne .L_126860               #  22    0x34  6      OPC=jne_label_1            andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  nop                         #  23    0x3a  1      OPC=nop                    jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  nop                         #  32    0x43  1      OPC=nop                    andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  nop                         #  33    0x44  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  andl %ecx, %ecx             #  34    0x45  2      OPC=andl_r32_r32           addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  35    0x47  4      OPC=movl_m32_r32           addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx             #  36    0x4b  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  addl $0x4, %edx             #  37    0x4e  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  38    0x51  4      OPC=movl_r32_m32           notq %r9                    #  38    0x56  3      OPC=notq_r64             
  movl %r8d, %r9d             #  39    0x55  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  notl %r9d                   #  40    0x58  3      OPC=notl_r32               andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  41    0x5b  7      OPC=leal_r32_m16           andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  42    0x62  3      OPC=andl_r32_r32           je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  43    0x65  7      OPC=andl_r32_imm32         nop                         #  43    0x70  1      OPC=nop                  
  je .L_126820                #  44    0x6c  6      OPC=je_label_1             nop                         #  44    0x71  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x72  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7f  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x81  0      OPC=<label>                movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  60    0x81  2      OPC=movl_r32_r32           movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi  #  61    0x83  5      OPC=movsbl_r32_m8          addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  addl $0x1, %edx             #  62    0x88  3      OPC=addl_r32_imm8          orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  orl %ecx, %ecx              #  63    0x8b  2      OPC=orl_r32_r32            movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  addq $0x1, %rcx             #  65    0x91  7      OPC=addq_r64_imm32         testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  testb %sil, %sil            #  66    0x98  3      OPC=testb_r8_r8            nop                         #  66    0x96  1      OPC=nop                  
  jne .L_126860               #  67    0x9b  6      OPC=jne_label_1            nop                         #  67    0x97  1      OPC=nop                  
  nop                         #  68    0xa1  1      OPC=nop                    nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0xa2  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  nop                         #  70    0xa3  1      OPC=nop                    nop                         #  70    0x9f  1      OPC=nop                  
  nop                         #  71    0xa4  1      OPC=nop                    nop                         #  71    0xa0  1      OPC=nop                  
  nopl %eax                   #  72    0xa5  3      OPC=nopl_r32               nop                         #  72    0xa1  1      OPC=nop                  
  nop                         #  73    0xa8  1      OPC=nop                    nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  nop                         #  74    0xa9  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xaa  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xab  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  popq %r11                   #  77    0xac  2      OPC=popq_r64_1             nop                         #  77    0xa8  1      OPC=nop                  
  andl $0xe0, %r11d           #  78    0xae  4      OPC=andl_r32_imm8          nop                         #  78    0xa9  1      OPC=nop                  
  addq %r15, %r11             #  79    0xb2  3      OPC=addq_r64_r64           popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
  jmpq %r11                   #  80    0xb5  3      OPC=jmpq_r64               andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                         jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (279)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  movl %edi, %eax             #  3     0x4   2      OPC=movl_r32_r32           movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  nop                         #  5     0x7   1      OPC=nop                    movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  andl $0x1, %edi             #  7     0x9   3      OPC=andl_r32_imm8          nop                         #  7     0xb   1      OPC=nop                  
  movq %rax, %rcx             #  8     0xc   3      OPC=movq_r64_r64           andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            nop                         #  9     0xf   1      OPC=nop                  
  nop                         #  10    0x15  1      OPC=nop                    jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  addl %esp, %esi             #  11    0x16  2      OPC=addl_r32_r32_1         nop                         #  11    0x16  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  nop                         #  13    0x1c  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32           movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rdi  #  15    0x20  7      OPC=leaq_r64_m32           nop                         #  15    0x20  1      OPC=nop                  
  notl %esi                   #  16    0x27  2      OPC=notl_r32               nop                         #  16    0x21  1      OPC=nop                  
  andl %edi, %esi             #  17    0x29  2      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2b  1      OPC=nop                    notl %esi                   #  18    0x29  2      OPC=notl_r32             
  nop                         #  19    0x2c  1      OPC=nop                    andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  nop                         #  20    0x2d  1      OPC=nop                    nop                         #  20    0x2d  1      OPC=nop                  
  andl $0x80808080, %esi      #  21    0x2e  6      OPC=andl_r32_imm32         nop                         #  21    0x2e  1      OPC=nop                  
  jne .L_126860               #  22    0x34  6      OPC=jne_label_1            andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  nop                         #  23    0x3a  1      OPC=nop                    jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  nop                         #  32    0x43  1      OPC=nop                    andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  nop                         #  33    0x44  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  andl %ecx, %ecx             #  34    0x45  2      OPC=andl_r32_r32           addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  35    0x47  4      OPC=movl_m32_r32           addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx             #  36    0x4b  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  addl $0x4, %edx             #  37    0x4e  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  38    0x51  4      OPC=movl_r32_m32           notq %r9                    #  38    0x56  3      OPC=notq_r64             
  movl %r8d, %r9d             #  39    0x55  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  notl %r9d                   #  40    0x58  3      OPC=notl_r32               andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  41    0x5b  7      OPC=leal_r32_m16           andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  42    0x62  3      OPC=andl_r32_r32           je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  43    0x65  7      OPC=andl_r32_imm32         nop                         #  43    0x70  1      OPC=nop                  
  je .L_126820                #  44    0x6c  6      OPC=je_label_1             nop                         #  44    0x71  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x72  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7f  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  60    0x81  1      OPC=nop                    movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x82  0      OPC=<label>                movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movl %edx, %edx             #  61    0x82  2      OPC=movl_r32_r32           addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  movsbl (%r15,%rdx,1), %esi  #  62    0x84  5      OPC=movsbl_r32_m8          orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  addl $0x1, %edx             #  63    0x89  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  orl %ecx, %ecx              #  64    0x8c  2      OPC=orl_r32_r32            addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  65    0x8e  4      OPC=movb_m8_r8             testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  addq $0x1, %rcx             #  66    0x92  7      OPC=addq_r64_imm32         nop                         #  66    0x96  1      OPC=nop                  
  testb %sil, %sil            #  67    0x99  3      OPC=testb_r8_r8            nop                         #  67    0x97  1      OPC=nop                  
  jne .L_126860               #  68    0x9c  6      OPC=jne_label_1            nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0xa2  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  nop                         #  70    0xa3  1      OPC=nop                    nop                         #  70    0x9f  1      OPC=nop                  
  nop                         #  71    0xa4  1      OPC=nop                    nop                         #  71    0xa0  1      OPC=nop                  
  nop                         #  72    0xa5  1      OPC=nop                    nop                         #  72    0xa1  1      OPC=nop                  
  nopl %eax                   #  73    0xa6  3      OPC=nopl_r32               nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  nop                         #  74    0xa9  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xaa  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xab  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xac  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  popq %r11                   #  78    0xad  2      OPC=popq_r64_1             nop                         #  78    0xa9  1      OPC=nop                  
  andl $0xe0, %r11d           #  79    0xaf  4      OPC=andl_r32_imm8          popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
  addq %r15, %r11             #  80    0xb3  3      OPC=addq_r64_r64           andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
  jmpq %r11                   #  81    0xb6  3      OPC=jmpq_r64               addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
.size strcpy, .-strcpy                                                                                                                                    
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (278)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x5   1      OPC=nop                    movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  andl $0x1, %edi             #  6     0xa   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  jne .L_126860               #  7     0xd   6      OPC=jne_label_1            nop                         #  7     0xb   1      OPC=nop                  
  nop                         #  8     0x13  1      OPC=nop                    andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  addl %esp, %esi             #  9     0x14  2      OPC=addl_r32_r32_1         nop                         #  9     0xf   1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32           jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  nop                         #  11    0x1a  1      OPC=nop                    nop                         #  11    0x16  1      OPC=nop                  
  movl %r8d, %esi             #  12    0x1b  3      OPC=movl_r32_r32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  notl %esi                   #  13    0x1e  2      OPC=notl_r32               movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  leaq -0x1010101(%r8), %rdi  #  14    0x20  7      OPC=leaq_r64_m32           movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  andl %edi, %esi             #  15    0x27  2      OPC=andl_r32_r32_1         nop                         #  15    0x20  1      OPC=nop                  
  nop                         #  16    0x29  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                         #  17    0x2a  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2b  1      OPC=nop                    notl %esi                   #  18    0x29  2      OPC=notl_r32             
  andl $0x80808080, %esi      #  19    0x2c  6      OPC=andl_r32_imm32         andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  jne .L_126860               #  20    0x32  6      OPC=jne_label_1            nop                         #  20    0x2d  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x2e  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  nop                         #  23    0x3a  1      OPC=nop                    jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
.L_126820:                    #        0x3f  0      OPC=<label>                nop                         #  28    0x3f  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  andl %ecx, %ecx             #  31    0x42  2      OPC=andl_r32_r32           nop                         #  31    0x42  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  32    0x44  4      OPC=movl_m32_r32           andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  addl $0x4, %ecx             #  33    0x48  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  34    0x4b  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  35    0x4e  4      OPC=movl_r32_m32           addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d             #  36    0x52  3      OPC=movl_r32_r32           movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  notl %r9d                   #  37    0x55  3      OPC=notl_r32               movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %esi  #  38    0x58  7      OPC=leal_r32_m16           notq %r9                    #  38    0x56  3      OPC=notq_r64             
  andl %esi, %r9d             #  39    0x5f  3      OPC=andl_r32_r32           leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  andl $0x80808080, %r9d      #  40    0x62  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  41    0x69  6      OPC=je_label_1             andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  nop                         #  42    0x6f  1      OPC=nop                    je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x70  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x71  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x72  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
.L_126860:                    #        0x7e  0      OPC=<label>                nop                         #  57    0x7e  1      OPC=nop                  
  movl %edx, %edx             #  57    0x7e  2      OPC=movl_r32_r32           nop                         #  58    0x7f  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi  #  58    0x80  5      OPC=movsbl_r32_m8        .L_126860:                    #        0x80  0      OPC=<label>              
  addl $0x1, %edx             #  59    0x85  3      OPC=addl_r32_imm8          movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  orl %ecx, %ecx              #  60    0x88  2      OPC=orl_r32_r32            movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8a  4      OPC=movb_m8_r8             addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  addw $0x1, %cx              #  62    0x8e  4      OPC=addw_r16_imm8          orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  testb %sil, %sil            #  63    0x92  3      OPC=testb_r8_r8            movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  jne .L_126860               #  64    0x95  6      OPC=jne_label_1            addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  nop                         #  65    0x9b  1      OPC=nop                    testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  nop                         #  66    0x9c  1      OPC=nop                    nop                         #  66    0x96  1      OPC=nop                  
  nop                         #  67    0x9d  1      OPC=nop                    nop                         #  67    0x97  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  nop                         #  70    0xa0  1      OPC=nop                    nop                         #  70    0x9f  1      OPC=nop                  
  nopl %eax                   #  71    0xa1  3      OPC=nopl_r32               nop                         #  71    0xa0  1      OPC=nop                  
  nop                         #  72    0xa4  1      OPC=nop                    nop                         #  72    0xa1  1      OPC=nop                  
  nop                         #  73    0xa5  1      OPC=nop                    nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  popq %r11                   #  74    0xa6  2      OPC=popq_r64_1             nop                         #  74    0xa5  1      OPC=nop                  
  andl $0xe0, %r11d           #  75    0xa8  4      OPC=andl_r32_imm8          nop                         #  75    0xa6  1      OPC=nop                  
  addq %r15, %r11             #  76    0xac  3      OPC=addq_r64_r64           nop                         #  76    0xa7  1      OPC=nop                  
  jmpq %r11                   #  77    0xaf  3      OPC=jmpq_r64               nop                         #  77    0xa8  1      OPC=nop                  
                                                                               nop                         #  78    0xa9  1      OPC=nop                  
.size strcpy, .-strcpy                                                         popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (277)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  movl %edi, %eax             #  2     0x3   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x5   1      OPC=nop                    movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  andl $0x1, %edi             #  6     0xa   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  jne .L_126860               #  7     0xd   6      OPC=jne_label_1            nop                         #  7     0xb   1      OPC=nop                  
  nop                         #  8     0x13  1      OPC=nop                    andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  addl %esp, %esi             #  9     0x14  2      OPC=addl_r32_r32_1         nop                         #  9     0xf   1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32           jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  nop                         #  11    0x1a  1      OPC=nop                    nop                         #  11    0x16  1      OPC=nop                  
  movl %r8d, %esi             #  12    0x1b  3      OPC=movl_r32_r32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  notl %esi                   #  13    0x1e  2      OPC=notl_r32               movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  leaq -0x1010101(%r8), %rdi  #  14    0x20  7      OPC=leaq_r64_m32           movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  andl %edi, %esi             #  15    0x27  2      OPC=andl_r32_r32_1         nop                         #  15    0x20  1      OPC=nop                  
  nop                         #  16    0x29  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                         #  17    0x2a  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2b  1      OPC=nop                    notl %esi                   #  18    0x29  2      OPC=notl_r32             
  nop                         #  19    0x2c  1      OPC=nop                    andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  andl $0x80808080, %esi      #  20    0x2d  6      OPC=andl_r32_imm32         nop                         #  20    0x2d  1      OPC=nop                  
  jne .L_126860               #  21    0x33  6      OPC=jne_label_1            nop                         #  21    0x2e  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  nop                         #  23    0x3a  1      OPC=nop                    jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  orl %ecx, %ecx              #  32    0x43  2      OPC=orl_r32_r32_1          andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  notl %r9d                   #  38    0x56  3      OPC=notl_r32               notq %r9                    #  38    0x56  3      OPC=notq_r64             
  leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32           andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                #  42    0x6a  6      OPC=je_label_1             je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x70  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x71  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x72  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  58    0x7f  1      OPC=nop                  
  movl %edx, %edx             #  58    0x7f  2      OPC=movl_r32_r32         .L_126860:                    #        0x80  0      OPC=<label>              
  movsbl (%r15,%rdx,1), %esi  #  59    0x81  5      OPC=movsbl_r32_m8          movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  60    0x86  3      OPC=addl_r32_imm8          movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  orl %ecx, %ecx              #  61    0x89  2      OPC=orl_r32_r32            addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  62    0x8b  4      OPC=movb_m8_r8             orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  addw $0x1, %cx              #  63    0x8f  4      OPC=addw_r16_imm8          movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  64    0x93  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  jne .L_126860               #  65    0x96  6      OPC=jne_label_1            testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  nop                         #  66    0x9c  1      OPC=nop                    nop                         #  66    0x96  1      OPC=nop                  
  nop                         #  67    0x9d  1      OPC=nop                    nop                         #  67    0x97  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  nop                         #  70    0xa0  1      OPC=nop                    nop                         #  70    0x9f  1      OPC=nop                  
  nop                         #  71    0xa1  1      OPC=nop                    nop                         #  71    0xa0  1      OPC=nop                  
  nopl %eax                   #  72    0xa2  3      OPC=nopl_r32               nop                         #  72    0xa1  1      OPC=nop                  
  nop                         #  73    0xa5  1      OPC=nop                    nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  nop                         #  74    0xa6  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  popq %r11                   #  75    0xa7  2      OPC=popq_r64_1             nop                         #  75    0xa6  1      OPC=nop                  
  andl $0xe0, %r11d           #  76    0xa9  4      OPC=andl_r32_imm8          nop                         #  76    0xa7  1      OPC=nop                  
  addq %r15, %r11             #  77    0xad  3      OPC=addq_r64_r64           nop                         #  77    0xa8  1      OPC=nop                  
  jmpq %r11                   #  78    0xb0  3      OPC=jmpq_r64               nop                         #  78    0xa9  1      OPC=nop                  
                                                                               popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
.size strcpy, .-strcpy                                                         andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (276)                                                 Lowest Known Correct Cost (287)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x4   1      OPC=nop                    movl %edi, %eax             #  3     0x2   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x5   2      OPC=movl_r32_r32           movq %rax, %rcx             #  4     0x4   3      OPC=movq_r64_r64         
  nop                         #  5     0x7   1      OPC=nop                    movq %rsi, %rdx             #  5     0x7   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  movq %rax, %rcx             #  7     0x9   3      OPC=movq_r64_r64           nop                         #  7     0xb   1      OPC=nop                  
  andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8          andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            nop                         #  9     0xf   1      OPC=nop                  
  orl %edx, %esi              #  10    0x15  2      OPC=orl_r32_r32            jne .L_126860               #  10    0x10  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d    #  11    0x17  4      OPC=movl_r32_m32           nop                         #  11    0x16  1      OPC=nop                  
  movl %r8d, %esi             #  12    0x1b  3      OPC=movl_r32_r32           addl %esp, %esi             #  12    0x17  2      OPC=addl_r32_r32_1       
  notl %esi                   #  13    0x1e  2      OPC=notl_r32               movl (%r15,%rsi,1), %r8d    #  13    0x19  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m32           movl %r8d, %esi             #  14    0x1d  3      OPC=movl_r32_r32         
  andl $0x80808080, %esi      #  15    0x27  6      OPC=andl_r32_imm32         nop                         #  15    0x20  1      OPC=nop                  
  nop                         #  16    0x2d  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                         #  17    0x2e  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x22  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2f  1      OPC=nop                    notl %esi                   #  18    0x29  2      OPC=notl_r32             
  andl %edi, %esi             #  19    0x30  2      OPC=andl_r32_r32_1         andl %edi, %esi             #  19    0x2b  2      OPC=andl_r32_r32         
  jne .L_126860               #  20    0x32  6      OPC=jne_label_1            nop                         #  20    0x2d  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x2e  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    andl $0x80808080, %esi      #  22    0x2f  6      OPC=andl_r32_imm32       
  nop                         #  23    0x3a  1      OPC=nop                    jne .L_126860               #  23    0x35  6      OPC=jne_label_1          
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  nop                         #  32    0x43  1      OPC=nop                    andl %ecx, %ecx             #  32    0x43  2      OPC=andl_r32_r32         
  nop                         #  33    0x44  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32         
  nop                         #  34    0x45  1      OPC=nop                    addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8        
  nop                         #  35    0x46  1      OPC=nop                    addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8        
  orl %ecx, %ecx              #  36    0x47  2      OPC=orl_r32_r32_1          movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32         
  movl %r8d, (%r15,%rcx,1)    #  37    0x49  4      OPC=movl_m32_r32           movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  38    0x4d  3      OPC=addl_r32_imm8          notq %r9                    #  38    0x56  3      OPC=notq_r64             
  addl $0x4, %edx             #  39    0x50  3      OPC=addl_r32_imm8          leal -0x1010101(%r8), %esi  #  39    0x59  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  40    0x53  4      OPC=movl_r32_m32           andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32         
  movl %r8d, %r9d             #  41    0x57  3      OPC=movl_r32_r32           andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32       
  leaq -0x1010101(%r8), %rsi  #  42    0x5a  7      OPC=leaq_r64_m32           je .L_126820                #  42    0x6a  6      OPC=je_label_1           
  notl %r9d                   #  43    0x61  3      OPC=notl_r32               nop                         #  43    0x70  1      OPC=nop                  
  andl %esi, %r9d             #  44    0x64  3      OPC=andl_r32_r32           nop                         #  44    0x71  1      OPC=nop                  
  andl $0x80808080, %r9d      #  45    0x67  7      OPC=andl_r32_imm32         nop                         #  45    0x72  1      OPC=nop                  
  je .L_126820                #  46    0x6e  6      OPC=je_label_1             nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7f  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x81  0      OPC=<label>                movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  60    0x81  2      OPC=movl_r32_r32           movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi  #  61    0x83  5      OPC=movsbl_r32_m8          addl $0x1, %edx             #  61    0x87  3      OPC=addl_r32_imm8        
  addl $0x1, %edx             #  62    0x88  3      OPC=addl_r32_imm8          orl %ecx, %ecx              #  62    0x8a  2      OPC=orl_r32_r32          
  orl %ecx, %ecx              #  63    0x8b  2      OPC=orl_r32_r32            movb %sil, (%r15,%rcx,1)    #  63    0x8c  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             addl $0x1, %ecx             #  64    0x90  3      OPC=addl_r32_imm8        
  addw $0x1, %cx              #  65    0x91  4      OPC=addw_r16_imm8          testb %sil, %sil            #  65    0x93  3      OPC=testb_r8_r8          
  testb %sil, %sil            #  66    0x95  3      OPC=testb_r8_r8            nop                         #  66    0x96  1      OPC=nop                  
  jne .L_126860               #  67    0x98  6      OPC=jne_label_1            nop                         #  67    0x97  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x98  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    jne .L_126860               #  69    0x99  6      OPC=jne_label_1          
  nop                         #  70    0xa0  1      OPC=nop                    nop                         #  70    0x9f  1      OPC=nop                  
  nop                         #  71    0xa1  1      OPC=nop                    nop                         #  71    0xa0  1      OPC=nop                  
  nop                         #  72    0xa2  1      OPC=nop                    nop                         #  72    0xa1  1      OPC=nop                  
  nop                         #  73    0xa3  1      OPC=nop                    nopl %eax                   #  73    0xa2  3      OPC=nopl_r32             
  nop                         #  74    0xa4  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa5  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa6  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  popq %r11                   #  77    0xa7  2      OPC=popq_r64_1             nop                         #  77    0xa8  1      OPC=nop                  
  andl $0xe0, %r11d           #  78    0xa9  4      OPC=andl_r32_imm8          nop                         #  78    0xa9  1      OPC=nop                  
  addq %r15, %r11             #  79    0xad  3      OPC=addq_r64_r64           popq %r11                   #  79    0xaa  2      OPC=popq_r64_1           
  jmpq %r11                   #  80    0xb0  3      OPC=jmpq_r64               andl $0xe0, %r11d           #  80    0xac  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  81    0xb0  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                         jmpq %r11                   #  82    0xb3  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (276)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x4   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  movl %edi, %eax             #  4     0x5   2      OPC=movl_r32_r32           movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  nop                         #  5     0x7   1      OPC=nop                    nop                         #  5     0x7   1      OPC=nop                  
  nop                         #  6     0x8   1      OPC=nop                    andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  movq %rax, %rcx             #  7     0x9   3      OPC=movq_r64_r64           movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  andl $0x1, %edi             #  8     0xc   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  jne .L_126860               #  9     0xf   6      OPC=jne_label_1            orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  orl %edx, %esi              #  10    0x15  2      OPC=orl_r32_r32            movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x17  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  movl %r8d, %esi             #  12    0x1b  3      OPC=movl_r32_r32           notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  notl %esi                   #  13    0x1e  2      OPC=notl_r32               nop                         #  13    0x1f  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m32           nop                         #  14    0x20  1      OPC=nop                  
  andl $0x80808080, %esi      #  15    0x27  6      OPC=andl_r32_imm32         nop                         #  15    0x21  1      OPC=nop                  
  nop                         #  16    0x2d  1      OPC=nop                    andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x2e  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x2f  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  andl %edi, %esi             #  19    0x30  2      OPC=andl_r32_r32_1         jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  jne .L_126860               #  20    0x32  6      OPC=jne_label_1            nop                         #  20    0x37  1      OPC=nop                  
  nop                         #  21    0x38  1      OPC=nop                    nop                         #  21    0x38  1      OPC=nop                  
  nop                         #  22    0x39  1      OPC=nop                    nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x3a  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x3b  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x3c  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x3e  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x3f  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  29    0x40  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  30    0x41  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  nop                         #  31    0x42  1      OPC=nop                    nop                         #  31    0x42  1      OPC=nop                  
  nop                         #  32    0x43  1      OPC=nop                    nop                         #  32    0x43  1      OPC=nop                  
  nop                         #  33    0x44  1      OPC=nop                    nop                         #  33    0x44  1      OPC=nop                  
  nop                         #  34    0x45  1      OPC=nop                    nop                         #  34    0x45  1      OPC=nop                  
  nop                         #  35    0x46  1      OPC=nop                    orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  orl %ecx, %ecx              #  36    0x47  2      OPC=orl_r32_r32_1          movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  movl %r8d, (%r15,%rcx,1)    #  37    0x49  4      OPC=movl_m32_r32           addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx             #  38    0x4d  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  39    0x50  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d    #  40    0x53  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  41    0x57  3      OPC=movl_r32_r32           leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  leaq -0x1010101(%r8), %rsi  #  42    0x5a  7      OPC=leaq_r64_m32           notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  notl %r9d                   #  43    0x61  3      OPC=notl_r32               andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  andl %esi, %r9d             #  44    0x64  3      OPC=andl_r32_r32           andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  andl $0x80808080, %r9d      #  45    0x67  7      OPC=andl_r32_imm32         je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  je .L_126820                #  46    0x6e  6      OPC=je_label_1             nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7d  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7e  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7f  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x81  0      OPC=<label>                movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  60    0x81  2      OPC=movl_r32_r32           movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi  #  61    0x83  5      OPC=movsbl_r32_m8          addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  addl $0x1, %edx             #  62    0x88  3      OPC=addl_r32_imm8          orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  orl %ecx, %ecx              #  63    0x8b  2      OPC=orl_r32_r32            movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  addw $0x1, %cx              #  65    0x91  4      OPC=addw_r16_imm8          testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  testb %sil, %sil            #  66    0x95  3      OPC=testb_r8_r8            jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  jne .L_126860               #  67    0x98  6      OPC=jne_label_1            nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa0  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa1  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa2  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa3  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa4  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa5  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa6  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  popq %r11                   #  77    0xa7  2      OPC=popq_r64_1             nop                         #  77    0xa8  1      OPC=nop                  
  andl $0xe0, %r11d           #  78    0xa9  4      OPC=andl_r32_imm8          nop                         #  78    0xa9  1      OPC=nop                  
  addq %r15, %r11             #  79    0xad  3      OPC=addq_r64_r64           nop                         #  79    0xaa  1      OPC=nop                  
  jmpq %r11                   #  80    0xb0  3      OPC=jmpq_r64               nop                         #  80    0xab  1      OPC=nop                  
                                                                               nop                         #  81    0xac  1      OPC=nop                  
.size strcpy, .-strcpy                                                         nop                         #  82    0xad  1      OPC=nop                  
                                                                               nop                         #  83    0xae  1      OPC=nop                  
                                                                               nop                         #  84    0xaf  1      OPC=nop                  
                                                                               nop                         #  85    0xb0  1      OPC=nop                  
                                                                               nop                         #  86    0xb1  1      OPC=nop                  
                                                                               popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (262)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x3   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  nop                         #  4     0x4   1      OPC=nop                    movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  nop                         #  5     0x5   1      OPC=nop                    nop                         #  5     0x7   1      OPC=nop                  
  movl %edi, %eax             #  6     0x6   2      OPC=movl_r32_r32_1         andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  7     0x8   3      OPC=andl_r32_imm8          movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  nop                         #  8     0xb   1      OPC=nop                    jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  movl %eax, %ecx             #  9     0xc   2      OPC=movl_r32_r32           orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  jne .L_126860               #  10    0xe   6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  addw %di, %si               #  11    0x14  3      OPC=addw_r16_r16_1         movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x17  4      OPC=movl_r32_m32           notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  nop                         #  13    0x1b  1      OPC=nop                    nop                         #  13    0x1f  1      OPC=nop                  
  nop                         #  14    0x1c  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  nop                         #  15    0x1d  1      OPC=nop                    nop                         #  15    0x21  1      OPC=nop                  
  nop                         #  16    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x1f  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x20  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  nop                         #  19    0x21  1      OPC=nop                    jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  orl %r8d, %esi              #  20    0x22  3      OPC=orl_r32_r32_1          nop                         #  20    0x37  1      OPC=nop                  
  notl %esi                   #  21    0x25  2      OPC=notl_r32               nop                         #  21    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  22    0x27  6      OPC=andl_r32_imm32         nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  26    0x30  7      OPC=leaq_r64_m32           nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x37  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  andl %edi, %esi             #  28    0x38  2      OPC=andl_r32_r32_1         nop                         #  28    0x3f  1      OPC=nop                  
  jne .L_126860               #  29    0x3a  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  29    0x40  1      OPC=nop                  
  movw %cx, %cx               #  30    0x40  3      OPC=movw_r16_r16           nop                         #  30    0x41  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  31    0x43  4      OPC=movl_m32_r32           nop                         #  31    0x42  1      OPC=nop                  
  addl $0x4, %ecx             #  32    0x47  3      OPC=addl_r32_imm8          nop                         #  32    0x43  1      OPC=nop                  
  addl $0x4, %edx             #  33    0x4a  3      OPC=addl_r32_imm8          nop                         #  33    0x44  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4d  4      OPC=movl_r32_m32           nop                         #  34    0x45  1      OPC=nop                  
  movl %r8d, %r9d             #  35    0x51  3      OPC=movl_r32_r32           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  leal -0x1010101(%r8), %esi  #  36    0x54  7      OPC=leal_r32_m16           movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  notq %r9                    #  37    0x5b  3      OPC=notq_r64               addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  andl %esi, %r9d             #  38    0x5e  3      OPC=andl_r32_r32           addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d      #  39    0x61  7      OPC=andl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  je .L_126820                #  40    0x68  6      OPC=je_label_1             movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  nop                         #  41    0x6e  1      OPC=nop                    leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  nop                         #  42    0x6f  1      OPC=nop                    notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  nop                         #  43    0x70  1      OPC=nop                    andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  nop                         #  44    0x71  1      OPC=nop                    andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x72  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
.L_126860:                    #        0x7d  0      OPC=<label>                nop                         #  56    0x7d  1      OPC=nop                  
  xorl %esp, %edx             #  56    0x7d  2      OPC=xorl_r32_r32_1         nop                         #  57    0x7e  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi  #  57    0x7f  5      OPC=movsbl_r32_m8          nop                         #  58    0x7f  1      OPC=nop                  
  addq $0x1, %rdx             #  58    0x84  4      OPC=addq_r64_imm8        .L_126860:                    #        0x80  0      OPC=<label>              
  orl %esp, %ecx              #  59    0x88  2      OPC=orl_r32_r32            movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  60    0x8a  4      OPC=movb_m8_r8             movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  addw $0x1, %cx              #  61    0x8e  4      OPC=addw_r16_imm8          addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  testb %sil, %sil            #  62    0x92  3      OPC=testb_r8_r8            orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  jne .L_126860               #  63    0x95  6      OPC=jne_label_1            movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  nop                         #  64    0x9b  1      OPC=nop                    addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  nop                         #  65    0x9c  1      OPC=nop                    testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  nop                         #  66    0x9d  1      OPC=nop                    jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0xa0  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa1  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa2  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa3  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa4  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa5  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa6  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa7  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xa8  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xa9  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  nop                         #  79    0xaa  1      OPC=nop                    nop                         #  79    0xaa  1      OPC=nop                  
  nop                         #  80    0xab  1      OPC=nop                    nop                         #  80    0xab  1      OPC=nop                  
  nop                         #  81    0xac  1      OPC=nop                    nop                         #  81    0xac  1      OPC=nop                  
  nop                         #  82    0xad  1      OPC=nop                    nop                         #  82    0xad  1      OPC=nop                  
  nop                         #  83    0xae  1      OPC=nop                    nop                         #  83    0xae  1      OPC=nop                  
  nop                         #  84    0xaf  1      OPC=nop                    nop                         #  84    0xaf  1      OPC=nop                  
  popq %r11                   #  85    0xb0  2      OPC=popq_r64_1             nop                         #  85    0xb0  1      OPC=nop                  
  andl $0xe0, %r11d           #  86    0xb2  4      OPC=andl_r32_imm8          nop                         #  86    0xb1  1      OPC=nop                  
  addq %r15, %r11             #  87    0xb6  3      OPC=addq_r64_r64           popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
  jmpq %r11                   #  88    0xb9  3      OPC=jmpq_r64               andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                         jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (261)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x3   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  nop                         #  4     0x4   1      OPC=nop                    movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  nop                         #  5     0x5   1      OPC=nop                    nop                         #  5     0x7   1      OPC=nop                  
  movl %edi, %eax             #  6     0x6   2      OPC=movl_r32_r32_1         andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  7     0x8   3      OPC=andl_r32_imm8          movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  nop                         #  8     0xb   1      OPC=nop                    jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  movl %eax, %ecx             #  9     0xc   2      OPC=movl_r32_r32           orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  jne .L_126860               #  10    0xe   6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  addw %di, %si               #  11    0x14  3      OPC=addw_r16_r16_1         movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x17  4      OPC=movl_r32_m32           notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  nop                         #  13    0x1b  1      OPC=nop                    nop                         #  13    0x1f  1      OPC=nop                  
  nop                         #  14    0x1c  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  nop                         #  15    0x1d  1      OPC=nop                    nop                         #  15    0x21  1      OPC=nop                  
  nop                         #  16    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x1f  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x20  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  nop                         #  19    0x21  1      OPC=nop                    jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  orl %r8d, %esi              #  20    0x22  3      OPC=orl_r32_r32_1          nop                         #  20    0x37  1      OPC=nop                  
  notl %esi                   #  21    0x25  2      OPC=notl_r32               nop                         #  21    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  22    0x27  6      OPC=andl_r32_imm32         nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  26    0x30  7      OPC=leaq_r64_m32           nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x37  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  andl %edi, %esi             #  28    0x38  2      OPC=andl_r32_r32_1         nop                         #  28    0x3f  1      OPC=nop                  
  jne .L_126860               #  29    0x3a  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  29    0x40  1      OPC=nop                  
  orl %esp, %ecx              #  30    0x40  2      OPC=orl_r32_r32            nop                         #  30    0x41  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  31    0x42  4      OPC=movl_m32_r32           nop                         #  31    0x42  1      OPC=nop                  
  addl $0x4, %ecx             #  32    0x46  3      OPC=addl_r32_imm8          nop                         #  32    0x43  1      OPC=nop                  
  addl $0x4, %edx             #  33    0x49  3      OPC=addl_r32_imm8          nop                         #  33    0x44  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4c  4      OPC=movl_r32_m32           nop                         #  34    0x45  1      OPC=nop                  
  movl %r8d, %r9d             #  35    0x50  3      OPC=movl_r32_r32           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  leal -0x1010101(%r8), %esi  #  36    0x53  7      OPC=leal_r32_m16           movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  notq %r9                    #  37    0x5a  3      OPC=notq_r64               addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  andl %esi, %r9d             #  38    0x5d  3      OPC=andl_r32_r32           addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d      #  39    0x60  7      OPC=andl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  je .L_126820                #  40    0x67  6      OPC=je_label_1             movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  nop                         #  41    0x6d  1      OPC=nop                    leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  nop                         #  42    0x6e  1      OPC=nop                    notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  nop                         #  43    0x6f  1      OPC=nop                    andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  nop                         #  44    0x70  1      OPC=nop                    andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x71  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x72  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x73  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x74  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x75  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x76  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x77  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x78  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x79  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nopl %eax                   #  54    0x7a  3      OPC=nopl_r32               nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7e  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  57    0x7e  1      OPC=nop                  
  orl %esp, %edx              #  57    0x7f  2      OPC=orl_r32_r32            nop                         #  58    0x7f  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi  #  58    0x81  5      OPC=movsbl_r32_m8        .L_126860:                    #        0x80  0      OPC=<label>              
  addq $0x1, %rdx             #  59    0x86  4      OPC=addq_r64_imm8          movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  movw %cx, %cx               #  60    0x8a  3      OPC=movw_r16_r16           movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8d  4      OPC=movb_m8_r8             addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  addw $0x1, %cx              #  62    0x91  4      OPC=addw_r16_imm8          orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  testb %sil, %sil            #  63    0x95  3      OPC=testb_r8_r8            movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  jne .L_126860               #  64    0x98  6      OPC=jne_label_1            addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  nop                         #  65    0x9e  1      OPC=nop                    testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  nop                         #  66    0x9f  1      OPC=nop                    jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  nop                         #  67    0xa0  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0xa1  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0xa2  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa3  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa4  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa5  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa6  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa7  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa8  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa9  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xaa  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xab  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  nop                         #  79    0xac  1      OPC=nop                    nop                         #  79    0xaa  1      OPC=nop                  
  nop                         #  80    0xad  1      OPC=nop                    nop                         #  80    0xab  1      OPC=nop                  
  nop                         #  81    0xae  1      OPC=nop                    nop                         #  81    0xac  1      OPC=nop                  
  nop                         #  82    0xaf  1      OPC=nop                    nop                         #  82    0xad  1      OPC=nop                  
  nop                         #  83    0xb0  1      OPC=nop                    nop                         #  83    0xae  1      OPC=nop                  
  nop                         #  84    0xb1  1      OPC=nop                    nop                         #  84    0xaf  1      OPC=nop                  
  nop                         #  85    0xb2  1      OPC=nop                    nop                         #  85    0xb0  1      OPC=nop                  
  popq %r11                   #  86    0xb3  2      OPC=popq_r64_1             nop                         #  86    0xb1  1      OPC=nop                  
  andl $0xe0, %r11d           #  87    0xb5  4      OPC=andl_r32_imm8          popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
  addq %r15, %r11             #  88    0xb9  3      OPC=addq_r64_r64           andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
  jmpq %r11                   #  89    0xbc  3      OPC=jmpq_r64               addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
.size strcpy, .-strcpy                                                                                                                                    
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (260)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x3   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  nop                         #  4     0x4   1      OPC=nop                    movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  movl %edi, %eax             #  5     0x5   2      OPC=movl_r32_r32_1         nop                         #  5     0x7   1      OPC=nop                  
  andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8          andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32           movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  nop                         #  8     0xc   1      OPC=nop                    jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  nop                         #  9     0xd   1      OPC=nop                    orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  jne .L_126860               #  10    0xe   6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  addw %di, %si               #  11    0x14  3      OPC=addw_r16_r16_1         movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x17  4      OPC=movl_r32_m32           notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  nop                         #  13    0x1b  1      OPC=nop                    nop                         #  13    0x1f  1      OPC=nop                  
  nop                         #  14    0x1c  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  nop                         #  15    0x1d  1      OPC=nop                    nop                         #  15    0x21  1      OPC=nop                  
  nop                         #  16    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x1f  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x20  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  nop                         #  19    0x21  1      OPC=nop                    jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  nop                         #  20    0x22  1      OPC=nop                    nop                         #  20    0x37  1      OPC=nop                  
  orl %r8d, %esi              #  21    0x23  3      OPC=orl_r32_r32_1          nop                         #  21    0x38  1      OPC=nop                  
  notl %esi                   #  22    0x26  2      OPC=notl_r32               nop                         #  22    0x39  1      OPC=nop                  
  andl $0x80808080, %esi      #  23    0x28  6      OPC=andl_r32_imm32         nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  26    0x30  7      OPC=leaq_r64_m32           nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x37  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  andl %edi, %esi             #  28    0x38  2      OPC=andl_r32_r32_1         nop                         #  28    0x3f  1      OPC=nop                  
  jne .L_126860               #  29    0x3a  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  29    0x40  1      OPC=nop                  
  orl %esp, %ecx              #  30    0x40  2      OPC=orl_r32_r32            nop                         #  30    0x41  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  31    0x42  4      OPC=movl_m32_r32           nop                         #  31    0x42  1      OPC=nop                  
  addl $0x4, %ecx             #  32    0x46  3      OPC=addl_r32_imm8          nop                         #  32    0x43  1      OPC=nop                  
  addl $0x4, %edx             #  33    0x49  3      OPC=addl_r32_imm8          nop                         #  33    0x44  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4c  4      OPC=movl_r32_m32           nop                         #  34    0x45  1      OPC=nop                  
  movl %r8d, %r9d             #  35    0x50  3      OPC=movl_r32_r32           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  leal -0x1010101(%r8), %esi  #  36    0x53  7      OPC=leal_r32_m16           movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  notq %r9                    #  37    0x5a  3      OPC=notq_r64               addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  andl %esi, %r9d             #  38    0x5d  3      OPC=andl_r32_r32           addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d      #  39    0x60  7      OPC=andl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  je .L_126820                #  40    0x67  6      OPC=je_label_1             movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  nop                         #  41    0x6d  1      OPC=nop                    leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  nop                         #  42    0x6e  1      OPC=nop                    notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  nop                         #  43    0x6f  1      OPC=nop                    andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  nop                         #  44    0x70  1      OPC=nop                    andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x71  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x72  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x73  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x74  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x75  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x76  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x77  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x78  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x79  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7a  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nopl %eax                   #  55    0x7b  3      OPC=nopl_r32               nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7e  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7f  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>                nop                         #  58    0x7f  1      OPC=nop                  
  orl %esp, %edx              #  58    0x80  2      OPC=orl_r32_r32          .L_126860:                    #        0x80  0      OPC=<label>              
  movsbl (%r15,%rdx,1), %esi  #  59    0x82  5      OPC=movsbl_r32_m8          movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  addq $0x1, %rdx             #  60    0x87  4      OPC=addq_r64_imm8          movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movw %cx, %cx               #  61    0x8b  3      OPC=movw_r16_r16           addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  movb %sil, (%r15,%rcx,1)    #  62    0x8e  4      OPC=movb_m8_r8             orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  addw $0x1, %cx              #  63    0x92  4      OPC=addw_r16_imm8          movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  64    0x96  3      OPC=testb_r8_r8            addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  jne .L_126860               #  65    0x99  6      OPC=jne_label_1            testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  nop                         #  66    0x9f  1      OPC=nop                    jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  nop                         #  67    0xa0  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0xa1  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0xa2  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa3  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa4  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa5  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa6  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa7  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa8  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa9  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xaa  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xab  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  nop                         #  79    0xac  1      OPC=nop                    nop                         #  79    0xaa  1      OPC=nop                  
  nop                         #  80    0xad  1      OPC=nop                    nop                         #  80    0xab  1      OPC=nop                  
  nop                         #  81    0xae  1      OPC=nop                    nop                         #  81    0xac  1      OPC=nop                  
  nop                         #  82    0xaf  1      OPC=nop                    nop                         #  82    0xad  1      OPC=nop                  
  nop                         #  83    0xb0  1      OPC=nop                    nop                         #  83    0xae  1      OPC=nop                  
  nop                         #  84    0xb1  1      OPC=nop                    nop                         #  84    0xaf  1      OPC=nop                  
  nop                         #  85    0xb2  1      OPC=nop                    nop                         #  85    0xb0  1      OPC=nop                  
  nop                         #  86    0xb3  1      OPC=nop                    nop                         #  86    0xb1  1      OPC=nop                  
  popq %r11                   #  87    0xb4  2      OPC=popq_r64_1             popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  88    0xb6  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  89    0xba  3      OPC=addq_r64_r64           addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
  jmpq %r11                   #  90    0xbd  3      OPC=jmpq_r64               jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (259)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x1   2      OPC=movl_r32_r32_1         nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x3   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  nop                         #  4     0x4   1      OPC=nop                    movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  nop                         #  5     0x5   1      OPC=nop                    nop                         #  5     0x7   1      OPC=nop                  
  movl %esi, %edx             #  6     0x6   2      OPC=movl_r32_r32           andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  movl %eax, %ecx             #  7     0x8   2      OPC=movl_r32_r32           movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  andl $0x3, %edi             #  8     0xa   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  jne .L_126860               #  9     0xd   6      OPC=jne_label_1            orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  xorw %di, %si               #  10    0x13  3      OPC=xorw_r16_r16_1         movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x16  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  nop                         #  12    0x1a  1      OPC=nop                    notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  orl %r8d, %esi              #  13    0x1b  3      OPC=orl_r32_r32_1          nop                         #  13    0x1f  1      OPC=nop                  
  nop                         #  14    0x1e  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  nop                         #  15    0x1f  1      OPC=nop                    nop                         #  15    0x21  1      OPC=nop                  
  nop                         #  16    0x20  1      OPC=nop                    andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x21  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x22  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  notl %esi                   #  19    0x23  2      OPC=notl_r32               jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  20    0x25  6      OPC=andl_r32_imm32         nop                         #  20    0x37  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x38  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  leaq -0x1010101(%r8), %rdi  #  26    0x30  7      OPC=leaq_r64_m32           nop                         #  26    0x3d  1      OPC=nop                  
  andl %edi, %esi             #  27    0x37  2      OPC=andl_r32_r32_1         nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x39  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
  jne .L_126860               #  29    0x3a  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  29    0x40  1      OPC=nop                  
  orl %esp, %ecx              #  30    0x40  2      OPC=orl_r32_r32            nop                         #  30    0x41  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  31    0x42  4      OPC=movl_m32_r32           nop                         #  31    0x42  1      OPC=nop                  
  addl $0x4, %ecx             #  32    0x46  3      OPC=addl_r32_imm8          nop                         #  32    0x43  1      OPC=nop                  
  addl $0x4, %edx             #  33    0x49  3      OPC=addl_r32_imm8          nop                         #  33    0x44  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  34    0x4c  4      OPC=movl_r32_m32           nop                         #  34    0x45  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  35    0x50  7      OPC=leal_r32_m16           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  movl %r8d, %r9d             #  36    0x57  3      OPC=movl_r32_r32           movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  notq %r9                    #  37    0x5a  3      OPC=notq_r64               addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  andl %esi, %r9d             #  38    0x5d  3      OPC=andl_r32_r32           addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d      #  39    0x60  7      OPC=andl_r32_imm32         movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  je .L_126820                #  40    0x67  6      OPC=je_label_1             movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  nop                         #  41    0x6d  1      OPC=nop                    leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  nop                         #  42    0x6e  1      OPC=nop                    notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  nop                         #  43    0x6f  1      OPC=nop                    andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  nop                         #  44    0x70  1      OPC=nop                    andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x71  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x72  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x73  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x74  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x75  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x76  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x77  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x78  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x79  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7a  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x7b  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7c  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x7d  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7e  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x7f  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x80  0      OPC=<label>                movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  orl %esp, %edx              #  60    0x80  2      OPC=orl_r32_r32            movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi  #  61    0x82  5      OPC=movsbl_r32_m8          addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  addq $0x1, %rdx             #  62    0x87  4      OPC=addq_r64_imm8          orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  orl %ecx, %ecx              #  63    0x8b  2      OPC=orl_r32_r32            movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  64    0x8d  4      OPC=movb_m8_r8             addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  addw $0x1, %cx              #  65    0x91  4      OPC=addw_r16_imm8          testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  testb %sil, %sil            #  66    0x95  3      OPC=testb_r8_r8            jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  jne .L_126860               #  67    0x98  6      OPC=jne_label_1            nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  nop                         #  69    0x9f  1      OPC=nop                    nop                         #  69    0xa0  1      OPC=nop                  
  nop                         #  70    0xa0  1      OPC=nop                    nop                         #  70    0xa1  1      OPC=nop                  
  nop                         #  71    0xa1  1      OPC=nop                    nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa2  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa3  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa4  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa5  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa6  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xa7  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xa8  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  nop                         #  79    0xa9  1      OPC=nop                    nop                         #  79    0xaa  1      OPC=nop                  
  nop                         #  80    0xaa  1      OPC=nop                    nop                         #  80    0xab  1      OPC=nop                  
  nop                         #  81    0xab  1      OPC=nop                    nop                         #  81    0xac  1      OPC=nop                  
  nop                         #  82    0xac  1      OPC=nop                    nop                         #  82    0xad  1      OPC=nop                  
  nop                         #  83    0xad  1      OPC=nop                    nop                         #  83    0xae  1      OPC=nop                  
  nop                         #  84    0xae  1      OPC=nop                    nop                         #  84    0xaf  1      OPC=nop                  
  nop                         #  85    0xaf  1      OPC=nop                    nop                         #  85    0xb0  1      OPC=nop                  
  nop                         #  86    0xb0  1      OPC=nop                    nop                         #  86    0xb1  1      OPC=nop                  
  nop                         #  87    0xb1  1      OPC=nop                    popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
  popq %r11                   #  88    0xb2  2      OPC=popq_r64_1             andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
  andl $0xe0, %r11d           #  89    0xb4  4      OPC=andl_r32_imm8          addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
  addq %r15, %r11             #  90    0xb8  3      OPC=addq_r64_r64           jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
  jmpq %r11                   #  91    0xbb  3      OPC=jmpq_r64                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (258)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  movl %edi, %ecx             #  3     0x2   2      OPC=movl_r32_r32           nop                         #  3     0x3   1      OPC=nop                  
  movl %ecx, %eax             #  4     0x4   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           nop                         #  5     0x7   1      OPC=nop                  
  andl $0x3, %edi             #  6     0x8   3      OPC=andl_r32_imm8          andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  jne .L_126860               #  7     0xb   6      OPC=jne_label_1            movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  subw %bp, %si               #  8     0x11  3      OPC=subw_r16_r16_1         jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d    #  9     0x14  4      OPC=movl_r32_m32           orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  nop                         #  10    0x18  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  nop                         #  11    0x19  1      OPC=nop                    movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  nop                         #  12    0x1a  1      OPC=nop                    notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  nop                         #  13    0x1b  1      OPC=nop                    nop                         #  13    0x1f  1      OPC=nop                  
  nop                         #  14    0x1c  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  orq %r8, %rsi               #  15    0x1d  3      OPC=orq_r64_r64_1          nop                         #  15    0x21  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  16    0x20  7      OPC=leal_r32_m64           andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  nop                         #  17    0x27  1      OPC=nop                    leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x28  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  nop                         #  19    0x29  1      OPC=nop                    jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x37  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x38  1      OPC=nop                  
  negl %esi                   #  22    0x2c  2      OPC=negl_r32               nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x2e  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2f  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x30  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  andl $0xffffffc0, %esi      #  26    0x31  6      OPC=andl_r32_imm32         nop                         #  26    0x3d  1      OPC=nop                  
  andb %dil, %sil             #  27    0x37  3      OPC=andb_r8_r8_1           nop                         #  27    0x3e  1      OPC=nop                  
  jne .L_126860               #  28    0x3a  6      OPC=jne_label_1            nop                         #  28    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  xorl %ebp, %ecx             #  29    0x40  2      OPC=xorl_r32_r32_1         nop                         #  29    0x40  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  30    0x42  4      OPC=movl_m32_r32           nop                         #  30    0x41  1      OPC=nop                  
  addl $0x4, %ecx             #  31    0x46  3      OPC=addl_r32_imm8          nop                         #  31    0x42  1      OPC=nop                  
  addl $0x4, %edx             #  32    0x49  3      OPC=addl_r32_imm8          nop                         #  32    0x43  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  33    0x4c  4      OPC=movl_r32_m32           nop                         #  33    0x44  1      OPC=nop                  
  movl %r8d, %r9d             #  34    0x50  3      OPC=movl_r32_r32           nop                         #  34    0x45  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  35    0x53  7      OPC=leal_r32_m16           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  notq %r9                    #  36    0x5a  3      OPC=notq_r64               movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  andl %esi, %r9d             #  37    0x5d  3      OPC=andl_r32_r32           addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  andq $0x80808080, %r9       #  38    0x60  7      OPC=andq_r64_imm32         addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  je .L_126820                #  39    0x67  6      OPC=je_label_1             movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  nop                         #  40    0x6d  1      OPC=nop                    movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  nop                         #  41    0x6e  1      OPC=nop                    leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  nop                         #  42    0x6f  1      OPC=nop                    notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  nop                         #  43    0x70  1      OPC=nop                    andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  nop                         #  44    0x71  1      OPC=nop                    andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x72  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nopl %eax                   #  55    0x7c  3      OPC=nopl_r32               nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x7f  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>                nop                         #  57    0x7e  1      OPC=nop                  
  subl %esp, %edx             #  57    0x80  2      OPC=subl_r32_r32_1         nop                         #  58    0x7f  1      OPC=nop                  
  movsbw (%r15,%rdx,1), %si   #  58    0x82  6      OPC=movsbw_r16_m8        .L_126860:                    #        0x80  0      OPC=<label>              
  addq $0x1, %rdx             #  59    0x88  4      OPC=addq_r64_imm8          movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  andl %ecx, %ecx             #  60    0x8c  2      OPC=andl_r32_r32_1         movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8e  4      OPC=movb_m8_r8             addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  addw $0x1, %cx              #  62    0x92  4      OPC=addw_r16_imm8          orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
  testb %sil, %sil            #  63    0x96  3      OPC=testb_r8_r8            movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  jne .L_126860               #  64    0x99  6      OPC=jne_label_1            addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  nop                         #  65    0x9f  1      OPC=nop                    testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  nop                         #  66    0xa0  1      OPC=nop                    jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  nop                         #  67    0xa1  1      OPC=nop                    nop                         #  67    0x9e  1      OPC=nop                  
  nop                         #  68    0xa2  1      OPC=nop                    nop                         #  68    0x9f  1      OPC=nop                  
  popq %r11                   #  69    0xa3  2      OPC=popq_r64_1             nop                         #  69    0xa0  1      OPC=nop                  
  andl $0xe0, %r11d           #  70    0xa5  4      OPC=andl_r32_imm8          nop                         #  70    0xa1  1      OPC=nop                  
  addq %r15, %r11             #  71    0xa9  3      OPC=addq_r64_r64           nop                         #  71    0xa2  1      OPC=nop                  
  jmpq %r11                   #  72    0xac  3      OPC=jmpq_r64               nop                         #  72    0xa3  1      OPC=nop                  
                                                                               nop                         #  73    0xa4  1      OPC=nop                  
.size strcpy, .-strcpy                                                         nop                         #  74    0xa5  1      OPC=nop                  
                                                                               nop                         #  75    0xa6  1      OPC=nop                  
                                                                               nop                         #  76    0xa7  1      OPC=nop                  
                                                                               nop                         #  77    0xa8  1      OPC=nop                  
                                                                               nop                         #  78    0xa9  1      OPC=nop                  
                                                                               nop                         #  79    0xaa  1      OPC=nop                  
                                                                               nop                         #  80    0xab  1      OPC=nop                  
                                                                               nop                         #  81    0xac  1      OPC=nop                  
                                                                               nop                         #  82    0xad  1      OPC=nop                  
                                                                               nop                         #  83    0xae  1      OPC=nop                  
                                                                               nop                         #  84    0xaf  1      OPC=nop                  
                                                                               nop                         #  85    0xb0  1      OPC=nop                  
                                                                               nop                         #  86    0xb1  1      OPC=nop                  
                                                                               popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (257)                                                 Lowest Known Correct Cost (276)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  movl %edi, %eax             #  4     0x3   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x4   3      OPC=movq_r64_r64_1       
  andl $0x3, %edi             #  5     0x5   3      OPC=andl_r32_imm8          nop                         #  5     0x7   1      OPC=nop                  
  movl %eax, %ecx             #  6     0x8   2      OPC=movl_r32_r32_1         andl $0x1, %edi             #  6     0x8   3      OPC=andl_r32_imm8        
  movl %esi, %edx             #  7     0xa   2      OPC=movl_r32_r32           movq %rax, %rcx             #  7     0xb   3      OPC=movq_r64_r64         
  nop                         #  8     0xc   1      OPC=nop                    jne .L_126860               #  8     0xe   6      OPC=jne_label_1          
  nop                         #  9     0xd   1      OPC=nop                    orl %ebp, %esi              #  9     0x14  2      OPC=orl_r32_r32          
  nop                         #  10    0xe   1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x16  4      OPC=movl_r32_m32         
  nop                         #  11    0xf   1      OPC=nop                    movl %r8d, %esi             #  11    0x1a  3      OPC=movl_r32_r32         
  nop                         #  12    0x10  1      OPC=nop                    notl %esi                   #  12    0x1d  2      OPC=notl_r32             
  jne .L_126860               #  13    0x11  6      OPC=jne_label_1            nop                         #  13    0x1f  1      OPC=nop                  
  subl %esp, %esi             #  14    0x17  2      OPC=subl_r32_r32           nop                         #  14    0x20  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  15    0x19  4      OPC=movl_r32_m32           nop                         #  15    0x21  1      OPC=nop                  
  orq %r8, %rsi               #  16    0x1d  3      OPC=orq_r64_r64_1          andl $0x80808080, %esi      #  16    0x22  6      OPC=andl_r32_imm32       
  negq %rsi                   #  17    0x20  3      OPC=negq_r64               leaq -0x1010101(%r8), %rdi  #  17    0x28  7      OPC=leaq_r64_m32         
  nop                         #  18    0x23  1      OPC=nop                    andl %edi, %esi             #  18    0x2f  2      OPC=andl_r32_r32_1       
  nop                         #  19    0x24  1      OPC=nop                    jne .L_126860               #  19    0x31  6      OPC=jne_label_1          
  nop                         #  20    0x25  1      OPC=nop                    nop                         #  20    0x37  1      OPC=nop                  
  andq $0xffffffe0, %rsi      #  21    0x26  7      OPC=andq_r64_imm32         nop                         #  21    0x38  1      OPC=nop                  
  nop                         #  22    0x2d  1      OPC=nop                    nop                         #  22    0x39  1      OPC=nop                  
  nop                         #  23    0x2e  1      OPC=nop                    nop                         #  23    0x3a  1      OPC=nop                  
  nop                         #  24    0x2f  1      OPC=nop                    nop                         #  24    0x3b  1      OPC=nop                  
  nop                         #  25    0x30  1      OPC=nop                    nop                         #  25    0x3c  1      OPC=nop                  
  nop                         #  26    0x31  1      OPC=nop                    nop                         #  26    0x3d  1      OPC=nop                  
  nop                         #  27    0x32  1      OPC=nop                    nop                         #  27    0x3e  1      OPC=nop                  
  nop                         #  28    0x33  1      OPC=nop                    nop                         #  28    0x3f  1      OPC=nop                  
  nop                         #  29    0x34  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  30    0x35  1      OPC=nop                    nop                         #  29    0x40  1      OPC=nop                  
  nop                         #  31    0x36  1      OPC=nop                    nop                         #  30    0x41  1      OPC=nop                  
  andb %dl, %sil              #  32    0x37  3      OPC=andb_r8_r8             nop                         #  31    0x42  1      OPC=nop                  
  jne .L_126860               #  33    0x3a  6      OPC=jne_label_1            nop                         #  32    0x43  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  33    0x44  1      OPC=nop                  
  xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1         nop                         #  34    0x45  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32           orl %ecx, %ecx              #  35    0x46  2      OPC=orl_r32_r32_1        
  addl $0x4, %ecx             #  36    0x46  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  36    0x48  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  37    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  37    0x4c  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  38    0x4c  4      OPC=movl_r32_m32           addl $0x4, %edx             #  38    0x4f  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d             #  39    0x50  3      OPC=movl_r32_r32           movl (%r15,%rdx,1), %r8d    #  39    0x52  4      OPC=movl_r32_m32         
  leaq -0x1010101(%r8), %rsi  #  40    0x53  7      OPC=leaq_r64_m32           movl %r8d, %r9d             #  40    0x56  3      OPC=movl_r32_r32         
  notl %r9d                   #  41    0x5a  3      OPC=notl_r32               leaq -0x1010101(%r8), %rsi  #  41    0x59  7      OPC=leaq_r64_m32         
  andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64           notl %r9d                   #  42    0x60  3      OPC=notl_r32             
  andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32         andl %esi, %r9d             #  43    0x63  3      OPC=andl_r32_r32         
  je .L_126820                #  44    0x67  6      OPC=je_label_1             andl $0x80808080, %r9d      #  44    0x66  7      OPC=andl_r32_imm32       
  nop                         #  45    0x6d  1      OPC=nop                    je .L_126820                #  45    0x6d  6      OPC=je_label_1           
  nop                         #  46    0x6e  1      OPC=nop                    nop                         #  46    0x73  1      OPC=nop                  
  nop                         #  47    0x6f  1      OPC=nop                    nop                         #  47    0x74  1      OPC=nop                  
  nop                         #  48    0x70  1      OPC=nop                    nop                         #  48    0x75  1      OPC=nop                  
  nop                         #  49    0x71  1      OPC=nop                    nop                         #  49    0x76  1      OPC=nop                  
  nop                         #  50    0x72  1      OPC=nop                    nop                         #  50    0x77  1      OPC=nop                  
  nop                         #  51    0x73  1      OPC=nop                    nop                         #  51    0x78  1      OPC=nop                  
  nop                         #  52    0x74  1      OPC=nop                    nop                         #  52    0x79  1      OPC=nop                  
  nop                         #  53    0x75  1      OPC=nop                    nop                         #  53    0x7a  1      OPC=nop                  
  nop                         #  54    0x76  1      OPC=nop                    nop                         #  54    0x7b  1      OPC=nop                  
  nop                         #  55    0x77  1      OPC=nop                    nop                         #  55    0x7c  1      OPC=nop                  
  nop                         #  56    0x78  1      OPC=nop                    nop                         #  56    0x7d  1      OPC=nop                  
  nop                         #  57    0x79  1      OPC=nop                    nop                         #  57    0x7e  1      OPC=nop                  
  nop                         #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7f  1      OPC=nop                  
  nop                         #  59    0x7b  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  60    0x7c  1      OPC=nop                    movl %edx, %edx             #  59    0x80  2      OPC=movl_r32_r32         
  nop                         #  61    0x7d  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  60    0x82  5      OPC=movsbl_r32_m8        
  nop                         #  62    0x7e  1      OPC=nop                    addq $0x1, %rdx             #  61    0x87  4      OPC=addq_r64_imm8        
  nop                         #  63    0x7f  1      OPC=nop                    orl %esp, %ecx              #  62    0x8b  2      OPC=orl_r32_r32          
.L_126860:                    #        0x80  0      OPC=<label>                movb %sil, (%r15,%rcx,1)    #  63    0x8d  4      OPC=movb_m8_r8           
  orl %esp, %edx              #  64    0x80  2      OPC=orl_r32_r32_1          addw $0x1, %cx              #  64    0x91  4      OPC=addw_r16_imm8        
  movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8          testb %sil, %sil            #  65    0x95  3      OPC=testb_r8_r8          
  addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8          jne .L_126860               #  66    0x98  6      OPC=jne_label_1          
  andw %cx, %cx               #  67    0x8c  3      OPC=andw_r16_r16           nop                         #  67    0x9e  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  68    0x8f  4      OPC=movb_m8_r8             nop                         #  68    0x9f  1      OPC=nop                  
  addq $0x1, %rcx             #  69    0x93  4      OPC=addq_r64_imm8          nop                         #  69    0xa0  1      OPC=nop                  
  testb %sil, %sil            #  70    0x97  3      OPC=testb_r8_r8            nop                         #  70    0xa1  1      OPC=nop                  
  jne .L_126860               #  71    0x9a  6      OPC=jne_label_1            nop                         #  71    0xa2  1      OPC=nop                  
  nop                         #  72    0xa0  1      OPC=nop                    nop                         #  72    0xa3  1      OPC=nop                  
  nop                         #  73    0xa1  1      OPC=nop                    nop                         #  73    0xa4  1      OPC=nop                  
  nop                         #  74    0xa2  1      OPC=nop                    nop                         #  74    0xa5  1      OPC=nop                  
  nop                         #  75    0xa3  1      OPC=nop                    nop                         #  75    0xa6  1      OPC=nop                  
  nop                         #  76    0xa4  1      OPC=nop                    nop                         #  76    0xa7  1      OPC=nop                  
  nop                         #  77    0xa5  1      OPC=nop                    nop                         #  77    0xa8  1      OPC=nop                  
  nop                         #  78    0xa6  1      OPC=nop                    nop                         #  78    0xa9  1      OPC=nop                  
  nop                         #  79    0xa7  1      OPC=nop                    nop                         #  79    0xaa  1      OPC=nop                  
  nop                         #  80    0xa8  1      OPC=nop                    nop                         #  80    0xab  1      OPC=nop                  
  nop                         #  81    0xa9  1      OPC=nop                    nop                         #  81    0xac  1      OPC=nop                  
  nop                         #  82    0xaa  1      OPC=nop                    nop                         #  82    0xad  1      OPC=nop                  
  nop                         #  83    0xab  1      OPC=nop                    nop                         #  83    0xae  1      OPC=nop                  
  nop                         #  84    0xac  1      OPC=nop                    nop                         #  84    0xaf  1      OPC=nop                  
  popq %r11                   #  85    0xad  2      OPC=popq_r64_1             nop                         #  85    0xb0  1      OPC=nop                  
  andl $0xe0, %r11d           #  86    0xaf  4      OPC=andl_r32_imm8          nop                         #  86    0xb1  1      OPC=nop                  
  addq %r15, %r11             #  87    0xb3  3      OPC=addq_r64_r64           popq %r11                   #  87    0xb2  2      OPC=popq_r64_1           
  jmpq %r11                   #  88    0xb6  3      OPC=jmpq_r64               andl $0xe0, %r11d           #  88    0xb4  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  89    0xb8  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                         jmpq %r11                   #  90    0xbb  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (257)                                                 Lowest Known Correct Cost (257)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x3   1      OPC=nop                  
  movl %edi, %eax             #  4     0x3   2      OPC=movl_r32_r32_1         nop                         #  4     0x4   1      OPC=nop                  
  andl $0x3, %edi             #  5     0x5   3      OPC=andl_r32_imm8          nop                         #  5     0x5   1      OPC=nop                  
  movl %eax, %ecx             #  6     0x8   2      OPC=movl_r32_r32_1         movl %eax, %ecx             #  6     0x6   2      OPC=movl_r32_r32_1       
  movl %esi, %edx             #  7     0xa   2      OPC=movl_r32_r32           movl %esi, %edx             #  7     0x8   2      OPC=movl_r32_r32         
  nop                         #  8     0xc   1      OPC=nop                    nop                         #  8     0xa   1      OPC=nop                  
  nop                         #  9     0xd   1      OPC=nop                    andl $0x3, %edi             #  9     0xb   3      OPC=andl_r32_imm8        
  nop                         #  10    0xe   1      OPC=nop                    jne .L_126860               #  10    0xe   6      OPC=jne_label_1          
  nop                         #  11    0xf   1      OPC=nop                    subl %esp, %esi             #  11    0x14  2      OPC=subl_r32_r32         
  nop                         #  12    0x10  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  12    0x16  4      OPC=movl_r32_m32         
  jne .L_126860               #  13    0x11  6      OPC=jne_label_1            orq %r8, %rsi               #  13    0x1a  3      OPC=orq_r64_r64_1        
  subl %esp, %esi             #  14    0x17  2      OPC=subl_r32_r32           negq %rsi                   #  14    0x1d  3      OPC=negq_r64             
  movl (%r15,%rsi,1), %r8d    #  15    0x19  4      OPC=movl_r32_m32           nop                         #  15    0x20  1      OPC=nop                  
  orq %r8, %rsi               #  16    0x1d  3      OPC=orq_r64_r64_1          nop                         #  16    0x21  1      OPC=nop                  
  negq %rsi                   #  17    0x20  3      OPC=negq_r64               nop                         #  17    0x22  1      OPC=nop                  
  nop                         #  18    0x23  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  nop                         #  19    0x24  1      OPC=nop                    nop                         #  19    0x24  1      OPC=nop                  
  nop                         #  20    0x25  1      OPC=nop                    nop                         #  20    0x25  1      OPC=nop                  
  andq $0xffffffe0, %rsi      #  21    0x26  7      OPC=andq_r64_imm32         nop                         #  21    0x26  1      OPC=nop                  
  nop                         #  22    0x2d  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                         #  23    0x2e  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                         #  24    0x2f  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  nop                         #  25    0x30  1      OPC=nop                    andq $0xfffffff0, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  nop                         #  26    0x31  1      OPC=nop                    nop                         #  26    0x31  1      OPC=nop                  
  nop                         #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                         #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                         #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                         #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                         #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  andb %dl, %sil              #  32    0x37  3      OPC=andb_r8_r8             jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  jne .L_126860               #  33    0x3a  6      OPC=jne_label_1            nop                         #  33    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1         xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  36    0x46  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  36    0x46  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  37    0x49  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  37    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  38    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  38    0x4c  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  39    0x50  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  39    0x50  3      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rsi  #  40    0x53  7      OPC=leaq_r64_m32           leaq -0x1010101(%r8), %rsi  #  40    0x53  7      OPC=leaq_r64_m32         
  notl %r9d                   #  41    0x5a  3      OPC=notl_r32               notl %r9d                   #  41    0x5a  3      OPC=notl_r32             
  andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64           andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                #  44    0x67  6      OPC=je_label_1             je .L_126820                #  44    0x67  6      OPC=je_label_1           
  nop                         #  45    0x6d  1      OPC=nop                    nop                         #  45    0x6d  1      OPC=nop                  
  nop                         #  46    0x6e  1      OPC=nop                    nop                         #  46    0x6e  1      OPC=nop                  
  nop                         #  47    0x6f  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                         #  48    0x70  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                         #  49    0x71  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                         #  50    0x72  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                         #  51    0x73  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                         #  52    0x74  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                         #  53    0x75  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                         #  54    0x76  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                         #  55    0x77  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                         #  56    0x78  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                         #  57    0x79  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                         #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                         #  59    0x7b  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                         #  60    0x7c  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                         #  61    0x7d  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                         #  62    0x7e  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                         #  63    0x7f  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  orl %esp, %edx              #  64    0x80  2      OPC=orl_r32_r32_1          subl %ebp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8          movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  andw %cx, %cx               #  67    0x8c  3      OPC=andw_r16_r16           andl %ecx, %ecx             #  67    0x8c  2      OPC=andl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  68    0x8f  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  addq $0x1, %rcx             #  69    0x93  4      OPC=addq_r64_imm8          addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  testb %sil, %sil            #  70    0x97  3      OPC=testb_r8_r8            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  jne .L_126860               #  71    0x9a  6      OPC=jne_label_1            jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                         #  72    0xa0  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                         #  73    0xa1  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                         #  74    0xa2  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                         #  75    0xa3  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                         #  76    0xa4  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                         #  77    0xa5  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                         #  78    0xa6  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                         #  79    0xa7  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                         #  80    0xa8  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                         #  81    0xa9  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                         #  82    0xaa  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                         #  83    0xab  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                         #  84    0xac  1      OPC=nop                    nop                         #  84    0xab  1      OPC=nop                  
  popq %r11                   #  85    0xad  2      OPC=popq_r64_1             nop                         #  85    0xac  1      OPC=nop                  
  andl $0xe0, %r11d           #  86    0xaf  4      OPC=andl_r32_imm8          popq %r11                   #  86    0xad  2      OPC=popq_r64_1           
  addq %r15, %r11             #  87    0xb3  3      OPC=addq_r64_r64           andl $0xe0, %r11d           #  87    0xaf  4      OPC=andl_r32_imm8        
  jmpq %r11                   #  88    0xb6  3      OPC=jmpq_r64               addq %r15, %r11             #  88    0xb3  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  89    0xb6  3      OPC=jmpq_r64             
.size strcpy, .-strcpy                                                                                                                                    
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (256)                                                 Lowest Known Correct Cost (256)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32           movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x4   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  nop                         #  4     0x5   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                         #  5     0x6   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1         movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  jne .L_126860               #  8     0xc   6      OPC=jne_label_1            jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32           subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1          orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  negq %rsi                   #  12    0x1b  3      OPC=negq_r64               negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  nop                         #  13    0x1e  1      OPC=nop                    nop                         #  13    0x1e  1      OPC=nop                  
  nop                         #  14    0x1f  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  nop                         #  15    0x20  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  nop                         #  16    0x21  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                         #  17    0x22  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                         #  18    0x23  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  nop                         #  19    0x24  1      OPC=nop                    nop                         #  19    0x24  1      OPC=nop                  
  nop                         #  20    0x25  1      OPC=nop                    nop                         #  20    0x25  1      OPC=nop                  
  nop                         #  21    0x26  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                         #  22    0x27  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                         #  23    0x28  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                         #  24    0x29  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32         andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  nop                         #  26    0x31  1      OPC=nop                    nop                         #  26    0x31  1      OPC=nop                  
  nop                         #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                         #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                         #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                         #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8             andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  jne .L_126860               #  32    0x39  6      OPC=jne_label_1            jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  nop                         #  33    0x3f  1      OPC=nop                    nop                         #  33    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1         xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64           movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32           leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  notl %r9d                   #  40    0x57  3      OPC=notl_r32               notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64           andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                #  44    0x67  6      OPC=je_label_1             je .L_126820                #  44    0x67  6      OPC=je_label_1           
  nop                         #  45    0x6d  1      OPC=nop                    nop                         #  45    0x6d  1      OPC=nop                  
  nop                         #  46    0x6e  1      OPC=nop                    nop                         #  46    0x6e  1      OPC=nop                  
  nop                         #  47    0x6f  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                         #  48    0x70  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                         #  49    0x71  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                         #  50    0x72  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                         #  51    0x73  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                         #  52    0x74  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                         #  53    0x75  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                         #  54    0x76  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                         #  55    0x77  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                         #  56    0x78  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                         #  57    0x79  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                         #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                         #  59    0x7b  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                         #  60    0x7c  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                         #  61    0x7d  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                         #  62    0x7e  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                         #  63    0x7f  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32           subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8          movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8          addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  jne .L_126860               #  71    0x99  6      OPC=jne_label_1            jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                         #  72    0x9f  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                         #  73    0xa0  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                         #  74    0xa1  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                         #  75    0xa2  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                         #  76    0xa3  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                         #  77    0xa4  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                         #  78    0xa5  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                         #  79    0xa6  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                         #  80    0xa7  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                         #  81    0xa8  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                         #  82    0xa9  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                         #  83    0xaa  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  popq %r11                   #  84    0xab  2      OPC=popq_r64_1             popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64           addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64               jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (253)                                                   Lowest Known Correct Cost (256)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %ecx               #  2     0x1   2      OPC=movl_r32_r32           movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  nop                           #  3     0x3   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32           nop                         #  4     0x5   1      OPC=nop                  
  movl %esi, %edx               #  5     0x6   2      OPC=movl_r32_r32           nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  andl $0x3, %edi               #  7     0x9   3      OPC=andl_r32_imm8          movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  jne .L_126860                 #  8     0xc   6      OPC=jne_label_1            jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  nop                           #  9     0x12  1      OPC=nop                    subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  nop                           #  10    0x13  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  addl %ebp, %esi               #  11    0x14  2      OPC=addl_r32_r32           orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  movl (%r15,%rsi,1), %r8d      #  12    0x16  4      OPC=movl_r32_m32           negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  nop                           #  13    0x1a  1      OPC=nop                    nop                         #  13    0x1e  1      OPC=nop                  
  nop                           #  14    0x1b  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  nop                           #  15    0x1c  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  nop                           #  16    0x1d  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  nop                           #  19    0x20  1      OPC=nop                    nop                         #  19    0x24  1      OPC=nop                  
  nop                           #  20    0x21  1      OPC=nop                    nop                         #  20    0x25  1      OPC=nop                  
  orl %r8d, %esi                #  21    0x22  3      OPC=orl_r32_r32_1          nop                         #  21    0x26  1      OPC=nop                  
  negl %esi                     #  22    0x25  2      OPC=negl_r32               nop                         #  22    0x27  1      OPC=nop                  
  nop                           #  23    0x27  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  nop                           #  24    0x28  1      OPC=nop                    nop                         #  24    0x29  1      OPC=nop                  
  nop                           #  25    0x29  1      OPC=nop                    andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  andl $0xffffffc0, %esi        #  26    0x2a  6      OPC=andl_r32_imm32         nop                         #  26    0x31  1      OPC=nop                  
  nop                           #  27    0x30  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  andb %dl, %sil                #  28    0x31  3      OPC=andb_r8_r8             nop                         #  28    0x33  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  nop                           #  32    0x37  1      OPC=nop                    jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  nop                           #  33    0x38  1      OPC=nop                    nop                         #  33    0x3f  1      OPC=nop                  
  jne .L_126860                 #  34    0x39  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  35    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
  nop                           #  36    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
.L_126820:                      #        0x41  0      OPC=<label>                addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  addl %ebp, %ecx               #  37    0x41  2      OPC=addl_r32_r32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  movl %r8d, (%r15,%rcx,1)      #  38    0x43  4      OPC=movl_m32_r32           movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  addl $0x4, %edx               #  39    0x47  3      OPC=addl_r32_imm8          leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  movl (%r15,%rdx,1), %r8d      #  40    0x4a  4      OPC=movl_r32_m32           notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  addl $0x4, %ecx               #  41    0x4e  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d               #  42    0x51  3      OPC=movl_r32_r32_1         andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  notq %r9                      #  43    0x54  3      OPC=notq_r64               andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  leal -0x1010101(%r8), %esi    #  44    0x57  7      OPC=leal_r32_m64           je .L_126820                #  44    0x67  6      OPC=je_label_1           
  andq %rsi, %r9                #  45    0x5e  3      OPC=andq_r64_r64           nop                         #  45    0x6d  1      OPC=nop                  
  andq $0x80808080, %r9         #  46    0x61  7      OPC=andq_r64_imm32         nop                         #  46    0x6e  1      OPC=nop                  
  je .L_126820                  #  47    0x68  6      OPC=je_label_1             nop                         #  47    0x6f  1      OPC=nop                  
  nopl %eax                     #  48    0x6e  3      OPC=nopl_r32               nop                         #  48    0x70  1      OPC=nop                  
  nopl %eax                     #  49    0x71  3      OPC=nopl_r32               nop                         #  49    0x71  1      OPC=nop                  
  nop                           #  50    0x74  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                           #  51    0x75  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                           #  52    0x76  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                           #  53    0x77  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                           #  54    0x78  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                           #  55    0x79  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                           #  56    0x7a  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                           #  57    0x7b  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                           #  58    0x7c  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                           #  59    0x7d  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                           #  60    0x7e  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                           #  61    0x7f  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                           #  62    0x80  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                           #  63    0x81  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
.L_126860:                      #        0x82  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  xorl %esp, %edx               #  64    0x82  2      OPC=xorl_r32_r32_1         subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  movsbq (%r15,%rdx,1), %rsi    #  65    0x84  5      OPC=movsbq_r64_m8          movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  addw $0x1, %dx                #  66    0x89  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  addq $0x1, %rcx               #  67    0x8d  4      OPC=addq_r64_imm8          movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)  #  68    0x91  5      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  testb %sil, %sil              #  69    0x96  3      OPC=testb_r8_r8            addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  jne .L_126860                 #  70    0x99  6      OPC=jne_label_1            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  nop                           #  71    0x9f  1      OPC=nop                    jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                           #  72    0xa0  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                           #  73    0xa1  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                           #  74    0xa2  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                           #  75    0xa3  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                           #  76    0xa4  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                           #  77    0xa5  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                           #  78    0xa6  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                           #  79    0xa7  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                           #  80    0xa8  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                           #  81    0xa9  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                           #  82    0xaa  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                           #  83    0xab  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                           #  84    0xac  1      OPC=nop                    popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  nop                           #  85    0xad  1      OPC=nop                    andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  nop                           #  86    0xae  1      OPC=nop                    addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  nop                           #  87    0xaf  1      OPC=nop                    jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
  nop                           #  88    0xb0  1      OPC=nop                                                                                               
  nop                           #  89    0xb1  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  90    0xb2  1      OPC=nop                                                                                               
  popq %r11                     #  91    0xb3  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  92    0xb5  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  93    0xb9  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  94    0xbc  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (252)                                                   Lowest Known Correct Cost (256)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %ecx               #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                           #  2     0x2   1      OPC=nop                    movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %eax               #  3     0x3   2      OPC=movl_r32_r32           nop                         #  3     0x4   1      OPC=nop                  
  movl %esi, %edx               #  4     0x5   2      OPC=movl_r32_r32           nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x7   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  andl $0x3, %edi               #  7     0x9   3      OPC=andl_r32_imm8          movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  jne .L_126860                 #  8     0xc   6      OPC=jne_label_1            jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  nop                           #  9     0x12  1      OPC=nop                    subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  nop                           #  10    0x13  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  addl %ebp, %esi               #  11    0x14  2      OPC=addl_r32_r32           orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  movl (%r15,%rsi,1), %r8d      #  12    0x16  4      OPC=movl_r32_m32           negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  nop                           #  13    0x1a  1      OPC=nop                    nop                         #  13    0x1e  1      OPC=nop                  
  nop                           #  14    0x1b  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  nop                           #  15    0x1c  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  nop                           #  16    0x1d  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  orl %r8d, %esi                #  19    0x20  3      OPC=orl_r32_r32_1          nop                         #  19    0x24  1      OPC=nop                  
  negl %esi                     #  20    0x23  2      OPC=negl_r32               nop                         #  20    0x25  1      OPC=nop                  
  nop                           #  21    0x25  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                           #  22    0x26  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                           #  23    0x27  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  andl $0xffffffc0, %esi        #  24    0x28  6      OPC=andl_r32_imm32         nop                         #  24    0x29  1      OPC=nop                  
  nop                           #  25    0x2e  1      OPC=nop                    andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  andb %dl, %sil                #  26    0x2f  3      OPC=andb_r8_r8             nop                         #  26    0x31  1      OPC=nop                  
  nop                           #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                           #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  nop                           #  32    0x37  1      OPC=nop                    jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  jne .L_126860                 #  33    0x38  6      OPC=jne_label_1            nop                         #  33    0x3f  1      OPC=nop                  
  nop                           #  34    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  35    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                      #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  addl %ebp, %ecx               #  36    0x40  2      OPC=addl_r32_r32           addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)      #  37    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  addl $0x4, %edx               #  38    0x46  3      OPC=addl_r32_imm8          movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  movl (%r15,%rdx,1), %r8d      #  39    0x49  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  addl $0x4, %ecx               #  40    0x4d  3      OPC=addl_r32_imm8          notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  movl %r8d, %r9d               #  41    0x50  3      OPC=movl_r32_r32_1         addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  notq %r9                      #  42    0x53  3      OPC=notq_r64               andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  leal -0x1010101(%r8), %esi    #  43    0x56  7      OPC=leal_r32_m64           andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  andq %rsi, %r9                #  44    0x5d  3      OPC=andq_r64_r64           je .L_126820                #  44    0x67  6      OPC=je_label_1           
  andq $0x80808080, %r9         #  45    0x60  7      OPC=andq_r64_imm32         nop                         #  45    0x6d  1      OPC=nop                  
  je .L_126820                  #  46    0x67  6      OPC=je_label_1             nop                         #  46    0x6e  1      OPC=nop                  
  nop                           #  47    0x6d  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                           #  48    0x6e  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                           #  49    0x6f  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                           #  50    0x70  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nopl %eax                     #  51    0x71  3      OPC=nopl_r32               nop                         #  51    0x73  1      OPC=nop                  
  nop                           #  52    0x74  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                           #  53    0x75  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                           #  54    0x76  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                           #  55    0x77  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                           #  56    0x78  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                           #  57    0x79  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                           #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                           #  59    0x7b  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                           #  60    0x7c  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                           #  61    0x7d  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                           #  62    0x7e  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                           #  63    0x7f  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
  nop                           #  64    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                      #        0x81  0      OPC=<label>                subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  xorl %esp, %edx               #  65    0x81  2      OPC=xorl_r32_r32_1         movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  movsbq (%r15,%rdx,1), %rsi    #  66    0x83  5      OPC=movsbq_r64_m8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  addw $0x1, %dx                #  67    0x88  4      OPC=addw_r16_imm8          movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  addq $0x1, %rcx               #  68    0x8c  4      OPC=addq_r64_imm8          movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)  #  69    0x90  5      OPC=movb_m8_r8             addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  testb %sil, %sil              #  70    0x95  3      OPC=testb_r8_r8            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  jne .L_126860                 #  71    0x98  6      OPC=jne_label_1            jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                           #  72    0x9e  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                           #  73    0x9f  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                           #  74    0xa0  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                           #  75    0xa1  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                           #  76    0xa2  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                           #  77    0xa3  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                           #  78    0xa4  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                           #  79    0xa5  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                           #  82    0xa8  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                           #  83    0xa9  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                           #  84    0xaa  1      OPC=nop                    popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  nop                           #  85    0xab  1      OPC=nop                    andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  nop                           #  86    0xac  1      OPC=nop                    addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  nop                           #  87    0xad  1      OPC=nop                    jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
  nop                           #  88    0xae  1      OPC=nop                                                                                               
  nop                           #  89    0xaf  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  90    0xb0  1      OPC=nop                                                                                               
  nop                           #  91    0xb1  1      OPC=nop                                                                                               
  nop                           #  92    0xb2  1      OPC=nop                                                                                               
  nop                           #  93    0xb3  1      OPC=nop                                                                                               
  popq %r11                     #  94    0xb4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  95    0xb6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  96    0xba  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  97    0xbd  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (251)                                                   Lowest Known Correct Cost (256)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %ecx               #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                           #  2     0x2   1      OPC=nop                    movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %eax               #  3     0x3   2      OPC=movl_r32_r32           nop                         #  3     0x4   1      OPC=nop                  
  movl %esi, %edx               #  4     0x5   2      OPC=movl_r32_r32           nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x7   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  andl $0x3, %edi               #  7     0x9   3      OPC=andl_r32_imm8          movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  jne .L_126860                 #  8     0xc   6      OPC=jne_label_1            jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  nop                           #  9     0x12  1      OPC=nop                    subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  nop                           #  10    0x13  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  addl %ebp, %esi               #  11    0x14  2      OPC=addl_r32_r32           orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  movl (%r15,%rsi,1), %r8d      #  12    0x16  4      OPC=movl_r32_m32           negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  nop                           #  13    0x1a  1      OPC=nop                    nop                         #  13    0x1e  1      OPC=nop                  
  nop                           #  14    0x1b  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  nop                           #  15    0x1c  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  nop                           #  16    0x1d  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  orl %r8d, %esi                #  19    0x20  3      OPC=orl_r32_r32_1          nop                         #  19    0x24  1      OPC=nop                  
  negl %esi                     #  20    0x23  2      OPC=negl_r32               nop                         #  20    0x25  1      OPC=nop                  
  nop                           #  21    0x25  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                           #  22    0x26  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                           #  23    0x27  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  andl $0xffffffc0, %esi        #  24    0x28  6      OPC=andl_r32_imm32         nop                         #  24    0x29  1      OPC=nop                  
  nop                           #  25    0x2e  1      OPC=nop                    andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  andb %dl, %sil                #  26    0x2f  3      OPC=andb_r8_r8             nop                         #  26    0x31  1      OPC=nop                  
  nop                           #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                           #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  nop                           #  32    0x37  1      OPC=nop                    jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  jne .L_126860                 #  33    0x38  6      OPC=jne_label_1            nop                         #  33    0x3f  1      OPC=nop                  
  nop                           #  34    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  35    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                      #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  addl %ebp, %ecx               #  36    0x40  2      OPC=addl_r32_r32           addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)      #  37    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  addl $0x4, %edx               #  38    0x46  3      OPC=addl_r32_imm8          movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  movl (%r15,%rdx,1), %r8d      #  39    0x49  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  addl $0x4, %ecx               #  40    0x4d  3      OPC=addl_r32_imm8          notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  movl %r8d, %r9d               #  41    0x50  3      OPC=movl_r32_r32_1         addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  notq %r9                      #  42    0x53  3      OPC=notq_r64               andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  leal -0x1010101(%r8), %esi    #  43    0x56  7      OPC=leal_r32_m64           andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  andq %rsi, %r9                #  44    0x5d  3      OPC=andq_r64_r64           je .L_126820                #  44    0x67  6      OPC=je_label_1           
  andq $0x80808080, %r9         #  45    0x60  7      OPC=andq_r64_imm32         nop                         #  45    0x6d  1      OPC=nop                  
  je .L_126820                  #  46    0x67  6      OPC=je_label_1             nop                         #  46    0x6e  1      OPC=nop                  
  nop                           #  47    0x6d  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                           #  48    0x6e  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                           #  49    0x6f  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                           #  50    0x70  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nopl %eax                     #  51    0x71  3      OPC=nopl_r32               nop                         #  51    0x73  1      OPC=nop                  
  nop                           #  52    0x74  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                           #  53    0x75  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                           #  54    0x76  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                           #  55    0x77  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                           #  56    0x78  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                           #  57    0x79  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                           #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                           #  59    0x7b  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                           #  60    0x7c  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                           #  61    0x7d  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                           #  62    0x7e  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                           #  63    0x7f  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  xorl %esp, %edx               #  64    0x80  2      OPC=xorl_r32_r32_1         subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  movsbq (%r15,%rdx,1), %rsi    #  65    0x82  5      OPC=movsbq_r64_m8          movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  addw $0x1, %dx                #  66    0x87  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  addq $0x1, %rcx               #  67    0x8b  4      OPC=addq_r64_imm8          movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)  #  68    0x8f  5      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  testb %sil, %sil              #  69    0x94  3      OPC=testb_r8_r8            addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  jne .L_126860                 #  70    0x97  6      OPC=jne_label_1            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  nop                           #  71    0x9d  1      OPC=nop                    jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                           #  72    0x9e  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                           #  73    0x9f  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                           #  74    0xa0  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                           #  75    0xa1  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                           #  76    0xa2  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                           #  77    0xa3  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                           #  78    0xa4  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                           #  79    0xa5  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                           #  82    0xa8  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                           #  83    0xa9  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                           #  84    0xaa  1      OPC=nop                    popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  nop                           #  85    0xab  1      OPC=nop                    andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  nop                           #  86    0xac  1      OPC=nop                    addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  nop                           #  87    0xad  1      OPC=nop                    jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
  nop                           #  88    0xae  1      OPC=nop                                                                                               
  nop                           #  89    0xaf  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  90    0xb0  1      OPC=nop                                                                                               
  nop                           #  91    0xb1  1      OPC=nop                                                                                               
  nop                           #  92    0xb2  1      OPC=nop                                                                                               
  popq %r11                     #  93    0xb3  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  94    0xb5  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  95    0xb9  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  96    0xbc  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (250)                                                   Lowest Known Correct Cost (256)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %ecx               #  1     0     2      OPC=movl_r32_r32           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                           #  2     0x2   1      OPC=nop                    movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %eax               #  3     0x3   2      OPC=movl_r32_r32           nop                         #  3     0x4   1      OPC=nop                  
  movl %esi, %edx               #  4     0x5   2      OPC=movl_r32_r32           nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x7   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x8   1      OPC=nop                    andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  andl $0x3, %edi               #  7     0x9   3      OPC=andl_r32_imm8          movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  jne .L_126860                 #  8     0xc   6      OPC=jne_label_1            jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  nop                           #  9     0x12  1      OPC=nop                    subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  nop                           #  10    0x13  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  nop                           #  11    0x14  1      OPC=nop                    orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  addl %ebp, %esi               #  12    0x15  2      OPC=addl_r32_r32           negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  movl (%r15,%rsi,1), %r8d      #  13    0x17  4      OPC=movl_r32_m32           nop                         #  13    0x1e  1      OPC=nop                  
  nop                           #  14    0x1b  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  nop                           #  15    0x1c  1      OPC=nop                    nop                         #  15    0x20  1      OPC=nop                  
  nop                           #  16    0x1d  1      OPC=nop                    nop                         #  16    0x21  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  orl %r8d, %esi                #  19    0x20  3      OPC=orl_r32_r32_1          nop                         #  19    0x24  1      OPC=nop                  
  negl %esi                     #  20    0x23  2      OPC=negl_r32               nop                         #  20    0x25  1      OPC=nop                  
  nop                           #  21    0x25  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  nop                           #  22    0x26  1      OPC=nop                    nop                         #  22    0x27  1      OPC=nop                  
  nop                           #  23    0x27  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  andl $0xffffffc0, %esi        #  24    0x28  6      OPC=andl_r32_imm32         nop                         #  24    0x29  1      OPC=nop                  
  andb %dl, %sil                #  25    0x2e  3      OPC=andb_r8_r8             andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  nop                           #  26    0x31  1      OPC=nop                    nop                         #  26    0x31  1      OPC=nop                  
  nop                           #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                           #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  nop                           #  32    0x37  1      OPC=nop                    jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  jne .L_126860                 #  33    0x38  6      OPC=jne_label_1            nop                         #  33    0x3f  1      OPC=nop                  
  nop                           #  34    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  35    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                      #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  subl %ebp, %ecx               #  36    0x40  2      OPC=subl_r32_r32_1         addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)      #  37    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  addl $0x4, %edx               #  38    0x46  3      OPC=addl_r32_imm8          movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  movl (%r15,%rdx,1), %r8d      #  39    0x49  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  addl $0x4, %ecx               #  40    0x4d  3      OPC=addl_r32_imm8          notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  movl %r8d, %r9d               #  41    0x50  3      OPC=movl_r32_r32_1         addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  notq %r9                      #  42    0x53  3      OPC=notq_r64               andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  leal -0x1010101(%r8), %esi    #  43    0x56  7      OPC=leal_r32_m64           andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  andq %rsi, %r9                #  44    0x5d  3      OPC=andq_r64_r64           je .L_126820                #  44    0x67  6      OPC=je_label_1           
  andq $0x80808080, %r9         #  45    0x60  7      OPC=andq_r64_imm32         nop                         #  45    0x6d  1      OPC=nop                  
  je .L_126820                  #  46    0x67  6      OPC=je_label_1             nop                         #  46    0x6e  1      OPC=nop                  
  nop                           #  47    0x6d  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                           #  48    0x6e  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                           #  49    0x6f  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                           #  50    0x70  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nopl %eax                     #  51    0x71  3      OPC=nopl_r32               nop                         #  51    0x73  1      OPC=nop                  
  nop                           #  52    0x74  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                           #  53    0x75  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                           #  54    0x76  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                           #  55    0x77  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                           #  56    0x78  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                           #  57    0x79  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                           #  58    0x7a  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                           #  59    0x7b  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                           #  60    0x7c  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                           #  61    0x7d  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                           #  62    0x7e  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                           #  63    0x7f  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  xorl %esp, %edx               #  64    0x80  2      OPC=xorl_r32_r32_1         subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
  movsbq (%r15,%rdx,1), %rsi    #  65    0x82  5      OPC=movsbq_r64_m8          movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  addw $0x1, %dx                #  66    0x87  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  addq $0x1, %rcx               #  67    0x8b  4      OPC=addq_r64_imm8          movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)  #  68    0x8f  5      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  testb %sil, %sil              #  69    0x94  3      OPC=testb_r8_r8            addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  jne .L_126860                 #  70    0x97  6      OPC=jne_label_1            testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  nop                           #  71    0x9d  1      OPC=nop                    jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  nop                           #  72    0x9e  1      OPC=nop                    nop                         #  72    0x9f  1      OPC=nop                  
  nop                           #  73    0x9f  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                           #  74    0xa0  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                           #  75    0xa1  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                           #  76    0xa2  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                           #  77    0xa3  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                           #  78    0xa4  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                           #  79    0xa5  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                           #  82    0xa8  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                           #  83    0xa9  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                           #  84    0xaa  1      OPC=nop                    popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  nop                           #  85    0xab  1      OPC=nop                    andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  nop                           #  86    0xac  1      OPC=nop                    addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  nop                           #  87    0xad  1      OPC=nop                    jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
  nop                           #  88    0xae  1      OPC=nop                                                                                               
  nop                           #  89    0xaf  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                           #  90    0xb0  1      OPC=nop                                                                                               
  nop                           #  91    0xb1  1      OPC=nop                                                                                               
  nop                           #  92    0xb2  1      OPC=nop                                                                                               
  nop                           #  93    0xb3  1      OPC=nop                                                                                               
  popq %r11                     #  94    0xb4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  95    0xb6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11               #  96    0xba  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  97    0xbd  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (249)                                                   Lowest Known Correct Cost (256)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32         
  nop                           #  2     0x1   1      OPC=nop                    movl %esi, %edx             #  2     0x2   2      OPC=movl_r32_r32         
  nop                           #  3     0x2   1      OPC=nop                    nop                         #  3     0x4   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                         #  4     0x5   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                         #  5     0x6   1      OPC=nop                  
  nop                           #  6     0x5   1      OPC=nop                    andl $0x3, %edi             #  6     0x7   3      OPC=andl_r32_imm8        
  movl %esi, %edx               #  7     0x6   2      OPC=movl_r32_r32           movl %eax, %ecx             #  7     0xa   2      OPC=movl_r32_r32_1       
  movl %edi, %ecx               #  8     0x8   2      OPC=movl_r32_r32           jne .L_126860               #  8     0xc   6      OPC=jne_label_1          
  movl %edi, %eax               #  9     0xa   2      OPC=movl_r32_r32           subl %esp, %esi             #  9     0x12  2      OPC=subl_r32_r32         
  andl $0x3, %edi               #  10    0xc   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x14  4      OPC=movl_r32_m32         
  jne .L_126860                 #  11    0xf   6      OPC=jne_label_1            orq %r8, %rsi               #  11    0x18  3      OPC=orq_r64_r64_1        
  nop                           #  12    0x15  1      OPC=nop                    negq %rsi                   #  12    0x1b  3      OPC=negq_r64             
  nop                           #  13    0x16  1      OPC=nop                    nop                         #  13    0x1e  1      OPC=nop                  
  nop                           #  14    0x17  1      OPC=nop                    nop                         #  14    0x1f  1      OPC=nop                  
  addl %esp, %esi               #  15    0x18  2      OPC=addl_r32_r32           nop                         #  15    0x20  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d      #  16    0x1a  4      OPC=movl_r32_m32           nop                         #  16    0x21  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                         #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                         #  18    0x23  1      OPC=nop                  
  nop                           #  19    0x20  1      OPC=nop                    nop                         #  19    0x24  1      OPC=nop                  
  nop                           #  20    0x21  1      OPC=nop                    nop                         #  20    0x25  1      OPC=nop                  
  nop                           #  21    0x22  1      OPC=nop                    nop                         #  21    0x26  1      OPC=nop                  
  orl %r8d, %esi                #  22    0x23  3      OPC=orl_r32_r32_1          nop                         #  22    0x27  1      OPC=nop                  
  nop                           #  23    0x26  1      OPC=nop                    nop                         #  23    0x28  1      OPC=nop                  
  negl %esi                     #  24    0x27  2      OPC=negl_r32               nop                         #  24    0x29  1      OPC=nop                  
  andl $0xffffffc0, %esi        #  25    0x29  6      OPC=andl_r32_imm32         andq $0xfffffffc, %rsi      #  25    0x2a  7      OPC=andq_r64_imm32       
  andb %dl, %sil                #  26    0x2f  3      OPC=andb_r8_r8             nop                         #  26    0x31  1      OPC=nop                  
  nop                           #  27    0x32  1      OPC=nop                    nop                         #  27    0x32  1      OPC=nop                  
  nop                           #  28    0x33  1      OPC=nop                    nop                         #  28    0x33  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                         #  29    0x34  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                         #  30    0x35  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    andb %dl, %sil              #  31    0x36  3      OPC=andb_r8_r8           
  nop                           #  32    0x37  1      OPC=nop                    jne .L_126860               #  32    0x39  6      OPC=jne_label_1          
  jne .L_126860                 #  33    0x38  6      OPC=jne_label_1            nop                         #  33    0x3f  1      OPC=nop                  
  nop                           #  34    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                           #  35    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  34    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                      #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  35    0x42  4      OPC=movl_m32_r32         
  orl %ebp, %ecx                #  36    0x40  2      OPC=orl_r32_r32            addl $0x4, %edx             #  36    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)      #  37    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  37    0x49  4      OPC=movl_r32_m32         
  addl $0x4, %edx               #  38    0x46  3      OPC=addl_r32_imm8          movq %r8, %r9               #  38    0x4d  3      OPC=movq_r64_r64         
  movl (%r15,%rdx,1), %r8d      #  39    0x49  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi  #  39    0x50  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi    #  40    0x4d  7      OPC=leal_r32_m64           notl %r9d                   #  40    0x57  3      OPC=notl_r32             
  movl %r8d, %r9d               #  41    0x54  3      OPC=movl_r32_r32           addl $0x4, %ecx             #  41    0x5a  3      OPC=addl_r32_imm8        
  notl %r9d                     #  42    0x57  3      OPC=notl_r32               andq %rsi, %r9              #  42    0x5d  3      OPC=andq_r64_r64         
  andq %rsi, %r9                #  43    0x5a  3      OPC=andq_r64_r64           andq $0x80808080, %r9       #  43    0x60  7      OPC=andq_r64_imm32       
  addl $0x4, %ecx               #  44    0x5d  3      OPC=addl_r32_imm8          je .L_126820                #  44    0x67  6      OPC=je_label_1           
  andq $0x80808080, %r9         #  45    0x60  7      OPC=andq_r64_imm32         nop                         #  45    0x6d  1      OPC=nop                  
  je .L_126820                  #  46    0x67  6      OPC=je_label_1             nop                         #  46    0x6e  1      OPC=nop                  
  nop                           #  47    0x6d  1      OPC=nop                    nop                         #  47    0x6f  1      OPC=nop                  
  nop                           #  48    0x6e  1      OPC=nop                    nop                         #  48    0x70  1      OPC=nop                  
  nop                           #  49    0x6f  1      OPC=nop                    nop                         #  49    0x71  1      OPC=nop                  
  nop                           #  50    0x70  1      OPC=nop                    nop                         #  50    0x72  1      OPC=nop                  
  nop                           #  51    0x71  1      OPC=nop                    nop                         #  51    0x73  1      OPC=nop                  
  nop                           #  52    0x72  1      OPC=nop                    nop                         #  52    0x74  1      OPC=nop                  
  nop                           #  53    0x73  1      OPC=nop                    nop                         #  53    0x75  1      OPC=nop                  
  nop                           #  54    0x74  1      OPC=nop                    nop                         #  54    0x76  1      OPC=nop                  
  nop                           #  55    0x75  1      OPC=nop                    nop                         #  55    0x77  1      OPC=nop                  
  nop                           #  56    0x76  1      OPC=nop                    nop                         #  56    0x78  1      OPC=nop                  
  nop                           #  57    0x77  1      OPC=nop                    nop                         #  57    0x79  1      OPC=nop                  
  nop                           #  58    0x78  1      OPC=nop                    nop                         #  58    0x7a  1      OPC=nop                  
  nop                           #  59    0x79  1      OPC=nop                    nop                         #  59    0x7b  1      OPC=nop                  
  nop                           #  60    0x7a  1      OPC=nop                    nop                         #  60    0x7c  1      OPC=nop                  
  nop                           #  61    0x7b  1      OPC=nop                    nop                         #  61    0x7d  1      OPC=nop                  
  nop                           #  62    0x7c  1      OPC=nop                    nop                         #  62    0x7e  1      OPC=nop                  
  nop                           #  63    0x7d  1      OPC=nop                    nop                         #  63    0x7f  1      OPC=nop                  
  nop                           #  64    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                           #  65    0x7f  1      OPC=nop                    subl %esp, %edx             #  64    0x80  2      OPC=subl_r32_r32         
.L_126860:                      #        0x80  0      OPC=<label>                movzbw (%r15,%rdx,1), %si   #  65    0x82  6      OPC=movzbw_r16_m8        
  xorl %esp, %edx               #  66    0x80  2      OPC=xorl_r32_r32           addw $0x1, %dx              #  66    0x88  4      OPC=addw_r16_imm8        
  movsbq (%r15,%rdx,1), %rsi    #  67    0x82  5      OPC=movsbq_r64_m8          movl %ecx, %ecx             #  67    0x8c  2      OPC=movl_r32_r32         
  addw $0x1, %dx                #  68    0x87  4      OPC=addw_r16_imm8          movb %sil, (%r15,%rcx,1)    #  68    0x8e  4      OPC=movb_m8_r8           
  addq $0x1, %rcx               #  69    0x8b  4      OPC=addq_r64_imm8          addq $0x1, %rcx             #  69    0x92  4      OPC=addq_r64_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  70    0x8f  5      OPC=movb_m8_r8             testb %sil, %sil            #  70    0x96  3      OPC=testb_r8_r8          
  testb %sil, %sil              #  71    0x94  3      OPC=testb_r8_r8            jne .L_126860               #  71    0x99  6      OPC=jne_label_1          
  jne .L_126860                 #  72    0x97  6      OPC=jne_label_1            nop                         #  72    0x9f  1      OPC=nop                  
  nop                           #  73    0x9d  1      OPC=nop                    nop                         #  73    0xa0  1      OPC=nop                  
  nop                           #  74    0x9e  1      OPC=nop                    nop                         #  74    0xa1  1      OPC=nop                  
  nop                           #  75    0x9f  1      OPC=nop                    nop                         #  75    0xa2  1      OPC=nop                  
  nop                           #  76    0xa0  1      OPC=nop                    nop                         #  76    0xa3  1      OPC=nop                  
  nop                           #  77    0xa1  1      OPC=nop                    nop                         #  77    0xa4  1      OPC=nop                  
  nop                           #  78    0xa2  1      OPC=nop                    nop                         #  78    0xa5  1      OPC=nop                  
  nop                           #  79    0xa3  1      OPC=nop                    nop                         #  79    0xa6  1      OPC=nop                  
  nop                           #  80    0xa4  1      OPC=nop                    nop                         #  80    0xa7  1      OPC=nop                  
  nop                           #  81    0xa5  1      OPC=nop                    nop                         #  81    0xa8  1      OPC=nop                  
  nop                           #  82    0xa6  1      OPC=nop                    nop                         #  82    0xa9  1      OPC=nop                  
  nop                           #  83    0xa7  1      OPC=nop                    nop                         #  83    0xaa  1      OPC=nop                  
  nop                           #  84    0xa8  1      OPC=nop                    popq %r11                   #  84    0xab  2      OPC=popq_r64_1           
  nop                           #  85    0xa9  1      OPC=nop                    andl $0xe0, %r11d           #  85    0xad  4      OPC=andl_r32_imm8        
  nop                           #  86    0xaa  1      OPC=nop                    addq %r15, %r11             #  86    0xb1  3      OPC=addq_r64_r64         
  nop                           #  87    0xab  1      OPC=nop                    jmpq %r11                   #  87    0xb4  3      OPC=jmpq_r64             
  popq %r11                     #  88    0xac  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d             #  89    0xae  4      OPC=andl_r32_imm8        .size strcpy, .-strcpy                                                       
  addq %r15, %r11               #  90    0xb2  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                     #  91    0xb5  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                            
.size strcpy, .-strcpy                                                                                                                                      
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (249)                                                   Lowest Known Correct Cost (249)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    movl %edi, %ecx               #  3     0x2   2      OPC=movl_r32_r32_1       
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x4   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x5   1      OPC=nop                  
  nop                           #  6     0x5   1      OPC=nop                    nop                           #  6     0x6   1      OPC=nop                  
  movl %esi, %edx               #  7     0x6   2      OPC=movl_r32_r32           nop                           #  7     0x7   1      OPC=nop                  
  movl %edi, %ecx               #  8     0x8   2      OPC=movl_r32_r32           movq %rsi, %rdx               #  8     0x8   3      OPC=movq_r64_r64         
  movl %edi, %eax               #  9     0xa   2      OPC=movl_r32_r32           andl $0x1, %edi               #  9     0xb   3      OPC=andl_r32_imm8        
  andl $0x3, %edi               #  10    0xc   3      OPC=andl_r32_imm8          nop                           #  10    0xe   1      OPC=nop                  
  jne .L_126860                 #  11    0xf   6      OPC=jne_label_1            movl %ecx, %eax               #  11    0xf   2      OPC=movl_r32_r32         
  nop                           #  12    0x15  1      OPC=nop                    jne .L_126860                 #  12    0x11  6      OPC=jne_label_1          
  nop                           #  13    0x16  1      OPC=nop                    nop                           #  13    0x17  1      OPC=nop                  
  nop                           #  14    0x17  1      OPC=nop                    addl %ebp, %esi               #  14    0x18  2      OPC=addl_r32_r32_1       
  addl %esp, %esi               #  15    0x18  2      OPC=addl_r32_r32           movl (%r15,%rsi,1), %r8d      #  15    0x1a  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d      #  16    0x1a  4      OPC=movl_r32_m32           nop                           #  16    0x1e  1      OPC=nop                  
  nop                           #  17    0x1e  1      OPC=nop                    nop                           #  17    0x1f  1      OPC=nop                  
  nop                           #  18    0x1f  1      OPC=nop                    nop                           #  18    0x20  1      OPC=nop                  
  nop                           #  19    0x20  1      OPC=nop                    nop                           #  19    0x21  1      OPC=nop                  
  nop                           #  20    0x21  1      OPC=nop                    nop                           #  20    0x22  1      OPC=nop                  
  nop                           #  21    0x22  1      OPC=nop                    nop                           #  21    0x23  1      OPC=nop                  
  orl %r8d, %esi                #  22    0x23  3      OPC=orl_r32_r32_1          nop                           #  22    0x24  1      OPC=nop                  
  nop                           #  23    0x26  1      OPC=nop                    nop                           #  23    0x25  1      OPC=nop                  
  negl %esi                     #  24    0x27  2      OPC=negl_r32               nop                           #  24    0x26  1      OPC=nop                  
  andl $0xffffffc0, %esi        #  25    0x29  6      OPC=andl_r32_imm32         orq %r8, %rsi                 #  25    0x27  3      OPC=orq_r64_r64          
  andb %dl, %sil                #  26    0x2f  3      OPC=andb_r8_r8             nop                           #  26    0x2a  1      OPC=nop                  
  nop                           #  27    0x32  1      OPC=nop                    nop                           #  27    0x2b  1      OPC=nop                  
  nop                           #  28    0x33  1      OPC=nop                    nop                           #  28    0x2c  1      OPC=nop                  
  nop                           #  29    0x34  1      OPC=nop                    nop                           #  29    0x2d  1      OPC=nop                  
  nop                           #  30    0x35  1      OPC=nop                    nop                           #  30    0x2e  1      OPC=nop                  
  nop                           #  31    0x36  1      OPC=nop                    nop                           #  31    0x2f  1      OPC=nop                  
  nop                           #  32    0x37  1      OPC=nop                    nop                           #  32    0x30  1      OPC=nop                  
  jne .L_126860                 #  33    0x38  6      OPC=jne_label_1            nop                           #  33    0x31  1      OPC=nop                  
  nop                           #  34    0x3e  1      OPC=nop                    nop                           #  34    0x32  1      OPC=nop                  
  nop                           #  35    0x3f  1      OPC=nop                    negw %si                      #  35    0x33  3      OPC=negw_r16             
.L_126820:                      #        0x40  0      OPC=<label>                nop                           #  36    0x36  1      OPC=nop                  
  orl %ebp, %ecx                #  36    0x40  2      OPC=orl_r32_r32            andb %r15b, %sil              #  37    0x37  3      OPC=andb_r8_r8           
  movl %r8d, (%r15,%rcx,1)      #  37    0x42  4      OPC=movl_m32_r32           jne .L_126860                 #  38    0x3a  6      OPC=jne_label_1          
  addl $0x4, %edx               #  38    0x46  3      OPC=addl_r32_imm8        .L_126820:                      #        0x40  0      OPC=<label>              
  movl (%r15,%rdx,1), %r8d      #  39    0x49  4      OPC=movl_r32_m32           addl %esp, %ecx               #  39    0x40  2      OPC=addl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  40    0x4d  7      OPC=leal_r32_m64           movl %r8d, (%r15,%rcx,1)      #  40    0x42  4      OPC=movl_m32_r32         
  movl %r8d, %r9d               #  41    0x54  3      OPC=movl_r32_r32           addl $0x4, %edx               #  41    0x46  3      OPC=addl_r32_imm8        
  notl %r9d                     #  42    0x57  3      OPC=notl_r32               movl (%r15,%rdx,1), %r8d      #  42    0x49  4      OPC=movl_r32_m32         
  andq %rsi, %r9                #  43    0x5a  3      OPC=andq_r64_r64           movl %r8d, %r9d               #  43    0x4d  3      OPC=movl_r32_r32         
  addl $0x4, %ecx               #  44    0x5d  3      OPC=addl_r32_imm8          notq %r9                      #  44    0x50  3      OPC=notq_r64             
  andq $0x80808080, %r9         #  45    0x60  7      OPC=andq_r64_imm32         leal -0x1010101(%r8), %esi    #  45    0x53  7      OPC=leal_r32_m32         
  je .L_126820                  #  46    0x67  6      OPC=je_label_1             addl $0x4, %ecx               #  46    0x5a  3      OPC=addl_r32_imm8        
  nop                           #  47    0x6d  1      OPC=nop                    andq %rsi, %r9                #  47    0x5d  3      OPC=andq_r64_r64         
  nop                           #  48    0x6e  1      OPC=nop                    andq $0x80808080, %r9         #  48    0x60  7      OPC=andq_r64_imm32       
  nop                           #  49    0x6f  1      OPC=nop                    je .L_126820                  #  49    0x67  6      OPC=je_label_1           
  nop                           #  50    0x70  1      OPC=nop                    nop                           #  50    0x6d  1      OPC=nop                  
  nop                           #  51    0x71  1      OPC=nop                    nop                           #  51    0x6e  1      OPC=nop                  
  nop                           #  52    0x72  1      OPC=nop                    nop                           #  52    0x6f  1      OPC=nop                  
  nop                           #  53    0x73  1      OPC=nop                    nop                           #  53    0x70  1      OPC=nop                  
  nop                           #  54    0x74  1      OPC=nop                    nop                           #  54    0x71  1      OPC=nop                  
  nop                           #  55    0x75  1      OPC=nop                    nop                           #  55    0x72  1      OPC=nop                  
  nop                           #  56    0x76  1      OPC=nop                    nop                           #  56    0x73  1      OPC=nop                  
  nop                           #  57    0x77  1      OPC=nop                    nop                           #  57    0x74  1      OPC=nop                  
  nop                           #  58    0x78  1      OPC=nop                    nop                           #  58    0x75  1      OPC=nop                  
  nop                           #  59    0x79  1      OPC=nop                    nop                           #  59    0x76  1      OPC=nop                  
  nop                           #  60    0x7a  1      OPC=nop                    nop                           #  60    0x77  1      OPC=nop                  
  nop                           #  61    0x7b  1      OPC=nop                    nop                           #  61    0x78  1      OPC=nop                  
  nop                           #  62    0x7c  1      OPC=nop                    nop                           #  62    0x79  1      OPC=nop                  
  nop                           #  63    0x7d  1      OPC=nop                    nop                           #  63    0x7a  1      OPC=nop                  
  nop                           #  64    0x7e  1      OPC=nop                    nop                           #  64    0x7b  1      OPC=nop                  
  nop                           #  65    0x7f  1      OPC=nop                    nop                           #  65    0x7c  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                           #  66    0x7d  1      OPC=nop                  
  xorl %esp, %edx               #  66    0x80  2      OPC=xorl_r32_r32           nop                           #  67    0x7e  1      OPC=nop                  
  movsbq (%r15,%rdx,1), %rsi    #  67    0x82  5      OPC=movsbq_r64_m8          nop                           #  68    0x7f  1      OPC=nop                  
  addw $0x1, %dx                #  68    0x87  4      OPC=addw_r16_imm8        .L_126860:                      #        0x80  0      OPC=<label>              
  addq $0x1, %rcx               #  69    0x8b  4      OPC=addq_r64_imm8          xorl %ebp, %edx               #  69    0x80  2      OPC=xorl_r32_r32_1       
  movb %sil, -0x1(%r15,%rcx,1)  #  70    0x8f  5      OPC=movb_m8_r8             movsbq (%r15,%rdx,1), %rsi    #  70    0x82  5      OPC=movsbq_r64_m8        
  testb %sil, %sil              #  71    0x94  3      OPC=testb_r8_r8            addq $0x1, %rdx               #  71    0x87  4      OPC=addq_r64_imm8        
  jne .L_126860                 #  72    0x97  6      OPC=jne_label_1            addl $0x1, %ecx               #  72    0x8b  3      OPC=addl_r32_imm8        
  nop                           #  73    0x9d  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  73    0x8e  5      OPC=movb_m8_r8           
  nop                           #  74    0x9e  1      OPC=nop                    testb %sil, %sil              #  74    0x93  3      OPC=testb_r8_r8          
  nop                           #  75    0x9f  1      OPC=nop                    jne .L_126860                 #  75    0x96  6      OPC=jne_label_1          
  nop                           #  76    0xa0  1      OPC=nop                    nop                           #  76    0x9c  1      OPC=nop                  
  nop                           #  77    0xa1  1      OPC=nop                    nop                           #  77    0x9d  1      OPC=nop                  
  nop                           #  78    0xa2  1      OPC=nop                    nop                           #  78    0x9e  1      OPC=nop                  
  nop                           #  79    0xa3  1      OPC=nop                    nop                           #  79    0x9f  1      OPC=nop                  
  nop                           #  80    0xa4  1      OPC=nop                    nop                           #  80    0xa0  1      OPC=nop                  
  nop                           #  81    0xa5  1      OPC=nop                    nop                           #  81    0xa1  1      OPC=nop                  
  nop                           #  82    0xa6  1      OPC=nop                    nop                           #  82    0xa2  1      OPC=nop                  
  nop                           #  83    0xa7  1      OPC=nop                    nop                           #  83    0xa3  1      OPC=nop                  
  nop                           #  84    0xa8  1      OPC=nop                    nop                           #  84    0xa4  1      OPC=nop                  
  nop                           #  85    0xa9  1      OPC=nop                    nop                           #  85    0xa5  1      OPC=nop                  
  nop                           #  86    0xaa  1      OPC=nop                    nop                           #  86    0xa6  1      OPC=nop                  
  nop                           #  87    0xab  1      OPC=nop                    nop                           #  87    0xa7  1      OPC=nop                  
  popq %r11                     #  88    0xac  2      OPC=popq_r64_1             nop                           #  88    0xa8  1      OPC=nop                  
  andl $0xe0, %r11d             #  89    0xae  4      OPC=andl_r32_imm8          nop                           #  89    0xa9  1      OPC=nop                  
  addq %r15, %r11               #  90    0xb2  3      OPC=addq_r64_r64           nop                           #  90    0xaa  1      OPC=nop                  
  jmpq %r11                     #  91    0xb5  3      OPC=jmpq_r64               nop                           #  91    0xab  1      OPC=nop                  
                                                                                 nop                           #  92    0xac  1      OPC=nop                  
.size strcpy, .-strcpy                                                           nop                           #  93    0xad  1      OPC=nop                  
                                                                                 nop                           #  94    0xae  1      OPC=nop                  
                                                                                 nop                           #  95    0xaf  1      OPC=nop                  
                                                                                 nop                           #  96    0xb0  1      OPC=nop                  
                                                                                 nop                           #  97    0xb1  1      OPC=nop                  
                                                                                 nop                           #  98    0xb2  1      OPC=nop                  
                                                                                 nop                           #  99    0xb3  1      OPC=nop                  
                                                                                 popq %r11                     #  100   0xb4  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d             #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11               #  102   0xba  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                     #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (248)                                                   Lowest Known Correct Cost (248)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  movl %edi, %ecx               #  6     0x5   2      OPC=movl_r32_r32_1         movl %edi, %ecx               #  6     0x5   2      OPC=movl_r32_r32_1       
  nop                           #  7     0x7   1      OPC=nop                    nop                           #  7     0x7   1      OPC=nop                  
  movq %rsi, %rdx               #  8     0x8   3      OPC=movq_r64_r64           movq %rsi, %rdx               #  8     0x8   3      OPC=movq_r64_r64         
  andl $0x1, %edi               #  9     0xb   3      OPC=andl_r32_imm8          andl $0x1, %edi               #  9     0xb   3      OPC=andl_r32_imm8        
  nop                           #  10    0xe   1      OPC=nop                    nop                           #  10    0xe   1      OPC=nop                  
  nop                           #  11    0xf   1      OPC=nop                    nop                           #  11    0xf   1      OPC=nop                  
  nop                           #  12    0x10  1      OPC=nop                    nop                           #  12    0x10  1      OPC=nop                  
  movl %ecx, %eax               #  13    0x11  2      OPC=movl_r32_r32_1         movl %ecx, %eax               #  13    0x11  2      OPC=movl_r32_r32_1       
  nop                           #  14    0x13  1      OPC=nop                    nop                           #  14    0x13  1      OPC=nop                  
  jne .L_126860                 #  15    0x14  6      OPC=jne_label_1            jne .L_126860                 #  15    0x14  6      OPC=jne_label_1          
  subl %ebp, %esi               #  16    0x1a  2      OPC=subl_r32_r32           subl %ebp, %esi               #  16    0x1a  2      OPC=subl_r32_r32         
  movl (%r15,%rsi,1), %r8d      #  17    0x1c  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d      #  17    0x1c  4      OPC=movl_r32_m32         
  nop                           #  18    0x20  1      OPC=nop                    nop                           #  18    0x20  1      OPC=nop                  
  nop                           #  19    0x21  1      OPC=nop                    nop                           #  19    0x21  1      OPC=nop                  
  nop                           #  20    0x22  1      OPC=nop                    nop                           #  20    0x22  1      OPC=nop                  
  nop                           #  21    0x23  1      OPC=nop                    nop                           #  21    0x23  1      OPC=nop                  
  nop                           #  22    0x24  1      OPC=nop                    nop                           #  22    0x24  1      OPC=nop                  
  nop                           #  23    0x25  1      OPC=nop                    nop                           #  23    0x25  1      OPC=nop                  
  nop                           #  24    0x26  1      OPC=nop                    nop                           #  24    0x26  1      OPC=nop                  
  nop                           #  25    0x27  1      OPC=nop                    nop                           #  25    0x27  1      OPC=nop                  
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x28  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x29  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x2a  1      OPC=nop                  
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2b  1      OPC=nop                  
  nop                           #  30    0x2c  1      OPC=nop                    nop                           #  30    0x2c  1      OPC=nop                  
  orb %r8b, %sil                #  31    0x2d  3      OPC=orb_r8_r8              orb %r8b, %sil                #  31    0x2d  3      OPC=orb_r8_r8            
  nop                           #  32    0x30  1      OPC=nop                    nop                           #  32    0x30  1      OPC=nop                  
  nop                           #  33    0x31  1      OPC=nop                    nop                           #  33    0x31  1      OPC=nop                  
  nop                           #  34    0x32  1      OPC=nop                    nop                           #  34    0x32  1      OPC=nop                  
  nop                           #  35    0x33  1      OPC=nop                    nop                           #  35    0x33  1      OPC=nop                  
  negw %si                      #  36    0x34  3      OPC=negw_r16               negw %si                      #  36    0x34  3      OPC=negw_r16             
  andb %r15b, %sil              #  37    0x37  3      OPC=andb_r8_r8             andb %r15b, %sil              #  37    0x37  3      OPC=andb_r8_r8           
  jne .L_126860                 #  38    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  38    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  addl %esp, %ecx               #  39    0x40  2      OPC=addl_r32_r32_1         addl %esp, %ecx               #  39    0x40  2      OPC=addl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)      #  40    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  40    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  41    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  41    0x46  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d      #  42    0x49  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  42    0x49  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %esi    #  43    0x4d  7      OPC=leal_r32_m32           leal -0x1010101(%r8), %esi    #  43    0x4d  7      OPC=leal_r32_m32         
  movl %r8d, %r9d               #  44    0x54  3      OPC=movl_r32_r32           movl %r8d, %r9d               #  44    0x54  3      OPC=movl_r32_r32         
  notq %r9                      #  45    0x57  3      OPC=notq_r64               notq %r9                      #  45    0x57  3      OPC=notq_r64             
  addl $0x4, %ecx               #  46    0x5a  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  46    0x5a  3      OPC=addl_r32_imm8        
  andq %rsi, %r9                #  47    0x5d  3      OPC=andq_r64_r64           andq %rsi, %r9                #  47    0x5d  3      OPC=andq_r64_r64         
  andq $0x80808080, %r9         #  48    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9         #  48    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                  #  49    0x67  6      OPC=je_label_1             je .L_126820                  #  49    0x67  6      OPC=je_label_1           
  nop                           #  50    0x6d  1      OPC=nop                    nop                           #  50    0x6d  1      OPC=nop                  
  nop                           #  51    0x6e  1      OPC=nop                    nop                           #  51    0x6e  1      OPC=nop                  
  nop                           #  52    0x6f  1      OPC=nop                    nop                           #  52    0x6f  1      OPC=nop                  
  nop                           #  53    0x70  1      OPC=nop                    nop                           #  53    0x70  1      OPC=nop                  
  nop                           #  54    0x71  1      OPC=nop                    nop                           #  54    0x71  1      OPC=nop                  
  nop                           #  55    0x72  1      OPC=nop                    nop                           #  55    0x72  1      OPC=nop                  
  nop                           #  56    0x73  1      OPC=nop                    nop                           #  56    0x73  1      OPC=nop                  
  nop                           #  57    0x74  1      OPC=nop                    nop                           #  57    0x74  1      OPC=nop                  
  nop                           #  58    0x75  1      OPC=nop                    nop                           #  58    0x75  1      OPC=nop                  
  nop                           #  59    0x76  1      OPC=nop                    nop                           #  59    0x76  1      OPC=nop                  
  nop                           #  60    0x77  1      OPC=nop                    nop                           #  60    0x77  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                           #  61    0x78  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                           #  62    0x79  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                           #  63    0x7a  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                           #  64    0x7b  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                           #  65    0x7c  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                           #  66    0x7d  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                           #  67    0x7e  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                           #  68    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  xorl %ebp, %edx               #  69    0x80  2      OPC=xorl_r32_r32           xorl %ebp, %edx               #  69    0x80  2      OPC=xorl_r32_r32         
  movsbw (%r15,%rdx,1), %si     #  70    0x82  6      OPC=movsbw_r16_m8          movsbw (%r15,%rdx,1), %si     #  70    0x82  6      OPC=movsbw_r16_m8        
  addq $0x1, %rdx               #  71    0x88  4      OPC=addq_r64_imm8          addq $0x1, %rdx               #  71    0x88  4      OPC=addq_r64_imm8        
  addl $0x1, %ecx               #  72    0x8c  3      OPC=addl_r32_imm8          addl $0x1, %ecx               #  72    0x8c  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  73    0x8f  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  73    0x8f  5      OPC=movb_m8_r8           
  testb %sil, %sil              #  74    0x94  3      OPC=testb_r8_r8            testb %sil, %sil              #  74    0x94  3      OPC=testb_r8_r8          
  jne .L_126860                 #  75    0x97  6      OPC=jne_label_1            jne .L_126860                 #  75    0x97  6      OPC=jne_label_1          
  nop                           #  76    0x9d  1      OPC=nop                    nop                           #  76    0x9d  1      OPC=nop                  
  nop                           #  77    0x9e  1      OPC=nop                    nop                           #  77    0x9e  1      OPC=nop                  
  nop                           #  78    0x9f  1      OPC=nop                    nop                           #  78    0x9f  1      OPC=nop                  
  nop                           #  79    0xa0  1      OPC=nop                    nop                           #  79    0xa0  1      OPC=nop                  
  nop                           #  80    0xa1  1      OPC=nop                    nop                           #  80    0xa1  1      OPC=nop                  
  nop                           #  81    0xa2  1      OPC=nop                    nop                           #  81    0xa2  1      OPC=nop                  
  nop                           #  82    0xa3  1      OPC=nop                    nop                           #  82    0xa3  1      OPC=nop                  
  nop                           #  83    0xa4  1      OPC=nop                    nop                           #  83    0xa4  1      OPC=nop                  
  nop                           #  84    0xa5  1      OPC=nop                    nop                           #  84    0xa5  1      OPC=nop                  
  nop                           #  85    0xa6  1      OPC=nop                    nop                           #  85    0xa6  1      OPC=nop                  
  nop                           #  86    0xa7  1      OPC=nop                    nop                           #  86    0xa7  1      OPC=nop                  
  nop                           #  87    0xa8  1      OPC=nop                    nop                           #  87    0xa8  1      OPC=nop                  
  nop                           #  88    0xa9  1      OPC=nop                    nop                           #  88    0xa9  1      OPC=nop                  
  nop                           #  89    0xaa  1      OPC=nop                    nop                           #  89    0xaa  1      OPC=nop                  
  nop                           #  90    0xab  1      OPC=nop                    nop                           #  90    0xab  1      OPC=nop                  
  nop                           #  91    0xac  1      OPC=nop                    nop                           #  91    0xac  1      OPC=nop                  
  popq %r11                     #  92    0xad  2      OPC=popq_r64_1             popq %r11                     #  92    0xad  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  93    0xaf  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  93    0xaf  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  94    0xb3  3      OPC=addq_r64_r64           addq %r15, %r11               #  94    0xb3  3      OPC=addq_r64_r64         
  jmpq %r11                     #  95    0xb6  3      OPC=jmpq_r64               jmpq %r11                     #  95    0xb6  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (247)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x5   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x6   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x7   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                           #  9     0x8   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                           #  10    0x9   1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0xa   1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32           movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1         movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8          andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x12  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x13  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x14  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x15  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x16  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x17  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1         movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1            jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  nop                           #  23    0x20  1      OPC=nop                    nop                           #  23    0x20  1      OPC=nop                  
  subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32           subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x27  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x28  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x29  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                           #  29    0x2a  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  nop                           #  30    0x2b  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1          orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  negq %rsi                     #  32    0x2f  3      OPC=negq_r64               negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1           andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  nop                           #  34    0x35  1      OPC=nop                    nop                           #  34    0x35  1      OPC=nop                  
  nop                           #  35    0x36  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                           #  36    0x37  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  nop                           #  37    0x38  1      OPC=nop                    nop                           #  37    0x38  1      OPC=nop                  
  nop                           #  38    0x39  1      OPC=nop                    nop                           #  38    0x39  1      OPC=nop                  
  jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32            orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64           movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  notl %r9d                     #  47    0x5a  3      OPC=notl_r32               notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1         andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                  #  50    0x67  6      OPC=je_label_1             je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                           #  51    0x6d  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6e  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x6f  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x70  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x71  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x72  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x73  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x74  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x75  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x76  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x77  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x78  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x79  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7a  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7b  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7c  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7d  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7e  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
  nop                           #  69    0x7f  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32           subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8          addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8            testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  jne .L_126860                 #  76    0x96  6      OPC=jne_label_1            jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                           #  77    0x9c  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                           #  78    0x9d  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                           #  79    0x9e  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0x9f  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                           #  81    0xa0  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                           #  82    0xa1  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                           #  83    0xa2  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                           #  84    0xa3  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                           #  85    0xa4  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                           #  86    0xa5  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  popq %r11                     #  87    0xa6  2      OPC=popq_r64_1             popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64           addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64               jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Statistics Update: 

Iterations:                    100000
Elapsed Time:                  116.458s
Iterations/s:                  858.676

Starting cost:                 411
Lowest cost:                   247
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted     
                                                        
Local Swap      8.383%       5.39%         3.784%       
Global Swap     8.362%       5.406%        3.226%       
Opcode          8.295%       7.12%         5.847%       
Operand         8.255%       5.277%        0.725%       
Instruction     8.355%       3.575%        0.128%       
Add Nops        8.489%       8.489%        3.402%       
Rotate          8.324%       6.172%        2.398%       
OpcodeWidth     8.415%       6.643%        5.592%       
Delete          8.258%       7.052%        3.556%       
Global Copy     8.21%        6.911%        6.911%       
ReplaceNop      8.355%       7.154%        5.207%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.299%       4.683%        0.004%       
                                                        
Total           100%         73.872%       40.78%       

********************************************************************************

Progress Update: 

Lowest Cost Discovered (234)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x3   2      OPC=movl_r32_r32           nop                           #  4     0x3   1      OPC=nop                  
  movl %esi, %edx               #  5     0x5   2      OPC=movl_r32_r32           nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x7   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  movq %rdi, %rcx               #  8     0x9   3      OPC=movq_r64_r64           nop                           #  8     0x7   1      OPC=nop                  
  andl $0x3, %edi               #  9     0xc   3      OPC=andl_r32_imm8          nop                           #  9     0x8   1      OPC=nop                  
  jne .L_126860                 #  10    0xf   6      OPC=jne_label_1            nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0x15  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0x16  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                           #  13    0x17  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  14    0x18  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x19  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x1a  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x1b  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1c  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x1d  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  subl %ebp, %esi               #  22    0x20  2      OPC=subl_r32_r32_1         jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d      #  23    0x22  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                           #  24    0x26  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                           #  25    0x27  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  orb %r8b, %sil                #  30    0x2c  3      OPC=orb_r8_r8_1            nop                           #  30    0x2b  1      OPC=nop                  
  nop                           #  31    0x2f  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                           #  32    0x30  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                           #  33    0x31  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  negl %esi                     #  34    0x32  2      OPC=negl_r32               nop                           #  34    0x35  1      OPC=nop                  
  andb %r15b, %sil              #  35    0x34  3      OPC=andb_r8_r8             nop                           #  35    0x36  1      OPC=nop                  
  nop                           #  36    0x37  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  jne .L_126860                 #  37    0x38  6      OPC=jne_label_1            nop                           #  37    0x38  1      OPC=nop                  
  nop                           #  38    0x3e  1      OPC=nop                    nop                           #  38    0x39  1      OPC=nop                  
  nop                           #  39    0x3f  1      OPC=nop                    jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  nop                           #  40    0x40  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                           #  41    0x41  1      OPC=nop                    orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
.L_126820:                      #        0x42  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  addq $0x4, %rcx               #  42    0x42  4      OPC=addq_r64_imm8          addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)  #  43    0x46  5      OPC=movl_m32_r32           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx               #  44    0x4b  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d      #  45    0x4e  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi    #  46    0x52  7      OPC=leal_r32_m32           movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  movq %r8, %r9                 #  47    0x59  3      OPC=movq_r64_r64           notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  notq %r9                      #  48    0x5c  3      OPC=notq_r64               andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  andq %rsi, %r9                #  49    0x5f  3      OPC=andq_r64_r64_1         andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  andq $0x80808080, %r9         #  50    0x62  7      OPC=andq_r64_imm32         je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  je .L_126820                  #  51    0x69  6      OPC=je_label_1             nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6f  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x70  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x71  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x72  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x73  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x74  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x75  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x76  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x77  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
  nop                           #  69    0x80  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
  nop                           #  70    0x81  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
.L_126860:                      #        0x82  0      OPC=<label>                subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  orl %ebp, %edx                #  71    0x82  2      OPC=orl_r32_r32_1          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  movsbl (%r15,%rdx,1), %esi    #  72    0x84  5      OPC=movsbl_r32_m8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  addq $0x1, %rdx               #  73    0x89  4      OPC=addq_r64_imm8          addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx               #  74    0x8d  6      OPC=addl_r32_imm32         movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)  #  75    0x93  5      OPC=movb_m8_r8             testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  salw $0x8, %si                #  76    0x98  4      OPC=salw_r16_imm8          jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  jne .L_126860                 #  77    0x9c  6      OPC=jne_label_1            nop                           #  77    0x9c  1      OPC=nop                  
  nop                           #  78    0xa2  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nopl %eax                     #  79    0xa3  3      OPC=nopl_r32               nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nopl %eax                     #  81    0xa7  3      OPC=nopl_r32               nop                           #  81    0xa0  1      OPC=nop                  
  nop                           #  82    0xaa  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  popq %r11                     #  83    0xab  2      OPC=popq_r64_1             nop                           #  83    0xa2  1      OPC=nop                  
  andl $0xe0, %r11d             #  84    0xad  4      OPC=andl_r32_imm8          nop                           #  84    0xa3  1      OPC=nop                  
  addq %r15, %r11               #  85    0xb1  3      OPC=addq_r64_r64           nop                           #  85    0xa4  1      OPC=nop                  
  jmpq %r11                     #  86    0xb4  3      OPC=jmpq_r64               nop                           #  86    0xa5  1      OPC=nop                  
                                                                                 popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
.size strcpy, .-strcpy                                                           andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (233)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x3   2      OPC=movl_r32_r32           nop                           #  4     0x3   1      OPC=nop                  
  movl %esi, %edx               #  5     0x5   2      OPC=movl_r32_r32           nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x7   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  movq %rdi, %rcx               #  8     0x9   3      OPC=movq_r64_r64           nop                           #  8     0x7   1      OPC=nop                  
  andl $0x3, %edi               #  9     0xc   3      OPC=andl_r32_imm8          nop                           #  9     0x8   1      OPC=nop                  
  jne .L_126860                 #  10    0xf   6      OPC=jne_label_1            nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0x15  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0x16  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                           #  13    0x17  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  14    0x18  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x19  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x1a  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x1b  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1c  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x1d  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  subl %ebp, %esi               #  22    0x20  2      OPC=subl_r32_r32_1         jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d      #  23    0x22  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                           #  24    0x26  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                           #  25    0x27  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  orb %r8b, %sil                #  30    0x2c  3      OPC=orb_r8_r8_1            nop                           #  30    0x2b  1      OPC=nop                  
  nop                           #  31    0x2f  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                           #  32    0x30  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                           #  33    0x31  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  negl %esi                     #  34    0x32  2      OPC=negl_r32               nop                           #  34    0x35  1      OPC=nop                  
  andb %r15b, %sil              #  35    0x34  3      OPC=andb_r8_r8             nop                           #  35    0x36  1      OPC=nop                  
  nop                           #  36    0x37  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  jne .L_126860                 #  37    0x38  6      OPC=jne_label_1            nop                           #  37    0x38  1      OPC=nop                  
  nop                           #  38    0x3e  1      OPC=nop                    nop                           #  38    0x39  1      OPC=nop                  
  nop                           #  39    0x3f  1      OPC=nop                    jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  nop                           #  40    0x40  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
  nop                           #  41    0x41  1      OPC=nop                    orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
.L_126820:                      #        0x42  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  addq $0x4, %rcx               #  42    0x42  4      OPC=addq_r64_imm8          addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)  #  43    0x46  5      OPC=movl_m32_r32           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx               #  44    0x4b  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d      #  45    0x4e  4      OPC=movl_r32_m32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi    #  46    0x52  7      OPC=leal_r32_m32           movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  movq %r8, %r9                 #  47    0x59  3      OPC=movq_r64_r64           notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  notq %r9                      #  48    0x5c  3      OPC=notq_r64               andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  andq %rsi, %r9                #  49    0x5f  3      OPC=andq_r64_r64_1         andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  andq $0x80808080, %r9         #  50    0x62  7      OPC=andq_r64_imm32         je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  je .L_126820                  #  51    0x69  6      OPC=je_label_1             nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6f  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x70  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x71  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x72  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x73  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x74  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x75  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x76  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x77  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
  nop                           #  69    0x80  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
  nop                           #  70    0x81  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
.L_126860:                      #        0x82  0      OPC=<label>                subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  subl %ebp, %edx               #  71    0x82  2      OPC=subl_r32_r32_1         movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  movsbl (%r15,%rdx,1), %esi    #  72    0x84  5      OPC=movsbl_r32_m8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  addq $0x1, %rdx               #  73    0x89  4      OPC=addq_r64_imm8          addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx               #  74    0x8d  6      OPC=addl_r32_imm32         movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)  #  75    0x93  5      OPC=movb_m8_r8             testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  salw $0x8, %si                #  76    0x98  4      OPC=salw_r16_imm8          jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  jne .L_126860                 #  77    0x9c  6      OPC=jne_label_1            nop                           #  77    0x9c  1      OPC=nop                  
  nop                           #  78    0xa2  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nopl %eax                     #  79    0xa3  3      OPC=nopl_r32               nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                           #  82    0xa8  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                           #  83    0xa9  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                           #  84    0xaa  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  popq %r11                     #  85    0xab  2      OPC=popq_r64_1             nop                           #  85    0xa4  1      OPC=nop                  
  andl $0xe0, %r11d             #  86    0xad  4      OPC=andl_r32_imm8          nop                           #  86    0xa5  1      OPC=nop                  
  addq %r15, %r11               #  87    0xb1  3      OPC=addq_r64_r64           popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  jmpq %r11                     #  88    0xb4  3      OPC=jmpq_r64               andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                           jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (232)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x3   2      OPC=movl_r32_r32           nop                           #  4     0x3   1      OPC=nop                  
  movl %esi, %edx               #  5     0x5   2      OPC=movl_r32_r32           nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x7   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  movq %rdi, %rcx               #  8     0x9   3      OPC=movq_r64_r64           nop                           #  8     0x7   1      OPC=nop                  
  andl $0x3, %edi               #  9     0xc   3      OPC=andl_r32_imm8          nop                           #  9     0x8   1      OPC=nop                  
  jne .L_126860                 #  10    0xf   6      OPC=jne_label_1            nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0x15  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0x16  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                           #  13    0x17  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  14    0x18  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x19  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x1a  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x1b  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1c  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x1d  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  subl %ebp, %esi               #  22    0x20  2      OPC=subl_r32_r32_1         jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d      #  23    0x22  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                           #  24    0x26  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                           #  25    0x27  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  orb %r8b, %sil                #  30    0x2c  3      OPC=orb_r8_r8_1            nop                           #  30    0x2b  1      OPC=nop                  
  nop                           #  31    0x2f  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                           #  32    0x30  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  notl %esi                     #  33    0x31  2      OPC=notl_r32               andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  andb %r15b, %sil              #  34    0x33  3      OPC=andb_r8_r8             nop                           #  34    0x35  1      OPC=nop                  
  nop                           #  35    0x36  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  jne .L_126860                 #  36    0x37  6      OPC=jne_label_1            nop                           #  36    0x37  1      OPC=nop                  
  nop                           #  37    0x3d  1      OPC=nop                    nop                           #  37    0x38  1      OPC=nop                  
  nop                           #  38    0x3e  1      OPC=nop                    nop                           #  38    0x39  1      OPC=nop                  
  nop                           #  39    0x3f  1      OPC=nop                    jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  nop                           #  40    0x40  1      OPC=nop                  .L_126820:                      #        0x40  0      OPC=<label>              
.L_126820:                      #        0x41  0      OPC=<label>                orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  addq $0x4, %rcx               #  41    0x41  4      OPC=addq_r64_imm8          movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  movl %r8d, -0x4(%r15,%rcx,1)  #  42    0x45  5      OPC=movl_m32_r32           addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  addl $0x4, %edx               #  43    0x4a  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d      #  44    0x4d  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  leal -0x1010101(%r8), %esi    #  45    0x51  7      OPC=leal_r32_m32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  movq %r8, %r9                 #  46    0x58  3      OPC=movq_r64_r64           movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  notq %r9                      #  47    0x5b  3      OPC=notq_r64               notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  andq %rsi, %r9                #  48    0x5e  3      OPC=andq_r64_r64_1         andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  andq $0x80808080, %r9         #  49    0x61  7      OPC=andq_r64_imm32         andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                  #  50    0x68  6      OPC=je_label_1             je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                           #  51    0x6e  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6f  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x70  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x71  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x72  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x73  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x74  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x75  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x76  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x77  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
  nop                           #  69    0x80  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
.L_126860:                      #        0x81  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  subl %ebp, %edx               #  70    0x81  2      OPC=subl_r32_r32_1         subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  movsbl (%r15,%rdx,1), %esi    #  71    0x83  5      OPC=movsbl_r32_m8          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  addq $0x1, %rdx               #  72    0x88  4      OPC=addq_r64_imm8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  addl $0x1, %ecx               #  73    0x8c  6      OPC=addl_r32_imm32         addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x92  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  salw $0x8, %si                #  75    0x97  4      OPC=salw_r16_imm8          testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  jne .L_126860                 #  76    0x9b  6      OPC=jne_label_1            jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                           #  77    0xa1  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nopl %eax                     #  78    0xa2  3      OPC=nopl_r32               nop                           #  78    0x9d  1      OPC=nop                  
  nop                           #  79    0xa5  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                           #  82    0xa8  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                           #  83    0xa9  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  popq %r11                     #  84    0xaa  2      OPC=popq_r64_1             nop                           #  84    0xa3  1      OPC=nop                  
  andl $0xe0, %r11d             #  85    0xac  4      OPC=andl_r32_imm8          nop                           #  85    0xa4  1      OPC=nop                  
  addq %r15, %r11               #  86    0xb0  3      OPC=addq_r64_r64           nop                           #  86    0xa5  1      OPC=nop                  
  jmpq %r11                     #  87    0xb3  3      OPC=jmpq_r64               popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
.size strcpy, .-strcpy                                                           addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (231)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  movl %edi, %eax               #  2     0x1   2      OPC=movl_r32_r32           nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x3   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x4   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  movl %esi, %edx               #  5     0x5   2      OPC=movl_r32_r32           nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x7   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x8   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x9   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  movq %rdi, %rcx               #  9     0xa   3      OPC=movq_r64_r64           nop                           #  9     0x8   1      OPC=nop                  
  andl $0x3, %edi               #  10    0xd   3      OPC=andl_r32_imm8          nop                           #  10    0x9   1      OPC=nop                  
  jne .L_126860                 #  11    0x10  6      OPC=jne_label_1            nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0x16  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                           #  13    0x17  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  14    0x18  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x19  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x1a  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x1b  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1c  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x1d  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  nop                           #  22    0x20  1      OPC=nop                    jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  nop                           #  23    0x21  1      OPC=nop                    nop                           #  23    0x20  1      OPC=nop                  
  subl %ebp, %esi               #  24    0x22  2      OPC=subl_r32_r32_1         subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  movl (%r15,%rsi,1), %r8d      #  25    0x24  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                           #  29    0x2b  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  orb %r8b, %sil                #  30    0x2c  3      OPC=orb_r8_r8_1            nop                           #  30    0x2b  1      OPC=nop                  
  nop                           #  31    0x2f  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                           #  32    0x30  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  notl %esi                     #  33    0x31  2      OPC=notl_r32               andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  andb %r15b, %sil              #  34    0x33  3      OPC=andb_r8_r8             nop                           #  34    0x35  1      OPC=nop                  
  nop                           #  35    0x36  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                           #  36    0x37  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  jne .L_126860                 #  37    0x38  6      OPC=jne_label_1            nop                           #  37    0x38  1      OPC=nop                  
  nop                           #  38    0x3e  1      OPC=nop                    nop                           #  38    0x39  1      OPC=nop                  
  nop                           #  39    0x3f  1      OPC=nop                    jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  addq $0x4, %rcx               #  40    0x40  4      OPC=addq_r64_imm8          orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl %r8d, -0x4(%r15,%rcx,1)  #  41    0x44  5      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  42    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d      #  43    0x4c  4      OPC=movl_r32_m32           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  leal -0x1010101(%r8), %esi    #  44    0x50  7      OPC=leal_r32_m32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  movq %r8, %r9                 #  45    0x57  3      OPC=movq_r64_r64           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  notq %r9                      #  46    0x5a  3      OPC=notq_r64               movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  andq %rsi, %r9                #  47    0x5d  3      OPC=andq_r64_r64_1         notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  andq $0x80808080, %r9         #  48    0x60  7      OPC=andq_r64_imm32         andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  je .L_126820                  #  49    0x67  6      OPC=je_label_1             andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                           #  50    0x6d  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                           #  51    0x6e  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6f  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x70  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x71  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x72  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x73  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x74  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x75  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x76  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x77  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x78  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x79  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x7a  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7b  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7c  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7d  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7e  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7f  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                           #  69    0x7f  1      OPC=nop                  
  subl %ebp, %edx               #  69    0x80  2      OPC=subl_r32_r32_1       .L_126860:                      #        0x80  0      OPC=<label>              
  movsbl (%r15,%rdx,1), %esi    #  70    0x82  5      OPC=movsbl_r32_m8          subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  addq $0x1, %rdx               #  71    0x87  4      OPC=addq_r64_imm8          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  addl $0x1, %ecx               #  72    0x8b  6      OPC=addl_r32_imm32         addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  73    0x91  5      OPC=movb_m8_r8             addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  salw $0x8, %si                #  74    0x96  4      OPC=salw_r16_imm8          movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  jne .L_126860                 #  75    0x9a  6      OPC=jne_label_1            testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                           #  76    0xa0  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                           #  77    0xa1  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                           #  78    0xa2  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                           #  79    0xa3  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0xa4  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                           #  81    0xa5  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                           #  82    0xa6  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                           #  83    0xa7  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  popq %r11                     #  84    0xa8  2      OPC=popq_r64_1             nop                           #  84    0xa3  1      OPC=nop                  
  andl $0xe0, %r11d             #  85    0xaa  4      OPC=andl_r32_imm8          nop                           #  85    0xa4  1      OPC=nop                  
  addq %r15, %r11               #  86    0xae  3      OPC=addq_r64_r64           nop                           #  86    0xa5  1      OPC=nop                  
  jmpq %r11                     #  87    0xb1  3      OPC=jmpq_r64               popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
.size strcpy, .-strcpy                                                           addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (230)                                                   Lowest Known Correct Cost (247)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movl %edi, %eax               #  1     0     2      OPC=movl_r32_r32           nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x2   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x3   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  movl %esi, %edx               #  4     0x4   2      OPC=movl_r32_r32           nop                           #  4     0x3   1      OPC=nop                  
  movq %rdi, %rcx               #  5     0x6   3      OPC=movq_r64_r64           nop                           #  5     0x4   1      OPC=nop                  
  andl $0x3, %edi               #  6     0x9   3      OPC=andl_r32_imm8          nop                           #  6     0x5   1      OPC=nop                  
  jne .L_126860                 #  7     0xc   6      OPC=jne_label_1            nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x12  1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                           #  9     0x13  1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                           #  10    0x14  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0x15  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0x16  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                           #  13    0x17  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                           #  14    0x18  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                           #  15    0x19  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                           #  16    0x1a  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                           #  17    0x1b  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                           #  18    0x1c  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                           #  19    0x1d  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                           #  20    0x1e  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                           #  21    0x1f  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  orl %ebp, %esi                #  22    0x20  2      OPC=orl_r32_r32_1          jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d      #  23    0x22  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                           #  24    0x26  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                           #  25    0x27  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                           #  26    0x28  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                           #  27    0x29  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                           #  28    0x2a  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  orb %r8b, %sil                #  29    0x2b  3      OPC=orb_r8_r8_1            nop                           #  29    0x2a  1      OPC=nop                  
  nop                           #  30    0x2e  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  notl %esi                     #  31    0x2f  2      OPC=notl_r32               orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  andb %r15b, %sil              #  32    0x31  3      OPC=andb_r8_r8             negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                           #  33    0x34  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  jne .L_126860                 #  34    0x35  6      OPC=jne_label_1            nop                           #  34    0x35  1      OPC=nop                  
  nop                           #  35    0x3b  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                           #  36    0x3c  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  nopl %eax                     #  37    0x3d  3      OPC=nopl_r32               nop                           #  37    0x38  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>                nop                           #  38    0x39  1      OPC=nop                  
  addq $0x4, %rcx               #  38    0x40  4      OPC=addq_r64_imm8          jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)  #  39    0x44  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addl $0x4, %edx               #  40    0x49  3      OPC=addl_r32_imm8          orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl (%r15,%rdx,1), %r8d      #  41    0x4c  4      OPC=movl_r32_m32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  movq %r8, %r9                 #  42    0x50  3      OPC=movq_r64_r64           addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  notq %r9                      #  43    0x53  3      OPC=notq_r64               addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  leaq -0x1010101(%r8), %rsi    #  44    0x56  7      OPC=leaq_r64_m64           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  andq %rsi, %r9                #  45    0x5d  3      OPC=andq_r64_r64_1         leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  andq $0x80808080, %r9         #  46    0x60  7      OPC=andq_r64_imm32         movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  je .L_126820                  #  47    0x67  6      OPC=je_label_1             notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                           #  48    0x6d  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                           #  49    0x6e  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                           #  50    0x6f  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                           #  51    0x70  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x71  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x72  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x73  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x74  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x75  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x76  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x77  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x78  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x79  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x7a  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x7b  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x7c  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7d  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7e  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7f  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>                nop                           #  67    0x7d  1      OPC=nop                  
  addl %ebp, %edx               #  67    0x80  2      OPC=addl_r32_r32           nop                           #  68    0x7e  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi    #  68    0x82  5      OPC=movsbl_r32_m8          nop                           #  69    0x7f  1      OPC=nop                  
  addw $0x1, %dx                #  69    0x87  4      OPC=addw_r16_imm8        .L_126860:                      #        0x80  0      OPC=<label>              
  addl $0x1, %ecx               #  70    0x8b  6      OPC=addl_r32_imm32         subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)  #  71    0x91  5      OPC=movb_m8_r8             movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  salw $0x8, %si                #  72    0x96  4      OPC=salw_r16_imm8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  jne .L_126860                 #  73    0x9a  6      OPC=jne_label_1            addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                           #  74    0xa0  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                           #  75    0xa1  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                           #  76    0xa2  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                           #  77    0xa3  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                           #  78    0xa4  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                           #  79    0xa5  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                           #  80    0xa6  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                           #  81    0xa7  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  popq %r11                     #  82    0xa8  2      OPC=popq_r64_1             nop                           #  82    0xa1  1      OPC=nop                  
  andl $0xe0, %r11d             #  83    0xaa  4      OPC=andl_r32_imm8          nop                           #  83    0xa2  1      OPC=nop                  
  addq %r15, %r11               #  84    0xae  3      OPC=addq_r64_r64           nop                           #  84    0xa3  1      OPC=nop                  
  jmpq %r11                     #  85    0xb1  3      OPC=jmpq_r64               nop                           #  85    0xa4  1      OPC=nop                  
                                                                                 nop                           #  86    0xa5  1      OPC=nop                  
.size strcpy, .-strcpy                                                           popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
                                                                                                                                                              
                                                                               .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Statistics Update: 

Iterations:                    200000
Elapsed Time:                  240.424s
Iterations/s:                  831.865

Starting cost:                 411
Lowest cost:                   230
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted     
                                                        
Local Swap      8.363%       5.5425%       3.9795%      
Global Swap     8.41%        5.727%        3.788%       
Opcode          8.367%       7.3395%       6.1835%      
Operand         8.3465%      5.211%        0.7765%      
Instruction     8.316%       3.633%        0.156%       
Add Nops        8.382%       8.382%        3.748%       
Rotate          8.292%       6.358%        2.7315%      
OpcodeWidth     8.362%       6.783%        5.878%       
Delete          8.2525%      7.178%        3.912%       
Global Copy     8.263%       7.07%         7.07%        
ReplaceNop      8.3555%      7.2465%       5.606%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.2905%      4.607%        0.0025%      
                                                        
Total           100%         75.0775%      43.8315%     

********************************************************************************

Progress Update: 

Lowest Cost Discovered (227)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movq %rdi, %rax                 #  1     0     3      OPC=movq_r64_r64_1         nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x3   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  andq $0x1, %rdi                 #  3     0x4   4      OPC=andq_r64_imm8          nop                           #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x8   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x9   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                             #  6     0xa   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0xb   3      OPC=movq_r64_r64_1         nop                           #  7     0x6   1      OPC=nop                  
  nop                             #  8     0xe   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                             #  9     0xf   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x10  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                             #  11    0x11  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  movl %eax, %ecx                 #  12    0x12  2      OPC=movl_r32_r32_1         movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                             #  13    0x14  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  14    0x15  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                             #  15    0x16  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x17  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  jne .L_126860                   #  17    0x18  6      OPC=jne_label_1            nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1e  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x1f  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                             #  20    0x20  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                             #  21    0x21  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  subl %ebp, %esi                 #  22    0x22  2      OPC=subl_r32_r32_1         jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d        #  23    0x24  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x28  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  orw %r8w, %si                   #  25    0x29  4      OPC=orw_r16_r16            movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                             #  26    0x2d  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2e  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2f  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x30  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x31  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x32  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                             #  32    0x33  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  negq %rsi                       #  33    0x34  3      OPC=negq_r64               andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  andb %r15b, %sil                #  34    0x37  3      OPC=andb_r8_r8_1           nop                           #  34    0x35  1      OPC=nop                  
  nop                             #  35    0x3a  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                             #  36    0x3b  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  jne .L_126860                   #  37    0x3c  6      OPC=jne_label_1            nop                           #  37    0x38  1      OPC=nop                  
.L_126820:                        #        0x42  0      OPC=<label>                nop                           #  38    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  38    0x42  3      OPC=addl_r32_imm8          jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)    #  39    0x45  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addq $0x4, %rdx                 #  40    0x4a  4      OPC=addq_r64_imm8          orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl (%r15,%rdx,1), %r8d        #  41    0x4e  4      OPC=movl_r32_m32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  movl %r8d, %r9d                 #  42    0x52  3      OPC=movl_r32_r32_1         addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  leaq -0x1010101(%r8), %rsi      #  43    0x55  7      OPC=leaq_r64_m16           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  notq %r9                        #  44    0x5c  3      OPC=notq_r64               movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  andl %esi, %r9d                 #  45    0x5f  3      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  andl $0x80808080, %r9d          #  46    0x62  7      OPC=andl_r32_imm32         movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  je .L_126820                    #  47    0x69  6      OPC=je_label_1             notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x6f  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x70  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x71  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x72  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x80  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                             #  66    0x81  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                             #  67    0x82  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
.L_126860:                        #        0x83  0      OPC=<label>                nop                           #  68    0x7e  1      OPC=nop                  
  subq $0xff, %rdx                #  68    0x83  4      OPC=subq_r64_imm8          nop                           #  69    0x7f  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  69    0x87  6      OPC=movzbl_r32_m8        .L_126860:                      #        0x80  0      OPC=<label>              
  addl $0x1, %ecx                 #  70    0x8d  6      OPC=addl_r32_imm32         subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)    #  71    0x93  5      OPC=movb_m8_r8             movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  sall $0x2, %esi                 #  72    0x98  3      OPC=sall_r32_imm8          addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  jne .L_126860                   #  73    0x9b  6      OPC=jne_label_1            addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0xa1  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa2  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa3  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa4  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xaf  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xb0  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xb1  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb2  1      OPC=nop                                                                                                 
  nop                             #  92    0xb3  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb4  1      OPC=nop                                                                                                 
  nop                             #  94    0xb5  1      OPC=nop                                                                                                 
  nop                             #  95    0xb6  1      OPC=nop                                                                                                 
  nop                             #  96    0xb7  1      OPC=nop                                                                                                 
  nop                             #  97    0xb8  1      OPC=nop                                                                                                 
  nop                             #  98    0xb9  1      OPC=nop                                                                                                 
  nop                             #  99    0xba  1      OPC=nop                                                                                                 
  nop                             #  100   0xbb  1      OPC=nop                                                                                                 
  nop                             #  101   0xbc  1      OPC=nop                                                                                                 
  nop                             #  102   0xbd  1      OPC=nop                                                                                                 
  nop                             #  103   0xbe  1      OPC=nop                                                                                                 
  nopl %eax                       #  104   0xbf  3      OPC=nopl_r32                                                                                            
  nop                             #  105   0xc2  1      OPC=nop                                                                                                 
  nop                             #  106   0xc3  1      OPC=nop                                                                                                 
  nop                             #  107   0xc4  1      OPC=nop                                                                                                 
  nop                             #  108   0xc5  1      OPC=nop                                                                                                 
  nop                             #  109   0xc6  1      OPC=nop                                                                                                 
  nop                             #  110   0xc7  1      OPC=nop                                                                                                 
  nop                             #  111   0xc8  1      OPC=nop                                                                                                 
  nop                             #  112   0xc9  1      OPC=nop                                                                                                 
  nop                             #  113   0xca  1      OPC=nop                                                                                                 
  nop                             #  114   0xcb  1      OPC=nop                                                                                                 
  nop                             #  115   0xcc  1      OPC=nop                                                                                                 
  nop                             #  116   0xcd  1      OPC=nop                                                                                                 
  nop                             #  117   0xce  1      OPC=nop                                                                                                 
  popq %r11                       #  118   0xcf  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  119   0xd1  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  120   0xd5  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  121   0xd8  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (226)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movq %rdi, %rax                 #  1     0     3      OPC=movq_r64_r64_1         nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x3   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  andq $0x1, %rdi                 #  3     0x4   4      OPC=andq_r64_imm8          nop                           #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x8   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x9   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                             #  6     0xa   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                             #  7     0xb   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  movq %rsi, %rdx                 #  8     0xc   3      OPC=movq_r64_r64_1         nop                           #  8     0x7   1      OPC=nop                  
  nop                             #  9     0xf   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x10  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                             #  11    0x11  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                             #  12    0x12  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  movl %eax, %ecx                 #  13    0x13  2      OPC=movl_r32_r32_1         movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  14    0x15  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                             #  15    0x16  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x17  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  jne .L_126860                   #  17    0x18  6      OPC=jne_label_1            nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1e  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x1f  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                             #  20    0x20  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  nop                             #  21    0x21  1      OPC=nop                    movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  orl %ebp, %esi                  #  22    0x22  2      OPC=orl_r32_r32            jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d        #  23    0x24  4      OPC=movl_r32_m32           nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x28  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  orw %r8w, %si                   #  25    0x29  4      OPC=orw_r16_r16            movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                             #  26    0x2d  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2e  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2f  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x30  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x31  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x32  1      OPC=nop                    orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                             #  32    0x33  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  negq %rsi                       #  33    0x34  3      OPC=negq_r64               andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  andb %r15b, %sil                #  34    0x37  3      OPC=andb_r8_r8_1           nop                           #  34    0x35  1      OPC=nop                  
  nop                             #  35    0x3a  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                             #  36    0x3b  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
  jne .L_126860                   #  37    0x3c  6      OPC=jne_label_1            nop                           #  37    0x38  1      OPC=nop                  
.L_126820:                        #        0x42  0      OPC=<label>                nop                           #  38    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  38    0x42  3      OPC=addl_r32_imm8          jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  movl %r8d, -0x4(%r15,%rcx,1)    #  39    0x45  5      OPC=movl_m32_r32         .L_126820:                      #        0x40  0      OPC=<label>              
  addq $0x4, %rdx                 #  40    0x4a  4      OPC=addq_r64_imm8          orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl (%r15,%rdx,1), %r8d        #  41    0x4e  4      OPC=movl_r32_m32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  movl %r8d, %r9d                 #  42    0x52  3      OPC=movl_r32_r32_1         addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  leaq -0x1010101(%r8), %rsi      #  43    0x55  7      OPC=leaq_r64_m16           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  notq %r9                        #  44    0x5c  3      OPC=notq_r64               movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  andl %esi, %r9d                 #  45    0x5f  3      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  andl $0x80808080, %r9d          #  46    0x62  7      OPC=andl_r32_imm32         movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  je .L_126820                    #  47    0x69  6      OPC=je_label_1             notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x6f  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x70  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x71  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x72  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x80  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                             #  66    0x81  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
.L_126860:                        #        0x82  0      OPC=<label>                nop                           #  67    0x7d  1      OPC=nop                  
  subq $0xff, %rdx                #  67    0x82  4      OPC=subq_r64_imm8          nop                           #  68    0x7e  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  68    0x86  6      OPC=movzbl_r32_m8          nop                           #  69    0x7f  1      OPC=nop                  
  addl $0x1, %ecx                 #  69    0x8c  6      OPC=addl_r32_imm32       .L_126860:                      #        0x80  0      OPC=<label>              
  movb %sil, -0x1(%r15,%rcx,1)    #  70    0x92  5      OPC=movb_m8_r8             subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  sall $0x2, %esi                 #  71    0x97  3      OPC=sall_r32_imm8          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  jne .L_126860                   #  72    0x9a  6      OPC=jne_label_1            addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  nop                             #  73    0xa0  1      OPC=nop                    addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0xa1  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa2  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa3  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa4  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xaf  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xb0  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xb1  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb2  1      OPC=nop                                                                                                 
  nop                             #  92    0xb3  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb4  1      OPC=nop                                                                                                 
  nop                             #  94    0xb5  1      OPC=nop                                                                                                 
  nop                             #  95    0xb6  1      OPC=nop                                                                                                 
  nop                             #  96    0xb7  1      OPC=nop                                                                                                 
  nop                             #  97    0xb8  1      OPC=nop                                                                                                 
  nop                             #  98    0xb9  1      OPC=nop                                                                                                 
  nop                             #  99    0xba  1      OPC=nop                                                                                                 
  nop                             #  100   0xbb  1      OPC=nop                                                                                                 
  nop                             #  101   0xbc  1      OPC=nop                                                                                                 
  nopl %eax                       #  102   0xbd  3      OPC=nopl_r32                                                                                            
  nop                             #  103   0xc0  1      OPC=nop                                                                                                 
  nop                             #  104   0xc1  1      OPC=nop                                                                                                 
  nop                             #  105   0xc2  1      OPC=nop                                                                                                 
  nop                             #  106   0xc3  1      OPC=nop                                                                                                 
  nop                             #  107   0xc4  1      OPC=nop                                                                                                 
  nop                             #  108   0xc5  1      OPC=nop                                                                                                 
  nop                             #  109   0xc6  1      OPC=nop                                                                                                 
  nop                             #  110   0xc7  1      OPC=nop                                                                                                 
  nop                             #  111   0xc8  1      OPC=nop                                                                                                 
  nop                             #  112   0xc9  1      OPC=nop                                                                                                 
  nop                             #  113   0xca  1      OPC=nop                                                                                                 
  nop                             #  114   0xcb  1      OPC=nop                                                                                                 
  popq %r11                       #  115   0xcc  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  116   0xce  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  117   0xd2  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  118   0xd5  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (225)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movq %rdi, %rax                 #  1     0     3      OPC=movq_r64_r64_1         nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x3   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  andq $0x1, %rdi                 #  3     0x4   4      OPC=andq_r64_imm8          nop                           #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x8   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x9   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                             #  6     0xa   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0xb   3      OPC=movq_r64_r64_1         nop                           #  7     0x6   1      OPC=nop                  
  nop                             #  8     0xe   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                             #  9     0xf   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x10  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  movl %eax, %ecx                 #  11    0x11  2      OPC=movl_r32_r32_1         nop                           #  11    0xa   1      OPC=nop                  
  nop                             #  12    0x13  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                             #  13    0x14  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  14    0x15  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  jne .L_126860                   #  15    0x16  6      OPC=jne_label_1            nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x1c  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x1d  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1e  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x1f  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  orl %ebp, %esi                  #  20    0x20  2      OPC=orl_r32_r32            nop                           #  20    0x17  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  21    0x22  4      OPC=movl_r32_m32           movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  nop                             #  22    0x26  1      OPC=nop                    jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  orw %r8w, %si                   #  23    0x27  4      OPC=orw_r16_r16            nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x2b  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                             #  25    0x2c  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                             #  26    0x2d  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2e  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2f  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x30  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x31  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  negw %si                        #  31    0x32  3      OPC=negw_r16               orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  andb %r15b, %sil                #  32    0x35  3      OPC=andb_r8_r8_1           negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                             #  33    0x38  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  nop                             #  34    0x39  1      OPC=nop                    nop                           #  34    0x35  1      OPC=nop                  
  nop                             #  35    0x3a  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  jne .L_126860                   #  36    0x3b  6      OPC=jne_label_1            nop                           #  36    0x37  1      OPC=nop                  
.L_126820:                        #        0x41  0      OPC=<label>                nop                           #  37    0x38  1      OPC=nop                  
  addl $0x4, %ecx                 #  37    0x41  3      OPC=addl_r32_imm8          nop                           #  38    0x39  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  38    0x44  5      OPC=movl_m32_r32           jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  addq $0x4, %rdx                 #  39    0x49  4      OPC=addq_r64_imm8        .L_126820:                      #        0x40  0      OPC=<label>              
  movl (%r15,%rdx,1), %r8d        #  40    0x4d  4      OPC=movl_r32_m32           orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl %r8d, %r9d                 #  41    0x51  3      OPC=movl_r32_r32_1         movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  leaq -0x1010101(%r8), %rsi      #  42    0x54  7      OPC=leaq_r64_m16           addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  notq %r9                        #  43    0x5b  3      OPC=notq_r64               addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  44    0x5e  3      OPC=andl_r32_r32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  andl $0x80808080, %r9d          #  45    0x61  7      OPC=andl_r32_imm32         leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  je .L_126820                    #  46    0x68  6      OPC=je_label_1             movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  nop                             #  47    0x6e  1      OPC=nop                    notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x6f  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x70  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x71  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x72  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x80  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
.L_126860:                        #        0x81  0      OPC=<label>                nop                           #  66    0x7c  1      OPC=nop                  
  subq $0xff, %rdx                #  66    0x81  4      OPC=subq_r64_imm8          nop                           #  67    0x7d  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  67    0x85  6      OPC=movsbl_r32_m8          nop                           #  68    0x7e  1      OPC=nop                  
  addl $0x1, %ecx                 #  68    0x8b  6      OPC=addl_r32_imm32         nop                           #  69    0x7f  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  69    0x91  5      OPC=movb_m8_r8           .L_126860:                      #        0x80  0      OPC=<label>              
  sall $0x2, %esi                 #  70    0x96  3      OPC=sall_r32_imm8          subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  jne .L_126860                   #  71    0x99  6      OPC=jne_label_1            movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  nop                             #  72    0x9f  1      OPC=nop                    addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  nop                             #  73    0xa0  1      OPC=nop                    addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0xa1  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa2  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa3  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa4  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xaf  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xb0  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xb1  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb2  1      OPC=nop                                                                                                 
  nop                             #  92    0xb3  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb4  1      OPC=nop                                                                                                 
  nop                             #  94    0xb5  1      OPC=nop                                                                                                 
  nop                             #  95    0xb6  1      OPC=nop                                                                                                 
  nop                             #  96    0xb7  1      OPC=nop                                                                                                 
  nop                             #  97    0xb8  1      OPC=nop                                                                                                 
  nop                             #  98    0xb9  1      OPC=nop                                                                                                 
  nop                             #  99    0xba  1      OPC=nop                                                                                                 
  nop                             #  100   0xbb  1      OPC=nop                                                                                                 
  nopl %eax                       #  101   0xbc  3      OPC=nopl_r32                                                                                            
  nop                             #  102   0xbf  1      OPC=nop                                                                                                 
  nop                             #  103   0xc0  1      OPC=nop                                                                                                 
  nop                             #  104   0xc1  1      OPC=nop                                                                                                 
  nop                             #  105   0xc2  1      OPC=nop                                                                                                 
  nop                             #  106   0xc3  1      OPC=nop                                                                                                 
  nop                             #  107   0xc4  1      OPC=nop                                                                                                 
  nop                             #  108   0xc5  1      OPC=nop                                                                                                 
  nop                             #  109   0xc6  1      OPC=nop                                                                                                 
  nop                             #  110   0xc7  1      OPC=nop                                                                                                 
  nop                             #  111   0xc8  1      OPC=nop                                                                                                 
  nop                             #  112   0xc9  1      OPC=nop                                                                                                 
  popq %r11                       #  113   0xca  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  114   0xcc  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  115   0xd0  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  116   0xd3  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (224)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movq %rdi, %rax                 #  1     0     3      OPC=movq_r64_r64_1         nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x3   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  andq $0x1, %rdi                 #  3     0x4   4      OPC=andq_r64_imm8          nop                           #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x8   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x9   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                             #  6     0xa   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0xb   3      OPC=movq_r64_r64_1         nop                           #  7     0x6   1      OPC=nop                  
  nop                             #  8     0xe   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                             #  9     0xf   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x10  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  movl %eax, %ecx                 #  11    0x11  2      OPC=movl_r32_r32_1         nop                           #  11    0xa   1      OPC=nop                  
  nop                             #  12    0x13  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                             #  13    0x14  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  14    0x15  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  jne .L_126860                   #  15    0x16  6      OPC=jne_label_1            nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x1c  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x1d  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1e  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x1f  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  orl %esi, %esi                  #  20    0x20  2      OPC=orl_r32_r32            nop                           #  20    0x17  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  21    0x22  4      OPC=movl_r32_m32           movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  nop                             #  22    0x26  1      OPC=nop                    jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  orw %r8w, %si                   #  23    0x27  4      OPC=orw_r16_r16            nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x2b  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                             #  25    0x2c  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                             #  26    0x2d  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2e  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2f  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x30  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  negw %si                        #  30    0x31  3      OPC=negw_r16               nop                           #  30    0x2b  1      OPC=nop                  
  andb %r15b, %sil                #  31    0x34  3      OPC=andb_r8_r8_1           orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                             #  32    0x37  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                             #  33    0x38  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  nop                             #  34    0x39  1      OPC=nop                    nop                           #  34    0x35  1      OPC=nop                  
  jne .L_126860                   #  35    0x3a  6      OPC=jne_label_1            nop                           #  35    0x36  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  36    0x37  1      OPC=nop                  
  addl $0x4, %ecx                 #  36    0x40  3      OPC=addl_r32_imm8          nop                           #  37    0x38  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  37    0x43  5      OPC=movl_m32_r32           nop                           #  38    0x39  1      OPC=nop                  
  addq $0x4, %rdx                 #  38    0x48  4      OPC=addq_r64_imm8          jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d        #  39    0x4c  4      OPC=movl_r32_m32         .L_126820:                      #        0x40  0      OPC=<label>              
  movl %r8d, %r9d                 #  40    0x50  3      OPC=movl_r32_r32_1         orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  leaq -0x1010101(%r8), %rsi      #  41    0x53  7      OPC=leaq_r64_m16           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  notq %r9                        #  42    0x5a  3      OPC=notq_r64               addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  43    0x5d  3      OPC=andl_r32_r32           addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d          #  44    0x60  7      OPC=andl_r32_imm32         movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  je .L_126820                    #  45    0x67  6      OPC=je_label_1             leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  nop                             #  46    0x6d  1      OPC=nop                    movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  nop                             #  47    0x6e  1      OPC=nop                    notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x6f  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x70  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x71  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x72  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  65    0x7b  1      OPC=nop                  
  subq $0xff, %rdx                #  65    0x80  4      OPC=subq_r64_imm8          nop                           #  66    0x7c  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  66    0x84  6      OPC=movsbl_r32_m8          nop                           #  67    0x7d  1      OPC=nop                  
  addl $0x1, %ecx                 #  67    0x8a  6      OPC=addl_r32_imm32         nop                           #  68    0x7e  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  68    0x90  5      OPC=movb_m8_r8             nop                           #  69    0x7f  1      OPC=nop                  
  sall $0x2, %esi                 #  69    0x95  3      OPC=sall_r32_imm8        .L_126860:                      #        0x80  0      OPC=<label>              
  jne .L_126860                   #  70    0x98  6      OPC=jne_label_1            subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  nop                             #  71    0x9e  1      OPC=nop                    movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  nop                             #  72    0x9f  1      OPC=nop                    addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  nop                             #  73    0xa0  1      OPC=nop                    addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0xa1  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa2  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa3  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa4  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xaf  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xb0  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xb1  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb2  1      OPC=nop                                                                                                 
  nop                             #  92    0xb3  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb4  1      OPC=nop                                                                                                 
  nop                             #  94    0xb5  1      OPC=nop                                                                                                 
  nop                             #  95    0xb6  1      OPC=nop                                                                                                 
  nop                             #  96    0xb7  1      OPC=nop                                                                                                 
  nop                             #  97    0xb8  1      OPC=nop                                                                                                 
  nop                             #  98    0xb9  1      OPC=nop                                                                                                 
  nop                             #  99    0xba  1      OPC=nop                                                                                                 
  nop                             #  100   0xbb  1      OPC=nop                                                                                                 
  nopl %eax                       #  101   0xbc  3      OPC=nopl_r32                                                                                            
  nop                             #  102   0xbf  1      OPC=nop                                                                                                 
  nop                             #  103   0xc0  1      OPC=nop                                                                                                 
  nop                             #  104   0xc1  1      OPC=nop                                                                                                 
  nop                             #  105   0xc2  1      OPC=nop                                                                                                 
  nop                             #  106   0xc3  1      OPC=nop                                                                                                 
  nop                             #  107   0xc4  1      OPC=nop                                                                                                 
  nop                             #  108   0xc5  1      OPC=nop                                                                                                 
  nop                             #  109   0xc6  1      OPC=nop                                                                                                 
  nop                             #  110   0xc7  1      OPC=nop                                                                                                 
  nop                             #  111   0xc8  1      OPC=nop                                                                                                 
  nop                             #  112   0xc9  1      OPC=nop                                                                                                 
  popq %r11                       #  113   0xca  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  114   0xcc  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  115   0xd0  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  116   0xd3  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Progress Update: 

Lowest Cost Discovered (223)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  movl %edi, %eax                 #  6     0x5   2      OPC=movl_r32_r32_1         nop                           #  6     0x5   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  andq $0x1, %rdi                 #  8     0x8   4      OPC=andq_r64_imm8          nop                           #  8     0x7   1      OPC=nop                  
  movl %eax, %ecx                 #  9     0xc   2      OPC=movl_r32_r32           nop                           #  9     0x8   1      OPC=nop                  
  movq %rsi, %rdx                 #  10    0xe   3      OPC=movq_r64_r64_1         nop                           #  10    0x9   1      OPC=nop                  
  jne .L_126860                   #  11    0x11  6      OPC=jne_label_1            nop                           #  11    0xa   1      OPC=nop                  
  nop                             #  12    0x17  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                             #  13    0x18  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  nop                             #  14    0x19  1      OPC=nop                    andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                             #  15    0x1a  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x1b  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x1c  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1d  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x1e  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                             #  20    0x1f  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  orl %ebp, %esi                  #  21    0x20  2      OPC=orl_r32_r32            movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  movl (%r15,%rsi,1), %r8d        #  22    0x22  4      OPC=movl_r32_m32           jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  nop                             #  23    0x26  1      OPC=nop                    nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x27  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                             #  25    0x28  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  orw %r8w, %si                   #  26    0x29  4      OPC=orw_r16_r16            nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2d  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2e  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  negq %rsi                       #  29    0x2f  3      OPC=negq_r64               nop                           #  29    0x2a  1      OPC=nop                  
  andb %r15b, %sil                #  30    0x32  3      OPC=andb_r8_r8_1           nop                           #  30    0x2b  1      OPC=nop                  
  jne .L_126860                   #  31    0x35  6      OPC=jne_label_1            orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  nop                             #  32    0x3b  1      OPC=nop                    negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                             #  33    0x3c  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  nop                             #  34    0x3d  1      OPC=nop                    nop                           #  34    0x35  1      OPC=nop                  
  nop                             #  35    0x3e  1      OPC=nop                    nop                           #  35    0x36  1      OPC=nop                  
  nop                             #  36    0x3f  1      OPC=nop                    nop                           #  36    0x37  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  37    0x38  1      OPC=nop                  
  addl $0x4, %ecx                 #  37    0x40  3      OPC=addl_r32_imm8          nop                           #  38    0x39  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  38    0x43  5      OPC=movl_m32_r32           jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  addw $0x4, %dx                  #  39    0x48  4      OPC=addw_r16_imm8        .L_126820:                      #        0x40  0      OPC=<label>              
  movl (%r15,%rdx,1), %r8d        #  40    0x4c  4      OPC=movl_r32_m32           orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  movl %r8d, %r9d                 #  41    0x50  3      OPC=movl_r32_r32_1         movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  leaq -0x1010101(%r8), %rsi      #  42    0x53  7      OPC=leaq_r64_m16           addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  notq %r9                        #  43    0x5a  3      OPC=notq_r64               addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  44    0x5d  3      OPC=andl_r32_r32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  andl $0x80808080, %r9d          #  45    0x60  7      OPC=andl_r32_imm32         leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  je .L_126820                    #  46    0x67  6      OPC=je_label_1             movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  nop                             #  47    0x6d  1      OPC=nop                    notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x6e  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x6f  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x70  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x71  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x72  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x73  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x74  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x75  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x76  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x77  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x78  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x79  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7a  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7b  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x7c  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x7d  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7e  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x7f  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  66    0x7c  1      OPC=nop                  
  subq $0xff, %rdx                #  66    0x80  4      OPC=subq_r64_imm8          nop                           #  67    0x7d  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  67    0x84  6      OPC=movsbl_r32_m8          nop                           #  68    0x7e  1      OPC=nop                  
  addl $0x1, %ecx                 #  68    0x8a  6      OPC=addl_r32_imm32         nop                           #  69    0x7f  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  69    0x90  5      OPC=movb_m8_r8           .L_126860:                      #        0x80  0      OPC=<label>              
  negl %esi                       #  70    0x95  2      OPC=negl_r32               subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  jne .L_126860                   #  71    0x97  6      OPC=jne_label_1            movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  nop                             #  72    0x9d  1      OPC=nop                    addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  nop                             #  73    0x9e  1      OPC=nop                    addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0x9f  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa0  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa1  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa2  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa3  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa4  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa5  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa6  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa7  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xa8  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xa9  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xaa  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xab  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xac  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xad  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xae  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xaf  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb0  1      OPC=nop                                                                                                 
  nop                             #  92    0xb1  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb2  1      OPC=nop                                                                                                 
  nop                             #  94    0xb3  1      OPC=nop                                                                                                 
  nop                             #  95    0xb4  1      OPC=nop                                                                                                 
  nop                             #  96    0xb5  1      OPC=nop                                                                                                 
  nop                             #  97    0xb6  1      OPC=nop                                                                                                 
  nop                             #  98    0xb7  1      OPC=nop                                                                                                 
  nop                             #  99    0xb8  1      OPC=nop                                                                                                 
  nop                             #  100   0xb9  1      OPC=nop                                                                                                 
  nop                             #  101   0xba  1      OPC=nop                                                                                                 
  nop                             #  102   0xbb  1      OPC=nop                                                                                                 
  nop                             #  103   0xbc  1      OPC=nop                                                                                                 
  nop                             #  104   0xbd  1      OPC=nop                                                                                                 
  nop                             #  105   0xbe  1      OPC=nop                                                                                                 
  nop                             #  106   0xbf  1      OPC=nop                                                                                                 
  nop                             #  107   0xc0  1      OPC=nop                                                                                                 
  nop                             #  108   0xc1  1      OPC=nop                                                                                                 
  nop                             #  109   0xc2  1      OPC=nop                                                                                                 
  nop                             #  110   0xc3  1      OPC=nop                                                                                                 
  nop                             #  111   0xc4  1      OPC=nop                                                                                                 
  nop                             #  112   0xc5  1      OPC=nop                                                                                                 
  nop                             #  113   0xc6  1      OPC=nop                                                                                                 
  nop                             #  114   0xc7  1      OPC=nop                                                                                                 
  nop                             #  115   0xc8  1      OPC=nop                                                                                                 
  nop                             #  116   0xc9  1      OPC=nop                                                                                                 
  nop                             #  117   0xca  1      OPC=nop                                                                                                 
  nop                             #  118   0xcb  1      OPC=nop                                                                                                 
  nop                             #  119   0xcc  1      OPC=nop                                                                                                 
  nop                             #  120   0xcd  1      OPC=nop                                                                                                 
  nop                             #  121   0xce  1      OPC=nop                                                                                                 
  nop                             #  122   0xcf  1      OPC=nop                                                                                                 
  popq %r11                       #  123   0xd0  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  124   0xd2  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  125   0xd6  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  126   0xd9  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Statistics Update: 

Iterations:                    300000
Elapsed Time:                  364.156s
Iterations/s:                  823.824

Starting cost:                 411
Lowest cost:                   223
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted      
                                                         
Local Swap      8.39%        5.54533%      4.03033%      
Global Swap     8.42367%     5.859%        4.033%        
Opcode          8.32633%     7.38633%      6.272%        
Operand         8.32667%     5.12967%      0.792333%     
Instruction     8.33133%     3.64867%      0.165%        
Add Nops        8.355%       8.355%        3.95333%      
Rotate          8.32867%     6.463%        2.867%        
OpcodeWidth     8.29233%     6.80367%      5.963%        
Delete          8.29533%     7.26733%      4.12233%      
Global Copy     8.32167%     7.17433%      7.17433%      
ReplaceNop      8.322%       7.28467%      5.75833%      
2xWeighted      0%           0%            0%            
Memory+Swap     8.287%       4.561%        0.002%        
                                                         
Total           100%         75.478%       45.133%       

********************************************************************************

Progress Update: 

Lowest Cost Discovered (222)                                                     Lowest Known Correct Cost (247)                                                
                                                                                                                                                                
  .text                                                                            .text                                                                        
  .globl strcpy                                                                    .globl strcpy                                                                
  .type strcpy, @function                                                          .type strcpy, @function                                                      
                                                                                                                                                                
#! file-offset 0                                                                 #! file-offset 0                                                               
#! rip-offset  0                                                                 #! rip-offset  0                                                               
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                         
                                                                                                                                                                
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  movl %esi, %edx                 #  1     0     2      OPC=movl_r32_r32_1         nop                           #  1     0     1      OPC=nop                  
  movl %edi, %ecx                 #  2     0x2   2      OPC=movl_r32_r32_1         nop                           #  2     0x1   1      OPC=nop                  
  andq $0x1, %rdi                 #  3     0x4   7      OPC=andq_r64_imm32         nop                           #  3     0x2   1      OPC=nop                  
  movl %ecx, %eax                 #  4     0xb   2      OPC=movl_r32_r32_1         nop                           #  4     0x3   1      OPC=nop                  
  nop                             #  5     0xd   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                             #  6     0xe   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                             #  7     0xf   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                             #  8     0x10  1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                             #  9     0x11  1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                             #  10    0x12  1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                             #  11    0x13  1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                             #  12    0x14  1      OPC=nop                    movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32         
  nop                             #  13    0x15  1      OPC=nop                    movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1       
  jne .L_126860                   #  14    0x16  6      OPC=jne_label_1            andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8        
  nop                             #  15    0x1c  1      OPC=nop                    nop                           #  15    0x12  1      OPC=nop                  
  nop                             #  16    0x1d  1      OPC=nop                    nop                           #  16    0x13  1      OPC=nop                  
  nop                             #  17    0x1e  1      OPC=nop                    nop                           #  17    0x14  1      OPC=nop                  
  nop                             #  18    0x1f  1      OPC=nop                    nop                           #  18    0x15  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                    nop                           #  19    0x16  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                    nop                           #  20    0x17  1      OPC=nop                  
  movl %edx, %esi                 #  21    0x22  2      OPC=movl_r32_r32_1         movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  22    0x24  4      OPC=movq_r64_m64           jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1          
  nop                             #  23    0x28  1      OPC=nop                    nop                           #  23    0x20  1      OPC=nop                  
  nop                             #  24    0x29  1      OPC=nop                    subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32         
  nop                             #  25    0x2a  1      OPC=nop                    movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32         
  nop                             #  26    0x2b  1      OPC=nop                    nop                           #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x2c  1      OPC=nop                    nop                           #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x2d  1      OPC=nop                    nop                           #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x2e  1      OPC=nop                    nop                           #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x2f  1      OPC=nop                    nop                           #  30    0x2b  1      OPC=nop                  
  orl %r8d, %esi                  #  31    0x30  3      OPC=orl_r32_r32_1          orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1        
  negb %sil                       #  32    0x33  3      OPC=negb_r8                negq %rsi                     #  32    0x2f  3      OPC=negq_r64             
  nop                             #  33    0x36  1      OPC=nop                    andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1         
  andb %r15b, %sil                #  34    0x37  3      OPC=andb_r8_r8             nop                           #  34    0x35  1      OPC=nop                  
  jne .L_126860                   #  35    0x3a  6      OPC=jne_label_1            nop                           #  35    0x36  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                           #  36    0x37  1      OPC=nop                  
  addl $0x4, %ecx                 #  36    0x40  6      OPC=addl_r32_imm32         nop                           #  37    0x38  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  37    0x46  5      OPC=movl_m32_r32           nop                           #  38    0x39  1      OPC=nop                  
  addw $0x4, %dx                  #  38    0x4b  4      OPC=addw_r16_imm8          jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d        #  39    0x4f  4      OPC=movl_r32_m32         .L_126820:                      #        0x40  0      OPC=<label>              
  movq %r8, %r9                   #  40    0x53  3      OPC=movq_r64_r64           orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32          
  leaq -0x1010101(%r8), %rsi      #  41    0x56  7      OPC=leaq_r64_m16           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  notl %r9d                       #  42    0x5d  3      OPC=notl_r32               addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d          #  43    0x60  7      OPC=andl_r32_imm32         addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  44    0x67  3      OPC=andl_r32_r32           movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32         
  je .L_126820                    #  45    0x6a  6      OPC=je_label_1             leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  nop                             #  46    0x70  1      OPC=nop                    movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64         
  nop                             #  47    0x71  1      OPC=nop                    notl %r9d                     #  47    0x5a  3      OPC=notl_r32             
  nop                             #  48    0x72  1      OPC=nop                    andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1       
  nop                             #  49    0x73  1      OPC=nop                    andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32       
  nop                             #  50    0x74  1      OPC=nop                    je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                             #  51    0x75  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                             #  52    0x76  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x77  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x78  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x79  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x7a  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x7b  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x7c  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x7d  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x7e  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x7f  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                           #  62    0x78  1      OPC=nop                  
  subq $0xff, %rdx                #  62    0x80  4      OPC=subq_r64_imm8          nop                           #  63    0x79  1      OPC=nop                  
  movzbl -0x1(%r15,%rdx,1), %esi  #  63    0x84  6      OPC=movzbl_r32_m8          nop                           #  64    0x7a  1      OPC=nop                  
  incl %ecx                       #  64    0x8a  2      OPC=incl_r32               nop                           #  65    0x7b  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  65    0x8c  5      OPC=movb_m8_r8             nop                           #  66    0x7c  1      OPC=nop                  
  salq $0x2, %rsi                 #  66    0x91  4      OPC=salq_r64_imm8          nop                           #  67    0x7d  1      OPC=nop                  
  jne .L_126860                   #  67    0x95  6      OPC=jne_label_1            nop                           #  68    0x7e  1      OPC=nop                  
  nop                             #  68    0x9b  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
  nop                             #  69    0x9c  1      OPC=nop                  .L_126860:                      #        0x80  0      OPC=<label>              
  nop                             #  70    0x9d  1      OPC=nop                    subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32         
  nop                             #  71    0x9e  1      OPC=nop                    movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  nop                             #  72    0x9f  1      OPC=nop                    addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8        
  nop                             #  73    0xa0  1      OPC=nop                    addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8        
  nop                             #  74    0xa1  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8           
  nop                             #  75    0xa2  1      OPC=nop                    testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8          
  nop                             #  76    0xa3  1      OPC=nop                    jne .L_126860                 #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0xa4  1      OPC=nop                    nop                           #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                    nop                           #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                    nop                           #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                    nop                           #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                    nop                           #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                    nop                           #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                    nop                           #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                    nop                           #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                    nop                           #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                    nop                           #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                    popq %r11                     #  87    0xa6  2      OPC=popq_r64_1           
  nop                             #  88    0xaf  1      OPC=nop                    andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8        
  nop                             #  89    0xb0  1      OPC=nop                    addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64         
  nop                             #  90    0xb1  1      OPC=nop                    jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64             
  nop                             #  91    0xb2  1      OPC=nop                                                                                                 
  nop                             #  92    0xb3  1      OPC=nop                  .size strcpy, .-strcpy                                                         
  nop                             #  93    0xb4  1      OPC=nop                                                                                                 
  nop                             #  94    0xb5  1      OPC=nop                                                                                                 
  nop                             #  95    0xb6  1      OPC=nop                                                                                                 
  nop                             #  96    0xb7  1      OPC=nop                                                                                                 
  nop                             #  97    0xb8  1      OPC=nop                                                                                                 
  nop                             #  98    0xb9  1      OPC=nop                                                                                                 
  nop                             #  99    0xba  1      OPC=nop                                                                                                 
  nop                             #  100   0xbb  1      OPC=nop                                                                                                 
  nop                             #  101   0xbc  1      OPC=nop                                                                                                 
  nop                             #  102   0xbd  1      OPC=nop                                                                                                 
  nop                             #  103   0xbe  1      OPC=nop                                                                                                 
  nop                             #  104   0xbf  1      OPC=nop                                                                                                 
  nop                             #  105   0xc0  1      OPC=nop                                                                                                 
  nop                             #  106   0xc1  1      OPC=nop                                                                                                 
  nop                             #  107   0xc2  1      OPC=nop                                                                                                 
  nop                             #  108   0xc3  1      OPC=nop                                                                                                 
  nop                             #  109   0xc4  1      OPC=nop                                                                                                 
  nop                             #  110   0xc5  1      OPC=nop                                                                                                 
  nop                             #  111   0xc6  1      OPC=nop                                                                                                 
  nop                             #  112   0xc7  1      OPC=nop                                                                                                 
  popq %r11                       #  113   0xc8  2      OPC=popq_r64_1                                                                                          
  andl $0xe0, %r11d               #  114   0xca  4      OPC=andl_r32_imm8                                                                                       
  addq %r15, %r11                 #  115   0xce  3      OPC=addq_r64_r64                                                                                        
  jmpq %r11                       #  116   0xd1  3      OPC=jmpq_r64                                                                                            
                                                                                                                                                                
.size strcpy, .-strcpy                                                                                                                                          
                                                                                                                                                                

********************************************************************************

Statistics Update: 

Iterations:                    400000
Elapsed Time:                  485.963s
Iterations/s:                  823.107

Starting cost:                 411
Lowest cost:                   222
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted     
                                                        
Local Swap      8.44%        5.54375%      4.0475%      
Global Swap     8.4%         5.9055%       4.1325%      
Opcode          8.32%        7.39575%      6.32325%     
Operand         8.3155%      5.10225%      0.80675%     
Instruction     8.35975%     3.69175%      0.17%        
Add Nops        8.3435%      8.3435%       4.058%       
Rotate          8.32025%     6.501%        2.937%       
OpcodeWidth     8.30725%     6.84475%      6.0405%      
Delete          8.30625%     7.2925%       4.2325%      
Global Copy     8.303%       7.1965%       7.1965%      
ReplaceNop      8.31075%     7.2955%       5.8355%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.27375%     4.543%        0.0015%      
                                                        
Total           100%         75.6557%      45.7815%     

********************************************************************************

Statistics Update: 

Iterations:                    500000
Elapsed Time:                  610.254s
Iterations/s:                  819.331

Starting cost:                 411
Lowest cost:                   222
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted     
                                                        
Local Swap      8.412%       5.5572%       4.0712%      
Global Swap     8.365%       5.9394%       4.2088%      
Opcode          8.312%       7.4112%       6.3766%      
Operand         8.3002%      5.0442%       0.799%       
Instruction     8.3584%      3.7114%       0.1648%      
Add Nops        8.3448%      8.3448%       4.1194%      
Rotate          8.37%        6.5888%       2.9974%      
OpcodeWidth     8.3228%      6.8966%       6.1252%      
Delete          8.31%        7.317%        4.292%       
Global Copy     8.3078%      7.2164%       7.2164%      
ReplaceNop      8.3258%      7.3334%       5.9406%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.2712%      4.5548%       0.0012%      
                                                        
Total           100%         75.9152%      46.3126%     

********************************************************************************

===========================================
Working on pair / P: 1 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_8|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>)) (== <TMP_BV_8_9|8> <TMP_BV_8_6|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_6|8>)[7:0] (concat <0x0|56> <TMP_BV_8_6|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_8|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>)) (== <TMP_BV_8_9|8> <TMP_BV_8_6|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 1 
2  |       0 0 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 3 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_8_15|8> <TMP_BV_8_20|8>)) (== <TMP_BV_8_16|8> <TMP_BV_8_19|8>)) (== <TMP_BV_32_21|32> <TMP_BV_32_17|32>)) (== <TMP_BV_8_22|8> <TMP_BV_8_18|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_17|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_18|8>)[7:0] (concat <0x0|56> <TMP_BV_8_18|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_15|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_15|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_8_15|8> <TMP_BV_8_20|8>)) (== <TMP_BV_8_16|8> <TMP_BV_8_19|8>)) (== <TMP_BV_32_21|32> <TMP_BV_32_17|32>)) (== <TMP_BV_8_22|8> <TMP_BV_8_18|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 1 
2  |       0 0 0 
3  |         0 1 
4  |           0 
5  |             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 2 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 2)
Access 4 cell 3 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_8_29|8> <TMP_BV_8_34|8>)) (== <TMP_BV_16_30|16> <TMP_BV_16_32|16>)) (== <TMP_BV_8_35|8> <TMP_BV_8_31|8>)) (== <TMP_BV_8_36|8> <TMP_BV_8_33|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_31|8>)[7:0] (concat <0x0|56> <TMP_BV_8_31|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_33|8>)[7:0] (concat <0x0|56> <TMP_BV_8_33|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_29|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_29|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_8_29|8> <TMP_BV_8_34|8>)) (== <TMP_BV_16_30|16> <TMP_BV_16_32|16>)) (== <TMP_BV_8_35|8> <TMP_BV_8_31|8>)) (== <TMP_BV_8_36|8> <TMP_BV_8_33|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 1 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 3 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 4 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_8_44|8> <TMP_BV_8_50|8>)) (== <TMP_BV_16_45|16> <TMP_BV_16_48|16>)) (== <TMP_BV_32_51|32> <TMP_BV_32_46|32>)) (== <TMP_BV_8_52|8> <TMP_BV_8_47|8>)) (== <TMP_BV_8_53|8> <TMP_BV_8_49|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_46|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_47|8>)[7:0] (concat <0x0|56> <TMP_BV_8_47|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_49|8>)[7:0] (concat <0x0|56> <TMP_BV_8_49|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_44|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_44|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_8_44|8> <TMP_BV_8_50|8>)) (== <TMP_BV_16_45|16> <TMP_BV_16_48|16>)) (== <TMP_BV_32_51|32> <TMP_BV_32_46|32>)) (== <TMP_BV_8_52|8> <TMP_BV_8_47|8>)) (== <TMP_BV_8_53|8> <TMP_BV_8_49|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 0 
3  |         0 0 1 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 5)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 5)
Access 4 cell 3 offset 0 size 4 (cell size 4)
Access 5 cell 4 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 5 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 5 / offset 0
45 -> 3 (size 4 / cell size 4 / offset 0
73 -> 4 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_8_60|8> <TMP_BV_8_66|8>)) (== <TMP_BV_40_61|40> <TMP_BV_40_63|40>)) (== <TMP_BV_32_67|32> <TMP_BV_32_62|32>)) (== <TMP_BV_32_68|32> <TMP_BV_32_64|32>)) (== <TMP_BV_8_69|8> <TMP_BV_8_65|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_62|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_32_64|32>)[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_64|32>))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_65|8>)[7:0] (concat <0x0|56> <TMP_BV_8_65|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_60|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_60|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_8_60|8> <TMP_BV_8_66|8>)) (== <TMP_BV_40_61|40> <TMP_BV_40_63|40>)) (== <TMP_BV_32_67|32> <TMP_BV_32_62|32>)) (== <TMP_BV_32_68|32> <TMP_BV_32_64|32>)) (== <TMP_BV_8_69|8> <TMP_BV_8_65|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 6)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 6)
Access 4 cell 3 offset 0 size 4 (cell size 4)
Access 5 cell 4 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 4 size 1 (cell size 6)
Access 7 cell 5 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 6 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 3 (size 4 / cell size 4 / offset 0
73 -> 4 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 5 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_8_78|8> <TMP_BV_8_85|8>)) (== <TMP_BV_48_79|48> <TMP_BV_48_81|48>)) (== <TMP_BV_32_86|32> <TMP_BV_32_80|32>)) (== <TMP_BV_32_87|32> <TMP_BV_32_82|32>)) (== <TMP_BV_8_88|8> <TMP_BV_8_83|8>)) (== <TMP_BV_8_89|8> <TMP_BV_8_84|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_80|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_32_82|32>)[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_82|32>))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_83|8>)[7:0] (concat <0x0|56> <TMP_BV_8_83|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_84|8>)[7:0] (concat <0x0|56> <TMP_BV_8_84|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_78|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_78|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_8_78|8> <TMP_BV_8_85|8>)) (== <TMP_BV_48_79|48> <TMP_BV_48_81|48>)) (== <TMP_BV_32_86|32> <TMP_BV_32_80|32>)) (== <TMP_BV_32_87|32> <TMP_BV_32_82|32>)) (== <TMP_BV_8_88|8> <TMP_BV_8_83|8>)) (== <TMP_BV_8_89|8> <TMP_BV_8_84|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 0 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 9)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 9)
Access 4 cell 3 offset 0 size 4 (cell size 8)
Access 5 cell 1 offset 4 size 4 (cell size 9)
Access 6 cell 3 offset 4 size 4 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 9 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 3 (size 4 / cell size 8 / offset 0
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 3 (size 4 / cell size 8 / offset 4
85 -> 4 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_8_97|8> <TMP_BV_8_103|8>)) (== <TMP_BV_72_98|72> <TMP_BV_72_100|72>)) (== <TMP_BV_32_104|32> <TMP_BV_32_99|32>)) (== <TMP_BV_64_105|64> <TMP_BV_64_101|64>)) (== <TMP_BV_8_106|8> <TMP_BV_8_102|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_99|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_101|64>[31:0])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_101|64>[31:0]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_101|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_101|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_102|8>)[7:0] (concat <0x0|56> <TMP_BV_8_102|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_97|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_97|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_8_97|8> <TMP_BV_8_103|8>)) (== <TMP_BV_72_98|72> <TMP_BV_72_100|72>)) (== <TMP_BV_32_104|32> <TMP_BV_32_99|32>)) (== <TMP_BV_64_105|64> <TMP_BV_64_101|64>)) (== <TMP_BV_8_106|8> <TMP_BV_8_102|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 10)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 10)
Access 4 cell 3 offset 0 size 4 (cell size 8)
Access 5 cell 1 offset 4 size 4 (cell size 10)
Access 6 cell 3 offset 4 size 4 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 8 size 1 (cell size 10)
Access 9 cell 5 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 10 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 3 (size 4 / cell size 8 / offset 0
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 3 (size 4 / cell size 8 / offset 4
85 -> 4 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 5 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_8_116|8> <TMP_BV_8_123|8>)) (== <TMP_BV_80_117|80> <TMP_BV_80_119|80>)) (== <TMP_BV_32_124|32> <TMP_BV_32_118|32>)) (== <TMP_BV_64_125|64> <TMP_BV_64_120|64>)) (== <TMP_BV_8_126|8> <TMP_BV_8_121|8>)) (== <TMP_BV_8_127|8> <TMP_BV_8_122|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_118|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_120|64>[31:0])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_120|64>[31:0]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_120|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_120|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_121|8>)[7:0] (concat <0x0|56> <TMP_BV_8_121|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_122|8>)[7:0] (concat <0x0|56> <TMP_BV_8_122|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_116|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_116|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_8_116|8> <TMP_BV_8_123|8>)) (== <TMP_BV_80_117|80> <TMP_BV_80_119|80>)) (== <TMP_BV_32_124|32> <TMP_BV_32_118|32>)) (== <TMP_BV_64_125|64> <TMP_BV_64_120|64>)) (== <TMP_BV_8_126|8> <TMP_BV_8_121|8>)) (== <TMP_BV_8_127|8> <TMP_BV_8_122|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   1 0 0 0 
1  |     0 0 0 
2  |       0 1 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_133|32> <TMP_BV_32_137|32>)) (== <TMP_BV_8_134|8> <TMP_BV_8_136|8>)) (== <TMP_BV_8_138|8> <TMP_BV_8_135|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_135|8>)[7:0] (concat <0x0|56> <TMP_BV_8_135|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_133|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_133|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_133|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_133|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_133|32> <TMP_BV_32_137|32>)) (== <TMP_BV_8_134|8> <TMP_BV_8_136|8>)) (== <TMP_BV_8_138|8> <TMP_BV_8_135|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   1 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 1 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 3 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_32_145|32> <TMP_BV_32_150|32>)) (== <TMP_BV_8_146|8> <TMP_BV_8_149|8>)) (== <TMP_BV_32_151|32> <TMP_BV_32_147|32>)) (== <TMP_BV_8_152|8> <TMP_BV_8_148|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_147|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_148|8>)[7:0] (concat <0x0|56> <TMP_BV_8_148|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_145|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_145|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_145|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_145|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_32_145|32> <TMP_BV_32_150|32>)) (== <TMP_BV_8_146|8> <TMP_BV_8_149|8>)) (== <TMP_BV_32_151|32> <TMP_BV_32_147|32>)) (== <TMP_BV_8_152|8> <TMP_BV_8_148|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 1 
3  |         0 0 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 2 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 3 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_32_160|32> <TMP_BV_32_165|32>)) (== <TMP_BV_16_161|16> <TMP_BV_16_163|16>)) (== <TMP_BV_8_166|8> <TMP_BV_8_162|8>)) (== <TMP_BV_8_167|8> <TMP_BV_8_164|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_162|8>)[7:0] (concat <0x0|56> <TMP_BV_8_162|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_164|8>)[7:0] (concat <0x0|56> <TMP_BV_8_164|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_160|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_160|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_160|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_160|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_32_160|32> <TMP_BV_32_165|32>)) (== <TMP_BV_16_161|16> <TMP_BV_16_163|16>)) (== <TMP_BV_8_166|8> <TMP_BV_8_162|8>)) (== <TMP_BV_8_167|8> <TMP_BV_8_164|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 1 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 3 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 4 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_176|32> <TMP_BV_32_182|32>)) (== <TMP_BV_16_177|16> <TMP_BV_16_180|16>)) (== <TMP_BV_32_183|32> <TMP_BV_32_178|32>)) (== <TMP_BV_8_184|8> <TMP_BV_8_179|8>)) (== <TMP_BV_8_185|8> <TMP_BV_8_181|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_178|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_179|8>)[7:0] (concat <0x0|56> <TMP_BV_8_179|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_181|8>)[7:0] (concat <0x0|56> <TMP_BV_8_181|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_176|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_176|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_176|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_176|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_176|32> <TMP_BV_32_182|32>)) (== <TMP_BV_16_177|16> <TMP_BV_16_180|16>)) (== <TMP_BV_32_183|32> <TMP_BV_32_178|32>)) (== <TMP_BV_8_184|8> <TMP_BV_8_179|8>)) (== <TMP_BV_8_185|8> <TMP_BV_8_181|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 1 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 1 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 0 offset 0 size 1 (cell size 8)
Access 2 cell 1 offset 0 size 1 (cell size 5)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 1 offset 0 size 4 (cell size 5)
Access 5 cell 0 offset 4 size 4 (cell size 8)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
19 -> 0 (size 1 / cell size 8 / offset 0
22 -> 1 (size 1 / cell size 5 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 5 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_193|64> <TMP_BV_64_197|64>)) (== <TMP_BV_40_194|40> <TMP_BV_40_196|40>)) (== <TMP_BV_32_199|32> <TMP_BV_32_195|32>)) (== <TMP_BV_8_200|8> <TMP_BV_8_198|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_195|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_197|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_197|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_198|8>)[7:0] (concat <0x0|56> <TMP_BV_8_198|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_193|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_193|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_193|64>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_193|64>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_193|64> <TMP_BV_64_197|64>)) (== <TMP_BV_40_194|40> <TMP_BV_40_196|40>)) (== <TMP_BV_32_199|32> <TMP_BV_32_195|32>)) (== <TMP_BV_8_200|8> <TMP_BV_8_198|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 1 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 0 offset 0 size 1 (cell size 8)
Access 2 cell 1 offset 0 size 1 (cell size 6)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 1 offset 0 size 4 (cell size 6)
Access 5 cell 0 offset 4 size 4 (cell size 8)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 4 size 1 (cell size 6)
Access 8 cell 4 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
19 -> 0 (size 1 / cell size 8 / offset 0
22 -> 1 (size 1 / cell size 6 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_210|64> <TMP_BV_64_214|64>)) (== <TMP_BV_48_211|48> <TMP_BV_48_213|48>)) (== <TMP_BV_32_217|32> <TMP_BV_32_212|32>)) (== <TMP_BV_8_218|8> <TMP_BV_8_215|8>)) (== <TMP_BV_8_219|8> <TMP_BV_8_216|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_212|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_214|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_214|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_215|8>)[7:0] (concat <0x0|56> <TMP_BV_8_215|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_216|8>)[7:0] (concat <0x0|56> <TMP_BV_8_216|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_210|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_210|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_210|64>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_210|64>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_210|64> <TMP_BV_64_214|64>)) (== <TMP_BV_48_211|48> <TMP_BV_48_213|48>)) (== <TMP_BV_32_217|32> <TMP_BV_32_212|32>)) (== <TMP_BV_8_218|8> <TMP_BV_8_215|8>)) (== <TMP_BV_8_219|8> <TMP_BV_8_216|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 1 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 9)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 1 offset 0 size 4 (cell size 9)
Access 5 cell 0 offset 4 size 4 (cell size 12)
Access 6 cell 1 offset 4 size 4 (cell size 9)
Access 7 cell 0 offset 8 size 4 (cell size 12)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 9 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_228|96> <TMP_BV_96_232|96>)) (== <TMP_BV_72_229|72> <TMP_BV_72_231|72>)) (== <TMP_BV_32_234|32> <TMP_BV_32_230|32>)) (== <TMP_BV_8_235|8> <TMP_BV_8_233|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_230|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_232|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_232|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_232|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_232|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_233|8>)[7:0] (concat <0x0|56> <TMP_BV_8_233|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_228|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_228|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_228|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_228|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_228|96> <TMP_BV_96_232|96>)) (== <TMP_BV_72_229|72> <TMP_BV_72_231|72>)) (== <TMP_BV_32_234|32> <TMP_BV_32_230|32>)) (== <TMP_BV_8_235|8> <TMP_BV_8_233|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 10)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 1 offset 0 size 4 (cell size 10)
Access 5 cell 0 offset 4 size 4 (cell size 12)
Access 6 cell 1 offset 4 size 4 (cell size 10)
Access 7 cell 0 offset 8 size 4 (cell size 12)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 8 size 1 (cell size 10)
Access 10 cell 4 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 10 / offset 0
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_246|96> <TMP_BV_96_250|96>)) (== <TMP_BV_80_247|80> <TMP_BV_80_249|80>)) (== <TMP_BV_32_253|32> <TMP_BV_32_248|32>)) (== <TMP_BV_8_254|8> <TMP_BV_8_251|8>)) (== <TMP_BV_8_255|8> <TMP_BV_8_252|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_248|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_250|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_250|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_250|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_250|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_251|8>)[7:0] (concat <0x0|56> <TMP_BV_8_251|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_252|8>)[7:0] (concat <0x0|56> <TMP_BV_8_252|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_246|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_246|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_246|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_246|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_246|96> <TMP_BV_96_250|96>)) (== <TMP_BV_80_247|80> <TMP_BV_80_249|80>)) (== <TMP_BV_32_253|32> <TMP_BV_32_248|32>)) (== <TMP_BV_8_254|8> <TMP_BV_8_251|8>)) (== <TMP_BV_8_255|8> <TMP_BV_8_252|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 1 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_262|16> <TMP_BV_16_266|16>)) (== <TMP_BV_16_263|16> <TMP_BV_16_265|16>)) (== <TMP_BV_8_267|8> <TMP_BV_8_264|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_264|8>)[7:0] (concat <0x0|56> <TMP_BV_8_264|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_262|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_262|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_262|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_262|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_262|16> <TMP_BV_16_266|16>)) (== <TMP_BV_16_263|16> <TMP_BV_16_265|16>)) (== <TMP_BV_8_267|8> <TMP_BV_8_264|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 3 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_16_275|16> <TMP_BV_16_280|16>)) (== <TMP_BV_16_276|16> <TMP_BV_16_279|16>)) (== <TMP_BV_32_281|32> <TMP_BV_32_277|32>)) (== <TMP_BV_8_282|8> <TMP_BV_8_278|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_277|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_278|8>)[7:0] (concat <0x0|56> <TMP_BV_8_278|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_275|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_275|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_275|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_275|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_16_275|16> <TMP_BV_16_280|16>)) (== <TMP_BV_16_276|16> <TMP_BV_16_279|16>)) (== <TMP_BV_32_281|32> <TMP_BV_32_277|32>)) (== <TMP_BV_8_282|8> <TMP_BV_8_278|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 1 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 0 0 0 0 0 
1  |     0 1 0 0 0 1 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 1 (cell size 1)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_16_291|16> <TMP_BV_16_296|16>)) (== <TMP_BV_16_292|16> <TMP_BV_16_294|16>)) (== <TMP_BV_8_297|8> <TMP_BV_8_293|8>)) (== <TMP_BV_8_298|8> <TMP_BV_8_295|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_293|8>)[7:0] (concat <0x0|56> <TMP_BV_8_293|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_295|8>)[7:0] (concat <0x0|56> <TMP_BV_8_295|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_291|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_291|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_291|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_291|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_16_291|16> <TMP_BV_16_296|16>)) (== <TMP_BV_16_292|16> <TMP_BV_16_294|16>)) (== <TMP_BV_8_297|8> <TMP_BV_8_293|8>)) (== <TMP_BV_8_298|8> <TMP_BV_8_295|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 1 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 3 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 4 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_16_308|16> <TMP_BV_16_314|16>)) (== <TMP_BV_16_309|16> <TMP_BV_16_312|16>)) (== <TMP_BV_32_315|32> <TMP_BV_32_310|32>)) (== <TMP_BV_8_316|8> <TMP_BV_8_311|8>)) (== <TMP_BV_8_317|8> <TMP_BV_8_313|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_310|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_311|8>)[7:0] (concat <0x0|56> <TMP_BV_8_311|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_313|8>)[7:0] (concat <0x0|56> <TMP_BV_8_313|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_308|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_308|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_308|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_308|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_16_308|16> <TMP_BV_16_314|16>)) (== <TMP_BV_16_309|16> <TMP_BV_16_312|16>)) (== <TMP_BV_32_315|32> <TMP_BV_32_310|32>)) (== <TMP_BV_8_316|8> <TMP_BV_8_311|8>)) (== <TMP_BV_8_317|8> <TMP_BV_8_313|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 5)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 5)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 1 offset 0 size 4 (cell size 5)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 5 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 5 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 5 / offset 0
45 -> 3 (size 4 / cell size 4 / offset 0
73 -> 4 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_16_326|16> <TMP_BV_16_332|16>)) (== <TMP_BV_40_327|40> <TMP_BV_40_329|40>)) (== <TMP_BV_32_333|32> <TMP_BV_32_328|32>)) (== <TMP_BV_32_334|32> <TMP_BV_32_330|32>)) (== <TMP_BV_8_335|8> <TMP_BV_8_331|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_328|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_32_330|32>)[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_330|32>))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_331|8>)[7:0] (concat <0x0|56> <TMP_BV_8_331|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_326|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_326|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_326|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_326|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_16_326|16> <TMP_BV_16_332|16>)) (== <TMP_BV_40_327|40> <TMP_BV_40_329|40>)) (== <TMP_BV_32_333|32> <TMP_BV_32_328|32>)) (== <TMP_BV_32_334|32> <TMP_BV_32_330|32>)) (== <TMP_BV_8_335|8> <TMP_BV_8_331|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 6)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 6)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 1 offset 0 size 4 (cell size 6)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 4 size 1 (cell size 6)
Access 9 cell 5 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 6 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 6 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 3 (size 4 / cell size 4 / offset 0
73 -> 4 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 5 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_16_346|16> <TMP_BV_16_353|16>)) (== <TMP_BV_48_347|48> <TMP_BV_48_349|48>)) (== <TMP_BV_32_354|32> <TMP_BV_32_348|32>)) (== <TMP_BV_32_355|32> <TMP_BV_32_350|32>)) (== <TMP_BV_8_356|8> <TMP_BV_8_351|8>)) (== <TMP_BV_8_357|8> <TMP_BV_8_352|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_348|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_32_350|32>)[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_350|32>))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_351|8>)[7:0] (concat <0x0|56> <TMP_BV_8_351|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_352|8>)[7:0] (concat <0x0|56> <TMP_BV_8_352|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_346|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_346|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_346|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_346|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_16_346|16> <TMP_BV_16_353|16>)) (== <TMP_BV_48_347|48> <TMP_BV_48_349|48>)) (== <TMP_BV_32_354|32> <TMP_BV_32_348|32>)) (== <TMP_BV_32_355|32> <TMP_BV_32_350|32>)) (== <TMP_BV_8_356|8> <TMP_BV_8_351|8>)) (== <TMP_BV_8_357|8> <TMP_BV_8_352|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 0 0 
7  |                 0 0 1 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 9)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 9)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 1 offset 0 size 4 (cell size 9)
Access 6 cell 3 offset 0 size 4 (cell size 8)
Access 7 cell 1 offset 4 size 4 (cell size 9)
Access 8 cell 3 offset 4 size 4 (cell size 8)
Access 9 cell 4 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 9 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 9 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 3 (size 4 / cell size 8 / offset 0
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 3 (size 4 / cell size 8 / offset 4
85 -> 4 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_16_367|16> <TMP_BV_16_373|16>)) (== <TMP_BV_72_368|72> <TMP_BV_72_370|72>)) (== <TMP_BV_32_374|32> <TMP_BV_32_369|32>)) (== <TMP_BV_64_375|64> <TMP_BV_64_371|64>)) (== <TMP_BV_8_376|8> <TMP_BV_8_372|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_369|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_371|64>[31:0])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_371|64>[31:0]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_371|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_371|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_372|8>)[7:0] (concat <0x0|56> <TMP_BV_8_372|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_367|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_367|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_367|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_367|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_16_367|16> <TMP_BV_16_373|16>)) (== <TMP_BV_72_368|72> <TMP_BV_72_370|72>)) (== <TMP_BV_32_374|32> <TMP_BV_32_369|32>)) (== <TMP_BV_64_375|64> <TMP_BV_64_371|64>)) (== <TMP_BV_8_376|8> <TMP_BV_8_372|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 0 0 0 0 
7  |                 0 0 1 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 10)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 10)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 1 offset 0 size 4 (cell size 10)
Access 6 cell 3 offset 0 size 4 (cell size 8)
Access 7 cell 1 offset 4 size 4 (cell size 10)
Access 8 cell 3 offset 4 size 4 (cell size 8)
Access 9 cell 4 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 8 size 1 (cell size 10)
Access 11 cell 5 offset 0 size 1 (cell size 1)
Access 12 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 10 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 10 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 3 (size 4 / cell size 8 / offset 0
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 3 (size 4 / cell size 8 / offset 4
85 -> 4 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 5 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_16_388|16> <TMP_BV_16_395|16>)) (== <TMP_BV_80_389|80> <TMP_BV_80_391|80>)) (== <TMP_BV_32_396|32> <TMP_BV_32_390|32>)) (== <TMP_BV_64_397|64> <TMP_BV_64_392|64>)) (== <TMP_BV_8_398|8> <TMP_BV_8_393|8>)) (== <TMP_BV_8_399|8> <TMP_BV_8_394|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_390|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_392|64>[31:0])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_392|64>[31:0]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_392|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_392|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_393|8>)[7:0] (concat <0x0|56> <TMP_BV_8_393|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_394|8>)[7:0] (concat <0x0|56> <TMP_BV_8_394|8>)[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_388|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_388|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_388|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_388|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_16_388|16> <TMP_BV_16_395|16>)) (== <TMP_BV_80_389|80> <TMP_BV_80_391|80>)) (== <TMP_BV_32_396|32> <TMP_BV_32_390|32>)) (== <TMP_BV_64_397|64> <TMP_BV_64_392|64>)) (== <TMP_BV_8_398|8> <TMP_BV_8_393|8>)) (== <TMP_BV_8_399|8> <TMP_BV_8_394|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 1 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_407|32> <TMP_BV_32_411|32>)) (== <TMP_BV_16_408|16> <TMP_BV_16_410|16>)) (== <TMP_BV_8_412|8> <TMP_BV_8_409|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_409|8>)[7:0] (concat <0x0|56> <TMP_BV_8_409|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_407|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_407|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_407|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_407|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_407|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_407|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_407|32> <TMP_BV_32_411|32>)) (== <TMP_BV_16_408|16> <TMP_BV_16_410|16>)) (== <TMP_BV_8_412|8> <TMP_BV_8_409|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_32_421|32> <TMP_BV_32_426|32>)) (== <TMP_BV_16_422|16> <TMP_BV_16_425|16>)) (== <TMP_BV_32_427|32> <TMP_BV_32_423|32>)) (== <TMP_BV_8_428|8> <TMP_BV_8_424|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_423|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_424|8>)[7:0] (concat <0x0|56> <TMP_BV_8_424|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_421|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_421|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_421|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_421|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_421|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_421|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_32_421|32> <TMP_BV_32_426|32>)) (== <TMP_BV_16_422|16> <TMP_BV_16_425|16>)) (== <TMP_BV_32_427|32> <TMP_BV_32_423|32>)) (== <TMP_BV_8_428|8> <TMP_BV_8_424|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   1 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 1 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 0 0 0 1 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 3 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 2 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_32_438|32> <TMP_BV_32_443|32>)) (== <TMP_BV_16_439|16> <TMP_BV_16_441|16>)) (== <TMP_BV_8_444|8> <TMP_BV_8_440|8>)) (== <TMP_BV_8_445|8> <TMP_BV_8_442|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_440|8>)[7:0] (concat <0x0|56> <TMP_BV_8_440|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_442|8>)[7:0] (concat <0x0|56> <TMP_BV_8_442|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_438|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_438|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_438|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_438|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_438|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_438|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_32_438|32> <TMP_BV_32_443|32>)) (== <TMP_BV_16_439|16> <TMP_BV_16_441|16>)) (== <TMP_BV_8_444|8> <TMP_BV_8_440|8>)) (== <TMP_BV_8_445|8> <TMP_BV_8_442|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 1 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 1 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 0 size 1 (cell size 2)
Access 8 cell 4 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 2 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_456|32> <TMP_BV_32_462|32>)) (== <TMP_BV_16_457|16> <TMP_BV_16_460|16>)) (== <TMP_BV_32_463|32> <TMP_BV_32_458|32>)) (== <TMP_BV_8_464|8> <TMP_BV_8_459|8>)) (== <TMP_BV_8_465|8> <TMP_BV_8_461|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_458|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_459|8>)[7:0] (concat <0x0|56> <TMP_BV_8_459|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_461|8>)[7:0] (concat <0x0|56> <TMP_BV_8_461|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_456|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_456|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_456|32> <TMP_BV_32_462|32>)) (== <TMP_BV_16_457|16> <TMP_BV_16_460|16>)) (== <TMP_BV_32_463|32> <TMP_BV_32_458|32>)) (== <TMP_BV_8_464|8> <TMP_BV_8_459|8>)) (== <TMP_BV_8_465|8> <TMP_BV_8_461|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 1 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 0 offset 0 size 1 (cell size 8)
Access 2 cell 1 offset 0 size 1 (cell size 5)
Access 3 cell 0 offset 1 size 1 (cell size 8)
Access 4 cell 1 offset 1 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 5)
Access 7 cell 0 offset 4 size 4 (cell size 8)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
19 -> 0 (size 1 / cell size 8 / offset 0
22 -> 1 (size 1 / cell size 5 / offset 0
28 -> 0 (size 1 / cell size 8 / offset 1
31 -> 1 (size 1 / cell size 5 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 5 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_475|64> <TMP_BV_64_479|64>)) (== <TMP_BV_40_476|40> <TMP_BV_40_478|40>)) (== <TMP_BV_32_481|32> <TMP_BV_32_477|32>)) (== <TMP_BV_8_482|8> <TMP_BV_8_480|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_477|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_479|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_479|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_480|8>)[7:0] (concat <0x0|56> <TMP_BV_8_480|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_475|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_475|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_475|64>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_475|64>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_475|64>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_475|64>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_475|64> <TMP_BV_64_479|64>)) (== <TMP_BV_40_476|40> <TMP_BV_40_478|40>)) (== <TMP_BV_32_481|32> <TMP_BV_32_477|32>)) (== <TMP_BV_8_482|8> <TMP_BV_8_480|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 0 offset 0 size 1 (cell size 8)
Access 2 cell 1 offset 0 size 1 (cell size 6)
Access 3 cell 0 offset 1 size 1 (cell size 8)
Access 4 cell 1 offset 1 size 1 (cell size 6)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 6)
Access 7 cell 0 offset 4 size 4 (cell size 8)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 4 size 1 (cell size 6)
Access 10 cell 4 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
19 -> 0 (size 1 / cell size 8 / offset 0
22 -> 1 (size 1 / cell size 6 / offset 0
28 -> 0 (size 1 / cell size 8 / offset 1
31 -> 1 (size 1 / cell size 6 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_494|64> <TMP_BV_64_498|64>)) (== <TMP_BV_48_495|48> <TMP_BV_48_497|48>)) (== <TMP_BV_32_501|32> <TMP_BV_32_496|32>)) (== <TMP_BV_8_502|8> <TMP_BV_8_499|8>)) (== <TMP_BV_8_503|8> <TMP_BV_8_500|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_496|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_498|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_498|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_499|8>)[7:0] (concat <0x0|56> <TMP_BV_8_499|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_500|8>)[7:0] (concat <0x0|56> <TMP_BV_8_500|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_494|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_494|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_494|64>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_494|64>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_494|64>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_494|64>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_494|64> <TMP_BV_64_498|64>)) (== <TMP_BV_48_495|48> <TMP_BV_48_497|48>)) (== <TMP_BV_32_501|32> <TMP_BV_32_496|32>)) (== <TMP_BV_8_502|8> <TMP_BV_8_499|8>)) (== <TMP_BV_8_503|8> <TMP_BV_8_500|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 1 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 9)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 9)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 9)
Access 7 cell 0 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 9)
Access 9 cell 0 offset 8 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 9 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 9 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_514|96> <TMP_BV_96_518|96>)) (== <TMP_BV_72_515|72> <TMP_BV_72_517|72>)) (== <TMP_BV_32_520|32> <TMP_BV_32_516|32>)) (== <TMP_BV_8_521|8> <TMP_BV_8_519|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_516|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_518|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_518|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_518|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_518|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_519|8>)[7:0] (concat <0x0|56> <TMP_BV_8_519|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_514|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_514|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_514|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_514|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_514|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_514|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_514|96> <TMP_BV_96_518|96>)) (== <TMP_BV_72_515|72> <TMP_BV_72_517|72>)) (== <TMP_BV_32_520|32> <TMP_BV_32_516|32>)) (== <TMP_BV_8_521|8> <TMP_BV_8_519|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 10)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 10)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 10)
Access 7 cell 0 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 10)
Access 9 cell 0 offset 8 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 8 size 1 (cell size 10)
Access 12 cell 4 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 10 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 10 / offset 1
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_534|96> <TMP_BV_96_538|96>)) (== <TMP_BV_80_535|80> <TMP_BV_80_537|80>)) (== <TMP_BV_32_541|32> <TMP_BV_32_536|32>)) (== <TMP_BV_8_542|8> <TMP_BV_8_539|8>)) (== <TMP_BV_8_543|8> <TMP_BV_8_540|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_536|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_538|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_538|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_538|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_538|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_539|8>)[7:0] (concat <0x0|56> <TMP_BV_8_539|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_540|8>)[7:0] (concat <0x0|56> <TMP_BV_8_540|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_534|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_534|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_534|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_534|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_534|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_534|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_534|96> <TMP_BV_96_538|96>)) (== <TMP_BV_80_535|80> <TMP_BV_80_537|80>)) (== <TMP_BV_32_541|32> <TMP_BV_32_536|32>)) (== <TMP_BV_8_542|8> <TMP_BV_8_539|8>)) (== <TMP_BV_8_543|8> <TMP_BV_8_540|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 1 0 0 0 
1  |     0 0 1 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_550|64> <TMP_BV_64_554|64>)) (== <TMP_BV_40_551|40> <TMP_BV_40_553|40>)) (== <TMP_BV_8_555|8> <TMP_BV_8_552|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_552|8>)[7:0] (concat <0x0|56> <TMP_BV_8_552|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_550|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_550|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_550|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_550|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_550|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_550|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_550|64> <TMP_BV_64_554|64>)) (== <TMP_BV_40_551|40> <TMP_BV_40_553|40>)) (== <TMP_BV_8_555|8> <TMP_BV_8_552|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 
2  |       1 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 1 0 0 0 0 
1  |     0 0 1 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_563|64> <TMP_BV_64_568|64>)) (== <TMP_BV_40_564|40> <TMP_BV_40_567|40>)) (== <TMP_BV_32_569|32> <TMP_BV_32_565|32>)) (== <TMP_BV_8_570|8> <TMP_BV_8_566|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_565|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_566|8>)[7:0] (concat <0x0|56> <TMP_BV_8_566|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_563|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_563|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_563|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_563|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_563|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_563|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_563|64> <TMP_BV_64_568|64>)) (== <TMP_BV_40_564|40> <TMP_BV_40_567|40>)) (== <TMP_BV_32_569|32> <TMP_BV_32_565|32>)) (== <TMP_BV_8_570|8> <TMP_BV_8_566|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 1 (cell size 1)
Access 6 cell 1 offset 0 size 1 (cell size 5)
Access 7 cell 3 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 5 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_579|64> <TMP_BV_64_584|64>)) (== <TMP_BV_40_580|40> <TMP_BV_40_582|40>)) (== <TMP_BV_8_585|8> <TMP_BV_8_581|8>)) (== <TMP_BV_8_586|8> <TMP_BV_8_583|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_581|8>)[7:0] (concat <0x0|56> <TMP_BV_8_581|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_583|8>)[7:0] (concat <0x0|56> <TMP_BV_8_583|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_579|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_579|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_579|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_579|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_579|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_579|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_579|64> <TMP_BV_64_584|64>)) (== <TMP_BV_40_580|40> <TMP_BV_40_582|40>)) (== <TMP_BV_8_585|8> <TMP_BV_8_581|8>)) (== <TMP_BV_8_586|8> <TMP_BV_8_583|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 3 offset 0 size 1 (cell size 1)
Access 7 cell 1 offset 0 size 1 (cell size 5)
Access 8 cell 4 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 5 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_596|64> <TMP_BV_64_602|64>)) (== <TMP_BV_40_597|40> <TMP_BV_40_600|40>)) (== <TMP_BV_32_603|32> <TMP_BV_32_598|32>)) (== <TMP_BV_8_604|8> <TMP_BV_8_599|8>)) (== <TMP_BV_8_605|8> <TMP_BV_8_601|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_598|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_599|8>)[7:0] (concat <0x0|56> <TMP_BV_8_599|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_601|8>)[7:0] (concat <0x0|56> <TMP_BV_8_601|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_596|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_596|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_596|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_596|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_596|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_596|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_596|64> <TMP_BV_64_602|64>)) (== <TMP_BV_40_597|40> <TMP_BV_40_600|40>)) (== <TMP_BV_32_603|32> <TMP_BV_32_598|32>)) (== <TMP_BV_8_604|8> <TMP_BV_8_599|8>)) (== <TMP_BV_8_605|8> <TMP_BV_8_601|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 
2  |       1 0 0 0 1 0 0 
3  |         0 0 0 1 0 0 
4  |           0 0 0 0 1 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 1 0 0 
1  |     0 0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 5)
Access 7 cell 0 offset 4 size 4 (cell size 8)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 5 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_614|64> <TMP_BV_64_618|64>)) (== <TMP_BV_40_615|40> <TMP_BV_40_617|40>)) (== <TMP_BV_32_620|32> <TMP_BV_32_616|32>)) (== <TMP_BV_8_621|8> <TMP_BV_8_619|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_616|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_618|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_618|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_619|8>)[7:0] (concat <0x0|56> <TMP_BV_8_619|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_614|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_614|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_614|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_614|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_614|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_614|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_614|64> <TMP_BV_64_618|64>)) (== <TMP_BV_40_615|40> <TMP_BV_40_617|40>)) (== <TMP_BV_32_620|32> <TMP_BV_32_616|32>)) (== <TMP_BV_8_621|8> <TMP_BV_8_619|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 1 0 0 0 0 
3  |         0 0 0 1 0 0 0 0 
4  |           0 0 0 0 1 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 1 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 6)
Access 7 cell 0 offset 4 size 4 (cell size 8)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 4 size 1 (cell size 6)
Access 10 cell 4 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_632|64> <TMP_BV_64_636|64>)) (== <TMP_BV_48_633|48> <TMP_BV_48_635|48>)) (== <TMP_BV_32_639|32> <TMP_BV_32_634|32>)) (== <TMP_BV_8_640|8> <TMP_BV_8_637|8>)) (== <TMP_BV_8_641|8> <TMP_BV_8_638|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_634|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_636|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_636|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_637|8>)[7:0] (concat <0x0|56> <TMP_BV_8_637|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_638|8>)[7:0] (concat <0x0|56> <TMP_BV_8_638|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_632|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_632|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_632|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_632|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_632|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_632|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_632|64> <TMP_BV_64_636|64>)) (== <TMP_BV_48_633|48> <TMP_BV_48_635|48>)) (== <TMP_BV_32_639|32> <TMP_BV_32_634|32>)) (== <TMP_BV_8_640|8> <TMP_BV_8_637|8>)) (== <TMP_BV_8_641|8> <TMP_BV_8_638|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 1 0 0 0 0 
3  |         0 0 0 1 0 0 0 0 
4  |           0 0 0 1 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 1 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 9)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 9)
Access 7 cell 0 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 9)
Access 9 cell 0 offset 8 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 9 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_651|96> <TMP_BV_96_655|96>)) (== <TMP_BV_72_652|72> <TMP_BV_72_654|72>)) (== <TMP_BV_32_657|32> <TMP_BV_32_653|32>)) (== <TMP_BV_8_658|8> <TMP_BV_8_656|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_653|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_655|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_655|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_655|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_655|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_656|8>)[7:0] (concat <0x0|56> <TMP_BV_8_656|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_651|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_651|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_651|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_651|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_651|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_651|96>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_651|96> <TMP_BV_96_655|96>)) (== <TMP_BV_72_652|72> <TMP_BV_72_654|72>)) (== <TMP_BV_32_657|32> <TMP_BV_32_653|32>)) (== <TMP_BV_8_658|8> <TMP_BV_8_656|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 0 0 0 0 0 
2  |       1 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 1 0 0 0 0 0 0 
4  |           0 0 0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 10)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 1 offset 0 size 4 (cell size 10)
Access 7 cell 0 offset 4 size 4 (cell size 12)
Access 8 cell 1 offset 4 size 4 (cell size 10)
Access 9 cell 0 offset 8 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 8 size 1 (cell size 10)
Access 12 cell 4 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 10 / offset 4
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_670|96> <TMP_BV_96_674|96>)) (== <TMP_BV_80_671|80> <TMP_BV_80_673|80>)) (== <TMP_BV_32_677|32> <TMP_BV_32_672|32>)) (== <TMP_BV_8_678|8> <TMP_BV_8_675|8>)) (== <TMP_BV_8_679|8> <TMP_BV_8_676|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_672|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_674|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_674|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_674|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_674|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_675|8>)[7:0] (concat <0x0|56> <TMP_BV_8_675|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_676|8>)[7:0] (concat <0x0|56> <TMP_BV_8_676|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_670|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_670|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_670|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_670|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_670|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_670|96>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_670|96> <TMP_BV_96_674|96>)) (== <TMP_BV_80_671|80> <TMP_BV_80_673|80>)) (== <TMP_BV_32_677|32> <TMP_BV_32_672|32>)) (== <TMP_BV_8_678|8> <TMP_BV_8_675|8>)) (== <TMP_BV_8_679|8> <TMP_BV_8_676|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_688|64> <TMP_BV_64_692|64>)) (== <TMP_BV_48_689|48> <TMP_BV_48_691|48>)) (== <TMP_BV_8_693|8> <TMP_BV_8_690|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_690|8>)[7:0] (concat <0x0|56> <TMP_BV_8_690|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_688|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_688|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_688|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_688|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_688|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_688|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_688|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_688|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_688|64> <TMP_BV_64_692|64>)) (== <TMP_BV_48_689|48> <TMP_BV_48_691|48>)) (== <TMP_BV_8_693|8> <TMP_BV_8_690|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_703|64> <TMP_BV_64_708|64>)) (== <TMP_BV_48_704|48> <TMP_BV_48_707|48>)) (== <TMP_BV_32_709|32> <TMP_BV_32_705|32>)) (== <TMP_BV_8_710|8> <TMP_BV_8_706|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_705|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_706|8>)[7:0] (concat <0x0|56> <TMP_BV_8_706|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_703|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_703|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_703|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_703|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_703|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_703|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_703|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_703|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_703|64> <TMP_BV_64_708|64>)) (== <TMP_BV_48_704|48> <TMP_BV_48_707|48>)) (== <TMP_BV_32_709|32> <TMP_BV_32_705|32>)) (== <TMP_BV_8_710|8> <TMP_BV_8_706|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 6)
Access 9 cell 3 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 6 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_721|64> <TMP_BV_64_726|64>)) (== <TMP_BV_48_722|48> <TMP_BV_48_724|48>)) (== <TMP_BV_8_727|8> <TMP_BV_8_723|8>)) (== <TMP_BV_8_728|8> <TMP_BV_8_725|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_723|8>)[7:0] (concat <0x0|56> <TMP_BV_8_723|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_725|8>)[7:0] (concat <0x0|56> <TMP_BV_8_725|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_721|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_721|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_721|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_721|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_721|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_721|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_721|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_721|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_721|64> <TMP_BV_64_726|64>)) (== <TMP_BV_48_722|48> <TMP_BV_48_724|48>)) (== <TMP_BV_8_727|8> <TMP_BV_8_723|8>)) (== <TMP_BV_8_728|8> <TMP_BV_8_725|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 0 size 1 (cell size 6)
Access 10 cell 4 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 6 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_740|64> <TMP_BV_64_746|64>)) (== <TMP_BV_48_741|48> <TMP_BV_48_744|48>)) (== <TMP_BV_32_747|32> <TMP_BV_32_742|32>)) (== <TMP_BV_8_748|8> <TMP_BV_8_743|8>)) (== <TMP_BV_8_749|8> <TMP_BV_8_745|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_742|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_743|8>)[7:0] (concat <0x0|56> <TMP_BV_8_743|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_745|8>)[7:0] (concat <0x0|56> <TMP_BV_8_745|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_740|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_740|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_740|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_740|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_740|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_740|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_740|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_740|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_740|64> <TMP_BV_64_746|64>)) (== <TMP_BV_48_741|48> <TMP_BV_48_744|48>)) (== <TMP_BV_32_747|32> <TMP_BV_32_742|32>)) (== <TMP_BV_8_748|8> <TMP_BV_8_743|8>)) (== <TMP_BV_8_749|8> <TMP_BV_8_745|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 
3  |         0 0 0 0 0 1 0 0 
4  |           0 0 0 0 0 0 1 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 
1  |     0 0 1 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 6)
Access 9 cell 0 offset 4 size 4 (cell size 8)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 4 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_64_760|64> <TMP_BV_64_764|64>)) (== <TMP_BV_48_761|48> <TMP_BV_48_763|48>)) (== <TMP_BV_32_766|32> <TMP_BV_32_762|32>)) (== <TMP_BV_8_767|8> <TMP_BV_8_765|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_762|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_764|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_764|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_765|8>)[7:0] (concat <0x0|56> <TMP_BV_8_765|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_760|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_760|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_760|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_760|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_760|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_760|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_760|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_760|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_64_760|64> <TMP_BV_64_764|64>)) (== <TMP_BV_48_761|48> <TMP_BV_48_763|48>)) (== <TMP_BV_32_766|32> <TMP_BV_32_762|32>)) (== <TMP_BV_8_767|8> <TMP_BV_8_765|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 1 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 1 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 6)
Access 9 cell 0 offset 4 size 4 (cell size 8)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 4 size 1 (cell size 6)
Access 12 cell 4 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 6 / offset 0
45 -> 0 (size 4 / cell size 8 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 6 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_780|64> <TMP_BV_64_784|64>)) (== <TMP_BV_48_781|48> <TMP_BV_48_783|48>)) (== <TMP_BV_32_787|32> <TMP_BV_32_782|32>)) (== <TMP_BV_8_788|8> <TMP_BV_8_785|8>)) (== <TMP_BV_8_789|8> <TMP_BV_8_786|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_782|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_784|64>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_784|64>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_785|8>)[7:0] (concat <0x0|56> <TMP_BV_8_785|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_786|8>)[7:0] (concat <0x0|56> <TMP_BV_8_786|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_780|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_780|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_780|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_780|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_780|64> <TMP_BV_64_784|64>)) (== <TMP_BV_48_781|48> <TMP_BV_48_783|48>)) (== <TMP_BV_32_787|32> <TMP_BV_32_782|32>)) (== <TMP_BV_8_788|8> <TMP_BV_8_785|8>)) (== <TMP_BV_8_789|8> <TMP_BV_8_786|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 1 0 0 0 0 
4  |           0 0 0 0 0 1 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 1 0 0 0 
9  |                     0 1 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 9)
Access 5 cell 0 offset 5 size 1 (cell size 12)
Access 6 cell 1 offset 5 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 9)
Access 11 cell 0 offset 8 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 9 / offset 4
67 -> 0 (size 1 / cell size 12 / offset 5
70 -> 1 (size 1 / cell size 9 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_801|96> <TMP_BV_96_805|96>)) (== <TMP_BV_72_802|72> <TMP_BV_72_804|72>)) (== <TMP_BV_32_807|32> <TMP_BV_32_803|32>)) (== <TMP_BV_8_808|8> <TMP_BV_8_806|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_803|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_805|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_805|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_805|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_805|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_806|8>)[7:0] (concat <0x0|56> <TMP_BV_8_806|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_801|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_801|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_801|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_801|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_801|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_801|96>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_801|96>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_801|96>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_801|96> <TMP_BV_96_805|96>)) (== <TMP_BV_72_802|72> <TMP_BV_72_804|72>)) (== <TMP_BV_32_807|32> <TMP_BV_32_803|32>)) (== <TMP_BV_8_808|8> <TMP_BV_8_806|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 1 0 0 0 0 0 
9  |                     0 1 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 10)
Access 5 cell 0 offset 5 size 1 (cell size 12)
Access 6 cell 1 offset 5 size 1 (cell size 10)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 10)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 10)
Access 11 cell 0 offset 8 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 8 size 1 (cell size 10)
Access 14 cell 4 offset 0 size 1 (cell size 1)
Access 15 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 10 / offset 4
67 -> 0 (size 1 / cell size 12 / offset 5
70 -> 1 (size 1 / cell size 10 / offset 5
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_822|96> <TMP_BV_96_826|96>)) (== <TMP_BV_80_823|80> <TMP_BV_80_825|80>)) (== <TMP_BV_32_829|32> <TMP_BV_32_824|32>)) (== <TMP_BV_8_830|8> <TMP_BV_8_827|8>)) (== <TMP_BV_8_831|8> <TMP_BV_8_828|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_824|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_826|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_826|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_826|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_826|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_827|8>)[7:0] (concat <0x0|56> <TMP_BV_8_827|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_828|8>)[7:0] (concat <0x0|56> <TMP_BV_8_828|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_822|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_822|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_822|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_822|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_822|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_822|96>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_822|96>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_822|96>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_822|96> <TMP_BV_96_826|96>)) (== <TMP_BV_80_823|80> <TMP_BV_80_825|80>)) (== <TMP_BV_32_829|32> <TMP_BV_32_824|32>)) (== <TMP_BV_8_830|8> <TMP_BV_8_827|8>)) (== <TMP_BV_8_831|8> <TMP_BV_8_828|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_839|96> <TMP_BV_96_843|96>)) (== <TMP_BV_72_840|72> <TMP_BV_72_842|72>)) (== <TMP_BV_8_844|8> <TMP_BV_8_841|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_841|8>)[7:0] (concat <0x0|56> <TMP_BV_8_841|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_839|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_839|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_839|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_839|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_839|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_839|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_839|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_839|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_839|96> <TMP_BV_96_843|96>)) (== <TMP_BV_72_840|72> <TMP_BV_72_842|72>)) (== <TMP_BV_8_844|8> <TMP_BV_8_841|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           1 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 
3  |         0 0 1 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_853|96> <TMP_BV_96_858|96>)) (== <TMP_BV_72_854|72> <TMP_BV_72_857|72>)) (== <TMP_BV_32_859|32> <TMP_BV_32_855|32>)) (== <TMP_BV_8_860|8> <TMP_BV_8_856|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_855|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_856|8>)[7:0] (concat <0x0|56> <TMP_BV_8_856|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_853|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_853|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_853|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_853|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_853|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_853|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_853|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_853|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_853|96> <TMP_BV_96_858|96>)) (== <TMP_BV_72_854|72> <TMP_BV_72_857|72>)) (== <TMP_BV_32_859|32> <TMP_BV_32_855|32>)) (== <TMP_BV_8_860|8> <TMP_BV_8_856|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 1 (cell size 1)
Access 8 cell 1 offset 0 size 1 (cell size 9)
Access 9 cell 3 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 9 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_870|96> <TMP_BV_96_875|96>)) (== <TMP_BV_72_871|72> <TMP_BV_72_873|72>)) (== <TMP_BV_8_876|8> <TMP_BV_8_872|8>)) (== <TMP_BV_8_877|8> <TMP_BV_8_874|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_872|8>)[7:0] (concat <0x0|56> <TMP_BV_8_872|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_874|8>)[7:0] (concat <0x0|56> <TMP_BV_8_874|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_870|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_870|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_870|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_870|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_870|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_870|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_870|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_870|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_870|96> <TMP_BV_96_875|96>)) (== <TMP_BV_72_871|72> <TMP_BV_72_873|72>)) (== <TMP_BV_8_876|8> <TMP_BV_8_872|8>)) (== <TMP_BV_8_877|8> <TMP_BV_8_874|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 3 offset 0 size 1 (cell size 1)
Access 9 cell 1 offset 0 size 1 (cell size 9)
Access 10 cell 4 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 9 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_888|96> <TMP_BV_96_894|96>)) (== <TMP_BV_72_889|72> <TMP_BV_72_892|72>)) (== <TMP_BV_32_895|32> <TMP_BV_32_890|32>)) (== <TMP_BV_8_896|8> <TMP_BV_8_891|8>)) (== <TMP_BV_8_897|8> <TMP_BV_8_893|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_890|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_891|8>)[7:0] (concat <0x0|56> <TMP_BV_8_891|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_893|8>)[7:0] (concat <0x0|56> <TMP_BV_8_893|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_888|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_888|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_888|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_888|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_888|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_888|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_888|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_888|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_888|96> <TMP_BV_96_894|96>)) (== <TMP_BV_72_889|72> <TMP_BV_72_892|72>)) (== <TMP_BV_32_895|32> <TMP_BV_32_890|32>)) (== <TMP_BV_8_896|8> <TMP_BV_8_891|8>)) (== <TMP_BV_8_897|8> <TMP_BV_8_893|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 0 1 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 
1  |     0 1 0 0 0 0 0 0 0 1 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 4 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 9 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_907|96> <TMP_BV_96_911|96>)) (== <TMP_BV_72_908|72> <TMP_BV_72_910|72>)) (== <TMP_BV_32_913|32> <TMP_BV_32_909|32>)) (== <TMP_BV_8_914|8> <TMP_BV_8_912|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_909|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_911|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_911|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_912|8>)[7:0] (concat <0x0|56> <TMP_BV_8_912|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_907|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_907|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_907|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_907|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_907|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_907|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_907|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_907|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_907|96> <TMP_BV_96_911|96>)) (== <TMP_BV_72_908|72> <TMP_BV_72_910|72>)) (== <TMP_BV_32_913|32> <TMP_BV_32_909|32>)) (== <TMP_BV_8_914|8> <TMP_BV_8_912|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 1 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 1 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 4 size 1 (cell size 9)
Access 12 cell 4 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 5 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 9 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 9 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_926|96> <TMP_BV_96_930|96>)) (== <TMP_BV_72_927|72> <TMP_BV_72_929|72>)) (== <TMP_BV_32_933|32> <TMP_BV_32_928|32>)) (== <TMP_BV_8_934|8> <TMP_BV_8_931|8>)) (== <TMP_BV_8_935|8> <TMP_BV_8_932|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_928|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_930|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_930|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_931|8>)[7:0] (concat <0x0|56> <TMP_BV_8_931|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_932|8>)[7:0] (concat <0x0|56> <TMP_BV_8_932|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_926|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_926|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_926|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_926|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_926|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_926|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_926|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_926|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_926|96> <TMP_BV_96_930|96>)) (== <TMP_BV_72_927|72> <TMP_BV_72_929|72>)) (== <TMP_BV_32_933|32> <TMP_BV_32_928|32>)) (== <TMP_BV_8_934|8> <TMP_BV_8_931|8>)) (== <TMP_BV_8_935|8> <TMP_BV_8_932|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 1 0 0 0 
4  |           1 0 0 0 0 0 1 0 0 
5  |             0 0 0 0 0 1 0 0 
6  |               0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 1 0 0 0 
2  |       0 1 1 0 0 0 0 0 1 0 0 
3  |         0 0 1 0 0 0 0 0 0 1 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 1 0 0 0 
9  |                     0 1 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 9)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 9)
Access 11 cell 0 offset 8 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 8 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 9 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 9 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 9 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_946|96> <TMP_BV_96_950|96>)) (== <TMP_BV_72_947|72> <TMP_BV_72_949|72>)) (== <TMP_BV_32_952|32> <TMP_BV_32_948|32>)) (== <TMP_BV_8_953|8> <TMP_BV_8_951|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_948|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_950|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_950|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_950|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_950|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_951|8>)[7:0] (concat <0x0|56> <TMP_BV_8_951|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_946|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_946|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_946|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_946|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_946|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_946|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_946|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_946|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_946|96> <TMP_BV_96_950|96>)) (== <TMP_BV_72_947|72> <TMP_BV_72_949|72>)) (== <TMP_BV_32_952|32> <TMP_BV_32_948|32>)) (== <TMP_BV_8_953|8> <TMP_BV_8_951|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 1 0 0 0 0 0 
4  |           1 0 0 0 0 0 1 0 0 0 0 
5  |             0 0 0 0 0 1 0 0 0 0 
6  |               0 0 0 0 0 0 1 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 1 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 1 0 0 0 0 0 
9  |                     0 1 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 2 offset 0 size 4 (cell size 4)
Access 8 cell 1 offset 0 size 4 (cell size 10)
Access 9 cell 0 offset 4 size 4 (cell size 12)
Access 10 cell 1 offset 4 size 4 (cell size 10)
Access 11 cell 0 offset 8 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 8 size 1 (cell size 10)
Access 14 cell 4 offset 0 size 1 (cell size 1)
Access 15 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_966|96> <TMP_BV_96_970|96>)) (== <TMP_BV_80_967|80> <TMP_BV_80_969|80>)) (== <TMP_BV_32_973|32> <TMP_BV_32_968|32>)) (== <TMP_BV_8_974|8> <TMP_BV_8_971|8>)) (== <TMP_BV_8_975|8> <TMP_BV_8_972|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_968|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_970|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_970|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_970|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_970|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_971|8>)[7:0] (concat <0x0|56> <TMP_BV_8_971|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_972|8>)[7:0] (concat <0x0|56> <TMP_BV_8_972|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_966|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_966|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_966|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_966|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_966|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_966|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_966|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_966|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_966|96> <TMP_BV_96_970|96>)) (== <TMP_BV_80_967|80> <TMP_BV_80_969|80>)) (== <TMP_BV_32_973|32> <TMP_BV_32_968|32>)) (== <TMP_BV_8_974|8> <TMP_BV_8_971|8>)) (== <TMP_BV_8_975|8> <TMP_BV_8_972|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_985|96> <TMP_BV_96_989|96>)) (== <TMP_BV_80_986|80> <TMP_BV_80_988|80>)) (== <TMP_BV_8_990|8> <TMP_BV_8_987|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_987|8>)[7:0] (concat <0x0|56> <TMP_BV_8_987|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_985|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_985|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_985|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_985|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_985|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_985|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_985|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_985|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_985|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_985|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_985|96> <TMP_BV_96_989|96>)) (== <TMP_BV_80_986|80> <TMP_BV_80_988|80>)) (== <TMP_BV_8_990|8> <TMP_BV_8_987|8>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_1001|96> <TMP_BV_96_1006|96>)) (== <TMP_BV_80_1002|80> <TMP_BV_80_1005|80>)) (== <TMP_BV_32_1007|32> <TMP_BV_32_1003|32>)) (== <TMP_BV_8_1008|8> <TMP_BV_8_1004|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1003|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1004|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1004|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1001|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1001|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1001|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1001|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1001|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1001|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1001|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1001|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1001|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1001|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_1001|96> <TMP_BV_96_1006|96>)) (== <TMP_BV_80_1002|80> <TMP_BV_80_1005|80>)) (== <TMP_BV_32_1007|32> <TMP_BV_32_1003|32>)) (== <TMP_BV_8_1008|8> <TMP_BV_8_1004|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 1 (cell size 1)
Access 10 cell 1 offset 0 size 1 (cell size 10)
Access 11 cell 3 offset 0 size 1 (cell size 1)
Access 12 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 1 / cell size 1 / offset 0
28 -> 1 (size 1 / cell size 10 / offset 0
33 -> 3 (size 1 / cell size 1 / offset 0
36 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_1020|96> <TMP_BV_96_1025|96>)) (== <TMP_BV_80_1021|80> <TMP_BV_80_1023|80>)) (== <TMP_BV_8_1026|8> <TMP_BV_8_1022|8>)) (== <TMP_BV_8_1027|8> <TMP_BV_8_1024|8>))

CONSTRAINTS

(not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_1022|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1022|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1024|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1024|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1020|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1020|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1020|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1020|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1020|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1020|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1020|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1020|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1020|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1020|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_1020|96> <TMP_BV_96_1025|96>)) (== <TMP_BV_80_1021|80> <TMP_BV_80_1023|80>)) (== <TMP_BV_8_1026|8> <TMP_BV_8_1022|8>)) (== <TMP_BV_8_1027|8> <TMP_BV_8_1024|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 3 offset 0 size 1 (cell size 1)
Access 11 cell 1 offset 0 size 1 (cell size 10)
Access 12 cell 4 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 3 (size 1 / cell size 1 / offset 0
45 -> 1 (size 1 / cell size 10 / offset 0
50 -> 4 (size 1 / cell size 1 / offset 0
53 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_1040|96> <TMP_BV_96_1046|96>)) (== <TMP_BV_80_1041|80> <TMP_BV_80_1044|80>)) (== <TMP_BV_32_1047|32> <TMP_BV_32_1042|32>)) (== <TMP_BV_8_1048|8> <TMP_BV_8_1043|8>)) (== <TMP_BV_8_1049|8> <TMP_BV_8_1045|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1042|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_1043|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1043|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1045|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1045|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1040|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1040|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1040|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1040|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1040|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1040|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1040|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1040|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1040|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1040|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_1040|96> <TMP_BV_96_1046|96>)) (== <TMP_BV_80_1041|80> <TMP_BV_80_1044|80>)) (== <TMP_BV_32_1047|32> <TMP_BV_32_1042|32>)) (== <TMP_BV_8_1048|8> <TMP_BV_8_1043|8>)) (== <TMP_BV_8_1049|8> <TMP_BV_8_1045|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 0 0 0 1 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 1 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 0 offset 4 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 4 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 10 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_1061|96> <TMP_BV_96_1065|96>)) (== <TMP_BV_80_1062|80> <TMP_BV_80_1064|80>)) (== <TMP_BV_32_1067|32> <TMP_BV_32_1063|32>)) (== <TMP_BV_8_1068|8> <TMP_BV_8_1066|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1063|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1065|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1065|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1066|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1066|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1061|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1061|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1061|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1061|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1061|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1061|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1061|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1061|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1061|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1061|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_1061|96> <TMP_BV_96_1065|96>)) (== <TMP_BV_80_1062|80> <TMP_BV_80_1064|80>)) (== <TMP_BV_32_1067|32> <TMP_BV_32_1063|32>)) (== <TMP_BV_8_1068|8> <TMP_BV_8_1066|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 1 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 0 offset 4 size 4 (cell size 12)
Access 12 cell 3 offset 0 size 1 (cell size 1)
Access 13 cell 1 offset 4 size 1 (cell size 10)
Access 14 cell 4 offset 0 size 1 (cell size 1)
Access 15 cell 1 offset 5 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
73 -> 3 (size 1 / cell size 1 / offset 0
76 -> 1 (size 1 / cell size 10 / offset 4
81 -> 4 (size 1 / cell size 1 / offset 0
84 -> 1 (size 1 / cell size 10 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_1082|96> <TMP_BV_96_1086|96>)) (== <TMP_BV_80_1083|80> <TMP_BV_80_1085|80>)) (== <TMP_BV_32_1089|32> <TMP_BV_32_1084|32>)) (== <TMP_BV_8_1090|8> <TMP_BV_8_1087|8>)) (== <TMP_BV_8_1091|8> <TMP_BV_8_1088|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1084|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1086|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1086|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_1087|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1087|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1088|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1088|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1082|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1082|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1082|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1082|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1082|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1082|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1082|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1082|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1082|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1082|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_1082|96> <TMP_BV_96_1086|96>)) (== <TMP_BV_80_1083|80> <TMP_BV_80_1085|80>)) (== <TMP_BV_32_1089|32> <TMP_BV_32_1084|32>)) (== <TMP_BV_8_1090|8> <TMP_BV_8_1087|8>)) (== <TMP_BV_8_1091|8> <TMP_BV_8_1088|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 1 0 0 0 
4  |           1 0 0 0 0 0 0 0 1 0 0 
5  |             0 0 0 0 0 0 0 1 0 0 
6  |               0 0 0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 1 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 1 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 1 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 1 0 0 0 
11 |                         0 1 0 0 
12 |                           0 0 1 
13 |                             0 0 
14 |                               0 
15 |                                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 0 offset 4 size 4 (cell size 12)
Access 12 cell 1 offset 4 size 4 (cell size 10)
Access 13 cell 0 offset 8 size 4 (cell size 12)
Access 14 cell 3 offset 0 size 1 (cell size 1)
Access 15 cell 1 offset 8 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_96_1104|96> <TMP_BV_96_1108|96>)) (== <TMP_BV_80_1105|80> <TMP_BV_80_1107|80>)) (== <TMP_BV_32_1110|32> <TMP_BV_32_1106|32>)) (== <TMP_BV_8_1111|8> <TMP_BV_8_1109|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1106|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1108|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1108|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1108|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1108|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1109|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1109|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1104|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1104|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1104|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1104|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1104|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1104|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1104|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1104|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1104|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1104|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_96_1104|96> <TMP_BV_96_1108|96>)) (== <TMP_BV_80_1105|80> <TMP_BV_80_1107|80>)) (== <TMP_BV_32_1110|32> <TMP_BV_32_1106|32>)) (== <TMP_BV_8_1111|8> <TMP_BV_8_1109|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movl %edi, %ecx
andl $0x1, %edi
nop 
nop 
nop 
nop 
nop 
nop 
movl %ecx, %eax
nop 
nop 
subl %edi, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
orl %r8d, %esi
negq %rsi
andb %r15b, %sil
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
.L_126820:
orl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movl (%r15,%rdx,1), %r8d
leaq -0x1010101(%r8), %rsi
movq %r8, %r9
notl %r9d
andq %rsi, %r9
andq $0x80808080, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
.L_126860:
subl %esp, %edx
movzbq (%r15,%rdx,1), %rsi
addq $0x1, %rdx
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 18
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 1 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 1 0 0 0 0 
5  |             0 0 0 0 0 0 0 1 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 1 0 0 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 1 
9  |                     0 0 0 0 0 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 0 0 0 
13 |                             0 0 0 0 
14 |                               0 0 0 
15 |                                 0 0 
16 |                                   0 
17 |                                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 1 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 0 1 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 0 0 
10 |                       0 1 0 0 0 0 0 
11 |                         0 1 0 0 0 0 
12 |                           0 0 1 0 0 
13 |                             0 0 0 0 
14 |                               0 0 0 
15 |                                 0 1 
16 |                                   0 
17 |                                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 4 (cell size 4)
Access 10 cell 1 offset 0 size 4 (cell size 10)
Access 11 cell 0 offset 4 size 4 (cell size 12)
Access 12 cell 1 offset 4 size 4 (cell size 10)
Access 13 cell 0 offset 8 size 4 (cell size 12)
Access 14 cell 3 offset 0 size 1 (cell size 1)
Access 15 cell 1 offset 8 size 1 (cell size 10)
Access 16 cell 4 offset 0 size 1 (cell size 1)
Access 17 cell 1 offset 9 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
25 -> 2 (size 4 / cell size 4 / offset 0
42 -> 1 (size 4 / cell size 10 / offset 0
45 -> 0 (size 4 / cell size 12 / offset 4
54 -> 1 (size 4 / cell size 10 / offset 4
57 -> 0 (size 4 / cell size 12 / offset 8
85 -> 3 (size 1 / cell size 1 / offset 0
88 -> 1 (size 1 / cell size 10 / offset 8
93 -> 4 (size 1 / cell size 1 / offset 0
96 -> 1 (size 1 / cell size 10 / offset 9
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_1126|96> <TMP_BV_96_1130|96>)) (== <TMP_BV_80_1127|80> <TMP_BV_80_1129|80>)) (== <TMP_BV_32_1133|32> <TMP_BV_32_1128|32>)) (== <TMP_BV_8_1134|8> <TMP_BV_8_1131|8>)) (== <TMP_BV_8_1135|8> <TMP_BV_8_1132|8>))

CONSTRAINTS

(not (not (== (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (== (and -(concat <0x0|32> (or (concat <0x0|32> (plus (plus (concat <0x0|1> !(concat <0x0|32> (and <%rdi_2_INIT|64>[31:0] (sign-extend-32 <0x1|8>)))[31:0]) <0x1|33>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0] (concat <0x0|32> <TMP_BV_32_1128|32>)[31:0]))[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1130|96>[63:32])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1130|96>[63:32]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_1130|96>[95:64])[31:0]) (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1130|96>[95:64]))[63:0]) (sign-extend-64 <0x80808080|32>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|56> <TMP_BV_8_1131|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1131|8>)[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (plus (concat <0x0|1> (sign-extend-64 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rsp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])))[63:0][31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0] (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|56> <TMP_BV_8_1132|8>)[7:0] (concat <0x0|56> <TMP_BV_8_1132|8>)[7:0]) <0x0|8>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1126|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1126|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1126|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1126|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1126|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1126|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1126|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1126|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1126|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1126|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_1126|96> <TMP_BV_96_1130|96>)) (== <TMP_BV_80_1127|80> <TMP_BV_80_1129|80>)) (== <TMP_BV_32_1133|32> <TMP_BV_32_1128|32>)) (== <TMP_BV_8_1134|8> <TMP_BV_8_1131|8>)) (== <TMP_BV_8_1135|8> <TMP_BV_8_1132|8>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
################################################################################

Final update:

Total search iterations:       500000
Number of attempted searches:  1
Total search time:             610.259s
Total time:                    673.626s

Statistics of last search

Iterations:                    500000
Elapsed Time:                  610.254s
Iterations/s:                  819.331

Starting cost:                 411
Lowest cost:                   222
Lowest correct cost:           247

Move Type       Proposed     Succeeded     Accepted     
                                                        
Local Swap      8.412%       5.5572%       4.0712%      
Global Swap     8.365%       5.9394%       4.2088%      
Opcode          8.312%       7.4112%       6.3766%      
Operand         8.3002%      5.0442%       0.799%       
Instruction     8.3584%      3.7114%       0.1648%      
Add Nops        8.3448%      8.3448%       4.1194%      
Rotate          8.37%        6.5888%       2.9974%      
OpcodeWidth     8.3228%      6.8966%       6.1252%      
Delete          8.31%        7.317%        4.292%       
Global Copy     8.3078%      7.2164%       7.2164%      
ReplaceNop      8.3258%      7.3334%       5.9406%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.2712%      4.5548%       0.0012%      
                                                        
Total           100%         75.9152%      46.3126%     

Lowest Cost Discovered (222)                                                     
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  movl %esi, %edx                 #  1     0     2      OPC=movl_r32_r32_1       
  movl %edi, %ecx                 #  2     0x2   2      OPC=movl_r32_r32_1       
  andq $0x1, %rdi                 #  3     0x4   7      OPC=andq_r64_imm32       
  movl %ecx, %eax                 #  4     0xb   2      OPC=movl_r32_r32_1       
  nop                             #  5     0xd   1      OPC=nop                  
  nop                             #  6     0xe   1      OPC=nop                  
  nop                             #  7     0xf   1      OPC=nop                  
  nop                             #  8     0x10  1      OPC=nop                  
  nop                             #  9     0x11  1      OPC=nop                  
  nop                             #  10    0x12  1      OPC=nop                  
  nop                             #  11    0x13  1      OPC=nop                  
  nop                             #  12    0x14  1      OPC=nop                  
  nop                             #  13    0x15  1      OPC=nop                  
  jne .L_126860                   #  14    0x16  6      OPC=jne_label_1          
  nop                             #  15    0x1c  1      OPC=nop                  
  nop                             #  16    0x1d  1      OPC=nop                  
  nop                             #  17    0x1e  1      OPC=nop                  
  nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                  
  movl %edx, %esi                 #  21    0x22  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  22    0x24  4      OPC=movq_r64_m64         
  nop                             #  23    0x28  1      OPC=nop                  
  nop                             #  24    0x29  1      OPC=nop                  
  nop                             #  25    0x2a  1      OPC=nop                  
  nop                             #  26    0x2b  1      OPC=nop                  
  nop                             #  27    0x2c  1      OPC=nop                  
  nop                             #  28    0x2d  1      OPC=nop                  
  nop                             #  29    0x2e  1      OPC=nop                  
  nop                             #  30    0x2f  1      OPC=nop                  
  orl %r8d, %esi                  #  31    0x30  3      OPC=orl_r32_r32_1        
  negb %sil                       #  32    0x33  3      OPC=negb_r8              
  nop                             #  33    0x36  1      OPC=nop                  
  andb %r15b, %sil                #  34    0x37  3      OPC=andb_r8_r8           
  jne .L_126860                   #  35    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  36    0x40  6      OPC=addl_r32_imm32       
  movl %r8d, -0x4(%r15,%rcx,1)    #  37    0x46  5      OPC=movl_m32_r32         
  addw $0x4, %dx                  #  38    0x4b  4      OPC=addw_r16_imm8        
  movl (%r15,%rdx,1), %r8d        #  39    0x4f  4      OPC=movl_r32_m32         
  movq %r8, %r9                   #  40    0x53  3      OPC=movq_r64_r64         
  leaq -0x1010101(%r8), %rsi      #  41    0x56  7      OPC=leaq_r64_m16         
  notl %r9d                       #  42    0x5d  3      OPC=notl_r32             
  andl $0x80808080, %r9d          #  43    0x60  7      OPC=andl_r32_imm32       
  andl %esi, %r9d                 #  44    0x67  3      OPC=andl_r32_r32         
  je .L_126820                    #  45    0x6a  6      OPC=je_label_1           
  nop                             #  46    0x70  1      OPC=nop                  
  nop                             #  47    0x71  1      OPC=nop                  
  nop                             #  48    0x72  1      OPC=nop                  
  nop                             #  49    0x73  1      OPC=nop                  
  nop                             #  50    0x74  1      OPC=nop                  
  nop                             #  51    0x75  1      OPC=nop                  
  nop                             #  52    0x76  1      OPC=nop                  
  nop                             #  53    0x77  1      OPC=nop                  
  nop                             #  54    0x78  1      OPC=nop                  
  nop                             #  55    0x79  1      OPC=nop                  
  nop                             #  56    0x7a  1      OPC=nop                  
  nop                             #  57    0x7b  1      OPC=nop                  
  nop                             #  58    0x7c  1      OPC=nop                  
  nop                             #  59    0x7d  1      OPC=nop                  
  nop                             #  60    0x7e  1      OPC=nop                  
  nop                             #  61    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  subq $0xff, %rdx                #  62    0x80  4      OPC=subq_r64_imm8        
  movzbl -0x1(%r15,%rdx,1), %esi  #  63    0x84  6      OPC=movzbl_r32_m8        
  incl %ecx                       #  64    0x8a  2      OPC=incl_r32             
  movb %sil, -0x1(%r15,%rcx,1)    #  65    0x8c  5      OPC=movb_m8_r8           
  salq $0x2, %rsi                 #  66    0x91  4      OPC=salq_r64_imm8        
  jne .L_126860                   #  67    0x95  6      OPC=jne_label_1          
  nop                             #  68    0x9b  1      OPC=nop                  
  nop                             #  69    0x9c  1      OPC=nop                  
  nop                             #  70    0x9d  1      OPC=nop                  
  nop                             #  71    0x9e  1      OPC=nop                  
  nop                             #  72    0x9f  1      OPC=nop                  
  nop                             #  73    0xa0  1      OPC=nop                  
  nop                             #  74    0xa1  1      OPC=nop                  
  nop                             #  75    0xa2  1      OPC=nop                  
  nop                             #  76    0xa3  1      OPC=nop                  
  nop                             #  77    0xa4  1      OPC=nop                  
  nop                             #  78    0xa5  1      OPC=nop                  
  nop                             #  79    0xa6  1      OPC=nop                  
  nop                             #  80    0xa7  1      OPC=nop                  
  nop                             #  81    0xa8  1      OPC=nop                  
  nop                             #  82    0xa9  1      OPC=nop                  
  nop                             #  83    0xaa  1      OPC=nop                  
  nop                             #  84    0xab  1      OPC=nop                  
  nop                             #  85    0xac  1      OPC=nop                  
  nop                             #  86    0xad  1      OPC=nop                  
  nop                             #  87    0xae  1      OPC=nop                  
  nop                             #  88    0xaf  1      OPC=nop                  
  nop                             #  89    0xb0  1      OPC=nop                  
  nop                             #  90    0xb1  1      OPC=nop                  
  nop                             #  91    0xb2  1      OPC=nop                  
  nop                             #  92    0xb3  1      OPC=nop                  
  nop                             #  93    0xb4  1      OPC=nop                  
  nop                             #  94    0xb5  1      OPC=nop                  
  nop                             #  95    0xb6  1      OPC=nop                  
  nop                             #  96    0xb7  1      OPC=nop                  
  nop                             #  97    0xb8  1      OPC=nop                  
  nop                             #  98    0xb9  1      OPC=nop                  
  nop                             #  99    0xba  1      OPC=nop                  
  nop                             #  100   0xbb  1      OPC=nop                  
  nop                             #  101   0xbc  1      OPC=nop                  
  nop                             #  102   0xbd  1      OPC=nop                  
  nop                             #  103   0xbe  1      OPC=nop                  
  nop                             #  104   0xbf  1      OPC=nop                  
  nop                             #  105   0xc0  1      OPC=nop                  
  nop                             #  106   0xc1  1      OPC=nop                  
  nop                             #  107   0xc2  1      OPC=nop                  
  nop                             #  108   0xc3  1      OPC=nop                  
  nop                             #  109   0xc4  1      OPC=nop                  
  nop                             #  110   0xc5  1      OPC=nop                  
  nop                             #  111   0xc6  1      OPC=nop                  
  nop                             #  112   0xc7  1      OPC=nop                  
  popq %r11                       #  113   0xc8  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  114   0xca  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  115   0xce  3      OPC=addq_r64_r64         
  jmpq %r11                       #  116   0xd1  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
Lowest Known Correct Cost (247)                                                  
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                          #  Line  RIP   Bytes  Opcode                     
.strcpy:                        #        0     0      OPC=<label>                
  nop                           #  1     0     1      OPC=nop                    
  nop                           #  2     0x1   1      OPC=nop                    
  nop                           #  3     0x2   1      OPC=nop                    
  nop                           #  4     0x3   1      OPC=nop                    
  nop                           #  5     0x4   1      OPC=nop                    
  nop                           #  6     0x5   1      OPC=nop                    
  nop                           #  7     0x6   1      OPC=nop                    
  nop                           #  8     0x7   1      OPC=nop                    
  nop                           #  9     0x8   1      OPC=nop                    
  nop                           #  10    0x9   1      OPC=nop                    
  nop                           #  11    0xa   1      OPC=nop                    
  movl %esi, %edx               #  12    0xb   2      OPC=movl_r32_r32           
  movl %edi, %ecx               #  13    0xd   2      OPC=movl_r32_r32_1         
  andl $0x1, %edi               #  14    0xf   3      OPC=andl_r32_imm8          
  nop                           #  15    0x12  1      OPC=nop                    
  nop                           #  16    0x13  1      OPC=nop                    
  nop                           #  17    0x14  1      OPC=nop                    
  nop                           #  18    0x15  1      OPC=nop                    
  nop                           #  19    0x16  1      OPC=nop                    
  nop                           #  20    0x17  1      OPC=nop                    
  movl %ecx, %eax               #  21    0x18  2      OPC=movl_r32_r32_1         
  jne .L_126860                 #  22    0x1a  6      OPC=jne_label_1            
  nop                           #  23    0x20  1      OPC=nop                    
  subl %edi, %esi               #  24    0x21  2      OPC=subl_r32_r32           
  movl (%r15,%rsi,1), %r8d      #  25    0x23  4      OPC=movl_r32_m32           
  nop                           #  26    0x27  1      OPC=nop                    
  nop                           #  27    0x28  1      OPC=nop                    
  nop                           #  28    0x29  1      OPC=nop                    
  nop                           #  29    0x2a  1      OPC=nop                    
  nop                           #  30    0x2b  1      OPC=nop                    
  orl %r8d, %esi                #  31    0x2c  3      OPC=orl_r32_r32_1          
  negq %rsi                     #  32    0x2f  3      OPC=negq_r64               
  andb %r15b, %sil              #  33    0x32  3      OPC=andb_r8_r8_1           
  nop                           #  34    0x35  1      OPC=nop                    
  nop                           #  35    0x36  1      OPC=nop                    
  nop                           #  36    0x37  1      OPC=nop                    
  nop                           #  37    0x38  1      OPC=nop                    
  nop                           #  38    0x39  1      OPC=nop                    
  jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1            
.L_126820:                      #        0x40  0      OPC=<label>                
  orl %ecx, %ecx                #  40    0x40  2      OPC=orl_r32_r32            
  movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32           
  addl $0x4, %ecx               #  42    0x46  3      OPC=addl_r32_imm8          
  addl $0x4, %edx               #  43    0x49  3      OPC=addl_r32_imm8          
  movl (%r15,%rdx,1), %r8d      #  44    0x4c  4      OPC=movl_r32_m32           
  leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32           
  movq %r8, %r9                 #  46    0x57  3      OPC=movq_r64_r64           
  notl %r9d                     #  47    0x5a  3      OPC=notl_r32               
  andq %rsi, %r9                #  48    0x5d  3      OPC=andq_r64_r64_1         
  andq $0x80808080, %r9         #  49    0x60  7      OPC=andq_r64_imm32         
  je .L_126820                  #  50    0x67  6      OPC=je_label_1             
  nop                           #  51    0x6d  1      OPC=nop                    
  nop                           #  52    0x6e  1      OPC=nop                    
  nop                           #  53    0x6f  1      OPC=nop                    
  nop                           #  54    0x70  1      OPC=nop                    
  nop                           #  55    0x71  1      OPC=nop                    
  nop                           #  56    0x72  1      OPC=nop                    
  nop                           #  57    0x73  1      OPC=nop                    
  nop                           #  58    0x74  1      OPC=nop                    
  nop                           #  59    0x75  1      OPC=nop                    
  nop                           #  60    0x76  1      OPC=nop                    
  nop                           #  61    0x77  1      OPC=nop                    
  nop                           #  62    0x78  1      OPC=nop                    
  nop                           #  63    0x79  1      OPC=nop                    
  nop                           #  64    0x7a  1      OPC=nop                    
  nop                           #  65    0x7b  1      OPC=nop                    
  nop                           #  66    0x7c  1      OPC=nop                    
  nop                           #  67    0x7d  1      OPC=nop                    
  nop                           #  68    0x7e  1      OPC=nop                    
  nop                           #  69    0x7f  1      OPC=nop                    
.L_126860:                      #        0x80  0      OPC=<label>                
  subl %esp, %edx               #  70    0x80  2      OPC=subl_r32_r32           
  movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8          
  addq $0x1, %rdx               #  72    0x87  4      OPC=addq_r64_imm8          
  addl $0x1, %ecx               #  73    0x8b  3      OPC=addl_r32_imm8          
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x8e  5      OPC=movb_m8_r8             
  testb %sil, %sil              #  75    0x93  3      OPC=testb_r8_r8            
  jne .L_126860                 #  76    0x96  6      OPC=jne_label_1            
  nop                           #  77    0x9c  1      OPC=nop                    
  nop                           #  78    0x9d  1      OPC=nop                    
  nop                           #  79    0x9e  1      OPC=nop                    
  nop                           #  80    0x9f  1      OPC=nop                    
  nop                           #  81    0xa0  1      OPC=nop                    
  nop                           #  82    0xa1  1      OPC=nop                    
  nop                           #  83    0xa2  1      OPC=nop                    
  nop                           #  84    0xa3  1      OPC=nop                    
  nop                           #  85    0xa4  1      OPC=nop                    
  nop                           #  86    0xa5  1      OPC=nop                    
  popq %r11                     #  87    0xa6  2      OPC=popq_r64_1             
  andl $0xe0, %r11d             #  88    0xa8  4      OPC=andl_r32_imm8          
  addq %r15, %r11               #  89    0xac  3      OPC=addq_r64_r64           
  jmpq %r11                     #  90    0xaf  3      OPC=jmpq_r64               
                                                                                 
.size strcpy, .-strcpy                                                           
                                                                                 

################################################################################

Search terminated successfully with a verified rewrite!

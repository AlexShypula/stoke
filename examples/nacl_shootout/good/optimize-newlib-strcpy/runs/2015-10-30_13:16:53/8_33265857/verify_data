time stoke debug verify --config verify.conf
Computing reference outputs for 0 testcases
Computing reference outputs for 0 testcases
Target                       Rewrite                          
                                                              
.strcpy:                     .strcpy:                         
movl %esi, %esi              nop                              
movl %edi, %eax              nop                              
movl %esi, %edi              movl %edi, %eax                  
movq %rsi, %rdx              movl %eax, %ecx                  
movq %rax, %rcx              movl %esi, %edx                  
orl %eax, %edi               nop                              
andl $0x3, %edi              nop                              
jne .L_126860                xorl %edx, %edi                  
movl %esi, %esi              nop                              
movl (%r15,%rsi,1), %r8d     andq $0x7, %rdi                  
movl %r8d, %esi              nop                              
leal -0x1010101(%r8), %edi   jne .L_126860                    
notl %esi                    nop                              
andl %edi, %esi              xorl %ecx, %edi                  
andl $0x80808080, %esi       movl 0x4(%r15,%rdi,1), %ebx      
jne .L_126860                nop                              
nop                          nop                              
nop                          salq %cl, %rax                   
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          shll %cl, %eax                   
nop                          nop                              
nop                          nop                              
nop                          nop                              
.L_126820:                   jne .L_126860                    
addl $0x4, %edx              nop                              
movl %ecx, %ecx              nop                              
movl %r8d, (%r15,%rcx,1)     nop                              
addl $0x4, %ecx              incl %edi                        
movl %edx, %edx              nop                              
movl (%r15,%rdx,1), %r8d     nop                              
movl %r8d, %r9d              nop                              
leal -0x1010101(%r8), %esi   nop                              
notl %r9d                    nop                              
nop                          nop                              
andl %esi, %r9d              nop                              
andl $0x80808080, %r9d       nop                              
je .L_126820                 .L_126820:                       
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          je .L_126820                     
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
.L_126860:                   nop                              
movl %edx, %edx              nop                              
movzbl (%r15,%rdx,1), %esi   nop                              
addl $0x1, %edx              nop                              
movl %ecx, %ecx              nop                              
movb %sil, (%r15,%rcx,1)     nop                              
addl $0x1, %ecx              nop                              
testb %sil, %sil             nop                              
jne .L_126860                nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
retq                         nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
nop                          nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             .L_126860:                       
                             addl $0x1, %edx                  
                             movsbl -0x1(%r15,%rdx,1), %esi   
                             addl $0x1, %ecx                  
                             movb %sil, -0x1(%r15,%rcx,1)     
                             testb %sil, %sil                 
                             jne .L_126860                    
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             orl %eax, %eax                   
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             nop                              
                             retq                             
                                                              
===========================================
Working on pair / P: 1 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
movl %edi, %eax
movl %eax, %ecx
movl %esi, %edx
nop 
nop 
xorl %edx, %edi
nop 
andq $0x7, %rdi
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbl -0x1(%r15,%rdx,1), %esi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
orl %eax, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
15 -> 0 (size 1 / cell size 1 / offset 0
17 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))

CONSTRAINTS

(not (== (and (concat <0x0|32> (xor <%rdi_2_INIT|64>[31:0] (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (sign-extend-64 <0x7|8>)) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (sign-extend-32 <TMP_BV_8_6|8>))[7:0] (concat <0x0|32> (sign-extend-32 <TMP_BV_8_6|8>))[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (or (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
movl %edi, %eax
movl %eax, %ecx
movl %esi, %edx
nop 
nop 
xorl %edx, %edi
nop 
andq $0x7, %rdi
nop 
nop 
nop 
xorl %ecx, %edi
movl 0x4(%r15,%rdi,1), %ebx
nop 
nop 
salq %cl, %rax
nop 
nop 
nop 
shll %cl, %eax
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbl -0x1(%r15,%rdx,1), %esi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
orl %eax, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   0 0 1 0 
1  |     0 0 1 
2  |       0 0 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 4 (cell size 4)
Access 3 cell 0 offset 0 size 1 (cell size 1)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
15 -> 2 (size 4 / cell size 4 / offset 0
29 -> 0 (size 1 / cell size 1 / offset 0
31 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_13|8> <TMP_BV_8_16|8>)) (== <TMP_BV_8_14|8> <TMP_BV_8_17|8>)) (== <TMP_BV_32_18|32> <TMP_BV_32_15|32>))

CONSTRAINTS

(not (not (== (and (concat <0x0|32> (xor <%rdi_2_INIT|64>[31:0] (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (sign-extend-64 <0x7|8>)) <0x0|64>)))
(== (plus (plus (sign-extend-64 <0x4|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (and (concat <0x0|32> (xor <%rdi_2_INIT|64>[31:0] (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (sign-extend-64 <0x7|8>))[31:0] (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (<< (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])) (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>)))[63:0][31:0]) (concat <0x0|25> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x1f|8>))[7:0] <0x0|8>))) (or (and (not (== (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])) (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>)))[63:0] <0x0|64>)) (and (not (not (== (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>))[7:0] <0x0|8>))) (== (xor (and (concat <0x0|32> (xor <%rdi_2_INIT|64>[31:0] (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (sign-extend-64 <0x7|8>))[31:0] (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[31:0]) <0x0|32>))))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (sign-extend-32 <TMP_BV_8_16|8>))[7:0] (concat <0x0|32> (sign-extend-32 <TMP_BV_8_16|8>))[7:0]) <0x0|8>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_13|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_13|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_13|8> <TMP_BV_8_16|8>)) (== <TMP_BV_8_14|8> <TMP_BV_8_17|8>)) (== <TMP_BV_32_18|32> <TMP_BV_32_15|32>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> (or (concat <0x0|32> (<< (concat <0x0|1> (<< (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])) (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>)))[63:0][31:0]) (concat <0x0|25> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x1f|8>)))[31:0])[31:0] (concat <0x0|32> (<< (concat <0x0|1> (<< (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])) (concat <0x0|57> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x3f|8>)))[63:0][31:0]) (concat <0x0|25> (and (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0])[7:0][7:0] <0x1f|8>)))[31:0])[31:0])))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (Got counterexample)
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 0b 29 d7 d6
%rdi     00 00 00 00 15 01 57 c6
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     3f ff ff ff eb 94 c0 01

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 40000000 009617d0 - 40000000 009617c0 ]
[ 2 valid rows shown ]

40000000 009617c8   . v v v v . . .   00 00 00 00 00 00 00 00 
40000000 009617c0   v . . . . . . .   00 00 00 00 00 00 00 00 

[ 3fffffff f6be97d8 - 3fffffff f6be97c0 ]
[ 1 valid rows shown ]

3fffffff f6be97d0   v . . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Equivalent: no

1 Counterexamples.

SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 0b 29 d7 d6
%rdi     00 00 00 00 15 01 57 c6
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     3f ff ff ff eb 94 c0 01

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 40000000 009617d0 - 40000000 009617c0 ]
[ 2 valid rows shown ]

40000000 009617c8   . v v v v . . .   00 00 00 00 00 00 00 00 
40000000 009617c0   v . . . . . . .   00 00 00 00 00 00 00 00 

[ 3fffffff f6be97d8 - 3fffffff f6be97c0 ]
[ 1 valid rows shown ]

3fffffff f6be97d0   v . . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)


Difference of running target and rewrite on the counterexample:

%rax     00 00 00 00 15 [91m0[0m[91m1[0m [91m5[0m[91m7[0m [91mc[0m[91m6[0m
%rax     00 00 00 00 15 [92m7[0m[92mc[0m [92m6[0m[92m0[0m [92m0[0m[92m0[0m
%rdi     00 00 00 00 [91m0[0m[91m0[0m 0[91m0[0m [91m0[0m[91m0[0m [91m0[0m[91m2[0m
%rdi     00 00 00 00 [92m1[0m[92m5[0m 0[92m1[0m [92m5[0m[92m7[0m [92mc[0m[92m6[0m


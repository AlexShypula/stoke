Training TCs: 20
flags for addb_al_imm8: { }
flags for addw_ax_imm16: { }
flags for addl_eax_imm32: { }
flags for addw_m16_imm16: { }
flags for addw_m16_imm8: { }
flags for addw_m16_r16: { }
flags for addl_m32_imm32: { }
flags for addl_m32_imm8: { }
flags for addl_m32_r32: { }
flags for addq_m64_imm32: { }
flags for addq_m64_imm8: { }
flags for addq_m64_r64: { }
flags for addb_m8_imm8: { }
flags for addb_m8_r8: { }
flags for addb_m8_rh: { }
flags for addw_r16_imm16: { }
flags for addw_r16_imm8: { }
flags for addw_r16_m16: { }
flags for addw_r16_r16: { }
flags for addw_r16_r16_1: { }
flags for addl_r32_imm32: { }
flags for addl_r32_imm8: { }
flags for addl_r32_m32: { }
flags for addl_r32_r32: { }
flags for addl_r32_r32_1: { }
flags for addq_r64_imm32: { }
flags for addq_r64_imm8: { }
flags for addq_r64_m64: { }
flags for addq_r64_r64: { }
flags for addq_r64_r64_1: { }
flags for addb_r8_imm8: { }
flags for addb_r8_m8: { }
flags for addb_r8_r8: { }
flags for addb_r8_r8_1: { }
flags for addb_r8_rh: { }
flags for addb_r8_rh_1: { }
flags for addq_rax_imm32: { }
flags for addb_rh_imm8: { }
flags for addb_rh_m8: { }
flags for addb_rh_r8: { }
flags for addb_rh_r8_1: { }
flags for addb_rh_rh: { }
flags for addb_rh_rh_1: { }
flags for addpd_xmm_m128: { sse2 }
flags for addpd_xmm_xmm: { sse2 }
flags for addps_xmm_m128: { sse }
flags for addps_xmm_xmm: { sse }
flags for addsd_xmm_m64: { sse2 }
flags for addsd_xmm_xmm: { sse2 }
flags for addss_xmm_m32: { sse }
flags for addss_xmm_xmm: { sse }
flags for addsubpd_xmm_m128: { pni }
flags for addsubpd_xmm_xmm: { pni }
flags for addsubps_xmm_m128: { pni }
flags for addsubps_xmm_xmm: { pni }
flags for aesdec_xmm_m128: { aes }
flags for aesdec_xmm_xmm: { aes }
flags for aesdeclast_xmm_m128: { aes }
flags for aesdeclast_xmm_xmm: { aes }
flags for aesenc_xmm_m128: { aes }
flags for aesenc_xmm_xmm: { aes }
flags for aesenclast_xmm_m128: { aes }
flags for aesenclast_xmm_xmm: { aes }
flags for aesimc_xmm_m128: { aes }
flags for aesimc_xmm_xmm: { aes }
flags for aeskeygenassist_xmm_m128_imm8: { aes }
flags for aeskeygenassist_xmm_xmm_imm8: { aes }
flags for andb_al_imm8: { }
flags for andw_ax_imm16: { }
flags for andl_eax_imm32: { }
flags for andw_m16_imm16: { }
flags for andw_m16_imm8: { }
flags for andw_m16_r16: { }
flags for andl_m32_imm32: { }
flags for andl_m32_imm8: { }
flags for andl_m32_r32: { }
flags for andq_m64_imm32: { }
flags for andq_m64_imm8: { }
flags for andq_m64_r64: { }
flags for andb_m8_imm8: { }
flags for andb_m8_r8: { }
flags for andb_m8_rh: { }
flags for andw_r16_imm16: { }
flags for andw_r16_imm8: { }
flags for andw_r16_m16: { }
flags for andw_r16_r16: { }
flags for andw_r16_r16_1: { }
flags for andl_r32_imm32: { }
flags for andl_r32_imm8: { }
flags for andl_r32_m32: { }
flags for andl_r32_r32: { }
flags for andl_r32_r32_1: { }
flags for andq_r64_imm32: { }
flags for andq_r64_imm8: { }
flags for andq_r64_m64: { }
flags for andq_r64_r64: { }
flags for andq_r64_r64_1: { }
flags for andb_r8_imm8: { }
flags for andb_r8_m8: { }
flags for andb_r8_r8: { }
flags for andb_r8_r8_1: { }
flags for andb_r8_rh: { }
flags for andb_r8_rh_1: { }
flags for andq_rax_imm32: { }
flags for andb_rh_imm8: { }
flags for andb_rh_m8: { }
flags for andb_rh_r8: { }
flags for andb_rh_r8_1: { }
flags for andb_rh_rh: { }
flags for andb_rh_rh_1: { }
flags for andnl_r32_r32_m32: { bmi1 }
flags for andnl_r32_r32_r32: { bmi1 }
flags for andnq_r64_r64_m64: { bmi1 }
flags for andnq_r64_r64_r64: { bmi1 }
flags for andnpd_xmm_m128: { sse2 }
flags for andnpd_xmm_xmm: { sse2 }
flags for andnps_xmm_m128: { sse }
flags for andnps_xmm_xmm: { sse }
flags for andpd_xmm_m128: { sse2 }
flags for andpd_xmm_xmm: { sse2 }
flags for andps_xmm_m128: { sse }
flags for andps_xmm_xmm: { sse }
flags for bextrl_r32_m32_r32: { bmi1 }
flags for bextrl_r32_r32_r32: { bmi1 }
flags for bextrq_r64_m64_r64: { bmi1 }
flags for bextrq_r64_r64_r64: { bmi1 }
flags for blendpd_xmm_m128_imm8: { sse4_1 }
flags for blendpd_xmm_xmm_imm8: { sse4_1 }
flags for blendps_xmm_m128_imm8: { sse4_1 }
flags for blendps_xmm_xmm_imm8: { sse4_1 }
flags for blendvpd_xmm_m128_xmm0: { sse4_1 }
flags for blendvpd_xmm_xmm_xmm0: { sse4_1 }
flags for blendvps_xmm_m128_xmm0: { sse4_1 }
flags for blendvps_xmm_xmm_xmm0: { sse4_1 }
flags for blsil_r32_m32: { bmi1 }
flags for blsil_r32_r32: { bmi1 }
flags for blsiq_r64_m64: { bmi1 }
flags for blsiq_r64_r64: { bmi1 }
flags for blsmskl_r32_m32: { bmi1 }
flags for blsmskl_r32_r32: { bmi1 }
flags for blsmskq_r64_m64: { bmi1 }
flags for blsmskq_r64_r64: { bmi1 }
flags for blsrl_r32_m32: { bmi1 }
flags for blsrl_r32_r32: { bmi1 }
flags for blsrq_r64_m64: { bmi1 }
flags for blsrq_r64_r64: { bmi1 }
flags for bzhil_r32_m32_r32: { bmi2 }
flags for bzhil_r32_r32_r32: { bmi2 }
flags for bzhiq_r64_m64_r64: { bmi2 }
flags for bzhiq_r64_r64_r64: { bmi2 }
flags for cli: { }
flags for cmovaw_r16_m16: { cmov }
flags for cmovaw_r16_r16: { cmov }
flags for cmoval_r32_m32: { cmov }
flags for cmoval_r32_r32: { cmov }
flags for cmovaq_r64_m64: { cmov }
flags for cmovaq_r64_r64: { cmov }
flags for cmovaew_r16_m16: { cmov }
flags for cmovaew_r16_r16: { cmov }
flags for cmovael_r32_m32: { cmov }
flags for cmovael_r32_r32: { cmov }
flags for cmovaeq_r64_m64: { cmov }
flags for cmovaeq_r64_r64: { cmov }
flags for cmovbw_r16_m16: { cmov }
flags for cmovbw_r16_r16: { cmov }
flags for cmovbl_r32_m32: { cmov }
flags for cmovbl_r32_r32: { cmov }
flags for cmovbq_r64_m64: { cmov }
flags for cmovbq_r64_r64: { cmov }
flags for cmovbew_r16_m16: { cmov }
flags for cmovbew_r16_r16: { cmov }
flags for cmovbel_r32_m32: { cmov }
flags for cmovbel_r32_r32: { cmov }
flags for cmovbeq_r64_m64: { cmov }
flags for cmovbeq_r64_r64: { cmov }
flags for cmovcw_r16_m16: { cmov }
flags for cmovcw_r16_r16: { cmov }
flags for cmovcl_r32_m32: { cmov }
flags for cmovcl_r32_r32: { cmov }
flags for cmovcq_r64_m64: { cmov }
flags for cmovcq_r64_r64: { cmov }
flags for cmovew_r16_m16: { cmov }
flags for cmovew_r16_r16: { cmov }
flags for cmovel_r32_m32: { cmov }
flags for cmovel_r32_r32: { cmov }
flags for cmoveq_r64_m64: { cmov }
flags for cmoveq_r64_r64: { cmov }
flags for cmovgw_r16_m16: { cmov }
flags for cmovgw_r16_r16: { cmov }
flags for cmovgl_r32_m32: { cmov }
flags for cmovgl_r32_r32: { cmov }
flags for cmovgq_r64_m64: { cmov }
flags for cmovgq_r64_r64: { cmov }
flags for cmovgew_r16_m16: { cmov }
flags for cmovgew_r16_r16: { cmov }
flags for cmovgel_r32_m32: { cmov }
flags for cmovgel_r32_r32: { cmov }
flags for cmovgeq_r64_m64: { cmov }
flags for cmovgeq_r64_r64: { cmov }
flags for cmovlw_r16_m16: { cmov }
flags for cmovlw_r16_r16: { cmov }
flags for cmovll_r32_m32: { cmov }
flags for cmovll_r32_r32: { cmov }
flags for cmovlq_r64_m64: { cmov }
flags for cmovlq_r64_r64: { cmov }
flags for cmovlew_r16_m16: { cmov }
flags for cmovlew_r16_r16: { cmov }
flags for cmovlel_r32_m32: { cmov }
flags for cmovlel_r32_r32: { cmov }
flags for cmovleq_r64_m64: { cmov }
flags for cmovleq_r64_r64: { cmov }
flags for cmovnaw_r16_m16: { cmov }
flags for cmovnaw_r16_r16: { cmov }
flags for cmovnal_r32_m32: { cmov }
flags for cmovnal_r32_r32: { cmov }
flags for cmovnaq_r64_m64: { cmov }
flags for cmovnaq_r64_r64: { cmov }
flags for cmovnaew_r16_m16: { cmov }
flags for cmovnaew_r16_r16: { cmov }
flags for cmovnael_r32_m32: { cmov }
flags for cmovnael_r32_r32: { cmov }
flags for cmovnaeq_r64_m64: { cmov }
flags for cmovnaeq_r64_r64: { cmov }
flags for cmovnbw_r16_m16: { cmov }
flags for cmovnbw_r16_r16: { cmov }
flags for cmovnbl_r32_m32: { cmov }
flags for cmovnbl_r32_r32: { cmov }
flags for cmovnbq_r64_m64: { cmov }
flags for cmovnbq_r64_r64: { cmov }
flags for cmovnbew_r16_m16: { cmov }
flags for cmovnbew_r16_r16: { cmov }
flags for cmovnbel_r32_m32: { cmov }
flags for cmovnbel_r32_r32: { cmov }
flags for cmovnbeq_r64_m64: { cmov }
flags for cmovnbeq_r64_r64: { cmov }
flags for cmovncw_r16_m16: { cmov }
flags for cmovncw_r16_r16: { cmov }
flags for cmovncl_r32_m32: { cmov }
flags for cmovncl_r32_r32: { cmov }
flags for cmovncq_r64_m64: { cmov }
flags for cmovncq_r64_r64: { cmov }
flags for cmovnew_r16_m16: { cmov }
flags for cmovnew_r16_r16: { cmov }
flags for cmovnel_r32_m32: { cmov }
flags for cmovnel_r32_r32: { cmov }
flags for cmovneq_r64_m64: { cmov }
flags for cmovneq_r64_r64: { cmov }
flags for cmovngw_r16_m16: { cmov }
flags for cmovngw_r16_r16: { cmov }
flags for cmovngl_r32_m32: { cmov }
flags for cmovngl_r32_r32: { cmov }
flags for cmovngq_r64_m64: { cmov }
flags for cmovngq_r64_r64: { cmov }
flags for cmovngew_r16_m16: { cmov }
flags for cmovngew_r16_r16: { cmov }
flags for cmovngel_r32_m32: { cmov }
flags for cmovngel_r32_r32: { cmov }
flags for cmovngeq_r64_m64: { cmov }
flags for cmovngeq_r64_r64: { cmov }
flags for cmovnlw_r16_m16: { cmov }
flags for cmovnlw_r16_r16: { cmov }
flags for cmovnll_r32_m32: { cmov }
flags for cmovnll_r32_r32: { cmov }
flags for cmovnlq_r64_m64: { cmov }
flags for cmovnlq_r64_r64: { cmov }
flags for cmovnlew_r16_m16: { cmov }
flags for cmovnlew_r16_r16: { cmov }
flags for cmovnlel_r32_m32: { cmov }
flags for cmovnlel_r32_r32: { cmov }
flags for cmovnleq_r64_m64: { cmov }
flags for cmovnleq_r64_r64: { cmov }
flags for cmovnow_r16_m16: { cmov }
flags for cmovnow_r16_r16: { cmov }
flags for cmovnol_r32_m32: { cmov }
flags for cmovnol_r32_r32: { cmov }
flags for cmovnoq_r64_m64: { cmov }
flags for cmovnoq_r64_r64: { cmov }
flags for cmovnpw_r16_m16: { cmov }
flags for cmovnpw_r16_r16: { cmov }
flags for cmovnpl_r32_m32: { cmov }
flags for cmovnpl_r32_r32: { cmov }
flags for cmovnpq_r64_m64: { cmov }
flags for cmovnpq_r64_r64: { cmov }
flags for cmovnsw_r16_m16: { cmov }
flags for cmovnsw_r16_r16: { cmov }
flags for cmovnsl_r32_m32: { cmov }
flags for cmovnsl_r32_r32: { cmov }
flags for cmovnsq_r64_m64: { cmov }
flags for cmovnsq_r64_r64: { cmov }
flags for cmovnzw_r16_m16: { cmov }
flags for cmovnzw_r16_r16: { cmov }
flags for cmovnzl_r32_m32: { cmov }
flags for cmovnzl_r32_r32: { cmov }
flags for cmovnzq_r64_m64: { cmov }
flags for cmovnzq_r64_r64: { cmov }
flags for cmovow_r16_m16: { cmov }
flags for cmovow_r16_r16: { cmov }
flags for cmovol_r32_m32: { cmov }
flags for cmovol_r32_r32: { cmov }
flags for cmovoq_r64_m64: { cmov }
flags for cmovoq_r64_r64: { cmov }
flags for cmovpw_r16_m16: { cmov }
flags for cmovpw_r16_r16: { cmov }
flags for cmovpl_r32_m32: { cmov }
flags for cmovpl_r32_r32: { cmov }
flags for cmovpq_r64_m64: { cmov }
flags for cmovpq_r64_r64: { cmov }
flags for cmovpew_r16_m16: { cmov }
flags for cmovpew_r16_r16: { cmov }
flags for cmovpel_r32_m32: { cmov }
flags for cmovpel_r32_r32: { cmov }
flags for cmovpeq_r64_m64: { cmov }
flags for cmovpeq_r64_r64: { cmov }
flags for cmovpow_r16_m16: { cmov }
flags for cmovpow_r16_r16: { cmov }
flags for cmovpol_r32_m32: { cmov }
flags for cmovpol_r32_r32: { cmov }
flags for cmovpoq_r64_m64: { cmov }
flags for cmovpoq_r64_r64: { cmov }
flags for cmovsw_r16_m16: { cmov }
flags for cmovsw_r16_r16: { cmov }
flags for cmovsl_r32_m32: { cmov }
flags for cmovsl_r32_r32: { cmov }
flags for cmovsq_r64_m64: { cmov }
flags for cmovsq_r64_r64: { cmov }
flags for cmovzw_r16_m16: { cmov }
flags for cmovzw_r16_r16: { cmov }
flags for cmovzl_r32_m32: { cmov }
flags for cmovzl_r32_r32: { cmov }
flags for cmovzq_r64_m64: { cmov }
flags for cmovzq_r64_r64: { cmov }
flags for comisd_xmm_m64: { sse2 }
flags for comisd_xmm_xmm: { sse2 }
flags for comiss_xmm_m32: { sse }
flags for comiss_xmm_xmm: { sse }
flags for cpuid: { }
flags for cvtdq2pd_xmm_m64: { sse2 }
flags for cvtdq2pd_xmm_xmm: { sse2 }
flags for cvtdq2ps_xmm_m128: { sse2 }
flags for cvtdq2ps_xmm_xmm: { sse2 }
flags for cvtpd2dq_xmm_m128: { sse2 }
flags for cvtpd2dq_xmm_xmm: { sse2 }
flags for cvtpd2pi_mm_m128: { }
flags for cvtpd2pi_mm_xmm: { }
flags for cvtpd2ps_xmm_m128: { sse2 }
flags for cvtpd2ps_xmm_xmm: { sse2 }
flags for cvtpi2pd_xmm_m64: { }
flags for cvtpi2pd_xmm_mm: { }
flags for cvtpi2ps_xmm_m64: { }
flags for cvtpi2ps_xmm_mm: { }
flags for cvtps2dq_xmm_m128: { sse2 }
flags for cvtps2dq_xmm_xmm: { sse2 }
flags for cvtps2pd_xmm_m64: { sse2 }
flags for cvtps2pd_xmm_xmm: { sse2 }
flags for cvtps2pi_mm_m64: { }
flags for cvtps2pi_mm_xmm: { }
flags for cvtsd2sil_r32_m64: { sse2 }
flags for cvtsd2sil_r32_xmm: { sse2 }
flags for cvtsd2siq_r64_m64: { sse2 }
flags for cvtsd2siq_r64_xmm: { sse2 }
flags for cvtsd2ss_xmm_m64: { sse2 }
flags for cvtsd2ss_xmm_xmm: { sse2 }
flags for cvtsi2sdl_xmm_m32: { sse2 }
flags for cvtsi2sdq_xmm_m64: { sse2 }
flags for cvtsi2sdl_xmm_r32: { sse2 }
flags for cvtsi2sdq_xmm_r64: { sse2 }
flags for cvtsi2ssl_xmm_m32: { sse }
flags for cvtsi2ssq_xmm_m64: { sse }
flags for cvtsi2ssl_xmm_r32: { sse }
flags for cvtsi2ssq_xmm_r64: { sse }
flags for cvtss2sd_xmm_m32: { sse2 }
flags for cvtss2sd_xmm_xmm: { sse2 }
flags for cvtss2sil_r32_m32: { sse }
flags for cvtss2sil_r32_xmm: { sse }
flags for cvtss2siq_r64_m32: { sse }
flags for cvtss2siq_r64_xmm: { sse }
flags for cvttpd2dq_xmm_m128: { sse2 }
flags for cvttpd2dq_xmm_xmm: { sse2 }
flags for cvttpd2pi_mm_m128: { }
flags for cvttpd2pi_mm_xmm: { }
flags for cvttps2dq_xmm_m128: { sse2 }
flags for cvttps2dq_xmm_xmm: { sse2 }
flags for cvttps2pi_mm_m64: { }
flags for cvttps2pi_mm_xmm: { }
flags for cvttsd2sil_r32_m64: { sse2 }
flags for cvttsd2sil_r32_xmm: { sse2 }
flags for cvttsd2siq_r64_m64: { sse2 }
flags for cvttsd2siq_r64_xmm: { sse2 }
flags for cvttss2sil_r32_m32: { sse }
flags for cvttss2sil_r32_xmm: { sse }
flags for cvttss2siq_r64_m32: { sse }
flags for cvttss2siq_r64_xmm: { sse }
flags for decw_m16: { }
flags for decl_m32: { }
flags for decq_m64: { }
flags for decb_m8: { }
flags for decw_r16: { }
flags for decl_r32: { }
flags for decq_r64: { }
flags for decb_r8: { }
flags for decb_rh: { }
flags for dppd_xmm_m128_imm8: { sse4_1 }
flags for dppd_xmm_xmm_imm8: { sse4_1 }
flags for dpps_xmm_m128_imm8: { sse4_1 }
flags for dpps_xmm_xmm_imm8: { sse4_1 }
flags for extractps_m32_xmm_imm8: { sse4_1 }
flags for extractps_r32_xmm_imm8: { sse4_1 }
flags for extractps_r64_xmm_imm8: { sse4_1 }
flags for f2xm1: { fpu }
flags for fabs: { fpu }
flags for fadds_m32fp: { fpu }
flags for faddl_m64fp: { fpu }
flags for faddp: { fpu }
flags for fbld_m80bcd: { fpu }
flags for fbstp_m80bcd: { fpu }
flags for fchs: { fpu }
flags for fclex: { fpu }
flags for fcom: { fpu }
flags for fcoms_m32fp: { fpu }
flags for fcoml_m64fp: { fpu }
flags for fcomp: { fpu }
flags for fcomps_m32fp: { fpu }
flags for fcompl_m64fp: { fpu }
flags for fcompp: { fpu }
flags for fcos: { fpu }
flags for fdecstp: { fpu }
flags for fdivs_m32fp: { fpu }
flags for fdivl_m64fp: { fpu }
flags for fdivp: { fpu }
flags for fdivrs_m32fp: { fpu }
flags for fdivrl_m64fp: { fpu }
flags for fdivrp: { fpu }
flags for fiadd_m16int: { fpu }
flags for fiaddl_m32int: { fpu }
flags for ficom_m16int: { fpu }
flags for ficoml_m32int: { fpu }
flags for ficomp_m16int: { fpu }
flags for ficompl_m32int: { fpu }
flags for fidiv_m16int: { fpu }
flags for fidivl_m32int: { fpu }
flags for fidivr_m16int: { fpu }
flags for fidivrl_m32int: { fpu }
flags for fild_m16int: { fpu }
flags for fildl_m32int: { fpu }
flags for fildll_m64int: { fpu }
flags for fimul_m16int: { fpu }
flags for fimull_m32int: { fpu }
flags for fincstp: { fpu }
flags for finit: { fpu }
flags for fist_m16int: { fpu }
flags for fistl_m32int: { fpu }
flags for fistp_m16int: { fpu }
flags for fistpl_m32int: { fpu }
flags for fistpll_m64int: { fpu }
flags for fisttp_m16int: { fpu }
flags for fisttpl_m32int: { fpu }
flags for fisttpll_m64int: { fpu }
flags for fisub_m16int: { fpu }
flags for fisubl_m32int: { fpu }
flags for fisubr_m16int: { fpu }
flags for fisubrl_m32int: { fpu }
flags for flds_m32fp: { fpu }
flags for fldl_m64fp: { fpu }
flags for fldt_m80fp: { fpu }
flags for fld1: { fpu }
flags for fldl2e: { fpu }
flags for fldl2t: { fpu }
flags for fldlg2: { fpu }
flags for fldln2: { fpu }
flags for fldpi: { fpu }
flags for fldz: { fpu }
flags for fmuls_m32fp: { fpu }
flags for fmull_m64fp: { fpu }
flags for fmulp: { fpu }
flags for fnclex: { fpu }
flags for fninit: { fpu }
flags for fnop: { fpu }
flags for fnstsw_ax: { fpu }
flags for fpatan: { fpu }
flags for fprem: { fpu }
flags for fprem1: { fpu }
flags for fptan: { fpu }
flags for frndint: { fpu }
flags for fscale: { fpu }
flags for fsin: { fpu }
flags for fsincos: { fpu }
flags for fsqrt: { fpu }
flags for fsts_m32fp: { fpu }
flags for fstl_m64fp: { fpu }
flags for fstps_m32fp: { fpu }
flags for fstpl_m64fp: { fpu }
flags for fstpt_m80fp: { fpu }
flags for fstsw_ax: { fpu }
flags for fsubs_m32fp: { fpu }
flags for fsubl_m64fp: { fpu }
flags for fsubp: { fpu }
flags for fsubrs_m32fp: { fpu }
flags for fsubrl_m64fp: { fpu }
flags for fsubrp: { fpu }
flags for ftst: { fpu }
flags for fucom: { fpu }
flags for fucomp: { fpu }
flags for fucompp: { fpu }
flags for fwait: { fpu }
flags for fxam: { fpu }
flags for fxch: { fpu }
flags for fxtract: { fpu }
flags for fyl2x: { fpu }
flags for fyl2xp1: { fpu }
flags for haddpd_xmm_m128: { pni }
flags for haddpd_xmm_xmm: { pni }
flags for haddps_xmm_m128: { pni }
flags for haddps_xmm_xmm: { pni }
flags for hsubpd_xmm_m128: { pni }
flags for hsubpd_xmm_xmm: { pni }
flags for hsubps_xmm_m128: { pni }
flags for hsubps_xmm_xmm: { pni }
flags for incw_m16: { }
flags for incl_m32: { }
flags for incq_m64: { }
flags for incb_m8: { }
flags for incw_r16: { }
flags for incl_r32: { }
flags for incq_r64: { }
flags for incb_r8: { }
flags for incb_rh: { }
flags for insertps_xmm_m32_imm8: { sse4_1 }
flags for insertps_xmm_xmm_imm8: { sse4_1 }
flags for int_imm8: { }
flags for int_three: { }
flags for lahf: { lahf_lm }
flags for lddqu_xmm_m128: { pni }
flags for leaw_r16_m16: { }
flags for leaw_r16_m32: { }
flags for leaw_r16_m64: { }
flags for leal_r32_m16: { }
flags for leal_r32_m32: { }
flags for leal_r32_m64: { }
flags for leaq_r64_m16: { }
flags for leaq_r64_m32: { }
flags for leaq_r64_m64: { }
flags for lzcntw_r16_m16: { bmi1 }
flags for lzcntw_r16_r16: { bmi1 }
flags for lzcntl_r32_m32: { bmi1 }
flags for lzcntl_r32_r32: { bmi1 }
flags for lzcntq_r64_m64: { bmi1 }
flags for lzcntq_r64_r64: { bmi1 }
flags for maxpd_xmm_m128: { sse2 }
flags for maxpd_xmm_xmm: { sse2 }
flags for maxps_xmm_m128: { sse }
flags for maxps_xmm_xmm: { sse }
flags for maxsd_xmm_m64: { sse2 }
flags for maxsd_xmm_xmm: { sse2 }
flags for maxss_xmm_m32: { sse }
flags for maxss_xmm_xmm: { sse }
flags for minpd_xmm_m128: { sse2 }
flags for minpd_xmm_xmm: { sse2 }
flags for minps_xmm_m128: { sse }
flags for minps_xmm_xmm: { sse }
flags for minsd_xmm_m64: { sse2 }
flags for minsd_xmm_xmm: { sse2 }
flags for minss_xmm_m32: { sse }
flags for minss_xmm_xmm: { sse }
flags for movw_m16_imm16: { }
flags for movw_m16_r16: { }
flags for movl_m32_imm32: { }
flags for movl_m32_r32: { }
flags for movq_m64_imm32: { }
flags for movq_m64_r64: { }
flags for movb_m8_imm8: { }
flags for movb_m8_r8: { }
flags for movb_m8_rh: { }
flags for movw_r16_imm16: { }
flags for movw_r16_imm16_1: { }
flags for movw_r16_m16: { }
flags for movw_r16_r16: { }
flags for movw_r16_r16_1: { }
flags for movl_r32_imm32: { }
flags for movl_r32_imm32_1: { }
flags for movl_r32_m32: { }
flags for movl_r32_r32: { }
flags for movl_r32_r32_1: { }
flags for movq_r64_imm32: { }
flags for movq_r64_imm64: { }
flags for movq_r64_m64: { }
flags for movq_r64_r64: { }
flags for movq_r64_r64_1: { }
flags for movb_r8_imm8: { }
flags for movb_r8_imm8_1: { }
flags for movb_r8_m8: { }
flags for movb_r8_r8: { }
flags for movb_r8_r8_1: { }
flags for movb_r8_rh: { }
flags for movb_r8_rh_1: { }
flags for movb_rh_imm8: { }
flags for movb_rh_imm8_1: { }
flags for movb_rh_m8: { }
flags for movb_rh_r8: { }
flags for movb_rh_r8_1: { }
flags for movb_rh_rh: { }
flags for movb_rh_rh_1: { }
flags for movapd_m128_xmm: { sse2 }
flags for movapd_xmm_m128: { sse2 }
flags for movapd_xmm_xmm: { sse2 }
flags for movapd_xmm_xmm_1: { sse2 }
flags for movaps_m128_xmm: { sse }
flags for movaps_xmm_m128: { sse }
flags for movaps_xmm_xmm: { sse }
flags for movaps_xmm_xmm_1: { sse }
flags for movbew_m16_r16: { movbe }
flags for movbel_m32_r32: { movbe }
flags for movbeq_m64_r64: { movbe }
flags for movbew_r16_m16: { movbe }
flags for movbel_r32_m32: { movbe }
flags for movbeq_r64_m64: { movbe }
flags for movd_m32_mm: { mmx }
flags for movd_m32_xmm: { sse2 }
flags for movd_mm_m32: { mmx }
flags for movd_mm_r32: { mmx }
flags for movd_r32_mm: { mmx }
flags for movd_r32_xmm: { sse2 }
flags for movd_xmm_m32: { sse2 }
flags for movd_xmm_r32: { sse2 }
flags for movddup_xmm_m64: { pni }
flags for movddup_xmm_xmm: { pni }
flags for movdq2q_mm_xmm: { mmx }
flags for movdqa_m128_xmm: { sse2 }
flags for movdqa_xmm_m128: { sse2 }
flags for movdqa_xmm_xmm: { sse2 }
flags for movdqa_xmm_xmm_1: { sse2 }
flags for movdqu_m128_xmm: { sse2 }
flags for movdqu_xmm_m128: { sse2 }
flags for movdqu_xmm_xmm: { sse2 }
flags for movdqu_xmm_xmm_1: { sse2 }
flags for movhlps_xmm_xmm: { sse }
flags for movhpd_m64_xmm: { sse2 }
flags for movhpd_xmm_m64: { sse2 }
flags for movhps_m64_xmm: { sse }
flags for movhps_xmm_m64: { sse }
flags for movlhps_xmm_xmm: { sse }
flags for movlpd_m64_xmm: { sse2 }
flags for movlpd_xmm_m64: { sse2 }
flags for movlps_m64_xmm: { sse }
flags for movlps_xmm_m64: { sse }
flags for movmskpd_r32_xmm: { sse2 }
flags for movmskpd_r64_xmm: { sse2 }
flags for movmskps_r32_xmm: { sse }
flags for movmskps_r64_xmm: { sse }
flags for movntdq_m128_xmm: { sse2 }
flags for movntdq_m256_ymm: { avx }
flags for movntdqa_xmm_m128: { sse4_1 }
flags for movnti_m32_r32: { }
flags for movnti_m64_r64: { }
flags for movntpd_m128_xmm: { sse2 }
flags for movntps_m128_xmm: { sse }
flags for movntq_m64_mm: { }
flags for movq_m64_mm: { mmx }
flags for movq_m64_mm_1: { mmx }
flags for movq_m64_xmm: { sse2 }
flags for movq_m64_xmm_1: { sse2 }
flags for movq_mm_m64: { mmx }
flags for movq_mm_m64_1: { mmx }
flags for movq_mm_mm: { mmx }
flags for movq_mm_mm_1: { mmx }
flags for movq_mm_r64: { mmx }
flags for movq_r64_mm: { mmx }
flags for movq_r64_xmm: { sse2 }
flags for movq_xmm_m64: { sse2 }
flags for movq_xmm_m64_1: { sse2 }
flags for movq_xmm_r64: { sse2 }
flags for movq_xmm_xmm: { sse2 }
flags for movq_xmm_xmm_1: { sse2 }
flags for movq2dq_xmm_mm: { mmx }
flags for movsd_m64_xmm: { sse2 }
flags for movsd_xmm_m64: { sse2 }
flags for movsd_xmm_xmm: { sse2 }
flags for movsd_xmm_xmm_1: { sse2 }
flags for movshdup_xmm_m128: { pni }
flags for movshdup_xmm_xmm: { pni }
flags for movsldup_xmm_m128: { pni }
flags for movsldup_xmm_xmm: { pni }
flags for movss_m32_xmm: { sse }
flags for movss_xmm_m32: { sse }
flags for movss_xmm_xmm: { sse }
flags for movss_xmm_xmm_1: { sse }
flags for movsbw_r16_m8: { }
flags for movsbw_r16_r8: { }
flags for movsbw_r16_rh: { }
flags for movswl_r32_m16: { }
flags for movsbl_r32_m8: { }
flags for movswl_r32_r16: { }
flags for movsbl_r32_r8: { }
flags for movsbl_r32_rh: { }
flags for movswq_r64_m16: { }
flags for movsbq_r64_m8: { }
flags for movswq_r64_r16: { }
flags for movsbq_r64_r8: { }
flags for movslq_r64_m32: { }
flags for movslq_r64_r32: { }
flags for movupd_m128_xmm: { sse2 }
flags for movupd_xmm_m128: { sse2 }
flags for movupd_xmm_xmm: { sse2 }
flags for movupd_xmm_xmm_1: { sse2 }
flags for movups_m128_xmm: { sse }
flags for movups_xmm_m128: { sse }
flags for movups_xmm_xmm: { sse }
flags for movups_xmm_xmm_1: { sse }
flags for movzbw_r16_m8: { }
flags for movzbw_r16_r8: { }
flags for movzbw_r16_rh: { }
flags for movzwl_r32_m16: { }
flags for movzbl_r32_m8: { }
flags for movzwl_r32_r16: { }
flags for movzbl_r32_r8: { }
flags for movzbl_r32_rh: { }
flags for movzwq_r64_m16: { }
flags for movzbq_r64_m8: { }
flags for movzwq_r64_r16: { }
flags for movzbq_r64_r8: { }
flags for mpsadbw_xmm_m128_imm8: { sse4_1 }
flags for mpsadbw_xmm_xmm_imm8: { sse4_1 }
flags for negw_m16: { }
flags for negl_m32: { }
flags for negq_m64: { }
flags for negb_m8: { }
flags for negw_r16: { }
flags for negl_r32: { }
flags for negq_r64: { }
flags for negb_r8: { }
flags for negb_rh: { }
flags for nop: { }
flags for nopw_m16: { nopl }
flags for nopl_m32: { nopl }
flags for nopw_r16: { nopl }
flags for nopl_r32: { nopl }
flags for notw_m16: { }
flags for notl_m32: { }
flags for notq_m64: { }
flags for notb_m8: { }
flags for notw_r16: { }
flags for notl_r32: { }
flags for notq_r64: { }
flags for notb_r8: { }
flags for notb_rh: { }
flags for orb_al_imm8: { }
flags for orw_ax_imm16: { }
flags for orl_eax_imm32: { }
flags for orw_m16_imm16: { }
flags for orw_m16_imm8: { }
flags for orw_m16_r16: { }
flags for orl_m32_imm32: { }
flags for orl_m32_imm8: { }
flags for orl_m32_r32: { }
flags for orq_m64_imm32: { }
flags for orq_m64_imm8: { }
flags for orq_m64_r64: { }
flags for orb_m8_imm8: { }
flags for orb_m8_r8: { }
flags for orb_m8_rh: { }
flags for orw_r16_imm16: { }
flags for orw_r16_imm8: { }
flags for orw_r16_m16: { }
flags for orw_r16_r16: { }
flags for orw_r16_r16_1: { }
flags for orl_r32_imm32: { }
flags for orl_r32_imm8: { }
flags for orl_r32_m32: { }
flags for orl_r32_r32: { }
flags for orl_r32_r32_1: { }
flags for orq_r64_imm32: { }
flags for orq_r64_imm8: { }
flags for orq_r64_m64: { }
flags for orq_r64_r64: { }
flags for orq_r64_r64_1: { }
flags for orb_r8_imm8: { }
flags for orb_r8_m8: { }
flags for orb_r8_r8: { }
flags for orb_r8_r8_1: { }
flags for orb_r8_rh: { }
flags for orb_r8_rh_1: { }
flags for orq_rax_imm32: { }
flags for orb_rh_imm8: { }
flags for orb_rh_m8: { }
flags for orb_rh_r8: { }
flags for orb_rh_r8_1: { }
flags for orb_rh_rh: { }
flags for orb_rh_rh_1: { }
flags for orpd_xmm_m128: { sse2 }
flags for orpd_xmm_xmm: { sse2 }
flags for orps_xmm_m128: { sse }
flags for orps_xmm_xmm: { sse }
flags for pabsb_mm_m64: { ssse3 }
flags for pabsb_mm_mm: { ssse3 }
flags for pabsb_xmm_m128: { ssse3 }
flags for pabsb_xmm_xmm: { ssse3 }
flags for pabsd_mm_m64: { ssse3 }
flags for pabsd_mm_mm: { ssse3 }
flags for pabsd_xmm_m128: { ssse3 }
flags for pabsd_xmm_xmm: { ssse3 }
flags for pabsw_mm_m64: { ssse3 }
flags for pabsw_mm_mm: { ssse3 }
flags for pabsw_xmm_m128: { ssse3 }
flags for pabsw_xmm_xmm: { ssse3 }
flags for packssdw_mm_m64: { mmx }
flags for packssdw_mm_mm: { mmx }
flags for packssdw_xmm_m128: { sse2 }
flags for packssdw_xmm_xmm: { sse2 }
flags for packsswb_mm_m64: { mmx }
flags for packsswb_mm_mm: { mmx }
flags for packsswb_xmm_m128: { sse2 }
flags for packsswb_xmm_xmm: { sse2 }
flags for packusdw_xmm_m128: { sse4_1 }
flags for packusdw_xmm_xmm: { sse4_1 }
flags for packuswb_mm_m64: { mmx }
flags for packuswb_mm_mm: { mmx }
flags for packuswb_xmm_m128: { sse2 }
flags for packuswb_xmm_xmm: { sse2 }
flags for paddb_mm_m64: { mmx }
flags for paddb_mm_mm: { mmx }
flags for paddb_xmm_m128: { sse2 }
flags for paddb_xmm_xmm: { sse2 }
flags for paddd_mm_m64: { mmx }
flags for paddd_mm_mm: { mmx }
flags for paddd_xmm_m128: { sse2 }
flags for paddd_xmm_xmm: { sse2 }
flags for paddq_mm_m64: { sse2 }
flags for paddq_mm_mm: { sse2 }
flags for paddq_xmm_m128: { sse2 }
flags for paddq_xmm_xmm: { sse2 }
flags for paddsb_mm_m64: { mmx }
flags for paddsb_mm_mm: { mmx }
flags for paddsb_xmm_m128: { sse2 }
flags for paddsb_xmm_xmm: { sse2 }
flags for paddsw_mm_m64: { mmx }
flags for paddsw_mm_mm: { mmx }
flags for paddsw_xmm_m128: { sse2 }
flags for paddsw_xmm_xmm: { sse2 }
flags for paddusb_mm_m64: { mmx }
flags for paddusb_mm_mm: { mmx }
flags for paddusb_xmm_m128: { sse2 }
flags for paddusb_xmm_xmm: { sse2 }
flags for paddusw_mm_m64: { mmx }
flags for paddusw_mm_mm: { mmx }
flags for paddusw_xmm_m128: { sse2 }
flags for paddusw_xmm_xmm: { sse2 }
flags for paddw_mm_m64: { mmx }
flags for paddw_mm_mm: { mmx }
flags for paddw_xmm_m128: { sse2 }
flags for paddw_xmm_xmm: { sse2 }
flags for palignr_mm_m64_imm8: { ssse3 }
flags for palignr_mm_mm_imm8: { ssse3 }
flags for palignr_xmm_m128_imm8: { ssse3 }
flags for palignr_xmm_xmm_imm8: { ssse3 }
flags for pand_mm_m64: { mmx }
flags for pand_mm_mm: { mmx }
flags for pand_xmm_m128: { sse2 }
flags for pand_xmm_xmm: { sse2 }
flags for pandn_mm_m64: { mmx }
flags for pandn_mm_mm: { mmx }
flags for pandn_xmm_m128: { sse2 }
flags for pandn_xmm_xmm: { sse2 }
flags for pavgb_mm_m64: { sse }
flags for pavgb_mm_mm: { sse }
flags for pavgb_xmm_m128: { sse2 }
flags for pavgb_xmm_xmm: { sse2 }
flags for pavgw_mm_m64: { sse }
flags for pavgw_mm_mm: { sse }
flags for pavgw_xmm_m128: { sse2 }
flags for pavgw_xmm_xmm: { sse2 }
flags for pblendvb_xmm_m128_xmm0: { sse4_1 }
flags for pblendvb_xmm_xmm_xmm0: { sse4_1 }
flags for pblendw_xmm_m128_imm8: { sse4_1 }
flags for pblendw_xmm_xmm_imm8: { sse4_1 }
flags for pclmulqdq_xmm_m128_imm8: { pclmulqdq }
flags for pclmulqdq_xmm_xmm_imm8: { pclmulqdq }
flags for pcmpeqb_mm_m64: { mmx }
flags for pcmpeqb_mm_mm: { mmx }
flags for pcmpeqb_xmm_m128: { sse2 }
flags for pcmpeqb_xmm_xmm: { sse2 }
flags for pcmpeqd_mm_m64: { mmx }
flags for pcmpeqd_mm_mm: { mmx }
flags for pcmpeqd_xmm_m128: { sse2 }
flags for pcmpeqd_xmm_xmm: { sse2 }
flags for pcmpeqq_xmm_m128: { sse4_1 }
flags for pcmpeqq_xmm_xmm: { sse4_1 }
flags for pcmpeqw_mm_m64: { mmx }
flags for pcmpeqw_mm_mm: { mmx }
flags for pcmpeqw_xmm_m128: { sse2 }
flags for pcmpeqw_xmm_xmm: { sse2 }
flags for pcmpestri_xmm_m128_imm8: { sse4_2 }
flags for pcmpestri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpestrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpestrm_xmm_xmm_imm8: { sse4_2 }
flags for pcmpgtb_mm_m64: { mmx }
flags for pcmpgtb_mm_mm: { mmx }
flags for pcmpgtb_xmm_m128: { sse2 }
flags for pcmpgtb_xmm_xmm: { sse2 }
flags for pcmpgtd_mm_m64: { mmx }
flags for pcmpgtd_mm_mm: { mmx }
flags for pcmpgtd_xmm_m128: { sse2 }
flags for pcmpgtd_xmm_xmm: { sse2 }
flags for pcmpgtq_xmm_m128: { sse4_2 }
flags for pcmpgtq_xmm_xmm: { sse4_2 }
flags for pcmpgtw_mm_m64: { mmx }
flags for pcmpgtw_mm_mm: { mmx }
flags for pcmpgtw_xmm_m128: { sse2 }
flags for pcmpgtw_xmm_xmm: { sse2 }
flags for pcmpistri_xmm_m128_imm8: { sse4_2 }
flags for pcmpistri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpistrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpistrm_xmm_xmm_imm8: { sse4_2 }
flags for pdepl_r32_r32_m32: { bmi2 }
flags for pdepl_r32_r32_r32: { bmi2 }
flags for pdepq_r64_r64_m64: { bmi2 }
flags for pdepq_r64_r64_r64: { bmi2 }
flags for pextl_r32_r32_m32: { bmi2 }
flags for pextl_r32_r32_r32: { bmi2 }
flags for pextq_r64_r64_m64: { bmi2 }
flags for pextq_r64_r64_r64: { bmi2 }
flags for pextrb_m8_xmm_imm8: { sse4_1 }
flags for pextrb_r32_xmm_imm8: { sse4_1 }
flags for pextrb_r64_xmm_imm8: { sse4_1 }
flags for pextrd_m32_xmm_imm8: { sse4_1 }
flags for pextrd_r32_xmm_imm8: { sse4_1 }
flags for pextrq_m64_xmm_imm8: { sse4_1 }
flags for pextrq_r64_xmm_imm8: { sse4_1 }
flags for pextrw_m16_xmm_imm8: { sse4_1 }
flags for pextrw_r32_mm_imm8: { sse }
flags for pextrw_r32_xmm_imm8: { sse2 }
flags for pextrw_r32_xmm_imm8_1: { sse4_1 }
flags for pextrw_r64_mm_imm8: { sse }
flags for pextrw_r64_xmm_imm8: { sse2 }
flags for pextrw_r64_xmm_imm8_1: { sse4_1 }
flags for phaddd_mm_m64: { ssse3 }
flags for phaddd_mm_mm: { ssse3 }
flags for phaddd_xmm_m128: { ssse3 }
flags for phaddd_xmm_xmm: { ssse3 }
flags for phaddsw_mm_m64: { ssse3 }
flags for phaddsw_mm_mm: { ssse3 }
flags for phaddsw_xmm_m128: { ssse3 }
flags for phaddsw_xmm_xmm: { ssse3 }
flags for phaddw_mm_m64: { ssse3 }
flags for phaddw_mm_mm: { ssse3 }
flags for phaddw_xmm_m128: { ssse3 }
flags for phaddw_xmm_xmm: { ssse3 }
flags for phminposuw_xmm_m128: { sse4_1 }
flags for phminposuw_xmm_xmm: { sse4_1 }
flags for phsubd_mm_m64: { ssse3 }
flags for phsubd_mm_mm: { ssse3 }
flags for phsubd_xmm_m128: { ssse3 }
flags for phsubd_xmm_xmm: { ssse3 }
flags for phsubsw_mm_m64: { ssse3 }
flags for phsubsw_mm_mm: { ssse3 }
flags for phsubsw_xmm_m128: { ssse3 }
flags for phsubsw_xmm_xmm: { ssse3 }
flags for phsubw_mm_m64: { ssse3 }
flags for phsubw_mm_mm: { ssse3 }
flags for phsubw_xmm_m128: { ssse3 }
flags for phsubw_xmm_xmm: { ssse3 }
flags for pinsrb_xmm_m8_imm8: { sse4_1 }
flags for pinsrb_xmm_r32_imm8: { sse4_1 }
flags for pinsrd_xmm_m32_imm8: { sse4_1 }
flags for pinsrd_xmm_r32_imm8: { sse4_1 }
flags for pinsrw_mm_m16_imm8: { sse }
flags for pinsrw_mm_r32_imm8: { sse }
flags for pinsrw_xmm_m16_imm8: { sse2 }
flags for pinsrw_xmm_r32_imm8: { sse2 }
flags for pmaddubsw_mm_m64: { mmx ssse3 }
flags for pmaddubsw_mm_mm: { mmx ssse3 }
flags for pmaddubsw_xmm_m128: { ssse3 }
flags for pmaddubsw_xmm_xmm: { ssse3 }
flags for pmaddwd_mm_m64: { mmx }
flags for pmaddwd_mm_mm: { mmx }
flags for pmaddwd_xmm_m128: { sse2 }
flags for pmaddwd_xmm_xmm: { sse2 }
flags for pmaxsb_xmm_m128: { sse4_1 }
flags for pmaxsb_xmm_xmm: { sse4_1 }
flags for pmaxsd_xmm_m128: { sse4_1 }
flags for pmaxsd_xmm_xmm: { sse4_1 }
flags for pmaxsw_mm_m64: { sse }
flags for pmaxsw_mm_mm: { sse }
flags for pmaxsw_xmm_m128: { sse2 }
flags for pmaxsw_xmm_xmm: { sse2 }
flags for pmaxub_mm_m64: { sse }
flags for pmaxub_mm_mm: { sse }
flags for pmaxub_xmm_m128: { sse2 }
flags for pmaxub_xmm_xmm: { sse2 }
flags for pmaxud_xmm_m128: { sse4_1 }
flags for pmaxud_xmm_xmm: { sse4_1 }
flags for pmaxuw_xmm_m128: { sse4_1 }
flags for pmaxuw_xmm_xmm: { sse4_1 }
flags for pminsb_xmm_m128: { sse4_1 }
flags for pminsb_xmm_xmm: { sse4_1 }
flags for pminsd_xmm_m128: { sse4_1 }
flags for pminsd_xmm_xmm: { sse4_1 }
flags for pminsw_mm_m64: { sse }
flags for pminsw_mm_mm: { sse }
flags for pminsw_xmm_m128: { sse2 }
flags for pminsw_xmm_xmm: { sse2 }
flags for pminub_mm_m64: { sse }
flags for pminub_mm_mm: { sse }
flags for pminub_xmm_m128: { sse2 }
flags for pminub_xmm_xmm: { sse2 }
flags for pminud_xmm_m128: { sse4_1 }
flags for pminud_xmm_xmm: { sse4_1 }
flags for pminuw_xmm_m128: { sse4_1 }
flags for pminuw_xmm_xmm: { sse4_1 }
flags for pmovmskb_r32_mm: { sse }
flags for pmovmskb_r32_xmm: { sse2 }
flags for pmovmskb_r64_mm: { sse }
flags for pmovmskb_r64_xmm: { sse2 }
flags for pmovsxbd_xmm_m32: { sse4_1 }
flags for pmovsxbd_xmm_xmm: { sse4_1 }
flags for pmovsxbq_xmm_m16: { sse4_1 }
flags for pmovsxbq_xmm_xmm: { sse4_1 }
flags for pmovsxbw_xmm_m64: { sse4_1 }
flags for pmovsxbw_xmm_xmm: { sse4_1 }
flags for pmovsxdq_xmm_m64: { sse4_1 }
flags for pmovsxdq_xmm_xmm: { sse4_1 }
flags for pmovsxwd_xmm_m64: { sse4_1 }
flags for pmovsxwd_xmm_xmm: { sse4_1 }
flags for pmovsxwq_xmm_m32: { sse4_1 }
flags for pmovsxwq_xmm_xmm: { sse4_1 }
flags for pmovzxbd_xmm_m32: { sse4_1 }
flags for pmovzxbd_xmm_xmm: { sse4_1 }
flags for pmovzxbq_xmm_m16: { sse4_1 }
flags for pmovzxbq_xmm_xmm: { sse4_1 }
flags for pmovzxbw_xmm_m64: { sse4_1 }
flags for pmovzxbw_xmm_xmm: { sse4_1 }
flags for pmovzxdq_xmm_m64: { sse4_1 }
flags for pmovzxdq_xmm_xmm: { sse4_1 }
flags for pmovzxwd_xmm_m64: { sse4_1 }
flags for pmovzxwd_xmm_xmm: { sse4_1 }
flags for pmovzxwq_xmm_m32: { sse4_1 }
flags for pmovzxwq_xmm_xmm: { sse4_1 }
flags for pmuldq_xmm_m128: { sse4_1 }
flags for pmuldq_xmm_xmm: { sse4_1 }
flags for pmulhrsw_mm_m64: { ssse3 }
flags for pmulhrsw_mm_mm: { ssse3 }
flags for pmulhrsw_xmm_m128: { ssse3 }
flags for pmulhrsw_xmm_xmm: { ssse3 }
flags for pmulhuw_mm_m64: { sse }
flags for pmulhuw_mm_mm: { sse }
flags for pmulhuw_xmm_m128: { sse2 }
flags for pmulhuw_xmm_xmm: { sse2 }
flags for pmulhw_mm_m64: { mmx }
flags for pmulhw_mm_mm: { mmx }
flags for pmulhw_xmm_m128: { sse2 }
flags for pmulhw_xmm_xmm: { sse2 }
flags for pmulld_xmm_m128: { sse4_1 }
flags for pmulld_xmm_xmm: { sse4_1 }
flags for pmullw_mm_m64: { mmx }
flags for pmullw_mm_mm: { mmx }
flags for pmullw_xmm_m128: { sse2 }
flags for pmullw_xmm_xmm: { sse2 }
flags for pmuludq_mm_m64: { sse2 }
flags for pmuludq_mm_mm: { sse2 }
flags for pmuludq_xmm_m128: { sse2 }
flags for pmuludq_xmm_xmm: { sse2 }
flags for popw_m16: { }
flags for popq_m64: { }
flags for popw_r16: { }
flags for popw_r16_1: { }
flags for popq_r64: { }
flags for popq_r64_1: { }
flags for popcntw_r16_m16: { popcnt }
flags for popcntw_r16_r16: { popcnt }
flags for popcntl_r32_m32: { popcnt }
flags for popcntl_r32_r32: { popcnt }
flags for popcntq_r64_m64: { popcnt }
flags for popcntq_r64_r64: { popcnt }
flags for popf: { }
flags for popfq: { }
flags for por_mm_m64: { mmx }
flags for por_mm_mm: { mmx }
flags for por_xmm_m128: { sse2 }
flags for por_xmm_xmm: { sse2 }
flags for psadbw_mm_m64: { sse }
flags for psadbw_mm_mm: { sse }
flags for psadbw_xmm_m128: { sse2 }
flags for psadbw_xmm_xmm: { sse2 }
flags for pshufb_mm_m64: { ssse3 }
flags for pshufb_mm_mm: { ssse3 }
flags for pshufb_xmm_m128: { ssse3 }
flags for pshufb_xmm_xmm: { ssse3 }
flags for pshufd_xmm_m128_imm8: { sse2 }
flags for pshufd_xmm_xmm_imm8: { sse2 }
flags for pshufhw_xmm_m128_imm8: { sse2 }
flags for pshufhw_xmm_xmm_imm8: { sse2 }
flags for pshuflw_xmm_m128_imm8: { sse2 }
flags for pshuflw_xmm_xmm_imm8: { sse2 }
flags for pshufw_mm_m64_imm8: { }
flags for pshufw_mm_mm_imm8: { }
flags for psignb_mm_m64: { ssse3 }
flags for psignb_mm_mm: { ssse3 }
flags for psignb_xmm_m128: { ssse3 }
flags for psignb_xmm_xmm: { ssse3 }
flags for psignd_mm_m64: { ssse3 }
flags for psignd_mm_mm: { ssse3 }
flags for psignd_xmm_m128: { ssse3 }
flags for psignd_xmm_xmm: { ssse3 }
flags for psignw_mm_m64: { ssse3 }
flags for psignw_mm_mm: { ssse3 }
flags for psignw_xmm_m128: { ssse3 }
flags for psignw_xmm_xmm: { ssse3 }
flags for pslld_mm_imm8: { mmx }
flags for pslld_mm_m64: { mmx }
flags for pslld_mm_mm: { mmx }
flags for pslld_xmm_imm8: { sse2 }
flags for pslld_xmm_m128: { sse2 }
flags for pslld_xmm_xmm: { sse2 }
flags for pslldq_xmm_imm8: { sse2 }
flags for psllq_mm_imm8: { mmx }
flags for psllq_mm_m64: { mmx }
flags for psllq_mm_mm: { mmx }
flags for psllq_xmm_imm8: { sse2 }
flags for psllq_xmm_m128: { sse2 }
flags for psllq_xmm_xmm: { sse2 }
flags for psllw_mm_imm8: { mmx }
flags for psllw_mm_m64: { mmx }
flags for psllw_mm_mm: { mmx }
flags for psllw_xmm_imm8: { sse2 }
flags for psllw_xmm_m128: { sse2 }
flags for psllw_xmm_xmm: { sse2 }
flags for psrad_mm_imm8: { mmx }
flags for psrad_mm_m64: { mmx }
flags for psrad_mm_mm: { mmx }
flags for psrad_xmm_imm8: { sse2 }
flags for psrad_xmm_m128: { sse2 }
flags for psrad_xmm_xmm: { sse2 }
flags for psraw_mm_imm8: { mmx }
flags for psraw_mm_m64: { mmx }
flags for psraw_mm_mm: { mmx }
flags for psraw_xmm_imm8: { sse2 }
flags for psraw_xmm_m128: { sse2 }
flags for psraw_xmm_xmm: { sse2 }
flags for psrld_mm_imm8: { mmx }
flags for psrld_mm_m64: { mmx }
flags for psrld_mm_mm: { mmx }
flags for psrld_xmm_imm8: { sse2 }
flags for psrld_xmm_m128: { sse2 }
flags for psrld_xmm_xmm: { sse2 }
flags for psrldq_xmm_imm8: { sse2 }
flags for psrlq_mm_imm8: { mmx }
flags for psrlq_mm_m64: { mmx }
flags for psrlq_mm_mm: { mmx }
flags for psrlq_xmm_imm8: { sse2 }
flags for psrlq_xmm_m128: { sse2 }
flags for psrlq_xmm_xmm: { sse2 }
flags for psrlw_mm_imm8: { mmx }
flags for psrlw_mm_m64: { mmx }
flags for psrlw_mm_mm: { mmx }
flags for psrlw_xmm_imm8: { sse2 }
flags for psrlw_xmm_m128: { sse2 }
flags for psrlw_xmm_xmm: { sse2 }
flags for psubb_mm_m64: { mmx }
flags for psubb_mm_mm: { mmx }
flags for psubb_xmm_m128: { sse2 }
flags for psubb_xmm_xmm: { sse2 }
flags for psubd_mm_m64: { mmx }
flags for psubd_mm_mm: { mmx }
flags for psubd_xmm_m128: { sse2 }
flags for psubd_xmm_xmm: { sse2 }
flags for psubq_mm_m64: { sse2 }
flags for psubq_mm_mm: { sse2 }
flags for psubq_xmm_m128: { sse2 }
flags for psubq_xmm_xmm: { sse2 }
flags for psubsb_mm_m64: { mmx }
flags for psubsb_mm_mm: { mmx }
flags for psubsb_xmm_m128: { sse2 }
flags for psubsb_xmm_xmm: { sse2 }
flags for psubsw_mm_m64: { mmx }
flags for psubsw_mm_mm: { mmx }
flags for psubsw_xmm_m128: { sse2 }
flags for psubsw_xmm_xmm: { sse2 }
flags for psubusb_mm_m64: { mmx }
flags for psubusb_mm_mm: { mmx }
flags for psubusb_xmm_m128: { sse2 }
flags for psubusb_xmm_xmm: { sse2 }
flags for psubusw_mm_m64: { mmx }
flags for psubusw_mm_mm: { mmx }
flags for psubusw_xmm_m128: { sse2 }
flags for psubusw_xmm_xmm: { sse2 }
flags for psubw_mm_m64: { mmx }
flags for psubw_mm_mm: { mmx }
flags for psubw_xmm_m128: { sse2 }
flags for psubw_xmm_xmm: { sse2 }
flags for ptest_xmm_m128: { sse4_1 }
flags for ptest_xmm_xmm: { sse4_1 }
flags for punpckhbw_mm_m64: { mmx }
flags for punpckhbw_mm_mm: { mmx }
flags for punpckhbw_xmm_m128: { sse2 }
flags for punpckhbw_xmm_xmm: { sse2 }
flags for punpckhdq_mm_m64: { mmx }
flags for punpckhdq_mm_mm: { mmx }
flags for punpckhdq_xmm_m128: { sse2 }
flags for punpckhdq_xmm_xmm: { sse2 }
flags for punpckhqdq_xmm_m128: { sse2 }
flags for punpckhqdq_xmm_xmm: { sse2 }
flags for punpckhwd_mm_m64: { mmx }
flags for punpckhwd_mm_mm: { mmx }
flags for punpckhwd_xmm_m128: { sse2 }
flags for punpckhwd_xmm_xmm: { sse2 }
flags for punpcklbw_mm_m32: { mmx }
flags for punpcklbw_mm_mm: { mmx }
flags for punpcklbw_xmm_m128: { sse2 }
flags for punpcklbw_xmm_xmm: { sse2 }
flags for punpckldq_mm_m32: { mmx }
flags for punpckldq_mm_mm: { mmx }
flags for punpckldq_xmm_m128: { sse2 }
flags for punpckldq_xmm_xmm: { sse2 }
flags for punpcklqdq_xmm_m128: { sse2 }
flags for punpcklqdq_xmm_xmm: { sse2 }
flags for punpcklwd_mm_m32: { mmx }
flags for punpcklwd_mm_mm: { mmx }
flags for punpcklwd_xmm_m128: { sse2 }
flags for punpcklwd_xmm_xmm: { sse2 }
flags for pushq_imm16: { }
flags for pushq_imm32: { }
flags for pushq_imm8: { }
flags for pushw_m16: { }
flags for pushq_m64: { }
flags for pushw_r16: { }
flags for pushw_r16_1: { }
flags for pushq_r64: { }
flags for pushq_r64_1: { }
flags for pushf: { }
flags for pushfq: { }
flags for pxor_mm_m64: { mmx }
flags for pxor_mm_mm: { mmx }
flags for pxor_xmm_m128: { sse2 }
flags for pxor_xmm_xmm: { sse2 }
flags for rcpps_xmm_m128: { sse }
flags for rcpps_xmm_xmm: { sse }
flags for rcpss_xmm_m32: { sse }
flags for rcpss_xmm_xmm: { sse }
flags for rdrand_r16: { rdrand }
flags for rdrand_r32: { rdrand }
flags for rdrand_r64: { rdrand }
flags for repz scasb_m8_1: { rep_good }
flags for roundpd_xmm_m128_imm8: { sse4_1 }
flags for roundpd_xmm_xmm_imm8: { sse4_1 }
flags for roundps_xmm_m128_imm8: { sse4_1 }
flags for roundps_xmm_xmm_imm8: { sse4_1 }
flags for roundsd_xmm_m64_imm8: { sse4_1 }
flags for roundsd_xmm_xmm_imm8: { sse4_1 }
flags for roundss_xmm_m32_imm8: { sse4_1 }
flags for roundss_xmm_xmm_imm8: { sse4_1 }
flags for rsqrtps_xmm_m128: { sse }
flags for rsqrtps_xmm_xmm: { sse }
flags for rsqrtss_xmm_m32: { sse }
flags for rsqrtss_xmm_xmm: { sse }
flags for sahf: { lahf_lm }
flags for salw_m16_cl: { }
flags for salw_m16_imm8: { }
flags for salw_m16_one: { }
flags for sall_m32_cl: { }
flags for sall_m32_imm8: { }
flags for sall_m32_one: { }
flags for salq_m64_cl: { }
flags for salq_m64_imm8: { }
flags for salq_m64_one: { }
flags for salb_m8_cl: { }
flags for salb_m8_imm8: { }
flags for salb_m8_one: { }
flags for salw_r16_cl: { }
flags for salw_r16_imm8: { }
flags for salw_r16_one: { }
flags for sall_r32_cl: { }
flags for sall_r32_imm8: { }
flags for sall_r32_one: { }
flags for salq_r64_cl: { }
flags for salq_r64_imm8: { }
flags for salq_r64_one: { }
flags for salb_r8_cl: { }
flags for salb_r8_imm8: { }
flags for salb_r8_one: { }
flags for salb_rh_cl: { }
flags for salb_rh_imm8: { }
flags for salb_rh_one: { }
flags for sarw_m16_cl: { }
flags for sarw_m16_imm8: { }
flags for sarw_m16_one: { }
flags for sarl_m32_cl: { }
flags for sarl_m32_imm8: { }
flags for sarl_m32_one: { }
flags for sarq_m64_cl: { }
flags for sarq_m64_imm8: { }
flags for sarq_m64_one: { }
flags for sarb_m8_cl: { }
flags for sarb_m8_imm8: { }
flags for sarb_m8_one: { }
flags for sarw_r16_cl: { }
flags for sarw_r16_imm8: { }
flags for sarw_r16_one: { }
flags for sarl_r32_cl: { }
flags for sarl_r32_imm8: { }
flags for sarl_r32_one: { }
flags for sarq_r64_cl: { }
flags for sarq_r64_imm8: { }
flags for sarq_r64_one: { }
flags for sarb_r8_cl: { }
flags for sarb_r8_imm8: { }
flags for sarb_r8_one: { }
flags for sarb_rh_cl: { }
flags for sarb_rh_imm8: { }
flags for sarb_rh_one: { }
flags for sarxl_r32_m32_r32: { bmi2 }
flags for sarxl_r32_r32_r32: { bmi2 }
flags for sarxq_r64_m64_r64: { bmi2 }
flags for sarxq_r64_r64_r64: { bmi2 }
flags for shlw_m16_cl: { }
flags for shlw_m16_imm8: { }
flags for shlw_m16_one: { }
flags for shll_m32_cl: { }
flags for shll_m32_imm8: { }
flags for shll_m32_one: { }
flags for shlq_m64_cl: { }
flags for shlq_m64_imm8: { }
flags for shlq_m64_one: { }
flags for shlb_m8_cl: { }
flags for shlb_m8_imm8: { }
flags for shlb_m8_one: { }
flags for shlw_r16_cl: { }
flags for shlw_r16_imm8: { }
flags for shlw_r16_one: { }
flags for shll_r32_cl: { }
flags for shll_r32_imm8: { }
flags for shll_r32_one: { }
flags for shlq_r64_cl: { }
flags for shlq_r64_imm8: { }
flags for shlq_r64_one: { }
flags for shlb_r8_cl: { }
flags for shlb_r8_imm8: { }
flags for shlb_r8_one: { }
flags for shlb_rh_cl: { }
flags for shlb_rh_imm8: { }
flags for shlb_rh_one: { }
flags for shldw_m16_r16_cl: { }
flags for shldw_m16_r16_imm8: { }
flags for shldl_m32_r32_cl: { }
flags for shldl_m32_r32_imm8: { }
flags for shldq_m64_r64_cl: { }
flags for shldq_m64_r64_imm8: { }
flags for shldw_r16_r16_cl: { }
flags for shldw_r16_r16_imm8: { }
flags for shldl_r32_r32_cl: { }
flags for shldl_r32_r32_imm8: { }
flags for shldq_r64_r64_cl: { }
flags for shldq_r64_r64_imm8: { }
flags for shlxl_r32_m32_r32: { bmi2 }
flags for shlxl_r32_r32_r32: { bmi2 }
flags for shlxq_r64_m64_r64: { bmi2 }
flags for shlxq_r64_r64_r64: { bmi2 }
flags for shrw_m16_cl: { }
flags for shrw_m16_imm8: { }
flags for shrw_m16_one: { }
flags for shrl_m32_cl: { }
flags for shrl_m32_imm8: { }
flags for shrl_m32_one: { }
flags for shrq_m64_cl: { }
flags for shrq_m64_imm8: { }
flags for shrq_m64_one: { }
flags for shrb_m8_cl: { }
flags for shrb_m8_imm8: { }
flags for shrb_m8_one: { }
flags for shrw_r16_cl: { }
flags for shrw_r16_imm8: { }
flags for shrw_r16_one: { }
flags for shrl_r32_cl: { }
flags for shrl_r32_imm8: { }
flags for shrl_r32_one: { }
flags for shrq_r64_cl: { }
flags for shrq_r64_imm8: { }
flags for shrq_r64_one: { }
flags for shrb_r8_cl: { }
flags for shrb_r8_imm8: { }
flags for shrb_r8_one: { }
flags for shrb_rh_cl: { }
flags for shrb_rh_imm8: { }
flags for shrb_rh_one: { }
flags for shrxl_r32_m32_r32: { bmi2 }
flags for shrxl_r32_r32_r32: { bmi2 }
flags for shrxq_r64_m64_r64: { bmi2 }
flags for shrxq_r64_r64_r64: { bmi2 }
flags for shufpd_xmm_m128_imm8: { sse2 }
flags for shufpd_xmm_xmm_imm8: { sse2 }
flags for shufps_xmm_m128_imm8: { sse }
flags for shufps_xmm_xmm_imm8: { sse }
flags for sqrtpd_xmm_m128: { sse2 }
flags for sqrtpd_xmm_xmm: { sse2 }
flags for sqrtps_xmm_m128: { sse }
flags for sqrtps_xmm_xmm: { sse }
flags for sqrtsd_xmm_m64: { sse2 }
flags for sqrtsd_xmm_xmm: { sse2 }
flags for sqrtss_xmm_m32: { sse }
flags for sqrtss_xmm_xmm: { sse }
flags for sti: { }
flags for subb_al_imm8: { }
flags for subw_ax_imm16: { }
flags for subl_eax_imm32: { }
flags for subw_m16_imm16: { }
flags for subw_m16_imm8: { }
flags for subw_m16_r16: { }
flags for subl_m32_imm32: { }
flags for subl_m32_imm8: { }
flags for subl_m32_r32: { }
flags for subq_m64_imm32: { }
flags for subq_m64_imm8: { }
flags for subq_m64_r64: { }
flags for subb_m8_imm8: { }
flags for subb_m8_r8: { }
flags for subb_m8_rh: { }
flags for subw_r16_imm16: { }
flags for subw_r16_imm8: { }
flags for subw_r16_m16: { }
flags for subw_r16_r16: { }
flags for subw_r16_r16_1: { }
flags for subl_r32_imm32: { }
flags for subl_r32_imm8: { }
flags for subl_r32_m32: { }
flags for subl_r32_r32: { }
flags for subl_r32_r32_1: { }
flags for subq_r64_imm32: { }
flags for subq_r64_imm8: { }
flags for subq_r64_m64: { }
flags for subq_r64_r64: { }
flags for subq_r64_r64_1: { }
flags for subb_r8_imm8: { }
flags for subb_r8_m8: { }
flags for subb_r8_r8: { }
flags for subb_r8_r8_1: { }
flags for subb_r8_rh: { }
flags for subb_r8_rh_1: { }
flags for subq_rax_imm32: { }
flags for subb_rh_imm8: { }
flags for subb_rh_m8: { }
flags for subb_rh_r8: { }
flags for subb_rh_r8_1: { }
flags for subb_rh_rh: { }
flags for subb_rh_rh_1: { }
flags for subpd_xmm_m128: { sse2 }
flags for subpd_xmm_xmm: { sse2 }
flags for subps_xmm_m128: { sse }
flags for subps_xmm_xmm: { sse }
flags for subsd_xmm_m64: { sse2 }
flags for subsd_xmm_xmm: { sse2 }
flags for subss_xmm_m32: { sse }
flags for subss_xmm_xmm: { sse }
flags for tzcntw_r16_m16: { bmi1 }
flags for tzcntw_r16_r16: { bmi1 }
flags for tzcntl_r32_m32: { bmi1 }
flags for tzcntl_r32_r32: { bmi1 }
flags for tzcntq_r64_m64: { bmi1 }
flags for tzcntq_r64_r64: { bmi1 }
flags for ucomisd_xmm_m64: { sse2 }
flags for ucomisd_xmm_xmm: { sse2 }
flags for ucomiss_xmm_m32: { sse }
flags for ucomiss_xmm_xmm: { sse }
flags for unpckhpd_xmm_m128: { sse2 }
flags for unpckhpd_xmm_xmm: { sse2 }
flags for unpckhps_xmm_m128: { sse }
flags for unpckhps_xmm_xmm: { sse }
flags for unpcklpd_xmm_m128: { sse2 }
flags for unpcklpd_xmm_xmm: { sse2 }
flags for unpcklps_xmm_m128: { sse }
flags for unpcklps_xmm_xmm: { sse }
flags for vaddpd_xmm_xmm_m128: { avx }
flags for vaddpd_xmm_xmm_xmm: { avx }
flags for vaddpd_ymm_ymm_m256: { avx }
flags for vaddpd_ymm_ymm_ymm: { avx }
flags for vaddps_xmm_xmm_m128: { avx }
flags for vaddps_xmm_xmm_xmm: { avx }
flags for vaddps_ymm_ymm_m256: { avx }
flags for vaddps_ymm_ymm_ymm: { avx }
flags for vaddsd_xmm_xmm_m64: { avx }
flags for vaddsd_xmm_xmm_xmm: { avx }
flags for vaddss_xmm_xmm_m32: { avx }
flags for vaddss_xmm_xmm_xmm: { avx }
flags for vaddsubpd_xmm_xmm_m128: { avx }
flags for vaddsubpd_xmm_xmm_xmm: { avx }
flags for vaddsubpd_ymm_ymm_m256: { avx }
flags for vaddsubpd_ymm_ymm_ymm: { avx }
flags for vaddsubps_xmm_xmm_m128: { avx }
flags for vaddsubps_xmm_xmm_xmm: { avx }
flags for vaddsubps_ymm_ymm_m256: { avx }
flags for vaddsubps_ymm_ymm_ymm: { avx }
flags for vaesdec_xmm_xmm_m128: { aes avx }
flags for vaesdec_xmm_xmm_xmm: { aes avx }
flags for vaesdeclast_xmm_xmm_m128: { aes avx }
flags for vaesdeclast_xmm_xmm_xmm: { aes avx }
flags for vaesenc_xmm_xmm_m128: { aes avx }
flags for vaesenc_xmm_xmm_xmm: { aes avx }
flags for vaesenclast_xmm_xmm_m128: { aes avx }
flags for vaesenclast_xmm_xmm_xmm: { aes avx }
flags for vaesimc_xmm_m128: { aes avx }
flags for vaesimc_xmm_xmm: { aes avx }
flags for vaeskeygenassist_xmm_m128_imm8: { aes avx }
flags for vaeskeygenassist_xmm_xmm_imm8: { aes avx }
flags for vandnpd_xmm_xmm_m128: { avx }
flags for vandnpd_xmm_xmm_xmm: { avx }
flags for vandnpd_ymm_ymm_m256: { avx }
flags for vandnpd_ymm_ymm_ymm: { avx }
flags for vandnps_xmm_xmm_m128: { avx }
flags for vandnps_xmm_xmm_xmm: { avx }
flags for vandnps_ymm_ymm_m256: { avx }
flags for vandnps_ymm_ymm_ymm: { avx }
flags for vandpd_xmm_xmm_m128: { avx }
flags for vandpd_xmm_xmm_xmm: { avx }
flags for vandpd_ymm_ymm_m256: { avx }
flags for vandpd_ymm_ymm_ymm: { avx }
flags for vandps_xmm_xmm_m128: { avx }
flags for vandps_xmm_xmm_xmm: { avx }
flags for vandps_ymm_ymm_m256: { avx }
flags for vandps_ymm_ymm_ymm: { avx }
flags for vblendpd_xmm_xmm_m128_imm8: { avx }
flags for vblendpd_xmm_xmm_xmm_imm8: { avx }
flags for vblendpd_ymm_ymm_m256_imm8: { avx }
flags for vblendpd_ymm_ymm_ymm_imm8: { avx }
flags for vblendps_xmm_xmm_m128_imm8: { avx }
flags for vblendps_xmm_xmm_xmm_imm8: { avx }
flags for vblendps_ymm_ymm_m256_imm8: { avx }
flags for vblendps_ymm_ymm_ymm_imm8: { avx }
flags for vblendvpd_xmm_xmm_m128_xmm: { avx }
flags for vblendvpd_xmm_xmm_xmm_xmm: { avx }
flags for vblendvpd_ymm_ymm_m256_ymm: { avx }
flags for vblendvpd_ymm_ymm_ymm_ymm: { avx }
flags for vblendvps_xmm_xmm_m128_xmm: { avx }
flags for vblendvps_xmm_xmm_xmm_xmm: { avx }
flags for vblendvps_ymm_ymm_m256_ymm: { avx }
flags for vblendvps_ymm_ymm_ymm_ymm: { avx }
flags for vbroadcastf128_ymm_m128: { avx }
flags for vpbroadcasti128_ymm_m128: { avx2 }
flags for vbroadcastsd_ymm_m64: { avx }
flags for vbroadcastsd_ymm_xmm: { avx2 }
flags for vbroadcastss_xmm_m32: { avx }
flags for vbroadcastss_xmm_xmm: { avx2 }
flags for vbroadcastss_ymm_m32: { avx }
flags for vbroadcastss_ymm_xmm: { avx2 }
flags for vcmppd_xmm_xmm_m128_imm8: { avx }
flags for vcmppd_xmm_xmm_xmm_imm8: { avx }
flags for vcmppd_ymm_ymm_m256_imm8: { avx }
flags for vcmppd_ymm_ymm_ymm_imm8: { avx }
flags for vcmpps_xmm_xmm_m128_imm8: { avx }
flags for vcmpps_xmm_xmm_xmm_imm8: { avx }
flags for vcmpps_ymm_ymm_m256_imm8: { avx }
flags for vcmpps_ymm_ymm_ymm_imm8: { avx }
flags for vcmpsd_xmm_xmm_m64_imm8: { avx }
flags for vcmpsd_xmm_xmm_xmm_imm8: { avx }
flags for vcmpss_xmm_xmm_m32_imm8: { avx }
flags for vcmpss_xmm_xmm_xmm_imm8: { avx }
flags for vcomisd_xmm_m64: { avx }
flags for vcomisd_xmm_xmm: { avx }
flags for vcomiss_xmm_m32: { avx }
flags for vcomiss_xmm_xmm: { avx }
flags for vcvtdq2pd_xmm_m64: { avx }
flags for vcvtdq2pd_xmm_xmm: { avx }
flags for vcvtdq2pd_ymm_m128: { avx }
flags for vcvtdq2pd_ymm_ymm: { avx }
flags for vcvtdq2ps_xmm_m128: { avx }
flags for vcvtdq2ps_xmm_xmm: { avx }
flags for vcvtdq2ps_ymm_m256: { avx }
flags for vcvtdq2ps_ymm_ymm: { avx }
flags for vcvtpd2dqx_xmm_m128: { avx }
flags for vcvtpd2dq_xmm_m256: { avx }
flags for vcvtpd2dqx_xmm_xmm: { avx }
flags for vcvtpd2dq_xmm_ymm: { avx }
flags for vcvtpd2ps_xmm_m128: { avx }
flags for vcvtpd2ps_xmm_m256: { avx }
flags for vcvtpd2ps_xmm_xmm: { avx }
flags for vcvtpd2ps_xmm_ymm: { avx }
flags for vcvtph2ps_xmm_m64: { f16c }
flags for vcvtph2ps_xmm_xmm: { f16c }
flags for vcvtph2ps_ymm_m128: { f16c }
flags for vcvtph2ps_ymm_xmm: { f16c }
flags for vcvtps2dq_xmm_m128: { avx }
flags for vcvtps2dq_xmm_xmm: { avx }
flags for vcvtps2dq_ymm_m256: { avx }
flags for vcvtps2dq_ymm_ymm: { avx }
flags for vcvtps2pd_xmm_m64: { avx }
flags for vcvtps2pd_xmm_xmm: { avx }
flags for vcvtps2pd_ymm_m128: { avx }
flags for vcvtps2pd_ymm_xmm: { avx }
flags for vcvtps2ph_m128_ymm_imm8: { f16c }
flags for vcvtps2ph_m64_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_ymm_imm8: { f16c }
flags for vcvtsd2sil_r32_m64: { avx }
flags for vcvtsd2sil_r32_xmm: { avx }
flags for vcvtsd2siq_r64_m64: { avx }
flags for vcvtsd2siq_r64_xmm: { avx }
flags for vcvtsd2ss_xmm_xmm_m64: { avx }
flags for vcvtsd2ss_xmm_xmm_xmm: { avx }
flags for vcvtsi2sdl_xmm_xmm_m32: { avx }
flags for vcvtsi2sdq_xmm_xmm_m64: { avx }
flags for vcvtsi2sdl_xmm_xmm_r32: { avx }
flags for vcvtsi2sdq_xmm_xmm_r64: { avx }
flags for vcvtsi2ssl_xmm_xmm_m32: { avx }
flags for vcvtsi2ssq_xmm_xmm_m64: { avx }
flags for vcvtsi2ssl_xmm_xmm_r32: { avx }
flags for vcvtsi2ssq_xmm_xmm_r64: { avx }
flags for vcvtss2sd_xmm_xmm_m32: { avx }
flags for vcvtss2sd_xmm_xmm_xmm: { avx }
flags for vcvtss2sil_r32_m32: { avx }
flags for vcvtss2sil_r32_xmm: { avx }
flags for vcvtss2siq_r64_m32: { avx }
flags for vcvtss2siq_r64_xmm: { avx }
flags for vcvttpd2dq_xmm_m128: { avx }
flags for vcvttpd2dq_xmm_m256: { avx }
flags for vcvttpd2dq_xmm_xmm: { avx }
flags for vcvttpd2dq_xmm_ymm: { avx }
flags for vcvttps2dq_xmm_m128: { avx }
flags for vcvttps2dq_xmm_xmm: { avx }
flags for vcvttps2dq_ymm_m256: { avx }
flags for vcvttps2dq_ymm_ymm: { avx }
flags for vcvttsd2sil_r32_m64: { avx }
flags for vcvttsd2sil_r32_xmm: { avx }
flags for vcvttsd2siq_r64_m64: { avx }
flags for vcvttsd2siq_r64_xmm: { avx }
flags for vcvttss2sil_r32_m32: { avx }
flags for vcvttss2sil_r32_xmm: { avx }
flags for vcvttss2siq_r64_m32: { avx }
flags for vcvttss2siq_r64_xmm: { avx }
flags for vdivpd_xmm_xmm_m128: { avx }
flags for vdivpd_xmm_xmm_xmm: { avx }
flags for vdivpd_ymm_ymm_m256: { avx }
flags for vdivpd_ymm_ymm_ymm: { avx }
flags for vdivps_xmm_xmm_m128: { avx }
flags for vdivps_xmm_xmm_xmm: { avx }
flags for vdivps_ymm_ymm_m256: { avx }
flags for vdivps_ymm_ymm_ymm: { avx }
flags for vdivsd_xmm_xmm_m64: { avx }
flags for vdivsd_xmm_xmm_xmm: { avx }
flags for vdivss_xmm_xmm_m32: { avx }
flags for vdivss_xmm_xmm_xmm: { avx }
flags for vdppd_xmm_xmm_m128_imm8: { avx }
flags for vdppd_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_xmm_xmm_m128_imm8: { avx }
flags for vdpps_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_ymm_ymm_m256_imm8: { avx }
flags for vdpps_ymm_ymm_ymm_imm8: { avx }
flags for vextractf128_m128_ymm_imm8: { avx }
flags for vextractf128_xmm_ymm_imm8: { avx }
flags for vextracti128_m128_ymm_imm8: { avx2 }
flags for vextracti128_xmm_ymm_imm8: { avx2 }
flags for vextractps_m32_xmm_imm8: { avx }
flags for vextractps_r32_xmm_imm8: { avx }
flags for vfmadd132pd_xmm_xmm_m128: { fma }
flags for vfmadd132pd_xmm_xmm_xmm: { fma }
flags for vfmadd132pd_ymm_ymm_m256: { fma }
flags for vfmadd132pd_ymm_ymm_ymm: { fma }
flags for vfmadd132ps_xmm_xmm_m128: { fma }
flags for vfmadd132ps_xmm_xmm_xmm: { fma }
flags for vfmadd132ps_ymm_ymm_m256: { fma }
flags for vfmadd132ps_ymm_ymm_ymm: { fma }
flags for vfmadd132sd_xmm_xmm_m64: { fma }
flags for vfmadd132sd_xmm_xmm_xmm: { fma }
flags for vfmadd132ss_xmm_xmm_m32: { fma }
flags for vfmadd132ss_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_xmm_xmm_m128: { fma }
flags for vfmadd213pd_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_ymm_ymm_m256: { fma }
flags for vfmadd213pd_ymm_ymm_ymm: { fma }
flags for vfmadd213ps_xmm_xmm_m128: { fma }
flags for vfmadd213ps_xmm_xmm_xmm: { fma }
flags for vfmadd213ps_ymm_ymm_m256: { fma }
flags for vfmadd213ps_ymm_ymm_ymm: { fma }
flags for vfmadd213sd_xmm_xmm_m64: { fma }
flags for vfmadd213sd_xmm_xmm_xmm: { fma }
flags for vfmadd213ss_xmm_xmm_m32: { fma }
flags for vfmadd213ss_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_xmm_xmm_m128: { fma }
flags for vfmadd231pd_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_ymm_ymm_m256: { fma }
flags for vfmadd231pd_ymm_ymm_ymm: { fma }
flags for vfmadd231ps_xmm_xmm_m128: { fma }
flags for vfmadd231ps_xmm_xmm_xmm: { fma }
flags for vfmadd231ps_ymm_ymm_m256: { fma }
flags for vfmadd231ps_ymm_ymm_ymm: { fma }
flags for vfmadd231sd_xmm_xmm_m64: { fma }
flags for vfmadd231sd_xmm_xmm_xmm: { fma }
flags for vfmadd231ss_xmm_xmm_m32: { fma }
flags for vfmadd231ss_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_xmm_xmm_m128: { fma }
flags for vfmaddsub132pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_ymm_ymm_m256: { fma }
flags for vfmaddsub132pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub132ps_xmm_xmm_m128: { fma }
flags for vfmaddsub132ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub132ps_ymm_ymm_m256: { fma }
flags for vfmaddsub132ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub213pd_xmm_xmm_m128: { fma }
flags for vfmaddsub213pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub213pd_ymm_ymm_m256: { fma }
flags for vfmaddsub213pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub213ps_xmm_xmm_m128: { fma }
flags for vfmaddsub213ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub213ps_ymm_ymm_m256: { fma }
flags for vfmaddsub213ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub231pd_xmm_xmm_m128: { fma }
flags for vfmaddsub231pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub231pd_ymm_ymm_m256: { fma }
flags for vfmaddsub231pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub231ps_xmm_xmm_m128: { fma }
flags for vfmaddsub231ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub231ps_ymm_ymm_m256: { fma }
flags for vfmaddsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub132pd_xmm_xmm_m128: { fma }
flags for vfmsub132pd_xmm_xmm_xmm: { fma }
flags for vfmsub132pd_ymm_ymm_m256: { fma }
flags for vfmsub132pd_ymm_ymm_ymm: { fma }
flags for vfmsub132ps_xmm_xmm_m128: { fma }
flags for vfmsub132ps_xmm_xmm_xmm: { fma }
flags for vfmsub132ps_ymm_ymm_m256: { fma }
flags for vfmsub132ps_ymm_ymm_ymm: { fma }
flags for vfmsub132sd_xmm_xmm_m64: { fma }
flags for vfmsub132sd_xmm_xmm_xmm: { fma }
flags for vfmsub132ss_xmm_xmm_m32: { fma }
flags for vfmsub132ss_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_xmm_xmm_m128: { fma }
flags for vfmsub213pd_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_ymm_ymm_m256: { fma }
flags for vfmsub213pd_ymm_ymm_ymm: { fma }
flags for vfmsub213ps_xmm_xmm_m128: { fma }
flags for vfmsub213ps_xmm_xmm_xmm: { fma }
flags for vfmsub213ps_ymm_ymm_m256: { fma }
flags for vfmsub213ps_ymm_ymm_ymm: { fma }
flags for vfmsub213sd_xmm_xmm_m64: { fma }
flags for vfmsub213sd_xmm_xmm_xmm: { fma }
flags for vfmsub213ss_xmm_xmm_m32: { fma }
flags for vfmsub213ss_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_xmm_xmm_m128: { fma }
flags for vfmsub231pd_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_ymm_ymm_m256: { fma }
flags for vfmsub231pd_ymm_ymm_ymm: { fma }
flags for vfmsub231ps_xmm_xmm_m128: { fma }
flags for vfmsub231ps_xmm_xmm_xmm: { fma }
flags for vfmsub231ps_ymm_ymm_m256: { fma }
flags for vfmsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub231sd_xmm_xmm_m64: { fma }
flags for vfmsub231sd_xmm_xmm_xmm: { fma }
flags for vfmsub231ss_xmm_xmm_m32: { fma }
flags for vfmsub231ss_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_xmm_xmm_m128: { fma }
flags for vfmsubadd132pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_ymm_ymm_m256: { fma }
flags for vfmsubadd132pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd132ps_xmm_xmm_m128: { fma }
flags for vfmsubadd132ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd132ps_ymm_ymm_m256: { fma }
flags for vfmsubadd132ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd213pd_xmm_xmm_m128: { fma }
flags for vfmsubadd213pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd213pd_ymm_ymm_m256: { fma }
flags for vfmsubadd213pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd213ps_xmm_xmm_m128: { fma }
flags for vfmsubadd213ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd213ps_ymm_ymm_m256: { fma }
flags for vfmsubadd213ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd231pd_xmm_xmm_m128: { fma }
flags for vfmsubadd231pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd231pd_ymm_ymm_m256: { fma }
flags for vfmsubadd231pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd231ps_xmm_xmm_m128: { fma }
flags for vfmsubadd231ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd231ps_ymm_ymm_m256: { fma }
flags for vfmsubadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132pd_xmm_xmm_m128: { fma }
flags for vfnmadd132pd_xmm_xmm_xmm: { fma }
flags for vfnmadd132pd_ymm_ymm_m256: { fma }
flags for vfnmadd132pd_ymm_ymm_ymm: { fma }
flags for vfnmadd132ps_xmm_xmm_m128: { fma }
flags for vfnmadd132ps_xmm_xmm_xmm: { fma }
flags for vfnmadd132ps_ymm_ymm_m256: { fma }
flags for vfnmadd132ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132sd_xmm_xmm_m64: { fma }
flags for vfnmadd132sd_xmm_xmm_xmm: { fma }
flags for vfnmadd132ss_xmm_xmm_m32: { fma }
flags for vfnmadd132ss_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_xmm_xmm_m128: { fma }
flags for vfnmadd213pd_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_ymm_ymm_m256: { fma }
flags for vfnmadd213pd_ymm_ymm_ymm: { fma }
flags for vfnmadd213ps_xmm_xmm_m128: { fma }
flags for vfnmadd213ps_xmm_xmm_xmm: { fma }
flags for vfnmadd213ps_ymm_ymm_m256: { fma }
flags for vfnmadd213ps_ymm_ymm_ymm: { fma }
flags for vfnmadd213sd_xmm_xmm_m64: { fma }
flags for vfnmadd213sd_xmm_xmm_xmm: { fma }
flags for vfnmadd213ss_xmm_xmm_m32: { fma }
flags for vfnmadd213ss_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_xmm_xmm_m128: { fma }
flags for vfnmadd231pd_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_ymm_ymm_m256: { fma }
flags for vfnmadd231pd_ymm_ymm_ymm: { fma }
flags for vfnmadd231ps_xmm_xmm_m128: { fma }
flags for vfnmadd231ps_xmm_xmm_xmm: { fma }
flags for vfnmadd231ps_ymm_ymm_m256: { fma }
flags for vfnmadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd231sd_xmm_xmm_m64: { fma }
flags for vfnmadd231sd_xmm_xmm_xmm: { fma }
flags for vfnmadd231ss_xmm_xmm_m32: { fma }
flags for vfnmadd231ss_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_xmm_xmm_m128: { fma }
flags for vfnmsub132pd_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_ymm_ymm_m256: { fma }
flags for vfnmsub132pd_ymm_ymm_ymm: { fma }
flags for vfnmsub132ps_xmm_xmm_m128: { fma }
flags for vfnmsub132ps_xmm_xmm_xmm: { fma }
flags for vfnmsub132ps_ymm_ymm_m256: { fma }
flags for vfnmsub132ps_ymm_ymm_ymm: { fma }
flags for vfnmsub132sd_xmm_xmm_m64: { fma }
flags for vfnmsub132sd_xmm_xmm_xmm: { fma }
flags for vfnmsub132ss_xmm_xmm_m32: { fma }
flags for vfnmsub132ss_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_xmm_xmm_m128: { fma }
flags for vfnmsub213pd_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_ymm_ymm_m256: { fma }
flags for vfnmsub213pd_ymm_ymm_ymm: { fma }
flags for vfnmsub213ps_xmm_xmm_m128: { fma }
flags for vfnmsub213ps_xmm_xmm_xmm: { fma }
flags for vfnmsub213ps_ymm_ymm_m256: { fma }
flags for vfnmsub213ps_ymm_ymm_ymm: { fma }
flags for vfnmsub213sd_xmm_xmm_m64: { fma }
flags for vfnmsub213sd_xmm_xmm_xmm: { fma }
flags for vfnmsub213ss_xmm_xmm_m32: { fma }
flags for vfnmsub213ss_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_xmm_xmm_m128: { fma }
flags for vfnmsub231pd_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_ymm_ymm_m256: { fma }
flags for vfnmsub231pd_ymm_ymm_ymm: { fma }
flags for vfnmsub231ps_xmm_xmm_m128: { fma }
flags for vfnmsub231ps_xmm_xmm_xmm: { fma }
flags for vfnmsub231ps_ymm_ymm_m256: { fma }
flags for vfnmsub231ps_ymm_ymm_ymm: { fma }
flags for vfnmsub231sd_xmm_xmm_m64: { fma }
flags for vfnmsub231sd_xmm_xmm_xmm: { fma }
flags for vfnmsub231ss_xmm_xmm_m32: { fma }
flags for vfnmsub231ss_xmm_xmm_xmm: { fma }
flags for vgatherdpd_xmm_m32_xmm: { avx2 }
flags for vgatherdpd_ymm_m32_ymm: { avx2 }
flags for vgatherdps_xmm_m32_xmm: { avx2 }
flags for vgatherdps_ymm_m32_ymm: { avx2 }
flags for vgatherqpd_xmm_m64_xmm: { avx2 }
flags for vgatherqpd_ymm_m64_ymm: { avx2 }
flags for vgatherqps_xmm_m64_xmm: { avx2 }
flags for vgatherqps_xmm_m64_xmm_1: { avx2 }
flags for vhaddpd_xmm_xmm_m128: { avx }
flags for vhaddpd_xmm_xmm_xmm: { avx }
flags for vhaddpd_ymm_ymm_m256: { avx }
flags for vhaddpd_ymm_ymm_ymm: { avx }
flags for vhaddps_xmm_xmm_m128: { avx }
flags for vhaddps_xmm_xmm_xmm: { avx }
flags for vhaddps_ymm_ymm_m256: { avx }
flags for vhaddps_ymm_ymm_ymm: { avx }
flags for vhsubpd_xmm_xmm_m128: { avx }
flags for vhsubpd_xmm_xmm_xmm: { avx }
flags for vhsubpd_ymm_ymm_m256: { avx }
flags for vhsubpd_ymm_ymm_ymm: { avx }
flags for vhsubps_xmm_xmm_m128: { avx }
flags for vhsubps_xmm_xmm_xmm: { avx }
flags for vhsubps_ymm_ymm_m256: { avx }
flags for vhsubps_ymm_ymm_ymm: { avx }
flags for vinsertf128_ymm_ymm_m128_imm8: { avx }
flags for vinsertf128_ymm_ymm_xmm_imm8: { avx }
flags for vinserti128_ymm_ymm_m128_imm8: { avx2 }
flags for vinserti128_ymm_ymm_xmm_imm8: { avx2 }
flags for vinsertps_xmm_xmm_m32_imm8: { avx }
flags for vinsertps_xmm_xmm_xmm_imm8: { avx }
flags for vlddqu_xmm_m128: { avx }
flags for vlddqu_ymm_m256: { avx }
flags for vmaskmovpd_m128_xmm_xmm: { avx }
flags for vmaskmovpd_m256_ymm_ymm: { avx }
flags for vmaskmovpd_xmm_xmm_m128: { avx }
flags for vmaskmovpd_ymm_ymm_m256: { avx }
flags for vmaskmovps_m128_xmm_xmm: { avx }
flags for vmaskmovps_m256_ymm_ymm: { avx }
flags for vmaskmovps_xmm_xmm_m128: { avx }
flags for vmaskmovps_ymm_ymm_m256: { avx }
flags for vmaxpd_xmm_xmm_m128: { avx }
flags for vmaxpd_xmm_xmm_xmm: { avx }
flags for vmaxpd_ymm_ymm_m256: { avx }
flags for vmaxpd_ymm_ymm_ymm: { avx }
flags for vmaxps_xmm_xmm_m128: { avx }
flags for vmaxps_xmm_xmm_xmm: { avx }
flags for vmaxps_ymm_ymm_m256: { avx }
flags for vmaxps_ymm_ymm_ymm: { avx }
flags for vmaxsd_xmm_xmm_m64: { avx }
flags for vmaxsd_xmm_xmm_xmm: { avx }
flags for vmaxss_xmm_xmm_m32: { avx }
flags for vmaxss_xmm_xmm_xmm: { avx }
flags for vminpd_xmm_xmm_m128: { avx }
flags for vminpd_xmm_xmm_xmm: { avx }
flags for vminpd_ymm_ymm_m256: { avx }
flags for vminpd_ymm_ymm_ymm: { avx }
flags for vminps_xmm_xmm_m128: { avx }
flags for vminps_xmm_xmm_xmm: { avx }
flags for vminps_ymm_ymm_m256: { avx }
flags for vminps_ymm_ymm_ymm: { avx }
flags for vminsd_xmm_xmm_m64: { avx }
flags for vminsd_xmm_xmm_xmm: { avx }
flags for vminss_xmm_xmm_m32: { avx }
flags for vminss_xmm_xmm_xmm: { avx }
flags for vmovapd_m128_xmm: { avx }
flags for vmovapd_m256_ymm: { avx }
flags for vmovapd_xmm_m128: { avx }
flags for vmovapd_xmm_xmm: { avx }
flags for vmovapd_xmm_xmm_1: { avx }
flags for vmovapd_ymm_m256: { avx }
flags for vmovapd_ymm_ymm: { avx }
flags for vmovapd_ymm_ymm_1: { avx }
flags for vmovaps_m128_xmm: { avx }
flags for vmovaps_m256_ymm: { avx }
flags for vmovaps_xmm_m128: { avx }
flags for vmovaps_xmm_xmm: { avx }
flags for vmovaps_xmm_xmm_1: { avx }
flags for vmovaps_ymm_m256: { avx }
flags for vmovaps_ymm_ymm: { avx }
flags for vmovaps_ymm_ymm_1: { avx }
flags for vmovd_m32_xmm: { avx }
flags for vmovd_r32_xmm: { avx }
flags for vmovd_xmm_m32: { avx }
flags for vmovd_xmm_r32: { avx }
flags for vmovddup_xmm_m64: { avx }
flags for vmovddup_xmm_xmm: { avx }
flags for vmovddup_ymm_m256: { avx }
flags for vmovddup_ymm_ymm: { avx }
flags for vmovdqa_m128_xmm: { avx }
flags for vmovdqa_m256_ymm: { avx }
flags for vmovdqa_xmm_m128: { avx }
flags for vmovdqa_xmm_xmm: { avx }
flags for vmovdqa_xmm_xmm_1: { avx }
flags for vmovdqa_ymm_m256: { avx }
flags for vmovdqa_ymm_ymm: { avx }
flags for vmovdqa_ymm_ymm_1: { avx }
flags for vmovdqu_m128_xmm: { avx }
flags for vmovdqu_m256_ymm: { avx }
flags for vmovdqu_xmm_m128: { avx }
flags for vmovdqu_xmm_xmm: { avx }
flags for vmovdqu_xmm_xmm_1: { avx }
flags for vmovdqu_ymm_m256: { avx }
flags for vmovdqu_ymm_ymm: { avx }
flags for vmovdqu_ymm_ymm_1: { avx }
flags for vmovhlps_xmm_xmm_xmm: { avx }
flags for vmovhpd_m64_xmm: { avx }
flags for vmovhpd_xmm_xmm_m64: { avx }
flags for vmovhps_m64_xmm: { avx }
flags for vmovhps_xmm_xmm_m64: { avx }
flags for vmovlhps_xmm_xmm_xmm: { avx }
flags for vmovlpd_m64_xmm: { avx }
flags for vmovlpd_xmm_xmm_m64: { avx }
flags for vmovlps_m64_xmm: { avx }
flags for vmovlps_xmm_xmm_m64: { avx }
flags for vmovmskpd_r32_xmm: { avx }
flags for vmovmskpd_r32_ymm: { avx }
flags for vmovmskpd_r64_xmm: { avx }
flags for vmovmskpd_r64_ymm: { avx }
flags for vmovmskps_r32_xmm: { avx }
flags for vmovmskps_r32_ymm: { avx }
flags for vmovmskps_r64_xmm: { avx }
flags for vmovmskps_r64_ymm: { avx }
flags for vmovntdqa_m128_xmm: { avx }
flags for vmovntdqa_xmm_m128: { avx }
flags for vmovntdqa_ymm_m256: { avx2 }
flags for vmovntpd_m128_xmm: { avx }
flags for vmovntpd_m256_ymm: { avx }
flags for vmovntps_m128_xmm: { avx }
flags for vmovntps_m256_ymm: { avx }
flags for vmovq_m64_xmm: { avx }
flags for vmovq_m64_xmm_1: { avx }
flags for vmovq_r64_xmm: { avx }
flags for vmovq_xmm_m64: { avx }
flags for vmovq_xmm_m64_1: { avx }
flags for vmovq_xmm_r64: { avx }
flags for vmovq_xmm_xmm: { avx }
flags for vmovq_xmm_xmm_1: { avx }
flags for vmovsd_m64_xmm: { avx }
flags for vmovsd_xmm_m64: { avx }
flags for vmovsd_xmm_xmm_xmm: { avx }
flags for vmovsd_xmm_xmm_xmm_1: { avx }
flags for vmovshdup_xmm_m128: { avx }
flags for vmovshdup_xmm_xmm: { avx }
flags for vmovshdup_ymm_m256: { avx }
flags for vmovshdup_ymm_ymm: { avx }
flags for vmovsldup_xmm_m128: { avx }
flags for vmovsldup_xmm_xmm: { avx }
flags for vmovsldup_ymm_m256: { avx }
flags for vmovsldup_ymm_ymm: { avx }
flags for vmovss_m32_xmm: { avx }
flags for vmovss_xmm_m32: { avx }
flags for vmovss_xmm_xmm_xmm: { avx }
flags for vmovss_xmm_xmm_xmm_1: { avx }
flags for vmovupd_m128_xmm: { avx }
flags for vmovupd_m256_ymm: { avx }
flags for vmovupd_xmm_m128: { avx }
flags for vmovupd_xmm_xmm: { avx }
flags for vmovupd_xmm_xmm_1: { avx }
flags for vmovupd_ymm_m256: { avx }
flags for vmovupd_ymm_ymm: { avx }
flags for vmovupd_ymm_ymm_1: { avx }
flags for vmovups_m128_xmm: { avx }
flags for vmovups_m256_ymm: { avx }
flags for vmovups_xmm_m128: { avx }
flags for vmovups_xmm_xmm: { avx }
flags for vmovups_xmm_xmm_1: { avx }
flags for vmovups_ymm_m256: { avx }
flags for vmovups_ymm_ymm: { avx }
flags for vmovups_ymm_ymm_1: { avx }
flags for vmpsadbw_xmm_xmm_m128_imm8: { avx }
flags for vmpsadbw_xmm_xmm_xmm_imm8: { avx }
flags for vmpsadbw_ymm_ymm_m256_imm8: { avx2 }
flags for vmpsadbw_ymm_ymm_ymm_imm8: { avx2 }
flags for vmulpd_xmm_xmm_m128: { avx }
flags for vmulpd_xmm_xmm_xmm: { avx }
flags for vmulpd_ymm_ymm_m256: { avx }
flags for vmulpd_ymm_ymm_ymm: { avx }
flags for vmulps_xmm_xmm_m128: { avx }
flags for vmulps_xmm_xmm_xmm: { avx }
flags for vmulps_ymm_ymm_m256: { avx }
flags for vmulps_ymm_ymm_ymm: { avx }
flags for vmulsd_xmm_xmm_m64: { avx }
flags for vmulsd_xmm_xmm_xmm: { avx }
flags for vmulss_xmm_xmm_m32: { avx }
flags for vmulss_xmm_xmm_xmm: { avx }
flags for vorpd_xmm_xmm_m128: { avx }
flags for vorpd_xmm_xmm_xmm: { avx }
flags for vorpd_ymm_ymm_m256: { avx }
flags for vorpd_ymm_ymm_ymm: { avx }
flags for vorps_xmm_xmm_m128: { avx }
flags for vorps_xmm_xmm_xmm: { avx }
flags for vorps_ymm_ymm_m256: { avx }
flags for vorps_ymm_ymm_ymm: { avx }
flags for vpabsb_xmm_m128: { avx }
flags for vpabsb_xmm_xmm: { avx }
flags for vpabsb_ymm_m256: { avx2 }
flags for vpabsb_ymm_ymm: { avx2 }
flags for vpabsd_xmm_m128: { avx }
flags for vpabsd_xmm_xmm: { avx }
flags for vpabsd_ymm_m256: { avx2 }
flags for vpabsd_ymm_ymm: { avx2 }
flags for vpabsw_xmm_m128: { avx }
flags for vpabsw_xmm_xmm: { avx }
flags for vpabsw_ymm_m256: { avx2 }
flags for vpabsw_ymm_ymm: { avx2 }
flags for vpackssdw_xmm_xmm_m128: { avx }
flags for vpackssdw_xmm_xmm_xmm: { avx }
flags for vpackssdw_ymm_ymm_m256: { avx2 }
flags for vpackssdw_ymm_ymm_ymm: { avx2 }
flags for vpacksswb_xmm_xmm_m128: { avx }
flags for vpacksswb_xmm_xmm_xmm: { avx }
flags for vpacksswb_ymm_ymm_m256: { avx2 }
flags for vpacksswb_ymm_ymm_ymm: { avx2 }
flags for vpackusdw_xmm_xmm_m128: { avx }
flags for vpackusdw_xmm_xmm_xmm: { avx }
flags for vpackusdw_ymm_ymm_m256: { avx2 }
flags for vpackusdw_ymm_ymm_ymm: { avx2 }
flags for vpackuswb_xmm_xmm_m128: { avx }
flags for vpackuswb_xmm_xmm_xmm: { avx }
flags for vpackuswb_ymm_ymm_m256: { avx2 }
flags for vpackuswb_ymm_ymm_ymm: { avx2 }
flags for vpaddb_xmm_xmm_m128: { avx }
flags for vpaddb_xmm_xmm_xmm: { avx }
flags for vpaddb_ymm_ymm_m256: { avx2 }
flags for vpaddb_ymm_ymm_ymm: { avx2 }
flags for vpaddd_xmm_xmm_m128: { avx }
flags for vpaddd_xmm_xmm_xmm: { avx }
flags for vpaddd_ymm_ymm_m256: { avx2 }
flags for vpaddd_ymm_ymm_ymm: { avx2 }
flags for vpaddq_xmm_xmm_m128: { avx }
flags for vpaddq_xmm_xmm_xmm: { avx }
flags for vpaddq_ymm_ymm_m256: { avx2 }
flags for vpaddq_ymm_ymm_ymm: { avx2 }
flags for vpaddsb_xmm_xmm_m128: { avx }
flags for vpaddsb_xmm_xmm_xmm: { avx }
flags for vpaddsb_ymm_ymm_m256: { avx2 }
flags for vpaddsb_ymm_ymm_ymm: { avx2 }
flags for vpaddsw_xmm_xmm_m128: { avx }
flags for vpaddsw_xmm_xmm_xmm: { avx }
flags for vpaddsw_ymm_ymm_m256: { avx2 }
flags for vpaddsw_ymm_ymm_ymm: { avx2 }
flags for vpaddusb_xmm_xmm_m128: { avx }
flags for vpaddusb_xmm_xmm_xmm: { avx }
flags for vpaddusb_ymm_ymm_m256: { avx2 }
flags for vpaddusb_ymm_ymm_ymm: { avx2 }
flags for vpaddusw_xmm_xmm_m128: { avx }
flags for vpaddusw_xmm_xmm_xmm: { avx }
flags for vpaddusw_ymm_ymm_m256: { avx2 }
flags for vpaddusw_ymm_ymm_ymm: { avx2 }
flags for vpaddw_xmm_xmm_m128: { avx }
flags for vpaddw_xmm_xmm_xmm: { avx }
flags for vpaddw_ymm_ymm_m256: { avx2 }
flags for vpaddw_ymm_ymm_ymm: { avx2 }
flags for vpalignr_xmm_xmm_m128_imm8: { avx }
flags for vpalignr_xmm_xmm_xmm_imm8: { avx }
flags for vpalignr_ymm_ymm_m256_imm8: { avx2 }
flags for vpalignr_ymm_ymm_ymm_imm8: { avx2 }
flags for vpand_xmm_xmm_m128: { avx }
flags for vpand_xmm_xmm_xmm: { avx }
flags for vpand_ymm_ymm_m256: { avx2 }
flags for vpand_ymm_ymm_ymm: { avx2 }
flags for vpandn_xmm_xmm_m128: { avx }
flags for vpandn_xmm_xmm_xmm: { avx }
flags for vpandn_ymm_ymm_m256: { avx2 }
flags for vpandn_ymm_ymm_ymm: { avx2 }
flags for vpavgb_xmm_xmm_m128: { avx }
flags for vpavgb_xmm_xmm_xmm: { avx }
flags for vpavgb_ymm_ymm_m256: { avx2 }
flags for vpavgb_ymm_ymm_ymm: { avx2 }
flags for vpavgw_xmm_xmm_m128: { avx }
flags for vpavgw_xmm_xmm_xmm: { avx }
flags for vpavgw_ymm_ymm_m256: { avx2 }
flags for vpavgw_ymm_ymm_ymm: { avx2 }
flags for vpblendd_xmm_xmm_m128_imm8: { avx2 }
flags for vpblendd_xmm_xmm_xmm_imm8: { avx2 }
flags for vpblendd_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendd_ymm_ymm_ymm_imm8: { avx2 }
flags for vpblendvb_xmm_xmm_m128_xmm: { avx }
flags for vpblendvb_xmm_xmm_xmm_xmm: { avx }
flags for vpblendvb_ymm_ymm_m256_ymm: { avx2 }
flags for vpblendvb_ymm_ymm_ymm_ymm: { avx2 }
flags for vpblendw_xmm_xmm_m128_imm8: { avx }
flags for vpblendw_xmm_xmm_xmm_imm8: { avx }
flags for vpblendw_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendw_ymm_ymm_ymm_imm8: { avx2 }
flags for vpbroadcastb_xmm_m8: { avx2 }
flags for vpbroadcastb_xmm_xmm: { avx2 }
flags for vpbroadcastb_ymm_m8: { avx2 }
flags for vpbroadcastb_ymm_xmm: { avx2 }
flags for vpbroadcastd_xmm_m32: { avx2 }
flags for vpbroadcastd_xmm_xmm: { avx2 }
flags for vpbroadcastd_ymm_m32: { avx2 }
flags for vpbroadcastd_ymm_xmm: { avx2 }
flags for vpbroadcastq_xmm_m64: { avx2 }
flags for vpbroadcastq_xmm_xmm: { avx2 }
flags for vpbroadcastq_ymm_m64: { avx2 }
flags for vpbroadcastq_ymm_xmm: { avx2 }
flags for vpbroadcastw_xmm_m16: { avx2 }
flags for vpbroadcastw_xmm_xmm: { avx2 }
flags for vpbroadcastw_ymm_m16: { avx2 }
flags for vpbroadcastw_ymm_xmm: { avx2 }
flags for vpclmulqdq_xmm_xmm_m128_imm8: { pclmulqdq avx }
flags for vpclmulqdq_xmm_xmm_xmm_imm8: { pclmulqdq avx }
flags for vpcmpeqb_xmm_xmm_m128: { avx }
flags for vpcmpeqb_xmm_xmm_xmm: { avx }
flags for vpcmpeqb_ymm_ymm_m256: { avx2 }
flags for vpcmpeqb_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqd_xmm_xmm_m128: { avx }
flags for vpcmpeqd_xmm_xmm_xmm: { avx }
flags for vpcmpeqd_ymm_ymm_m256: { avx2 }
flags for vpcmpeqd_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqq_xmm_xmm_m128: { avx }
flags for vpcmpeqq_xmm_xmm_xmm: { avx }
flags for vpcmpeqq_ymm_ymm_m256: { avx2 }
flags for vpcmpeqq_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqw_xmm_xmm_m128: { avx }
flags for vpcmpeqw_xmm_xmm_xmm: { avx }
flags for vpcmpeqw_ymm_ymm_m256: { avx2 }
flags for vpcmpeqw_ymm_ymm_ymm: { avx2 }
flags for vpcmpestri_xmm_m128_imm8: { avx }
flags for vpcmpestri_xmm_xmm_imm8: { avx }
flags for vpcmpestrm_xmm_m128_imm8: { avx }
flags for vpcmpestrm_xmm_xmm_imm8: { avx }
flags for vpcmpgtb_xmm_xmm_m128: { avx }
flags for vpcmpgtb_xmm_xmm_xmm: { avx }
flags for vpcmpgtb_ymm_ymm_m256: { avx }
flags for vpcmpgtb_ymm_ymm_ymm: { avx }
flags for vpcmpgtd_xmm_xmm_m128: { avx }
flags for vpcmpgtd_xmm_xmm_xmm: { avx }
flags for vpcmpgtd_ymm_ymm_m256: { avx2 }
flags for vpcmpgtd_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtq_xmm_xmm_m128: { avx }
flags for vpcmpgtq_xmm_xmm_xmm: { avx }
flags for vpvmpgtq_ymm_ymm_m256: { avx2 }
flags for vpvmpgtq_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtw_xmm_xmm_m128: { avx }
flags for vpcmpgtw_xmm_xmm_xmm: { avx }
flags for vpcmpgtw_ymm_ymm_m256: { avx2 }
flags for vpcmpgtw_ymm_ymm_ymm: { avx2 }
flags for vpcmpistri_xmm_m128_imm8: { avx }
flags for vpcmpistri_xmm_xmm_imm8: { avx }
flags for vpcmpistrm_xmm_m128_imm8: { avx }
flags for vpcmpistrm_xmm_xmm_imm8: { avx }
flags for vperm2f128_ymm_ymm_m256_imm8: { avx }
flags for vperm2f128_ymm_ymm_ymm_imm8: { avx }
flags for vperm2i128_ymm_ymm_m256_imm8: { avx2 }
flags for vperm2i128_ymm_ymm_ymm_imm8: { avx2 }
flags for vpermd_ymm_ymm_m256: { avx2 }
flags for vpermd_ymm_ymm_ymm: { avx2 }
flags for vpermilpd_xmm_m128_imm8: { avx }
flags for vpermilpd_xmm_xmm_imm8: { avx }
flags for vpermilpd_xmm_xmm_m128: { avx }
flags for vpermilpd_xmm_xmm_xmm: { avx }
flags for vpermilpd_ymm_m256_imm8: { avx }
flags for vpermilpd_ymm_ymm_imm8: { avx }
flags for vpermilpd_ymm_ymm_m256: { avx }
flags for vpermilpd_ymm_ymm_ymm: { avx }
flags for vpermilps_xmm_m128_imm8: { avx }
flags for vpermilps_xmm_xmm_imm8: { avx }
flags for vpermilps_xmm_xmm_m128: { avx }
flags for vpermilps_xmm_xmm_xmm: { avx }
flags for vpermilps_ymm_m256_imm8: { avx }
flags for vpermilps_ymm_ymm_imm8: { avx }
flags for vpermilps_ymm_ymm_m256: { avx }
flags for vpermilps_ymm_ymm_ymm: { avx }
flags for vpermpd_ymm_m256_imm8: { avx2 }
flags for vpermpd_ymm_ymm_imm8: { avx2 }
flags for vpermps_ymm_ymm_m256: { avx2 }
flags for vpermps_ymm_ymm_ymm: { avx2 }
flags for vpermq_ymm_m256_imm8: { avx2 }
flags for vpermq_ymm_ymm_imm8: { avx2 }
flags for vpextrb_m8_xmm_imm8: { avx }
flags for vpextrb_r32_xmm_imm8: { avx }
flags for vpextrb_r64_xmm_imm8: { avx }
flags for vpextrd_m32_xmm_imm8: { avx }
flags for vpextrd_r32_xmm_imm8: { avx }
flags for vpextrq_m64_xmm_imm8: { avx }
flags for vpextrq_r64_xmm_imm8: { avx }
flags for vpextrw_m16_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8_1: { avx }
flags for vpextrw_r64_xmm_imm8: { avx }
flags for vpextrw_r64_xmm_imm8_1: { avx }
flags for vpgatherdd_xmm_m32_xmm: { avx2 }
flags for vpgatherdd_ymm_m32_ymm: { avx2 }
flags for vpgatherdq_xmm_m32_xmm: { avx2 }
flags for vpgatherdq_ymm_m32_ymm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm_1: { avx2 }
flags for vpgatherqq_xmm_m64_xmm: { avx2 }
flags for vpgatherqq_ymm_m64_ymm: { avx2 }
flags for vphaddd_xmm_xmm_m128: { avx }
flags for vphaddd_xmm_xmm_xmm: { avx }
flags for vphaddd_ymm_ymm_m256: { avx2 }
flags for vphaddd_ymm_ymm_ymm: { avx2 }
flags for vphaddsw_xmm_xmm_m128: { avx }
flags for vphaddsw_xmm_xmm_xmm: { avx }
flags for vphaddsw_ymm_ymm_m256: { avx2 }
flags for vphaddsw_ymm_ymm_ymm: { avx2 }
flags for vphaddw_xmm_xmm_m128: { avx }
flags for vphaddw_xmm_xmm_xmm: { avx }
flags for vphaddw_ymm_ymm_m256: { avx2 }
flags for vphaddw_ymm_ymm_ymm: { avx2 }
flags for vphminposuw_xmm_m128: { avx }
flags for vphminposuw_xmm_xmm: { avx }
flags for vphsubd_xmm_xmm_m128: { avx }
flags for vphsubd_xmm_xmm_xmm: { avx }
flags for vphsubd_ymm_ymm_m256: { avx2 }
flags for vphsubd_ymm_ymm_ymm: { avx2 }
flags for vphsubsw_xmm_xmm_m128: { avx }
flags for vphsubsw_xmm_xmm_xmm: { avx }
flags for vphsubsw_ymm_ymm_m256: { avx2 }
flags for vphsubsw_ymm_ymm_ymm: { avx2 }
flags for vphsubw_xmm_xmm_m128: { avx }
flags for vphsubw_xmm_xmm_xmm: { avx }
flags for vphsubw_ymm_ymm_m256: { avx2 }
flags for vphsubw_ymm_ymm_ymm: { avx2 }
flags for vpinsrb_xmm_xmm_m8_imm8: { avx }
flags for vpinsrb_xmm_xmm_r32_imm8: { avx }
flags for vpinsrd_xmm_xmm_m32_imm8: { avx }
flags for vpinsrd_xmm_xmm_r32_imm8: { avx }
flags for vpinsrq_xmm_xmm_m64_imm8: { avx }
flags for vpinsrq_xmm_xmm_r64_imm8: { avx }
flags for vpinsrw_xmm_xmm_m16_imm8: { avx }
flags for vpinsrw_xmm_xmm_r32_imm8: { avx }
flags for vpmaddubsw_xmm_xmm_m128: { avx }
flags for vpmaddubsw_xmm_xmm_xmm: { avx }
flags for vpmaddubsw_ymm_ymm_m256: { avx2 }
flags for vpmaddubsw_ymm_ymm_ymm: { avx2 }
flags for vpmaddwd_xmm_xmm_m128: { avx }
flags for vpmaddwd_xmm_xmm_xmm: { avx }
flags for vpmaddwd_ymm_ymm_m256: { avx2 }
flags for vpmaddwd_ymm_ymm_ymm: { avx2 }
flags for vpmaskmovd_m128_xmm_xmm: { avx2 }
flags for vpmaskmovd_m256_ymm_ymm: { avx2 }
flags for vpmaskmovd_xmm_xmm_m128: { avx2 }
flags for vpmaskmovd_ymm_ymm_m256: { avx2 }
flags for vpmaskmovq_m128_xmm_xmm: { avx2 }
flags for vpmaskmovq_m256_ymm_ymm: { avx2 }
flags for vpmaskmovq_xmm_xmm_m128: { avx2 }
flags for vpmaskmovq_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_xmm_xmm_m128: { avx }
flags for vpmaxsb_xmm_xmm_xmm: { avx }
flags for vpmaxsb_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_ymm_ymm_ymm: { avx2 }
flags for vpmaxsd_xmm_xmm_m128: { avx }
flags for vpmaxsd_xmm_xmm_xmm: { avx }
flags for vpmaxsd_ymm_ymm_m256: { avx2 }
flags for vpmaxsd_ymm_ymm_ymm: { avx2 }
flags for vpmaxsw_xmm_xmm_m128: { avx }
flags for vpmaxsw_xmm_xmm_xmm: { avx }
flags for vpmaxsw_ymm_ymm_m256: { avx2 }
flags for vpmaxsw_ymm_ymm_ymm: { avx2 }
flags for vpmaxub_xmm_xmm_m128: { avx }
flags for vpmaxub_xmm_xmm_xmm: { avx }
flags for vpmaxub_ymm_ymm_m256: { avx2 }
flags for vpmaxub_ymm_ymm_ymm: { avx2 }
flags for vpmaxud_xmm_xmm_m128: { avx }
flags for vpmaxud_xmm_xmm_xmm: { avx }
flags for vpmaxud_ymm_ymm_m256: { avx2 }
flags for vpmaxud_ymm_ymm_ymm: { avx2 }
flags for vpmaxuw_xmm_xmm_m128: { avx }
flags for vpmaxuw_xmm_xmm_xmm: { avx }
flags for vpmaxuw_ymm_ymm_m256: { avx2 }
flags for vpmaxuw_ymm_ymm_ymm: { avx2 }
flags for vpminsb_xmm_xmm_m128: { avx }
flags for vpminsb_xmm_xmm_xmm: { avx }
flags for vpminsb_ymm_ymm_m256: { avx2 }
flags for vpminsb_ymm_ymm_ymm: { avx2 }
flags for vpminsd_xmm_xmm_m128: { avx }
flags for vpminsd_xmm_xmm_xmm: { avx }
flags for vpminsd_ymm_ymm_m256: { avx2 }
flags for vpminsd_ymm_ymm_ymm: { avx2 }
flags for vpminsw_xmm_xmm_m128: { avx }
flags for vpminsw_xmm_xmm_xmm: { avx }
flags for vpminub_xmm_xmm_m128: { avx }
flags for vpminub_xmm_xmm_xmm: { avx }
flags for vpminub_ymm_ymm_m256: { avx2 }
flags for vpminub_ymm_ymm_ymm: { avx2 }
flags for vpminud_xmm_xmm_m128: { avx }
flags for vpminud_xmm_xmm_xmm: { avx }
flags for vpminud_ymm_ymm_m256: { avx2 }
flags for vpminud_ymm_ymm_ymm: { avx2 }
flags for vpminuw_xmm_xmm_m128: { avx }
flags for vpminuw_xmm_xmm_xmm: { avx }
flags for vpminuw_ymm_ymm_m256: { avx2 }
flags for vpminuw_ymm_ymm_ymm: { avx2 }
flags for vpmovmskb_r32_xmm: { avx }
flags for vpmovmskb_r32_ymm: { avx2 }
flags for vpmovmskb_r64_xmm: { avx }
flags for vpmovmskb_r64_ymm: { avx2 }
flags for vpmovsxbd_xmm_m32: { avx }
flags for vpmovsxbd_xmm_xmm: { avx }
flags for vpmovsxbd_ymm_m64: { avx2 }
flags for vpmovsxbd_ymm_xmm: { avx2 }
flags for vpmovsxbq_xmm_m16: { avx }
flags for vpmovsxbq_xmm_xmm: { avx }
flags for vpmovsxbq_ymm_m32: { avx2 }
flags for vpmovsxbq_ymm_xmm: { avx2 }
flags for vpmovsxbw_xmm_m64: { avx }
flags for vpmovsxbw_xmm_xmm: { avx }
flags for vpmovsxbw_ymm_m128: { avx2 }
flags for vpmovsxbw_ymm_xmm: { avx2 }
flags for vpmovsxdq_xmm_m64: { avx }
flags for vpmovsxdq_xmm_xmm: { avx }
flags for vpmovsxdq_ymm_m128: { avx2 }
flags for vpmovsxdq_ymm_xmm: { avx2 }
flags for vpmovsxwd_xmm_m64: { avx }
flags for vpmovsxwd_xmm_xmm: { avx }
flags for vpmovsxwd_ymm_m128: { avx2 }
flags for vpmovsxwd_ymm_xmm: { avx2 }
flags for vpmovsxwq_xmm_m32: { avx }
flags for vpmovsxwq_xmm_xmm: { avx }
flags for vpmovsxwq_ymm_m64: { avx2 }
flags for vpmovsxwq_ymm_xmm: { avx2 }
flags for vpmovzxbd_xmm_m32: { avx }
flags for vpmovzxbd_xmm_xmm: { avx }
flags for vpmovzxbd_ymm_m64: { avx2 }
flags for vpmovzxbd_ymm_xmm: { avx2 }
flags for vpmovzxbq_xmm_m16: { avx }
flags for vpmovzxbq_xmm_xmm: { avx }
flags for vpmovzxbq_ymm_m32: { avx2 }
flags for vpmovzxbq_ymm_xmm: { avx2 }
flags for vpmovzxbw_xmm_m64: { avx }
flags for vpmovzxbw_xmm_xmm: { avx }
flags for vpmovzxbw_ymm_m128: { avx2 }
flags for vpmovzxbw_ymm_xmm: { avx2 }
flags for vpmovzxdq_xmm_m64: { avx }
flags for vpmovzxdq_xmm_xmm: { avx }
flags for vpmovzxdq_ymm_m128: { avx2 }
flags for vpmovzxdq_ymm_xmm: { avx2 }
flags for vpmovzxwd_xmm_m64: { avx }
flags for vpmovzxwd_xmm_xmm: { avx }
flags for vpmovzxwd_ymm_m128: { avx2 }
flags for vpmovzxwd_ymm_xmm: { avx2 }
flags for vpmovzxwq_xmm_m32: { avx }
flags for vpmovzxwq_xmm_xmm: { avx }
flags for vpmovzxwq_ymm_m64: { avx2 }
flags for vpmovzxwq_ymm_xmm: { avx2 }
flags for vpmuldq_xmm_xmm_m128: { avx }
flags for vpmuldq_xmm_xmm_xmm: { avx }
flags for vpmuldq_ymm_ymm_m256: { avx2 }
flags for vpmuldq_ymm_ymm_ymm: { avx2 }
flags for vpmulhrsw_xmm_xmm_m128: { avx }
flags for vpmulhrsw_xmm_xmm_xmm: { avx }
flags for vpmulhrsw_ymm_ymm_m256: { avx2 }
flags for vpmulhrsw_ymm_ymm_ymm: { avx2 }
flags for vpmulhuw_xmm_xmm_m128: { avx }
flags for vpmulhuw_xmm_xmm_xmm: { avx }
flags for vpmulhuw_ymm_ymm_m256: { avx2 }
flags for vpmulhuw_ymm_ymm_ymm: { avx2 }
flags for vpmulhw_xmm_xmm_m128: { avx }
flags for vpmulhw_xmm_xmm_xmm: { avx }
flags for vpmulhw_ymm_ymm_m256: { avx2 }
flags for vpmulhw_ymm_ymm_ymm: { avx2 }
flags for vpmulld_xmm_xmm_m128: { avx }
flags for vpmulld_xmm_xmm_xmm: { avx }
flags for vpmulld_ymm_ymm_m256: { avx2 }
flags for vpmulld_ymm_ymm_ymm: { avx2 }
flags for vpmullw_xmm_xmm_m128: { avx }
flags for vpmullw_xmm_xmm_xmm: { avx }
flags for vpmullw_ymm_ymm_m256: { avx2 }
flags for vpmullw_ymm_ymm_ymm: { avx2 }
flags for vpmuludq_xmm_xmm_m128: { avx }
flags for vpmuludq_xmm_xmm_xmm: { avx }
flags for vpmuludq_ymm_ymm_m256: { avx2 }
flags for vpmuludq_ymm_ymm_ymm: { avx2 }
flags for vpor_xmm_xmm_m128: { avx }
flags for vpor_xmm_xmm_xmm: { avx }
flags for vpor_ymm_ymm_m256: { avx2 }
flags for vpor_ymm_ymm_ymm: { avx2 }
flags for vpsadbw_xmm_xmm_m128: { avx }
flags for vpsadbw_xmm_xmm_xmm: { avx }
flags for vpsadbw_ymm_ymm_m256: { avx2 }
flags for vpsadbw_ymm_ymm_ymm: { avx2 }
flags for vpshufb_xmm_xmm_m128: { avx }
flags for vpshufb_xmm_xmm_xmm: { avx }
flags for vpshufb_ymm_ymm_m256: { avx2 }
flags for vpshufb_ymm_ymm_ymm: { avx2 }
flags for vpshufd_xmm_m128_imm8: { avx }
flags for vpshufd_xmm_xmm_imm8: { avx }
flags for vpshufd_ymm_m256_imm8: { avx2 }
flags for vpshufd_ymm_ymm_imm8: { avx2 }
flags for vpshufhw_xmm_m128_imm8: { avx }
flags for vpshufhw_xmm_xmm_imm8: { avx }
flags for vpshufhw_ymm_m256_imm8: { avx2 }
flags for vpshufhw_ymm_ymm_imm8: { avx2 }
flags for vpshuflw_xmm_m128_imm8: { avx }
flags for vpshuflw_xmm_xmm_imm8: { avx }
flags for vpshuflw_ymm_m256_imm8: { avx2 }
flags for vpshuflw_ymm_ymm_imm8: { avx2 }
flags for vpsignb_xmm_xmm_m128: { avx }
flags for vpsignb_xmm_xmm_xmm: { avx }
flags for vpsignd_xmm_xmm_m128: { avx }
flags for vpsignd_xmm_xmm_xmm: { avx }
flags for vpsignw_xmm_xmm_m128: { avx }
flags for vpsignw_xmm_xmm_xmm: { avx }
flags for vpslld_xmm_xmm_imm8: { avx }
flags for vpslld_xmm_xmm_m128: { avx }
flags for vpslld_xmm_xmm_xmm: { avx }
flags for vpslld_ymm_ymm_imm8: { avx2 }
flags for vpslld_ymm_ymm_m128: { avx2 }
flags for vpslld_ymm_ymm_xmm: { avx2 }
flags for vpslldq_xmm_xmm_imm8: { avx }
flags for vpslldq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_xmm_xmm_imm8: { avx }
flags for vpsllq_xmm_xmm_m128: { avx }
flags for vpsllq_xmm_xmm_xmm: { avx }
flags for vpsllq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_ymm_ymm_m128: { avx2 }
flags for vpsllq_ymm_ymm_xmm: { avx2 }
flags for vpsllvd_xmm_xmm_m128: { avx2 }
flags for vpsllvd_xmm_xmm_xmm: { avx2 }
flags for vpsllvd_ymm_ymm_m256: { avx2 }
flags for vpsllvd_ymm_ymm_ymm: { avx2 }
flags for vpsllvq_xmm_xmm_m128: { avx2 }
flags for vpsllvq_xmm_xmm_xmm: { avx2 }
flags for vpsllvq_ymm_ymm_m256: { avx2 }
flags for vpsllvq_ymm_ymm_ymm: { avx2 }
flags for vpsllw_xmm_xmm_imm8: { avx }
flags for vpsllw_xmm_xmm_m128: { avx }
flags for vpsllw_xmm_xmm_xmm: { avx }
flags for vpsllw_ymm_ymm_imm8: { avx2 }
flags for vpsllw_ymm_ymm_m128: { avx2 }
flags for vpsllw_ymm_ymm_xmm: { avx2 }
flags for vpsrad_xmm_xmm_imm8: { avx }
flags for vpsrad_xmm_xmm_m128: { avx }
flags for vpsrad_xmm_xmm_xmm: { avx }
flags for vpsrad_ymm_ymm_imm8: { avx2 }
flags for vpsrad_ymm_ymm_m128: { avx2 }
flags for vpsrad_ymm_ymm_xmm: { avx2 }
flags for vpsravd_xmm_xmm_m128: { avx2 }
flags for vpsravd_xmm_xmm_xmm: { avx2 }
flags for vpsravd_ymm_ymm_m256: { avx2 }
flags for vpsravd_ymm_ymm_ymm: { avx2 }
flags for vpsraw_xmm_xmm_imm8: { avx }
flags for vpsraw_xmm_xmm_m128: { avx }
flags for vpsraw_xmm_xmm_xmm: { avx }
flags for vpsraw_ymm_ymm_imm8: { avx2 }
flags for vpsraw_ymm_ymm_m128: { avx2 }
flags for vpsraw_ymm_ymm_xmm: { avx2 }
flags for vpsrld_xmm_xmm_imm8: { avx }
flags for vpsrld_xmm_xmm_m128: { avx }
flags for vpsrld_xmm_xmm_xmm: { avx }
flags for vpsrld_ymm_ymm_imm8: { avx2 }
flags for vpsrld_ymm_ymm_m128: { avx2 }
flags for vpsrld_ymm_ymm_xmm: { avx2 }
flags for vpsrldq_xmm_xmm_imm8: { avx }
flags for vpsrldq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_xmm_xmm_imm8: { avx }
flags for vpsrlq_xmm_xmm_m128: { avx }
flags for vpsrlq_xmm_xmm_xmm: { avx }
flags for vpsrlq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_ymm_ymm_m128: { avx2 }
flags for vpsrlq_ymm_ymm_xmm: { avx2 }
flags for vpsrlvd_xmm_xmm_m128: { avx2 }
flags for vpsrlvd_xmm_xmm_xmm: { avx2 }
flags for vpsrlvd_ymm_ymm_m256: { avx2 }
flags for vpsrlvd_ymm_ymm_ymm: { avx2 }
flags for vpsrlvq_xmm_xmm_m128: { avx2 }
flags for vpsrlvq_xmm_xmm_xmm: { avx2 }
flags for vpsrlvq_ymm_ymm_m256: { avx2 }
flags for vpsrlvq_ymm_ymm_ymm: { avx2 }
flags for vpsrlw_xmm_xmm_imm8: { avx }
flags for vpsrlw_xmm_xmm_m128: { avx }
flags for vpsrlw_xmm_xmm_xmm: { avx }
flags for vpsrlw_ymm_ymm_imm8: { avx2 }
flags for vpsrlw_ymm_ymm_m128: { avx2 }
flags for vpsrlw_ymm_ymm_xmm: { avx2 }
flags for vpsubb_xmm_xmm_m128: { avx }
flags for vpsubb_xmm_xmm_xmm: { avx }
flags for vpsubb_ymm_ymm_m256: { avx2 }
flags for vpsubb_ymm_ymm_ymm: { avx2 }
flags for vpsubd_xmm_xmm_m128: { avx }
flags for vpsubd_xmm_xmm_xmm: { avx }
flags for vpsubd_ymm_ymm_m256: { avx2 }
flags for vpsubd_ymm_ymm_ymm: { avx2 }
flags for vpsubq_xmm_xmm_m128: { avx }
flags for vpsubq_xmm_xmm_xmm: { avx }
flags for vpsubq_ymm_ymm_m256: { avx2 }
flags for vpsubq_ymm_ymm_ymm: { avx2 }
flags for vpsubsb_xmm_xmm_m128: { avx }
flags for vpsubsb_xmm_xmm_xmm: { avx }
flags for vpsubsb_ymm_ymm_m256: { avx2 }
flags for vpsubsb_ymm_ymm_ymm: { avx2 }
flags for vpsubsw_xmm_xmm_m128: { avx }
flags for vpsubsw_xmm_xmm_xmm: { avx }
flags for vpsubsw_ymm_ymm_m256: { avx2 }
flags for vpsubsw_ymm_ymm_ymm: { avx2 }
flags for vpsubusb_xmm_xmm_m128: { avx }
flags for vpsubusb_xmm_xmm_xmm: { avx }
flags for vpsubusb_ymm_ymm_m256: { avx2 }
flags for vpsubusb_ymm_ymm_ymm: { avx2 }
flags for vpsubusw_xmm_xmm_m128: { avx }
flags for vpsubusw_xmm_xmm_xmm: { avx }
flags for vpsubusw_ymm_ymm_m256: { avx2 }
flags for vpsubusw_ymm_ymm_ymm: { avx2 }
flags for vpsubw_xmm_xmm_m128: { avx }
flags for vpsubw_xmm_xmm_xmm: { avx }
flags for vpsubw_ymm_ymm_m256: { avx2 }
flags for vpsubw_ymm_ymm_ymm: { avx2 }
flags for vptest_xmm_m128: { avx }
flags for vptest_xmm_xmm: { avx }
flags for vptest_ymm_m256: { avx }
flags for vptest_ymm_ymm: { avx }
flags for vpunpckhbw_xmm_xmm_m128: { avx }
flags for vpunpckhbw_xmm_xmm_xmm: { avx }
flags for vpunpckhbw_ymm_ymm_m256: { avx2 }
flags for vpunpckhbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckhdq_xmm_xmm_m128: { avx }
flags for vpunpckhdq_xmm_xmm_xmm: { avx }
flags for vpunpckhdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhqdq_xmm_xmm_m128: { avx }
flags for vpunpckhqdq_xmm_xmm_xmm: { avx }
flags for vpunpckhqdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhwd_xmm_xmm_m128: { avx }
flags for vpunpckhwd_xmm_xmm_xmm: { avx }
flags for vpunpckhwd_ymm_ymm_m256: { avx2 }
flags for vpunpckhwd_ymm_ymm_ymm: { avx2 }
flags for vpunpcklbw_xmm_xmm_m128: { avx }
flags for vpunpcklbw_xmm_xmm_xmm: { avx }
flags for vpunpcklbw_ymm_ymm_m256: { avx2 }
flags for vpunpcklbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckldq_xmm_xmm_m128: { avx }
flags for vpunpckldq_xmm_xmm_xmm: { avx }
flags for vpunpckldq_ymm_ymm_m256: { avx2 }
flags for vpunpckldq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklqdq_xmm_xmm_m128: { avx }
flags for vpunpcklqdq_xmm_xmm_xmm: { avx }
flags for vpunpcklqdq_ymm_ymm_m256: { avx2 }
flags for vpunpcklqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklwd_xmm_xmm_m128: { avx }
flags for vpunpcklwd_xmm_xmm_xmm: { avx }
flags for vpunpcklwd_ymm_ymm_m256: { avx2 }
flags for vpunpcklwd_ymm_ymm_ymm: { avx2 }
flags for vpxor_xmm_xmm_m128: { avx }
flags for vpxor_xmm_xmm_xmm: { avx }
flags for vpxor_ymm_ymm_m256: { avx2 }
flags for vpxor_ymm_ymm_ymm: { avx2 }
flags for vrcpps_xmm_m128: { avx }
flags for vrcpps_xmm_xmm: { avx }
flags for vrcpps_ymm_m256: { avx }
flags for vrcpps_ymm_ymm: { avx }
flags for vrcpss_xmm_xmm_m32: { avx }
flags for vrcpss_xmm_xmm_xmm: { avx }
flags for vroundpd_xmm_m128_imm8: { avx }
flags for vroundpd_xmm_xmm_imm8: { avx }
flags for vroundpd_ymm_m256_imm8: { avx }
flags for vroundpd_ymm_ymm_imm8: { avx }
flags for vroundps_xmm_m128_imm8: { avx }
flags for vroundps_xmm_xmm_imm8: { avx }
flags for vroundps_ymm_m256_imm8: { avx }
flags for vroundps_ymm_ymm_imm8: { avx }
flags for vroundsd_xmm_xmm_m64_imm8: { avx }
flags for vroundsd_xmm_xmm_xmm_imm8: { avx }
flags for vroundss_xmm_xmm_m32_imm8: { avx }
flags for vroundss_xmm_xmm_xmm_imm8: { avx }
flags for vrsqrtps_xmm_m128: { avx }
flags for vrsqrtps_xmm_xmm: { avx }
flags for vrsqrtps_ymm_m256: { avx }
flags for vrsqrtps_ymm_ymm: { avx }
flags for vrsqrtss_xmm_xmm_m32: { avx }
flags for vrsqrtss_xmm_xmm_xmm: { avx }
flags for vshufpd_xmm_xmm_m128_imm8: { avx }
flags for vshufpd_xmm_xmm_xmm_imm8: { avx }
flags for vshufpd_ymm_ymm_m256_imm8: { avx }
flags for vshufpd_ymm_ymm_ymm_imm8: { avx }
flags for vshufps_xmm_xmm_m128_imm8: { avx }
flags for vshufps_xmm_xmm_xmm_imm8: { avx }
flags for vshufps_ymm_ymm_m256_imm8: { avx }
flags for vshufps_ymm_ymm_ymm_imm8: { avx }
flags for vsqrtpd_xmm_m128: { avx }
flags for vsqrtpd_xmm_xmm: { avx }
flags for vsqrtpd_ymm_m256: { avx }
flags for vsqrtpd_ymm_ymm: { avx }
flags for vsqrtps_xmm_m128: { avx }
flags for vsqrtps_xmm_xmm: { avx }
flags for vsqrtps_ymm_m256: { avx }
flags for vsqrtps_ymm_ymm: { avx }
flags for vsqrtsd_xmm_xmm_m64: { avx }
flags for vsqrtsd_xmm_xmm_xmm: { avx }
flags for vsqrtss_xmm_xmm_m32: { avx }
flags for vsqrtss_xmm_xmm_xmm: { avx }
flags for vsubpd_xmm_xmm_m128: { avx }
flags for vsubpd_xmm_xmm_xmm: { avx }
flags for vsubpd_ymm_ymm_m256: { avx }
flags for vsubpd_ymm_ymm_ymm: { avx }
flags for vsubps_xmm_xmm_m128: { avx }
flags for vsubps_xmm_xmm_xmm: { avx }
flags for vsubps_ymm_ymm_m256: { avx }
flags for vsubps_ymm_ymm_ymm: { avx }
flags for vsubsd_xmm_xmm_m64: { avx }
flags for vsubsd_xmm_xmm_xmm: { avx }
flags for vsubss_xmm_xmm_m32: { avx }
flags for vsubss_xmm_xmm_xmm: { avx }
flags for vtestpd_xmm_m128: { avx }
flags for vtestpd_xmm_xmm: { avx }
flags for vtestpd_ymm_m256: { avx }
flags for vtestpd_ymm_ymm: { avx }
flags for vtestps_xmm_m128: { avx }
flags for vtestps_xmm_xmm: { avx }
flags for vtestps_ymm_m256: { avx }
flags for vtestps_ymm_ymm: { avx }
flags for vucomisd_xmm_m64: { avx }
flags for vucomisd_xmm_xmm: { avx }
flags for vucomiss_xmm_m32: { avx }
flags for vucomiss_xmm_xmm: { avx }
flags for vunpckhpd_xmm_xmm_m128: { avx }
flags for vunpckhpd_xmm_xmm_xmm: { avx }
flags for vunpckhpd_ymm_ymm_m256: { avx }
flags for vunpckhpd_ymm_ymm_ymm: { avx }
flags for vunpckhps_xmm_xmm_m128: { avx }
flags for vunpckhps_xmm_xmm_xmm: { avx }
flags for vunpckhps_ymm_ymm_m256: { avx }
flags for vunpckhps_ymm_ymm_ymm: { avx }
flags for vunpcklpd_xmm_xmm_m128: { avx }
flags for vunpcklpd_xmm_xmm_xmm: { avx }
flags for vunpcklpd_ymm_ymm_m256: { avx }
flags for vunpcklpd_ymm_ymm_ymm: { avx }
flags for vunpcklps_xmm_xmm_m128: { avx }
flags for vunpcklps_xmm_xmm_xmm: { avx }
flags for vunpcklps_ymm_ymm_m256: { avx }
flags for vunpcklps_ymm_ymm_ymm: { avx }
flags for vxorpd_xmm_xmm_m128: { avx }
flags for vxorpd_xmm_xmm_xmm: { avx }
flags for vxorpd_ymm_ymm_m256: { avx }
flags for vxorpd_ymm_ymm_ymm: { avx }
flags for vxorps_xmm_xmm_m128: { avx }
flags for vxorps_xmm_xmm_xmm: { avx }
flags for vxorps_ymm_ymm_m256: { avx }
flags for vxorps_ymm_ymm_ymm: { avx }
flags for vzeroall: { avx }
flags for vzeroupper: { avx }
flags for wait: { fpu }
flags for xabort_imm8: { rtm }
flags for xacquire: { hle }
flags for xbegin_label: { rtm }
flags for xend: { rtm }
flags for xlat_m8: { }
flags for xlatb: { }
flags for xorb_al_imm8: { }
flags for xorw_ax_imm16: { }
flags for xorl_eax_imm32: { }
flags for xorw_m16_imm16: { }
flags for xorw_m16_imm8: { }
flags for xorw_m16_r16: { }
flags for xorl_m32_imm32: { }
flags for xorl_m32_imm8: { }
flags for xorl_m32_r32: { }
flags for xorq_m64_imm32: { }
flags for xorq_m64_imm8: { }
flags for xorq_m64_r64: { }
flags for xorb_m8_imm8: { }
flags for xorb_m8_r8: { }
flags for xorb_m8_rh: { }
flags for xorw_r16_imm16: { }
flags for xorw_r16_imm8: { }
flags for xorw_r16_m16: { }
flags for xorw_r16_r16: { }
flags for xorw_r16_r16_1: { }
flags for xorl_r32_imm32: { }
flags for xorl_r32_imm8: { }
flags for xorl_r32_m32: { }
flags for xorl_r32_r32: { }
flags for xorl_r32_r32_1: { }
flags for xorq_r64_imm32: { }
flags for xorq_r64_imm8: { }
flags for xorq_r64_m64: { }
flags for xorq_r64_r64: { }
flags for xorq_r64_r64_1: { }
flags for xorb_r8_imm8: { }
flags for xorb_r8_m8: { }
flags for xorb_r8_r8: { }
flags for xorb_r8_r8_1: { }
flags for xorb_r8_rh: { }
flags for xorb_r8_rh_1: { }
flags for xorq_rax_imm32: { }
flags for xorb_rh_imm8: { }
flags for xorb_rh_m8: { }
flags for xorb_rh_r8: { }
flags for xorb_rh_r8_1: { }
flags for xorb_rh_rh: { }
flags for xorb_rh_rh_1: { }
flags for xorpd_xmm_m128: { sse2 }
flags for xorpd_xmm_xmm: { sse2 }
flags for xorps_xmm_m128: { sse }
flags for xorps_xmm_xmm: { sse }
flags for xrelease: { hle }
flags for xtest: { rtm }
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Computing reference outputs for 20 testcases
Running search (timeout is 500000 iterations):

Progress Update: 

Lowest Cost Discovered (166)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  xorl %esi, %edi             #  3     0x4   2      OPC=xorl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orl %eax, %edi              #  6     0xa   2      OPC=orl_r32_r32            orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  andl $0x3, %edi             #  7     0xc   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  jne .L_126860               #  8     0xf   6      OPC=jne_label_1            jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  movl %esi, %esi             #  9     0x15  2      OPC=movl_r32_r32           movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  10    0x17  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl %r8d, %esi             #  11    0x1b  3      OPC=movl_r32_r32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %edi  #  12    0x1e  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  notl %esi                   #  13    0x25  2      OPC=notl_r32               notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x27  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x28  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  andl $0x80808080, %esi      #  16    0x29  6      OPC=andl_r32_imm32         jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl %edi, %esi             #  17    0x2f  2      OPC=andl_r32_r32           nop                         #  17    0x37  1      OPC=nop                  
  jne .L_126860               #  18    0x31  6      OPC=jne_label_1            nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x37  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x38  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x39  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
.L_126820:                    #        0x3e  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  movl %ecx, %ecx             #  26    0x3e  2      OPC=movl_r32_r32           addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  27    0x40  4      OPC=movl_m32_r32           movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  28    0x44  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  movl %edx, %edx             #  29    0x47  2      OPC=movl_r32_r32           addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  30    0x49  3      OPC=addl_r32_imm8          movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  31    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  32    0x50  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rsi  #  33    0x53  7      OPC=leaq_r64_m64           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  notl %r9d                   #  34    0x5a  3      OPC=notl_r32               notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  andl %esi, %r9d             #  35    0x5d  3      OPC=andl_r32_r32           nop                         #  35    0x5f  1      OPC=nop                  
  andl $0x80808080, %r9d      #  36    0x60  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  37    0x67  6      OPC=je_label_1             andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  38    0x6d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  39    0x6e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
.L_126860:                    #        0x7d  0      OPC=<label>                nop                         #  54    0x7f  1      OPC=nop                  
  orl %edx, %edx              #  54    0x7d  2      OPC=orl_r32_r32_1        .L_126860:                    #        0x80  0      OPC=<label>              
  movzbl (%r15,%rdx,1), %esi  #  55    0x7f  5      OPC=movzbl_r32_m8          movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  56    0x84  3      OPC=addl_r32_imm8          movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %ecx, %ecx             #  57    0x87  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  58    0x89  4      OPC=movb_m8_r8             movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  59    0x8d  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  60    0x90  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  jne .L_126860               #  61    0x93  6      OPC=jne_label_1            testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  62    0x99  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  63    0x9a  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9b  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  popq %r11                   #  69    0xa0  2      OPC=popq_r64_1             andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  andl $0xe0, %r11d           #  70    0xa2  4      OPC=andl_r32_imm8          addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  addq %r15, %r11             #  71    0xa6  3      OPC=addq_r64_r64           jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  jmpq %r11                   #  72    0xa9  3      OPC=jmpq_r64                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (165)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  xorl %esi, %edi             #  3     0x4   2      OPC=xorl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x6   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movq %rax, %rcx             #  5     0x7   3      OPC=movq_r64_r64           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orl %eax, %edi              #  6     0xa   2      OPC=orl_r32_r32            orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  andl $0x3, %edi             #  9     0xe   3      OPC=andl_r32_imm8          movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  jne .L_126860               #  10    0x11  6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl %esi, %esi             #  11    0x17  2      OPC=movl_r32_r32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x19  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl %r8d, %esi             #  13    0x1d  3      OPC=movl_r32_r32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  leal -0x1010101(%r8), %edi  #  14    0x20  7      OPC=leal_r32_m16           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  notl %esi                   #  15    0x27  2      OPC=notl_r32               andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x29  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x2a  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  andl $0x80808080, %esi      #  18    0x2b  6      OPC=andl_r32_imm32         nop                         #  18    0x38  1      OPC=nop                  
  andl %edi, %esi             #  19    0x31  2      OPC=andl_r32_r32           nop                         #  19    0x39  1      OPC=nop                  
  jne .L_126860               #  20    0x33  6      OPC=jne_label_1            nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x39  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3a  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x3f  0      OPC=<label>                addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  27    0x3f  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  28    0x41  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  29    0x45  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nopl %eax                   #  30    0x48  3      OPC=nopl_r32               movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  addl $0x4, %edx             #  31    0x4b  3      OPC=addl_r32_imm8          movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl (%r15,%rdx,1), %r8d    #  32    0x4e  4      OPC=movl_r32_m32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  33    0x52  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  leaq -0x1010101(%r8), %rsi  #  34    0x55  7      OPC=leaq_r64_m64           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  notl %r9d                   #  35    0x5c  3      OPC=notl_r32               nop                         #  35    0x5f  1      OPC=nop                  
  andl %esi, %r9d             #  36    0x5f  3      OPC=andl_r32_r32           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  andl $0x80808080, %r9d      #  37    0x62  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  je .L_126820                #  38    0x69  6      OPC=je_label_1             je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  39    0x6f  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x70  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x71  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x72  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x73  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x74  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x75  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x76  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x77  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x78  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x79  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x7a  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7b  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7c  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7d  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
.L_126860:                    #        0x7e  0      OPC=<label>                nop                         #  54    0x7f  1      OPC=nop                  
  orl %edx, %edx              #  54    0x7e  2      OPC=orl_r32_r32_1        .L_126860:                    #        0x80  0      OPC=<label>              
  movzbl (%r15,%rdx,1), %esi  #  55    0x80  5      OPC=movzbl_r32_m8          movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  56    0x85  3      OPC=addl_r32_imm8          movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %ecx, %ecx             #  57    0x88  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  58    0x8a  4      OPC=movb_m8_r8             movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  59    0x8e  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  60    0x91  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  jne .L_126860               #  61    0x94  6      OPC=jne_label_1            testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  62    0x9a  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  63    0x9b  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9c  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9d  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9e  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9f  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  popq %r11                   #  68    0xa0  2      OPC=popq_r64_1             popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  69    0xa2  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  70    0xa6  3      OPC=addq_r64_r64           addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  jmpq %r11                   #  71    0xa9  3      OPC=jmpq_r64               jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (164)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx             #  1     0     2      OPC=movl_r32_r32           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32           movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  addl %eax, %edi             #  3     0x4   2      OPC=addl_r32_r32_1         movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x9   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  movb %sil, %dil             #  7     0xa   3      OPC=movb_r8_r8_1           andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  nop                         #  12    0x18  1      OPC=nop                    leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movq %rdx, %rsi             #  13    0x19  3      OPC=movq_r64_r64           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl (%r15,%rsi,1), %r8d    #  14    0x1c  4      OPC=movl_r32_m32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x20  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  leaw -0x1010101(%r8), %di   #  16    0x21  8      OPC=leaw_r16_m64           jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  movl %r8d, %esi             #  17    0x29  3      OPC=movl_r32_r32           nop                         #  17    0x37  1      OPC=nop                  
  notl %esi                   #  18    0x2c  2      OPC=notl_r32               nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x2e  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  andl %edi, %esi             #  20    0x34  2      OPC=andl_r32_r32           nop                         #  20    0x3a  1      OPC=nop                  
  jne .L_126860               #  21    0x36  6      OPC=jne_label_1            nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  movl %ecx, %ecx             #  26    0x40  2      OPC=movl_r32_r32           addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  27    0x42  4      OPC=movl_m32_r32           movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nopl %eax                   #  28    0x46  3      OPC=nopl_r32               movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  30    0x4c  3      OPC=addl_r32_imm8          movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  31    0x4f  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  32    0x53  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  notl %r9d                   #  33    0x56  3      OPC=notl_r32               leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  leal -0x1010101(%r8), %esi  #  34    0x59  7      OPC=leal_r32_m16           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  andl %esi, %r9d             #  35    0x60  3      OPC=andl_r32_r32           nop                         #  35    0x5f  1      OPC=nop                  
  andl $0x80808080, %r9d      #  36    0x63  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  37    0x6a  6      OPC=je_label_1             andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  38    0x70  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  39    0x71  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x72  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x73  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x74  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x75  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x76  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x77  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x78  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x79  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x7a  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x7b  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x7c  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7d  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7e  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7f  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>                nop                         #  54    0x7f  1      OPC=nop                  
  orl %edx, %edx              #  54    0x80  2      OPC=orl_r32_r32_1        .L_126860:                    #        0x80  0      OPC=<label>              
  movzbq (%r15,%rdx,1), %rsi  #  55    0x82  5      OPC=movzbq_r64_m8          movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  56    0x87  3      OPC=addl_r32_imm8          movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %ecx, %ecx             #  57    0x8a  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  58    0x8c  4      OPC=movb_m8_r8             movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %ecx             #  59    0x90  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  60    0x93  3      OPC=testb_r8_r8            addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  jne .L_126860               #  61    0x96  6      OPC=jne_label_1            testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  62    0x9c  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  63    0x9d  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9e  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9f  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0xa0  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  popq %r11                   #  67    0xa1  2      OPC=popq_r64_1             nop                         #  67    0xa0  1      OPC=nop                  
  andl $0xe0, %r11d           #  68    0xa3  4      OPC=andl_r32_imm8          popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  addq %r15, %r11             #  69    0xa7  3      OPC=addq_r64_r64           andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  jmpq %r11                   #  70    0xaa  3      OPC=jmpq_r64               addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
.size strcpy, .-strcpy                                                                                                                                    
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (163)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  addl %esi, %edi             #  4     0x4   2      OPC=addl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  andl $0x3, %edi             #  7     0x9   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xc   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xd   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  nop                         #  10    0xe   1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl %eax, %ecx             #  11    0xf   2      OPC=movl_r32_r32_1         movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  jne .L_126860               #  12    0x11  6      OPC=jne_label_1            leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  nop                         #  13    0x17  1      OPC=nop                    notl %esi                   #  13    0x27  2      OPC=notl_r32             
  orq %rdx, %rsi              #  14    0x18  3      OPC=orq_r64_r64            andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  15    0x1b  4      OPC=movl_r32_m32           andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x1f  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  orl %r8d, %esi              #  17    0x20  3      OPC=orl_r32_r32            nop                         #  17    0x37  1      OPC=nop                  
  notl %esi                   #  18    0x23  2      OPC=notl_r32               nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x25  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2b  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  21    0x2c  7      OPC=leal_r32_m16           nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x33  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  andl %edi, %esi             #  23    0x34  2      OPC=andl_r32_r32_1         nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x37  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  jne .L_126860               #  26    0x38  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x41  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x42  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
.L_126820:                    #        0x43  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %ecx, %ecx             #  32    0x43  2      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8          notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8          nop                         #  35    0x5f  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32_1         andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  notq %r9                    #  38    0x56  3      OPC=notq_r64               je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  leaq -0x1010101(%r8), %rsi  #  39    0x59  7      OPC=leaq_r64_m32           nop                         #  39    0x70  1      OPC=nop                  
  andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32           nop                         #  40    0x71  1      OPC=nop                  
  andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32         nop                         #  41    0x72  1      OPC=nop                  
  je .L_126820                #  42    0x6a  6      OPC=je_label_1             nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7d  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7e  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nopl %eax                   #  58    0x7f  3      OPC=nopl_r32               addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x82  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
.L_126860:                    #        0x83  0      OPC=<label>                movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  andl %edx, %edx             #  60    0x83  2      OPC=andl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movzbl (%r15,%rdx,1), %esi  #  61    0x85  5      OPC=movzbl_r32_m8          testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %edx             #  62    0x8a  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  movl %ecx, %ecx             #  63    0x8d  2      OPC=movl_r32_r32           nop                         #  63    0x9c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  64    0x8f  4      OPC=movb_m8_r8             nop                         #  64    0x9d  1      OPC=nop                  
  addl $0x1, %ecx             #  65    0x93  3      OPC=addl_r32_imm8          nop                         #  65    0x9e  1      OPC=nop                  
  testb %sil, %sil            #  66    0x96  3      OPC=testb_r8_r8            nop                         #  66    0x9f  1      OPC=nop                  
  jne .L_126860               #  67    0x99  6      OPC=jne_label_1            nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa0  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa1  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa2  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa3  1      OPC=nop                                                                                               
  nop                         #  73    0xa4  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                         #  74    0xa5  1      OPC=nop                                                                                               
  popq %r11                   #  75    0xa6  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  76    0xa8  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  77    0xac  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  78    0xaf  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (162)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  nop                         #  4     0x4   1      OPC=nop                    movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  addl %esi, %edi             #  5     0x5   2      OPC=addl_r32_r32_1         movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  6     0x7   2      OPC=movl_r32_r32           orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0x9   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xa   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xb   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  10    0xc   2      OPC=movl_r32_r32_1         movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  andl $0x3, %edi             #  11    0xe   3      OPC=andl_r32_imm8          movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  jne .L_126860               #  12    0x11  6      OPC=jne_label_1            leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  orq %rdx, %rsi              #  13    0x17  3      OPC=orq_r64_r64            notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl (%r15,%rsi,1), %r8d    #  14    0x1a  4      OPC=movl_r32_m32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x1f  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  orl %r8d, %esi              #  17    0x20  3      OPC=orl_r32_r32            nop                         #  17    0x37  1      OPC=nop                  
  notl %esi                   #  18    0x23  2      OPC=notl_r32               nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x25  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  20    0x2b  7      OPC=leal_r32_m16           nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x32  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  andl %edi, %esi             #  22    0x33  2      OPC=andl_r32_r32_1         nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x35  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x37  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  jne .L_126860               #  26    0x38  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x41  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x42  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
.L_126820:                    #        0x43  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %ecx, %ecx             #  32    0x43  2      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x45  4      OPC=movl_m32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  addl $0x4, %ecx             #  34    0x49  3      OPC=addl_r32_imm8          notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  addl $0x4, %edx             #  35    0x4c  3      OPC=addl_r32_imm8          nop                         #  35    0x5f  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  36    0x4f  4      OPC=movl_r32_m32           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  movl %r8d, %r9d             #  37    0x53  3      OPC=movl_r32_r32_1         andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  notq %r9                    #  38    0x56  3      OPC=notq_r64               je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  leaq -0x1010101(%r8), %rsi  #  39    0x59  7      OPC=leaq_r64_m32           nop                         #  39    0x70  1      OPC=nop                  
  andl %esi, %r9d             #  40    0x60  3      OPC=andl_r32_r32           nop                         #  40    0x71  1      OPC=nop                  
  andl $0x80808080, %r9d      #  41    0x63  7      OPC=andl_r32_imm32         nop                         #  41    0x72  1      OPC=nop                  
  je .L_126820                #  42    0x6a  6      OPC=je_label_1             nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7d  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7e  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nopl %eax                   #  58    0x7f  3      OPC=nopl_r32               addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x82  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
.L_126860:                    #        0x83  0      OPC=<label>                movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  andl %edx, %edx             #  60    0x83  2      OPC=andl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi  #  61    0x85  5      OPC=movzbq_r64_m8          testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %edx             #  62    0x8a  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  movl %ecx, %ecx             #  63    0x8d  2      OPC=movl_r32_r32           nop                         #  63    0x9c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  64    0x8f  4      OPC=movb_m8_r8             nop                         #  64    0x9d  1      OPC=nop                  
  addl $0x1, %ecx             #  65    0x93  3      OPC=addl_r32_imm8          nop                         #  65    0x9e  1      OPC=nop                  
  testb %sil, %sil            #  66    0x96  3      OPC=testb_r8_r8            nop                         #  66    0x9f  1      OPC=nop                  
  jne .L_126860               #  67    0x99  6      OPC=jne_label_1            nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9f  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0xa0  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa1  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa2  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa3  1      OPC=nop                                                                                               
  nop                         #  73    0xa4  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                         #  74    0xa5  1      OPC=nop                                                                                               
  nop                         #  75    0xa6  1      OPC=nop                                                                                               
  nop                         #  76    0xa7  1      OPC=nop                                                                                               
  popq %r11                   #  77    0xa8  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  78    0xaa  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  79    0xae  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  80    0xb1  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (161)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x4   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0x9   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  addl %esi, %edi             #  8     0xa   2      OPC=addl_r32_r32_1         jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  andl $0x3, %edi             #  9     0xc   3      OPC=andl_r32_imm8          movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  jne .L_126860               #  10    0xf   6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  orq %rdx, %rsi              #  11    0x15  3      OPC=orq_r64_r64            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  nop                         #  13    0x1c  1      OPC=nop                    notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1d  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  orl %r8d, %esi              #  16    0x1f  3      OPC=orl_r32_r32            jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  notl %esi                   #  17    0x22  2      OPC=notl_r32               nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x24  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x25  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  20    0x2b  7      OPC=leal_r32_m16           nop                         #  20    0x3a  1      OPC=nop                  
  andl %edi, %esi             #  21    0x32  2      OPC=andl_r32_r32_1         nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x34  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x35  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  jne .L_126860               #  25    0x37  6      OPC=jne_label_1            nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x41  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
.L_126820:                    #        0x42  0      OPC=<label>                movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %ecx, %ecx             #  31    0x42  2      OPC=movl_r32_r32_1         movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %r8d, (%r15,%rcx,1)    #  32    0x44  4      OPC=movl_m32_r32           movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  33    0x48  3      OPC=addl_r32_imm8          leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  addl $0x4, %edx             #  34    0x4b  3      OPC=addl_r32_imm8          notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl (%r15,%rdx,1), %r8d    #  35    0x4e  4      OPC=movl_r32_m32           nop                         #  35    0x5f  1      OPC=nop                  
  movl %r8d, %r9d             #  36    0x52  3      OPC=movl_r32_r32_1         andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  notq %r9                    #  37    0x55  3      OPC=notq_r64               andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  leal -0x1010101(%r8), %esi  #  38    0x58  7      OPC=leal_r32_m32           je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl %esi, %r9d             #  39    0x5f  3      OPC=andl_r32_r32_1         nop                         #  39    0x70  1      OPC=nop                  
  andl $0x80808080, %r9d      #  40    0x62  7      OPC=andl_r32_imm32         nop                         #  40    0x71  1      OPC=nop                  
  je .L_126820                #  41    0x69  6      OPC=je_label_1             nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x6f  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x70  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x71  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x72  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x73  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x74  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x75  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x76  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x77  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x78  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x79  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7a  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7b  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7c  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7d  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7e  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x7f  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x80  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x81  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
.L_126860:                    #        0x82  0      OPC=<label>                addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movl %edx, %edx             #  61    0x82  2      OPC=movl_r32_r32           testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  movzbq (%r15,%rdx,1), %rsi  #  62    0x84  5      OPC=movzbq_r64_m8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  addl $0x1, %edx             #  63    0x89  3      OPC=addl_r32_imm8          nop                         #  63    0x9c  1      OPC=nop                  
  movl %ecx, %ecx             #  64    0x8c  2      OPC=movl_r32_r32           nop                         #  64    0x9d  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  65    0x8e  4      OPC=movb_m8_r8             nop                         #  65    0x9e  1      OPC=nop                  
  addl $0x1, %ecx             #  66    0x92  3      OPC=addl_r32_imm8          nop                         #  66    0x9f  1      OPC=nop                  
  testb %sil, %sil            #  67    0x95  3      OPC=testb_r8_r8            nop                         #  67    0xa0  1      OPC=nop                  
  jne .L_126860               #  68    0x98  6      OPC=jne_label_1            popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0x9e  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0x9f  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa0  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa1  1      OPC=nop                                                                                               
  nop                         #  73    0xa2  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                         #  74    0xa3  1      OPC=nop                                                                                               
  nop                         #  75    0xa4  1      OPC=nop                                                                                               
  popq %r11                   #  76    0xa5  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  77    0xa7  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  78    0xab  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  79    0xae  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (158)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x4   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0x9   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  addl %esi, %edi             #  8     0xa   2      OPC=addl_r32_r32_1         jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  andl $0x3, %edi             #  9     0xc   3      OPC=andl_r32_imm8          movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  jne .L_126860               #  10    0xf   6      OPC=jne_label_1            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  orq %rdx, %rsi              #  11    0x15  3      OPC=orq_r64_r64            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movl (%r15,%rsi,1), %r8d    #  12    0x18  4      OPC=movl_r32_m32           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  nop                         #  13    0x1c  1      OPC=nop                    notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1d  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x1f  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  orl %r8d, %esi              #  17    0x20  3      OPC=orl_r32_r32            nop                         #  17    0x37  1      OPC=nop                  
  notl %esi                   #  18    0x23  2      OPC=notl_r32               nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x25  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  andl $0x80808080, %esi      #  20    0x26  6      OPC=andl_r32_imm32         nop                         #  20    0x3a  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  21    0x2c  7      OPC=leal_r32_m16           nop                         #  21    0x3b  1      OPC=nop                  
  andl %edi, %esi             #  22    0x33  2      OPC=andl_r32_r32_1         nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x35  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x37  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  jne .L_126860               #  26    0x38  6      OPC=jne_label_1          .L_126820:                    #        0x40  0      OPC=<label>              
  shrb %cl, %dh               #  27    0x3e  2      OPC=shrb_rh_cl             addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x40  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x42  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x43  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
.L_126820:                    #        0x44  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %ecx, %ecx             #  32    0x44  2      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  33    0x46  4      OPC=movl_m32_r32           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  addl $0x4, %ecx             #  34    0x4a  3      OPC=addl_r32_imm8          notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  addl $0x4, %edx             #  35    0x4d  3      OPC=addl_r32_imm8          nop                         #  35    0x5f  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  36    0x50  4      OPC=movl_r32_m32           andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  movl %r8d, %r9d             #  37    0x54  3      OPC=movl_r32_r32_1         andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  notq %r9                    #  38    0x57  3      OPC=notq_r64               je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  leal -0x1010101(%r8), %esi  #  39    0x5a  7      OPC=leal_r32_m32           nop                         #  39    0x70  1      OPC=nop                  
  andl %esi, %r9d             #  40    0x61  3      OPC=andl_r32_r32_1         nop                         #  40    0x71  1      OPC=nop                  
  andl $0x80808080, %r9d      #  41    0x64  7      OPC=andl_r32_imm32         nop                         #  41    0x72  1      OPC=nop                  
  je .L_126820                #  42    0x6b  6      OPC=je_label_1             nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x71  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x72  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x73  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x74  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x75  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7e  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7f  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x80  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x81  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x82  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  nop                         #  61    0x83  1      OPC=nop                    addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
.L_126860:                    #        0x84  0      OPC=<label>                testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  movl %edx, %edx             #  62    0x84  2      OPC=movl_r32_r32           jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  movzbq (%r15,%rdx,1), %rsi  #  63    0x86  5      OPC=movzbq_r64_m8          nop                         #  63    0x9c  1      OPC=nop                  
  addl $0x1, %edx             #  64    0x8b  3      OPC=addl_r32_imm8          nop                         #  64    0x9d  1      OPC=nop                  
  movl %ecx, %ecx             #  65    0x8e  2      OPC=movl_r32_r32           nop                         #  65    0x9e  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  66    0x90  4      OPC=movb_m8_r8             nop                         #  66    0x9f  1      OPC=nop                  
  addl $0x1, %ecx             #  67    0x94  3      OPC=addl_r32_imm8          nop                         #  67    0xa0  1      OPC=nop                  
  testb %sil, %sil            #  68    0x97  3      OPC=testb_r8_r8            popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  jne .L_126860               #  69    0x9a  6      OPC=jne_label_1            andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa0  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa1  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa2  1      OPC=nop                                                                                               
  nop                         #  73    0xa3  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  nop                         #  74    0xa4  1      OPC=nop                                                                                               
  nop                         #  75    0xa5  1      OPC=nop                                                                                               
  nop                         #  76    0xa6  1      OPC=nop                                                                                               
  popq %r11                   #  77    0xa7  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  78    0xa9  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  79    0xad  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  80    0xb0  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (157)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x4   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  addl %esi, %edi             #  7     0x9   2      OPC=addl_r32_r32_1         andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  8     0xb   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  jne .L_126860               #  9     0xe   6      OPC=jne_label_1            movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  orq %rdx, %rsi              #  10    0x14  3      OPC=orq_r64_r64            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x17  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  nop                         #  12    0x1b  1      OPC=nop                    leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  nop                         #  13    0x1c  1      OPC=nop                    notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1d  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  orl %r8d, %esi              #  16    0x1f  3      OPC=orl_r32_r32            jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  negl %esi                   #  17    0x22  2      OPC=negl_r32               nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x24  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x25  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  20    0x2b  7      OPC=leal_r32_m16           nop                         #  20    0x3a  1      OPC=nop                  
  andl %edi, %esi             #  21    0x32  2      OPC=andl_r32_r32_1         nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x34  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x35  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  jne .L_126860               #  25    0x37  6      OPC=jne_label_1            nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  shrb %cl, %dh               #  28    0x3f  2      OPC=shrb_rh_cl             movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x41  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
.L_126820:                    #        0x42  0      OPC=<label>                addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  30    0x42  2      OPC=movl_r32_r32_1         movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x44  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  32    0x48  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  addl $0x4, %edx             #  33    0x4b  3      OPC=addl_r32_imm8          leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32_1         nop                         #  35    0x5f  1      OPC=nop                  
  notq %r9                    #  36    0x55  3      OPC=notq_r64               andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m32           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  39    0x62  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x69  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x6f  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x70  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x71  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x72  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x73  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x74  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x75  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7e  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7f  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x80  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x81  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
.L_126860:                    #        0x82  0      OPC=<label>                movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movl %edx, %edx             #  60    0x82  2      OPC=movl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi  #  61    0x84  5      OPC=movzbq_r64_m8          testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %edx             #  62    0x89  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  movl %ecx, %ecx             #  63    0x8c  2      OPC=movl_r32_r32           nop                         #  63    0x9c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  64    0x8e  4      OPC=movb_m8_r8             nop                         #  64    0x9d  1      OPC=nop                  
  addl $0x1, %ecx             #  65    0x92  3      OPC=addl_r32_imm8          nop                         #  65    0x9e  1      OPC=nop                  
  testb %sil, %sil            #  66    0x95  3      OPC=testb_r8_r8            nop                         #  66    0x9f  1      OPC=nop                  
  jne .L_126860               #  67    0x98  6      OPC=jne_label_1            nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0x9f  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa0  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa1  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa2  1      OPC=nop                                                                                               
  nop                         #  73    0xa3  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  popq %r11                   #  74    0xa4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  75    0xa6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  76    0xaa  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  77    0xad  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (156)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x2   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  nop                         #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x4   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  movl %esi, %edx             #  5     0x6   2      OPC=movl_r32_r32           movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  nop                         #  6     0x8   1      OPC=nop                    orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  addl %esi, %edi             #  7     0x9   2      OPC=addl_r32_r32_1         andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  andl $0x3, %edi             #  8     0xb   3      OPC=andl_r32_imm8          jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  jne .L_126860               #  9     0xe   6      OPC=jne_label_1            movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  orq %rdx, %rsi              #  10    0x14  3      OPC=orq_r64_r64            movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  movl (%r15,%rsi,1), %r8d    #  11    0x17  4      OPC=movl_r32_m32           movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  nop                         #  12    0x1b  1      OPC=nop                    leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  nop                         #  13    0x1c  1      OPC=nop                    notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1d  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x1e  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  orl %r8d, %esi              #  16    0x1f  3      OPC=orl_r32_r32            jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  negl %esi                   #  17    0x22  2      OPC=negl_r32               nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x24  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  andl $0x80808080, %esi      #  19    0x25  6      OPC=andl_r32_imm32         nop                         #  19    0x39  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  20    0x2b  7      OPC=leal_r32_m16           nop                         #  20    0x3a  1      OPC=nop                  
  andl %edi, %esi             #  21    0x32  2      OPC=andl_r32_r32_1         nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x34  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x35  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x36  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  jne .L_126860               #  25    0x37  6      OPC=jne_label_1            nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x3d  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x3e  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x3f  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  shrb %cl, %dh               #  29    0x40  2      OPC=shrb_rh_cl             movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
.L_126820:                    #        0x42  0      OPC=<label>                addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  30    0x42  2      OPC=movl_r32_r32_1         movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  31    0x44  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  addl $0x4, %ecx             #  32    0x48  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  addl $0x4, %edx             #  33    0x4b  3      OPC=addl_r32_imm8          leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  movl (%r15,%rdx,1), %r8d    #  34    0x4e  4      OPC=movl_r32_m32           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  movl %r8d, %r9d             #  35    0x52  3      OPC=movl_r32_r32_1         nop                         #  35    0x5f  1      OPC=nop                  
  notq %r9                    #  36    0x55  3      OPC=notq_r64               andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  leal -0x1010101(%r8), %esi  #  37    0x58  7      OPC=leal_r32_m32           andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  andl %esi, %r9d             #  38    0x5f  3      OPC=andl_r32_r32_1         je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  andl $0x80808080, %r9d      #  39    0x62  7      OPC=andl_r32_imm32         nop                         #  39    0x70  1      OPC=nop                  
  je .L_126820                #  40    0x69  6      OPC=je_label_1             nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x6f  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x70  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x71  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x72  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x73  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x74  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x75  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x76  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x77  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x78  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x79  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7a  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7b  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7c  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7e  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x7f  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x80  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x81  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
.L_126860:                    #        0x82  0      OPC=<label>                movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movl %edx, %edx             #  60    0x82  2      OPC=movl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movzbq (%r15,%rdx,1), %rsi  #  61    0x84  5      OPC=movzbq_r64_m8          testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %edx             #  62    0x89  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  movl %ecx, %ecx             #  63    0x8c  2      OPC=movl_r32_r32           nop                         #  63    0x9c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  64    0x8e  4      OPC=movb_m8_r8             nop                         #  64    0x9d  1      OPC=nop                  
  addl $0x1, %ecx             #  65    0x92  3      OPC=addl_r32_imm8          nop                         #  65    0x9e  1      OPC=nop                  
  testb %sil, %sil            #  66    0x95  3      OPC=testb_r8_r8            nop                         #  66    0x9f  1      OPC=nop                  
  jne .L_126860               #  67    0x98  6      OPC=jne_label_1            nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  68    0x9e  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  69    0x9f  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  70    0xa0  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0xa1  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0xa2  1      OPC=nop                                                                                               
  nop                         #  73    0xa3  1      OPC=nop                  .size strcpy, .-strcpy                                                       
  popq %r11                   #  74    0xa4  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  75    0xa6  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  76    0xaa  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  77    0xad  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (155)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  addb %sil, %dil             #  2     0x2   3      OPC=addb_r8_r8             movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %esi, %edx             #  3     0x5   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x7   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  andl $0x3, %edi             #  5     0x9   3      OPC=andl_r32_imm8          movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  jne .L_126860               #  6     0xc   6      OPC=jne_label_1            orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  andq %rdx, %rsi             #  7     0x12  3      OPC=andq_r64_r64_1         andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  movl (%r15,%rsi,1), %r8d    #  8     0x15  4      OPC=movl_r32_m32           jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0x19  1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  nop                         #  10    0x1a  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  nop                         #  11    0x1b  1      OPC=nop                    movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  nop                         #  12    0x1c  1      OPC=nop                    leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  orl %r8d, %esi              #  13    0x1d  3      OPC=orl_r32_r32            notl %esi                   #  13    0x27  2      OPC=notl_r32             
  negl %esi                   #  14    0x20  2      OPC=negl_r32               andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x22  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x23  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  andl $0x80808080, %esi      #  17    0x24  6      OPC=andl_r32_imm32         nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x2a  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  19    0x2b  7      OPC=leal_r32_m16           nop                         #  19    0x39  1      OPC=nop                  
  andl %edi, %esi             #  20    0x32  2      OPC=andl_r32_r32_1         nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x34  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  jne .L_126860               #  22    0x35  6      OPC=jne_label_1            nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3b  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3c  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3d  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  shlb %cl, %ch               #  26    0x3e  2      OPC=shlb_rh_cl           .L_126820:                    #        0x40  0      OPC=<label>              
.L_126820:                    #        0x40  0      OPC=<label>                addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  movl %ecx, %ecx             #  27    0x40  2      OPC=movl_r32_r32_1         movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  movl %r8d, (%r15,%rcx,1)    #  28    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %ecx             #  29    0x46  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  addl $0x4, %edx             #  30    0x49  3      OPC=addl_r32_imm8          movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl (%r15,%rdx,1), %r8d    #  31    0x4c  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  32    0x50  3      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  notq %r9                    #  33    0x53  3      OPC=notq_r64               leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  leal -0x1010101(%r8), %esi  #  34    0x56  7      OPC=leal_r32_m64           notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  andq %rsi, %r9              #  35    0x5d  3      OPC=andq_r64_r64_1         nop                         #  35    0x5f  1      OPC=nop                  
  andl $0x80808080, %r9d      #  36    0x60  7      OPC=andl_r32_imm32         andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  je .L_126820                #  37    0x67  6      OPC=je_label_1             andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  38    0x6d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  39    0x6e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x7f  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
.L_126860:                    #        0x80  0      OPC=<label>                movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movl %edx, %edx             #  57    0x80  2      OPC=movl_r32_r32           addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  movsbq (%r15,%rdx,1), %rsi  #  58    0x82  5      OPC=movsbq_r64_m8          movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  addl $0x1, %edx             #  59    0x87  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movl %ecx, %ecx             #  60    0x8a  2      OPC=movl_r32_r32           addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  movb %sil, (%r15,%rcx,1)    #  61    0x8c  4      OPC=movb_m8_r8             testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  addl $0x1, %ecx             #  62    0x90  3      OPC=addl_r32_imm8          jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  negb %sil                   #  63    0x93  3      OPC=negb_r8                nop                         #  63    0x9c  1      OPC=nop                  
  jne .L_126860               #  64    0x96  6      OPC=jne_label_1            nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  popq %r11                   #  68    0x9f  2      OPC=popq_r64_1             popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  69    0xa1  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  70    0xa5  3      OPC=addq_r64_r64           addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  jmpq %r11                   #  71    0xa8  3      OPC=jmpq_r64               jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (154)                                                 Lowest Known Correct Cost (167)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  addb %sil, %dil             #  2     0x2   3      OPC=addb_r8_r8             movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %esi, %edx             #  3     0x5   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x7   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  andl $0x3, %edi             #  5     0x9   3      OPC=andl_r32_imm8          movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  jne .L_126860               #  6     0xc   6      OPC=jne_label_1            orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  andq %rdx, %rsi             #  7     0x12  3      OPC=andq_r64_r64_1         andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  movl (%r15,%rsi,1), %r8d    #  8     0x15  4      OPC=movl_r32_m32           jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0x19  1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  nop                         #  10    0x1a  1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  nop                         #  11    0x1b  1      OPC=nop                    movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  orl %r8d, %esi              #  12    0x1c  3      OPC=orl_r32_r32            leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  negl %esi                   #  13    0x1f  2      OPC=negl_r32               notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x21  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x22  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  andl $0x80808080, %esi      #  16    0x23  6      OPC=andl_r32_imm32         jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  leal -0x1010101(%r8), %edi  #  17    0x29  7      OPC=leal_r32_m16           nop                         #  17    0x37  1      OPC=nop                  
  andl %edi, %esi             #  18    0x30  2      OPC=andl_r32_r32_1         nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x32  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  jne .L_126860               #  20    0x33  6      OPC=jne_label_1            nop                         #  20    0x3a  1      OPC=nop                  
  shlb %cl, %ch               #  21    0x39  2      OPC=shlb_rh_cl             nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x3b  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x3c  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x3d  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x3e  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
.L_126820:                    #        0x3f  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  movl %ecx, %ecx             #  26    0x3f  2      OPC=movl_r32_r32_1         addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, (%r15,%rcx,1)    #  27    0x41  4      OPC=movl_m32_r32           movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  addl $0x4, %ecx             #  28    0x45  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  29    0x48  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  movl (%r15,%rdx,1), %r8d    #  30    0x4b  4      OPC=movl_r32_m32           movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  movl %r8d, %r9d             #  31    0x4f  3      OPC=movl_r32_r32_1         movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  notq %r9                    #  32    0x52  3      OPC=notq_r64               movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m64           leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  andq %rsi, %r9              #  34    0x5c  3      OPC=andq_r64_r64_1         notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  andl $0x80808080, %r9d      #  35    0x5f  7      OPC=andl_r32_imm32         nop                         #  35    0x5f  1      OPC=nop                  
  je .L_126820                #  36    0x66  6      OPC=je_label_1             andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  37    0x6c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  38    0x6d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  39    0x6e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  40    0x6f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  41    0x70  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  42    0x71  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
  nop                         #  43    0x72  1      OPC=nop                    nop                         #  43    0x74  1      OPC=nop                  
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x75  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x76  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x77  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x78  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                    #        0x7f  0      OPC=<label>                movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  movl %edx, %edx             #  56    0x7f  2      OPC=movl_r32_r32           movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  movsbq (%r15,%rdx,1), %rsi  #  57    0x81  5      OPC=movsbq_r64_m8          addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  addl $0x1, %edx             #  58    0x86  3      OPC=addl_r32_imm8          movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  movl %ecx, %ecx             #  59    0x89  2      OPC=movl_r32_r32           movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  movb %sil, (%r15,%rcx,1)    #  60    0x8b  4      OPC=movb_m8_r8             addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx             #  61    0x8f  3      OPC=addl_r32_imm8          testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  negb %sil                   #  62    0x92  3      OPC=negb_r8                jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  jne .L_126860               #  63    0x95  6      OPC=jne_label_1            nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  64    0x9b  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  67    0x9e  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  popq %r11                   #  68    0x9f  2      OPC=popq_r64_1             popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  69    0xa1  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  70    0xa5  3      OPC=addq_r64_r64           addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  jmpq %r11                   #  71    0xa8  3      OPC=jmpq_r64               jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (154)                                                 Lowest Known Correct Cost (155)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         nop                         #  1     0     1      OPC=nop                  
  addb %sil, %dil             #  2     0x2   3      OPC=addb_r8_r8             movl %esi, %edx             #  2     0x1   2      OPC=movl_r32_r32         
  movl %esi, %edx             #  3     0x5   2      OPC=movl_r32_r32           movl %edi, %eax             #  3     0x3   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x7   2      OPC=movl_r32_r32_1         orl %edx, %edi              #  4     0x5   2      OPC=orl_r32_r32          
  andl $0x3, %edi             #  5     0x9   3      OPC=andl_r32_imm8          nop                         #  5     0x7   1      OPC=nop                  
  jne .L_126860               #  6     0xc   6      OPC=jne_label_1            andb $0x3, %dil             #  6     0x8   4      OPC=andb_r8_imm8         
  andq %rdx, %rsi             #  7     0x12  3      OPC=andq_r64_r64_1         nop                         #  7     0xc   1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  8     0x15  4      OPC=movl_r32_m32           movq %rax, %rcx             #  8     0xd   3      OPC=movq_r64_r64         
  nop                         #  9     0x19  1      OPC=nop                    jne .L_126860               #  9     0x10  6      OPC=jne_label_1          
  nop                         #  10    0x1a  1      OPC=nop                    orl %esi, %esi              #  10    0x16  2      OPC=orl_r32_r32_1        
  nop                         #  11    0x1b  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  11    0x18  4      OPC=movq_r64_m64         
  orl %r8d, %esi              #  12    0x1c  3      OPC=orl_r32_r32            nop                         #  12    0x1c  1      OPC=nop                  
  negl %esi                   #  13    0x1f  2      OPC=negl_r32               notb %sil                   #  13    0x1d  3      OPC=notb_r8              
  nop                         #  14    0x21  1      OPC=nop                    nop                         #  14    0x20  1      OPC=nop                  
  nop                         #  15    0x22  1      OPC=nop                    nop                         #  15    0x21  1      OPC=nop                  
  andl $0x80808080, %esi      #  16    0x23  6      OPC=andl_r32_imm32         nop                         #  16    0x22  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  17    0x29  7      OPC=leal_r32_m16           nop                         #  17    0x23  1      OPC=nop                  
  andl %edi, %esi             #  18    0x30  2      OPC=andl_r32_r32_1         nop                         #  18    0x24  1      OPC=nop                  
  nop                         #  19    0x32  1      OPC=nop                    nopl %eax                   #  19    0x25  3      OPC=nopl_r32             
  jne .L_126860               #  20    0x33  6      OPC=jne_label_1            nop                         #  20    0x28  1      OPC=nop                  
  shlb %cl, %ch               #  21    0x39  2      OPC=shlb_rh_cl             nop                         #  21    0x29  1      OPC=nop                  
  nop                         #  22    0x3b  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                         #  23    0x3c  1      OPC=nop                    andb %r15b, %sil            #  23    0x2b  3      OPC=andb_r8_r8_1         
  nop                         #  24    0x3d  1      OPC=nop                    nop                         #  24    0x2e  1      OPC=nop                  
  nop                         #  25    0x3e  1      OPC=nop                    nop                         #  25    0x2f  1      OPC=nop                  
.L_126820:                    #        0x3f  0      OPC=<label>                nop                         #  26    0x30  1      OPC=nop                  
  movl %ecx, %ecx             #  26    0x3f  2      OPC=movl_r32_r32_1         salq %cl, %rdx              #  27    0x31  3      OPC=salq_r64_cl          
  movl %r8d, (%r15,%rcx,1)    #  27    0x41  4      OPC=movl_m32_r32           jne .L_126860               #  28    0x34  6      OPC=jne_label_1          
  addl $0x4, %ecx             #  28    0x45  3      OPC=addl_r32_imm8          nop                         #  29    0x3a  1      OPC=nop                  
  addl $0x4, %edx             #  29    0x48  3      OPC=addl_r32_imm8          nop                         #  30    0x3b  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  30    0x4b  4      OPC=movl_r32_m32           salq %cl, %rcx              #  31    0x3c  3      OPC=salq_r64_cl          
  movl %r8d, %r9d             #  31    0x4f  3      OPC=movl_r32_r32_1         nop                         #  32    0x3f  1      OPC=nop                  
  notq %r9                    #  32    0x52  3      OPC=notq_r64             .L_126820:                    #        0x40  0      OPC=<label>              
  leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m64           andl %ecx, %ecx             #  33    0x40  2      OPC=andl_r32_r32         
  andq %rsi, %r9              #  34    0x5c  3      OPC=andq_r64_r64_1         movl %r8d, (%r15,%rcx,1)    #  34    0x42  4      OPC=movl_m32_r32         
  andl $0x80808080, %r9d      #  35    0x5f  7      OPC=andl_r32_imm32         addl $0x4, %edx             #  35    0x46  3      OPC=addl_r32_imm8        
  je .L_126820                #  36    0x66  6      OPC=je_label_1             movq (%r15,%rdx,1), %r8     #  36    0x49  4      OPC=movq_r64_m64         
  nop                         #  37    0x6c  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  37    0x4d  7      OPC=leal_r32_m16         
  nop                         #  38    0x6d  1      OPC=nop                    movl %r8d, %r9d             #  38    0x54  3      OPC=movl_r32_r32         
  nop                         #  39    0x6e  1      OPC=nop                    notl %r9d                   #  39    0x57  3      OPC=notl_r32             
  nop                         #  40    0x6f  1      OPC=nop                    addl $0x4, %ecx             #  40    0x5a  3      OPC=addl_r32_imm8        
  nop                         #  41    0x70  1      OPC=nop                    andq %rsi, %r9              #  41    0x5d  3      OPC=andq_r64_r64_1       
  nop                         #  42    0x71  1      OPC=nop                    andl $0x80808080, %r9d      #  42    0x60  7      OPC=andl_r32_imm32       
  nop                         #  43    0x72  1      OPC=nop                    je .L_126820                #  43    0x67  6      OPC=je_label_1           
  nop                         #  44    0x73  1      OPC=nop                    nop                         #  44    0x6d  1      OPC=nop                  
  nop                         #  45    0x74  1      OPC=nop                    nop                         #  45    0x6e  1      OPC=nop                  
  nop                         #  46    0x75  1      OPC=nop                    nop                         #  46    0x6f  1      OPC=nop                  
  nop                         #  47    0x76  1      OPC=nop                    nop                         #  47    0x70  1      OPC=nop                  
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x71  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x72  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x73  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x74  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x75  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x76  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x77  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                    nop                         #  55    0x78  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  56    0x79  1      OPC=nop                  
  movl %edx, %edx             #  56    0x7f  2      OPC=movl_r32_r32           nop                         #  57    0x7a  1      OPC=nop                  
  movsbq (%r15,%rdx,1), %rsi  #  57    0x81  5      OPC=movsbq_r64_m8          nop                         #  58    0x7b  1      OPC=nop                  
  addl $0x1, %edx             #  58    0x86  3      OPC=addl_r32_imm8          nop                         #  59    0x7c  1      OPC=nop                  
  movl %ecx, %ecx             #  59    0x89  2      OPC=movl_r32_r32           nop                         #  60    0x7d  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  60    0x8b  4      OPC=movb_m8_r8             nop                         #  61    0x7e  1      OPC=nop                  
  addl $0x1, %ecx             #  61    0x8f  3      OPC=addl_r32_imm8          nop                         #  62    0x7f  1      OPC=nop                  
  negb %sil                   #  62    0x92  3      OPC=negb_r8              .L_126860:                    #        0x80  0      OPC=<label>              
  jne .L_126860               #  63    0x95  6      OPC=jne_label_1            movl %edx, %edx             #  63    0x80  2      OPC=movl_r32_r32_1       
  nop                         #  64    0x9b  1      OPC=nop                    movsbq (%r15,%rdx,1), %rsi  #  64    0x82  5      OPC=movsbq_r64_m8        
  nop                         #  65    0x9c  1      OPC=nop                    andl %ecx, %ecx             #  65    0x87  2      OPC=andl_r32_r32         
  nop                         #  66    0x9d  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  66    0x89  4      OPC=movb_m8_r8           
  nop                         #  67    0x9e  1      OPC=nop                    addw $0x1, %dx              #  67    0x8d  4      OPC=addw_r16_imm8        
  popq %r11                   #  68    0x9f  2      OPC=popq_r64_1             addl $0x1, %ecx             #  68    0x91  3      OPC=addl_r32_imm8        
  andl $0xe0, %r11d           #  69    0xa1  4      OPC=andl_r32_imm8          negw %si                    #  69    0x94  3      OPC=negw_r16             
  addq %r15, %r11             #  70    0xa5  3      OPC=addq_r64_r64           jne .L_126860               #  70    0x97  6      OPC=jne_label_1          
  jmpq %r11                   #  71    0xa8  3      OPC=jmpq_r64               nop                         #  71    0x9d  1      OPC=nop                  
                                                                               nop                         #  72    0x9e  1      OPC=nop                  
.size strcpy, .-strcpy                                                         nop                         #  73    0x9f  1      OPC=nop                  
                                                                               nop                         #  74    0xa0  1      OPC=nop                  
                                                                               nop                         #  75    0xa1  1      OPC=nop                  
                                                                               nop                         #  76    0xa2  1      OPC=nop                  
                                                                               nop                         #  77    0xa3  1      OPC=nop                  
                                                                               nop                         #  78    0xa4  1      OPC=nop                  
                                                                               nop                         #  79    0xa5  1      OPC=nop                  
                                                                               nop                         #  80    0xa6  1      OPC=nop                  
                                                                               nop                         #  81    0xa7  1      OPC=nop                  
                                                                               nop                         #  82    0xa8  1      OPC=nop                  
                                                                               nop                         #  83    0xa9  1      OPC=nop                  
                                                                               nop                         #  84    0xaa  1      OPC=nop                  
                                                                               nop                         #  85    0xab  1      OPC=nop                  
                                                                               nop                         #  86    0xac  1      OPC=nop                  
                                                                               nop                         #  87    0xad  1      OPC=nop                  
                                                                               nop                         #  88    0xae  1      OPC=nop                  
                                                                               nop                         #  89    0xaf  1      OPC=nop                  
                                                                               popq %r11                   #  90    0xb0  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  91    0xb2  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  92    0xb6  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  93    0xb9  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (154)                                                 Lowest Known Correct Cost (154)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1         nop                         #  1     0     1      OPC=nop                  
  addb %sil, %dil             #  2     0x2   3      OPC=addb_r8_r8             nop                         #  2     0x1   1      OPC=nop                  
  movl %esi, %edx             #  3     0x5   2      OPC=movl_r32_r32           movl %esi, %edx             #  3     0x2   2      OPC=movl_r32_r32         
  movl %eax, %ecx             #  4     0x7   2      OPC=movl_r32_r32_1         movl %edi, %eax             #  4     0x4   2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  5     0x9   3      OPC=andl_r32_imm8          nop                         #  5     0x6   1      OPC=nop                  
  jne .L_126860               #  6     0xc   6      OPC=jne_label_1            orl %edx, %edi              #  6     0x7   2      OPC=orl_r32_r32_1        
  andq %rdx, %rsi             #  7     0x12  3      OPC=andq_r64_r64_1         andb $0x3, %dil             #  7     0x9   4      OPC=andb_r8_imm8         
  movl (%r15,%rsi,1), %r8d    #  8     0x15  4      OPC=movl_r32_m32           movq %rax, %rcx             #  8     0xd   3      OPC=movq_r64_r64         
  nop                         #  9     0x19  1      OPC=nop                    nop                         #  9     0x10  1      OPC=nop                  
  nop                         #  10    0x1a  1      OPC=nop                    nop                         #  10    0x11  1      OPC=nop                  
  nop                         #  11    0x1b  1      OPC=nop                    nop                         #  11    0x12  1      OPC=nop                  
  orl %r8d, %esi              #  12    0x1c  3      OPC=orl_r32_r32            jne .L_126860               #  12    0x13  6      OPC=jne_label_1          
  negl %esi                   #  13    0x1f  2      OPC=negl_r32               orl %edx, %esi              #  13    0x19  2      OPC=orl_r32_r32_1        
  nop                         #  14    0x21  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  14    0x1b  4      OPC=movq_r64_m64         
  nop                         #  15    0x22  1      OPC=nop                    nop                         #  15    0x1f  1      OPC=nop                  
  andl $0x80808080, %esi      #  16    0x23  6      OPC=andl_r32_imm32         nop                         #  16    0x20  1      OPC=nop                  
  leal -0x1010101(%r8), %edi  #  17    0x29  7      OPC=leal_r32_m16           nop                         #  17    0x21  1      OPC=nop                  
  andl %edi, %esi             #  18    0x30  2      OPC=andl_r32_r32_1         nop                         #  18    0x22  1      OPC=nop                  
  nop                         #  19    0x32  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  jne .L_126860               #  20    0x33  6      OPC=jne_label_1            salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl          
  shlb %cl, %ch               #  21    0x39  2      OPC=shlb_rh_cl             nop                         #  21    0x27  1      OPC=nop                  
  nop                         #  22    0x3b  1      OPC=nop                    nop                         #  22    0x28  1      OPC=nop                  
  nop                         #  23    0x3c  1      OPC=nop                    notb %sil                   #  23    0x29  3      OPC=notb_r8              
  nop                         #  24    0x3d  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                         #  25    0x3e  1      OPC=nop                    andb %r15b, %sil            #  25    0x2d  3      OPC=andb_r8_r8_1         
.L_126820:                    #        0x3f  0      OPC=<label>                nop                         #  26    0x30  1      OPC=nop                  
  movl %ecx, %ecx             #  26    0x3f  2      OPC=movl_r32_r32_1         nop                         #  27    0x31  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  27    0x41  4      OPC=movl_m32_r32           nop                         #  28    0x32  1      OPC=nop                  
  addl $0x4, %ecx             #  28    0x45  3      OPC=addl_r32_imm8          nop                         #  29    0x33  1      OPC=nop                  
  addl $0x4, %edx             #  29    0x48  3      OPC=addl_r32_imm8          jne .L_126860               #  30    0x34  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d    #  30    0x4b  4      OPC=movl_r32_m32           nop                         #  31    0x3a  1      OPC=nop                  
  movl %r8d, %r9d             #  31    0x4f  3      OPC=movl_r32_r32_1         nop                         #  32    0x3b  1      OPC=nop                  
  notq %r9                    #  32    0x52  3      OPC=notq_r64               nop                         #  33    0x3c  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m64           nop                         #  34    0x3d  1      OPC=nop                  
  andq %rsi, %r9              #  34    0x5c  3      OPC=andq_r64_r64_1         nop                         #  35    0x3e  1      OPC=nop                  
  andl $0x80808080, %r9d      #  35    0x5f  7      OPC=andl_r32_imm32         nop                         #  36    0x3f  1      OPC=nop                  
  je .L_126820                #  36    0x66  6      OPC=je_label_1           .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  37    0x6c  1      OPC=nop                    andl %ecx, %ecx             #  37    0x40  2      OPC=andl_r32_r32         
  nop                         #  38    0x6d  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  nop                         #  39    0x6e  1      OPC=nop                    addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  nop                         #  40    0x6f  1      OPC=nop                    movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  nop                         #  41    0x70  1      OPC=nop                    addl $0x4, %ecx             #  41    0x4d  3      OPC=addl_r32_imm8        
  nop                         #  42    0x71  1      OPC=nop                    movl %r8d, %r9d             #  42    0x50  3      OPC=movl_r32_r32         
  nop                         #  43    0x72  1      OPC=nop                    notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  nop                         #  44    0x73  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16         
  nop                         #  45    0x74  1      OPC=nop                    andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  nop                         #  46    0x75  1      OPC=nop                    andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  nop                         #  47    0x76  1      OPC=nop                    je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                         #  48    0x77  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                         #  49    0x78  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                         #  50    0x79  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                         #  51    0x7a  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                         #  52    0x7b  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                         #  53    0x7c  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                         #  54    0x7d  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                         #  55    0x7e  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
.L_126860:                    #        0x7f  0      OPC=<label>                nop                         #  56    0x75  1      OPC=nop                  
  movl %edx, %edx             #  56    0x7f  2      OPC=movl_r32_r32           nop                         #  57    0x76  1      OPC=nop                  
  movsbq (%r15,%rdx,1), %rsi  #  57    0x81  5      OPC=movsbq_r64_m8          nop                         #  58    0x77  1      OPC=nop                  
  addl $0x1, %edx             #  58    0x86  3      OPC=addl_r32_imm8          nop                         #  59    0x78  1      OPC=nop                  
  movl %ecx, %ecx             #  59    0x89  2      OPC=movl_r32_r32           nop                         #  60    0x79  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  60    0x8b  4      OPC=movb_m8_r8             nop                         #  61    0x7a  1      OPC=nop                  
  addl $0x1, %ecx             #  61    0x8f  3      OPC=addl_r32_imm8          nop                         #  62    0x7b  1      OPC=nop                  
  negb %sil                   #  62    0x92  3      OPC=negb_r8                nop                         #  63    0x7c  1      OPC=nop                  
  jne .L_126860               #  63    0x95  6      OPC=jne_label_1            nop                         #  64    0x7d  1      OPC=nop                  
  nop                         #  64    0x9b  1      OPC=nop                    nop                         #  65    0x7e  1      OPC=nop                  
  nop                         #  65    0x9c  1      OPC=nop                    nop                         #  66    0x7f  1      OPC=nop                  
  nop                         #  66    0x9d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  67    0x9e  1      OPC=nop                    movl %edx, %edx             #  67    0x80  2      OPC=movl_r32_r32_1       
  popq %r11                   #  68    0x9f  2      OPC=popq_r64_1             movsbq (%r15,%rdx,1), %rsi  #  68    0x82  5      OPC=movsbq_r64_m8        
  andl $0xe0, %r11d           #  69    0xa1  4      OPC=andl_r32_imm8          movl %ecx, %ecx             #  69    0x87  2      OPC=movl_r32_r32         
  addq %r15, %r11             #  70    0xa5  3      OPC=addq_r64_r64           movb %sil, (%r15,%rcx,1)    #  70    0x89  4      OPC=movb_m8_r8           
  jmpq %r11                   #  71    0xa8  3      OPC=jmpq_r64               addw $0x1, %dx              #  71    0x8d  4      OPC=addw_r16_imm8        
                                                                               addl $0x1, %ecx             #  72    0x91  3      OPC=addl_r32_imm8        
.size strcpy, .-strcpy                                                         negw %si                    #  73    0x94  3      OPC=negw_r16             
                                                                               jne .L_126860               #  74    0x97  6      OPC=jne_label_1          
                                                                               nop                         #  75    0x9d  1      OPC=nop                  
                                                                               nop                         #  76    0x9e  1      OPC=nop                  
                                                                               nop                         #  77    0x9f  1      OPC=nop                  
                                                                               nop                         #  78    0xa0  1      OPC=nop                  
                                                                               nop                         #  79    0xa1  1      OPC=nop                  
                                                                               nop                         #  80    0xa2  1      OPC=nop                  
                                                                               nopl %eax                   #  81    0xa3  3      OPC=nopl_r32             
                                                                               nopl %eax                   #  82    0xa6  3      OPC=nopl_r32             
                                                                               nop                         #  83    0xa9  1      OPC=nop                  
                                                                               nop                         #  84    0xaa  1      OPC=nop                  
                                                                               nop                         #  85    0xab  1      OPC=nop                  
                                                                               nop                         #  86    0xac  1      OPC=nop                  
                                                                               nop                         #  87    0xad  1      OPC=nop                  
                                                                               nop                         #  88    0xae  1      OPC=nop                  
                                                                               popq %r11                   #  89    0xaf  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  90    0xb1  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  91    0xb5  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  92    0xb8  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (153)                                                 Lowest Known Correct Cost (153)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x2   1      OPC=nop                  
  movl %esi, %edx             #  4     0x3   2      OPC=movl_r32_r32           movl %esi, %edx             #  4     0x3   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  5     0x5   2      OPC=movl_r32_r32           movl %edi, %eax             #  5     0x5   2      OPC=movl_r32_r32         
  nop                         #  6     0x7   1      OPC=nop                    nop                         #  6     0x7   1      OPC=nop                  
  orl %edx, %edi              #  7     0x8   2      OPC=orl_r32_r32_1          orl %edx, %edi              #  7     0x8   2      OPC=orl_r32_r32_1        
  movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64           movq %rax, %rcx             #  8     0xa   3      OPC=movq_r64_r64         
  nop                         #  9     0xd   1      OPC=nop                    nop                         #  9     0xd   1      OPC=nop                  
  andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8           andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8         
  nop                         #  11    0x12  1      OPC=nop                    nop                         #  11    0x12  1      OPC=nop                  
  jne .L_126860               #  12    0x13  6      OPC=jne_label_1            jne .L_126860               #  12    0x13  6      OPC=jne_label_1          
  orl %edx, %esi              #  13    0x19  2      OPC=orl_r32_r32_1          orl %edx, %esi              #  13    0x19  2      OPC=orl_r32_r32_1        
  movq (%r15,%rsi,1), %r8     #  14    0x1b  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8     #  14    0x1b  4      OPC=movq_r64_m64         
  nop                         #  15    0x1f  1      OPC=nop                    nop                         #  15    0x1f  1      OPC=nop                  
  nop                         #  16    0x20  1      OPC=nop                    nop                         #  16    0x20  1      OPC=nop                  
  nop                         #  17    0x21  1      OPC=nop                    nop                         #  17    0x21  1      OPC=nop                  
  nop                         #  18    0x22  1      OPC=nop                    nop                         #  18    0x22  1      OPC=nop                  
  nop                         #  19    0x23  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  notb %sil                   #  20    0x24  3      OPC=notb_r8                notb %sil                   #  20    0x24  3      OPC=notb_r8              
  salq %cl, %rdx              #  21    0x27  3      OPC=salq_r64_cl            salq %cl, %rdx              #  21    0x27  3      OPC=salq_r64_cl          
  nop                         #  22    0x2a  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                         #  23    0x2b  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                         #  24    0x2c  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                         #  25    0x2d  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                         #  26    0x2e  1      OPC=nop                    nop                         #  26    0x2e  1      OPC=nop                  
  nop                         #  27    0x2f  1      OPC=nop                    nop                         #  27    0x2f  1      OPC=nop                  
  andb %r15b, %sil            #  28    0x30  3      OPC=andb_r8_r8_1           andb %r15b, %sil            #  28    0x30  3      OPC=andb_r8_r8_1         
  jne .L_126860               #  29    0x33  6      OPC=jne_label_1            jne .L_126860               #  29    0x33  6      OPC=jne_label_1          
  nop                         #  30    0x39  1      OPC=nop                    nop                         #  30    0x39  1      OPC=nop                  
  nop                         #  31    0x3a  1      OPC=nop                    nop                         #  31    0x3a  1      OPC=nop                  
  nop                         #  32    0x3b  1      OPC=nop                    nop                         #  32    0x3b  1      OPC=nop                  
  nop                         #  33    0x3c  1      OPC=nop                    nop                         #  33    0x3c  1      OPC=nop                  
  nop                         #  34    0x3d  1      OPC=nop                    nop                         #  34    0x3d  1      OPC=nop                  
  nop                         #  35    0x3e  1      OPC=nop                    nop                         #  35    0x3e  1      OPC=nop                  
  nop                         #  36    0x3f  1      OPC=nop                    nop                         #  36    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32            orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32          
  movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  addl $0x4, %ecx             #  41    0x4d  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  41    0x4d  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d             #  42    0x50  3      OPC=movl_r32_r32           movl %r8d, %r9d             #  42    0x50  3      OPC=movl_r32_r32         
  notl %r9d                   #  43    0x53  3      OPC=notl_r32               notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m64           leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m64         
  andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1         andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                #  47    0x67  6      OPC=je_label_1             je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                         #  48    0x6d  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                         #  49    0x6e  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                         #  50    0x6f  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                         #  51    0x70  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                         #  52    0x71  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                         #  53    0x72  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                         #  54    0x73  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                         #  55    0x74  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
  nop                         #  56    0x75  1      OPC=nop                    nop                         #  56    0x75  1      OPC=nop                  
  nop                         #  57    0x76  1      OPC=nop                    nop                         #  57    0x76  1      OPC=nop                  
  nop                         #  58    0x77  1      OPC=nop                    nop                         #  58    0x77  1      OPC=nop                  
  nop                         #  59    0x78  1      OPC=nop                    nop                         #  59    0x78  1      OPC=nop                  
  nopl %eax                   #  60    0x79  3      OPC=nopl_r32               nopl %eax                   #  60    0x79  3      OPC=nopl_r32             
  nop                         #  61    0x7c  1      OPC=nop                    nop                         #  61    0x7c  1      OPC=nop                  
  nop                         #  62    0x7d  1      OPC=nop                    nop                         #  62    0x7d  1      OPC=nop                  
  nop                         #  63    0x7e  1      OPC=nop                    nop                         #  63    0x7e  1      OPC=nop                  
  nop                         #  64    0x7f  1      OPC=nop                    nop                         #  64    0x7f  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1         movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1       
  movzbq (%r15,%rdx,1), %rsi  #  66    0x82  5      OPC=movzbq_r64_m8          movzbq (%r15,%rdx,1), %rsi  #  66    0x82  5      OPC=movzbq_r64_m8        
  movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8           
  addw $0x1, %dx              #  69    0x8d  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  69    0x8d  4      OPC=addw_r16_imm8        
  addl $0x1, %ecx             #  70    0x91  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  70    0x91  3      OPC=addl_r32_imm8        
  negq %rsi                   #  71    0x94  3      OPC=negq_r64               negq %rsi                   #  71    0x94  3      OPC=negq_r64             
  jne .L_126860               #  72    0x97  6      OPC=jne_label_1            jne .L_126860               #  72    0x97  6      OPC=jne_label_1          
  nop                         #  73    0x9d  1      OPC=nop                    nop                         #  73    0x9d  1      OPC=nop                  
  nop                         #  74    0x9e  1      OPC=nop                    nop                         #  74    0x9e  1      OPC=nop                  
  nop                         #  75    0x9f  1      OPC=nop                    nop                         #  75    0x9f  1      OPC=nop                  
  nop                         #  76    0xa0  1      OPC=nop                    nop                         #  76    0xa0  1      OPC=nop                  
  nop                         #  77    0xa1  1      OPC=nop                    nop                         #  77    0xa1  1      OPC=nop                  
  nop                         #  78    0xa2  1      OPC=nop                    nop                         #  78    0xa2  1      OPC=nop                  
  nop                         #  79    0xa3  1      OPC=nop                    nop                         #  79    0xa3  1      OPC=nop                  
  nop                         #  80    0xa4  1      OPC=nop                    nop                         #  80    0xa4  1      OPC=nop                  
  nop                         #  81    0xa5  1      OPC=nop                    nop                         #  81    0xa5  1      OPC=nop                  
  nop                         #  82    0xa6  1      OPC=nop                    nop                         #  82    0xa6  1      OPC=nop                  
  nop                         #  83    0xa7  1      OPC=nop                    nop                         #  83    0xa7  1      OPC=nop                  
  nop                         #  84    0xa8  1      OPC=nop                    nop                         #  84    0xa8  1      OPC=nop                  
  nop                         #  85    0xa9  1      OPC=nop                    nop                         #  85    0xa9  1      OPC=nop                  
  nop                         #  86    0xaa  1      OPC=nop                    nop                         #  86    0xaa  1      OPC=nop                  
  nop                         #  87    0xab  1      OPC=nop                    nop                         #  87    0xab  1      OPC=nop                  
  nop                         #  88    0xac  1      OPC=nop                    nop                         #  88    0xac  1      OPC=nop                  
  nop                         #  89    0xad  1      OPC=nop                    nop                         #  89    0xad  1      OPC=nop                  
  popq %r11                   #  90    0xae  2      OPC=popq_r64_1             popq %r11                   #  90    0xae  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  91    0xb0  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  91    0xb0  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  92    0xb4  3      OPC=addq_r64_r64           addq %r15, %r11             #  92    0xb4  3      OPC=addq_r64_r64         
  jmpq %r11                   #  93    0xb7  3      OPC=jmpq_r64               jmpq %r11                   #  93    0xb7  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (152)                                                 Lowest Known Correct Cost (152)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                         #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  nop                         #  2     0x1   1      OPC=nop                    nop                         #  2     0x1   1      OPC=nop                  
  nop                         #  3     0x2   1      OPC=nop                    nop                         #  3     0x2   1      OPC=nop                  
  nop                         #  4     0x3   1      OPC=nop                    nop                         #  4     0x3   1      OPC=nop                  
  nop                         #  5     0x4   1      OPC=nop                    nop                         #  5     0x4   1      OPC=nop                  
  movl %esi, %edx             #  6     0x5   2      OPC=movl_r32_r32           movl %esi, %edx             #  6     0x5   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  7     0x7   2      OPC=movl_r32_r32           movl %edi, %eax             #  7     0x7   2      OPC=movl_r32_r32         
  orl %edx, %edi              #  8     0x9   2      OPC=orl_r32_r32            orl %edx, %edi              #  8     0x9   2      OPC=orl_r32_r32          
  movq %rax, %rcx             #  9     0xb   3      OPC=movq_r64_r64           movq %rax, %rcx             #  9     0xb   3      OPC=movq_r64_r64         
  andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8           andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            jne .L_126860               #  11    0x12  6      OPC=jne_label_1          
  nop                         #  12    0x18  1      OPC=nop                    nop                         #  12    0x18  1      OPC=nop                  
  nop                         #  13    0x19  1      OPC=nop                    nop                         #  13    0x19  1      OPC=nop                  
  orl %edx, %esi              #  14    0x1a  2      OPC=orl_r32_r32_1          orl %edx, %esi              #  14    0x1a  2      OPC=orl_r32_r32_1        
  movq (%r15,%rsi,1), %r8     #  15    0x1c  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8     #  15    0x1c  4      OPC=movq_r64_m64         
  nop                         #  16    0x20  1      OPC=nop                    nop                         #  16    0x20  1      OPC=nop                  
  nop                         #  17    0x21  1      OPC=nop                    nop                         #  17    0x21  1      OPC=nop                  
  nop                         #  18    0x22  1      OPC=nop                    nop                         #  18    0x22  1      OPC=nop                  
  nop                         #  19    0x23  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl            salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl          
  notq %rsi                   #  21    0x27  3      OPC=notq_r64               notq %rsi                   #  21    0x27  3      OPC=notq_r64             
  nop                         #  22    0x2a  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                         #  23    0x2b  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  andb %r15b, %sil            #  24    0x2c  3      OPC=andb_r8_r8_1           andb %r15b, %sil            #  24    0x2c  3      OPC=andb_r8_r8_1         
  jne .L_126860               #  25    0x2f  6      OPC=jne_label_1            jne .L_126860               #  25    0x2f  6      OPC=jne_label_1          
  nop                         #  26    0x35  1      OPC=nop                    nop                         #  26    0x35  1      OPC=nop                  
  nop                         #  27    0x36  1      OPC=nop                    nop                         #  27    0x36  1      OPC=nop                  
  nop                         #  28    0x37  1      OPC=nop                    nop                         #  28    0x37  1      OPC=nop                  
  nop                         #  29    0x38  1      OPC=nop                    nop                         #  29    0x38  1      OPC=nop                  
  nop                         #  30    0x39  1      OPC=nop                    nop                         #  30    0x39  1      OPC=nop                  
  nop                         #  31    0x3a  1      OPC=nop                    nop                         #  31    0x3a  1      OPC=nop                  
  nop                         #  32    0x3b  1      OPC=nop                    nop                         #  32    0x3b  1      OPC=nop                  
  nop                         #  33    0x3c  1      OPC=nop                    nop                         #  33    0x3c  1      OPC=nop                  
  nop                         #  34    0x3d  1      OPC=nop                    nop                         #  34    0x3d  1      OPC=nop                  
  nop                         #  35    0x3e  1      OPC=nop                    nop                         #  35    0x3e  1      OPC=nop                  
  nop                         #  36    0x3f  1      OPC=nop                    nop                         #  36    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32            orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32          
  movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  movl %r8d, %r9d             #  41    0x4d  3      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  41    0x4d  3      OPC=movl_r32_r32_1       
  addl $0x4, %ecx             #  42    0x50  3      OPC=addl_r32_imm8          addl $0x4, %ecx             #  42    0x50  3      OPC=addl_r32_imm8        
  notl %r9d                   #  43    0x53  3      OPC=notl_r32               notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16         
  andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1         andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                #  47    0x67  6      OPC=je_label_1             je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                         #  48    0x6d  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                         #  49    0x6e  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                         #  50    0x6f  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                         #  51    0x70  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                         #  52    0x71  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                         #  53    0x72  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                         #  54    0x73  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                         #  55    0x74  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
  nop                         #  56    0x75  1      OPC=nop                    nop                         #  56    0x75  1      OPC=nop                  
  nop                         #  57    0x76  1      OPC=nop                    nop                         #  57    0x76  1      OPC=nop                  
  nop                         #  58    0x77  1      OPC=nop                    nop                         #  58    0x77  1      OPC=nop                  
  nop                         #  59    0x78  1      OPC=nop                    nop                         #  59    0x78  1      OPC=nop                  
  nop                         #  60    0x79  1      OPC=nop                    nop                         #  60    0x79  1      OPC=nop                  
  nop                         #  61    0x7a  1      OPC=nop                    nop                         #  61    0x7a  1      OPC=nop                  
  nop                         #  62    0x7b  1      OPC=nop                    nop                         #  62    0x7b  1      OPC=nop                  
  nop                         #  63    0x7c  1      OPC=nop                    nop                         #  63    0x7c  1      OPC=nop                  
  nopl %eax                   #  64    0x7d  3      OPC=nopl_r32               nopl %eax                   #  64    0x7d  3      OPC=nopl_r32             
.L_126860:                    #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1         movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1       
  movsbl (%r15,%rdx,1), %esi  #  66    0x82  5      OPC=movsbl_r32_m8          movsbl (%r15,%rdx,1), %esi  #  66    0x82  5      OPC=movsbl_r32_m8        
  movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32           movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32         
  movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8           
  addl $0x1, %ecx             #  69    0x8d  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  69    0x8d  3      OPC=addl_r32_imm8        
  addw $0x1, %dx              #  70    0x90  4      OPC=addw_r16_imm8          addw $0x1, %dx              #  70    0x90  4      OPC=addw_r16_imm8        
  negq %rsi                   #  71    0x94  3      OPC=negq_r64               negq %rsi                   #  71    0x94  3      OPC=negq_r64             
  jne .L_126860               #  72    0x97  6      OPC=jne_label_1            jne .L_126860               #  72    0x97  6      OPC=jne_label_1          
  nop                         #  73    0x9d  1      OPC=nop                    nop                         #  73    0x9d  1      OPC=nop                  
  nop                         #  74    0x9e  1      OPC=nop                    nop                         #  74    0x9e  1      OPC=nop                  
  nop                         #  75    0x9f  1      OPC=nop                    nop                         #  75    0x9f  1      OPC=nop                  
  nop                         #  76    0xa0  1      OPC=nop                    nop                         #  76    0xa0  1      OPC=nop                  
  nop                         #  77    0xa1  1      OPC=nop                    nop                         #  77    0xa1  1      OPC=nop                  
  nop                         #  78    0xa2  1      OPC=nop                    nop                         #  78    0xa2  1      OPC=nop                  
  nop                         #  79    0xa3  1      OPC=nop                    nop                         #  79    0xa3  1      OPC=nop                  
  nop                         #  80    0xa4  1      OPC=nop                    nop                         #  80    0xa4  1      OPC=nop                  
  nop                         #  81    0xa5  1      OPC=nop                    nop                         #  81    0xa5  1      OPC=nop                  
  nop                         #  82    0xa6  1      OPC=nop                    nop                         #  82    0xa6  1      OPC=nop                  
  nop                         #  83    0xa7  1      OPC=nop                    nop                         #  83    0xa7  1      OPC=nop                  
  nop                         #  84    0xa8  1      OPC=nop                    nop                         #  84    0xa8  1      OPC=nop                  
  nop                         #  85    0xa9  1      OPC=nop                    nop                         #  85    0xa9  1      OPC=nop                  
  nop                         #  86    0xaa  1      OPC=nop                    nop                         #  86    0xaa  1      OPC=nop                  
  nop                         #  87    0xab  1      OPC=nop                    nop                         #  87    0xab  1      OPC=nop                  
  popq %r11                   #  88    0xac  2      OPC=popq_r64_1             popq %r11                   #  88    0xac  2      OPC=popq_r64_1           
  andl $0xe0, %r11d           #  89    0xae  4      OPC=andl_r32_imm8          andl $0xe0, %r11d           #  89    0xae  4      OPC=andl_r32_imm8        
  addq %r15, %r11             #  90    0xb2  3      OPC=addq_r64_r64           addq %r15, %r11             #  90    0xb2  3      OPC=addq_r64_r64         
  jmpq %r11                   #  91    0xb5  3      OPC=jmpq_r64               jmpq %r11                   #  91    0xb5  3      OPC=jmpq_r64             
                                                                                                                                                          
.size strcpy, .-strcpy                                                       .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (142)                                                   Lowest Known Correct Cost (152)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x3   1      OPC=nop                    nop                         #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32           nop                         #  4     0x3   1      OPC=nop                  
  orl %edx, %edi                #  5     0x6   2      OPC=orl_r32_r32_1          nop                         #  5     0x4   1      OPC=nop                  
  andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8          movl %esi, %edx             #  6     0x5   2      OPC=movl_r32_r32         
  nop                           #  7     0xc   1      OPC=nop                    movl %edi, %eax             #  7     0x7   2      OPC=movl_r32_r32         
  movq %rax, %rcx               #  8     0xd   3      OPC=movq_r64_r64_1         orl %edx, %edi              #  8     0x9   2      OPC=orl_r32_r32          
  nop                           #  9     0x10  1      OPC=nop                    movq %rax, %rcx             #  9     0xb   3      OPC=movq_r64_r64         
  jne .L_126860                 #  10    0x11  6      OPC=jne_label_1            andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8         
  orl %esp, %esi                #  11    0x17  2      OPC=orl_r32_r32_1          jne .L_126860               #  11    0x12  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8       #  12    0x19  4      OPC=movq_r64_m64           nop                         #  12    0x18  1      OPC=nop                  
  nop                           #  13    0x1d  1      OPC=nop                    nop                         #  13    0x19  1      OPC=nop                  
  nop                           #  14    0x1e  1      OPC=nop                    orl %edx, %esi              #  14    0x1a  2      OPC=orl_r32_r32_1        
  nop                           #  15    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  15    0x1c  4      OPC=movq_r64_m64         
  nop                           #  16    0x20  1      OPC=nop                    nop                         #  16    0x20  1      OPC=nop                  
  nop                           #  17    0x21  1      OPC=nop                    nop                         #  17    0x21  1      OPC=nop                  
  notb %sil                     #  18    0x22  3      OPC=notb_r8                nop                         #  18    0x22  1      OPC=nop                  
  nop                           #  19    0x25  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  nop                           #  20    0x26  1      OPC=nop                    salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl          
  nop                           #  21    0x27  1      OPC=nop                    notq %rsi                   #  21    0x27  3      OPC=notq_r64             
  nop                           #  22    0x28  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                           #  23    0x29  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                           #  24    0x2a  1      OPC=nop                    andb %r15b, %sil            #  24    0x2c  3      OPC=andb_r8_r8_1         
  nop                           #  25    0x2b  1      OPC=nop                    jne .L_126860               #  25    0x2f  6      OPC=jne_label_1          
  andb %r15b, %sil              #  26    0x2c  3      OPC=andb_r8_r8             nop                         #  26    0x35  1      OPC=nop                  
  nop                           #  27    0x2f  1      OPC=nop                    nop                         #  27    0x36  1      OPC=nop                  
  shrb %cl, %cl                 #  28    0x30  2      OPC=shrb_r8_cl             nop                         #  28    0x37  1      OPC=nop                  
  jne .L_126860                 #  29    0x32  6      OPC=jne_label_1            nop                         #  29    0x38  1      OPC=nop                  
  nop                           #  30    0x38  1      OPC=nop                    nop                         #  30    0x39  1      OPC=nop                  
  nop                           #  31    0x39  1      OPC=nop                    nop                         #  31    0x3a  1      OPC=nop                  
  nop                           #  32    0x3a  1      OPC=nop                    nop                         #  32    0x3b  1      OPC=nop                  
  nop                           #  33    0x3b  1      OPC=nop                    nop                         #  33    0x3c  1      OPC=nop                  
  nop                           #  34    0x3c  1      OPC=nop                    nop                         #  34    0x3d  1      OPC=nop                  
.L_126820:                      #        0x3d  0      OPC=<label>                nop                         #  35    0x3e  1      OPC=nop                  
  orl %ecx, %ecx                #  35    0x3d  2      OPC=orl_r32_r32_1          nop                         #  36    0x3f  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)      #  36    0x3f  4      OPC=movl_m32_r32         .L_126820:                    #        0x40  0      OPC=<label>              
  addl $0x4, %edx               #  37    0x43  3      OPC=addl_r32_imm8          orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32          
  movq (%r15,%rdx,1), %r8       #  38    0x46  4      OPC=movq_r64_m64           movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx               #  39    0x4a  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d               #  40    0x4d  3      OPC=movl_r32_r32_1         movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  leal -0x1010101(%r8), %esi    #  41    0x50  7      OPC=leal_r32_m32           movl %r8d, %r9d             #  41    0x4d  3      OPC=movl_r32_r32_1       
  notl %r9d                     #  42    0x57  3      OPC=notl_r32               addl $0x4, %ecx             #  42    0x50  3      OPC=addl_r32_imm8        
  andl %esi, %r9d               #  43    0x5a  3      OPC=andl_r32_r32           notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  andq $0x80808080, %r9         #  44    0x5d  7      OPC=andq_r64_imm32         leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16         
  je .L_126820                  #  45    0x64  6      OPC=je_label_1             andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  nop                           #  46    0x6a  1      OPC=nop                    andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  nop                           #  47    0x6b  1      OPC=nop                    je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                           #  48    0x6c  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                           #  49    0x6d  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                           #  50    0x6e  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                           #  51    0x6f  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                           #  52    0x70  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                           #  53    0x71  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                           #  54    0x72  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                           #  55    0x73  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
  nop                           #  56    0x74  1      OPC=nop                    nop                         #  56    0x75  1      OPC=nop                  
  nop                           #  57    0x75  1      OPC=nop                    nop                         #  57    0x76  1      OPC=nop                  
  nop                           #  58    0x76  1      OPC=nop                    nop                         #  58    0x77  1      OPC=nop                  
  nop                           #  59    0x77  1      OPC=nop                    nop                         #  59    0x78  1      OPC=nop                  
  nop                           #  60    0x78  1      OPC=nop                    nop                         #  60    0x79  1      OPC=nop                  
  nop                           #  61    0x79  1      OPC=nop                    nop                         #  61    0x7a  1      OPC=nop                  
  nop                           #  62    0x7a  1      OPC=nop                    nop                         #  62    0x7b  1      OPC=nop                  
  nop                           #  63    0x7b  1      OPC=nop                    nop                         #  63    0x7c  1      OPC=nop                  
  nop                           #  64    0x7c  1      OPC=nop                    nopl %eax                   #  64    0x7d  3      OPC=nopl_r32             
.L_126860:                      #        0x7d  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  movl %edx, %edx               #  65    0x7d  2      OPC=movl_r32_r32_1         movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1       
  movsbl (%r15,%rdx,1), %esi    #  66    0x7f  5      OPC=movsbl_r32_m8          movsbl (%r15,%rdx,1), %esi  #  66    0x82  5      OPC=movsbl_r32_m8        
  addl $0x1, %ecx               #  67    0x84  3      OPC=addl_r32_imm8          movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32         
  movb %sil, -0x1(%r15,%rcx,1)  #  68    0x87  5      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8           
  addl $0x1, %edx               #  69    0x8c  6      OPC=addl_r32_imm32         addl $0x1, %ecx             #  69    0x8d  3      OPC=addl_r32_imm8        
  negw %si                      #  70    0x92  3      OPC=negw_r16               addw $0x1, %dx              #  70    0x90  4      OPC=addw_r16_imm8        
  jne .L_126860                 #  71    0x95  6      OPC=jne_label_1            negq %rsi                   #  71    0x94  3      OPC=negq_r64             
  nop                           #  72    0x9b  1      OPC=nop                    jne .L_126860               #  72    0x97  6      OPC=jne_label_1          
  nop                           #  73    0x9c  1      OPC=nop                    nop                         #  73    0x9d  1      OPC=nop                  
  nop                           #  74    0x9d  1      OPC=nop                    nop                         #  74    0x9e  1      OPC=nop                  
  nop                           #  75    0x9e  1      OPC=nop                    nop                         #  75    0x9f  1      OPC=nop                  
  nop                           #  76    0x9f  1      OPC=nop                    nop                         #  76    0xa0  1      OPC=nop                  
  nop                           #  77    0xa0  1      OPC=nop                    nop                         #  77    0xa1  1      OPC=nop                  
  popq %r11                     #  78    0xa1  2      OPC=popq_r64_1             nop                         #  78    0xa2  1      OPC=nop                  
  andl $0xe0, %r11d             #  79    0xa3  4      OPC=andl_r32_imm8          nop                         #  79    0xa3  1      OPC=nop                  
  addq %r15, %r11               #  80    0xa7  3      OPC=addq_r64_r64           nop                         #  80    0xa4  1      OPC=nop                  
  jmpq %r11                     #  81    0xaa  3      OPC=jmpq_r64               nop                         #  81    0xa5  1      OPC=nop                  
                                                                                 nop                         #  82    0xa6  1      OPC=nop                  
.size strcpy, .-strcpy                                                           nop                         #  83    0xa7  1      OPC=nop                  
                                                                                 nop                         #  84    0xa8  1      OPC=nop                  
                                                                                 nop                         #  85    0xa9  1      OPC=nop                  
                                                                                 nop                         #  86    0xaa  1      OPC=nop                  
                                                                                 nop                         #  87    0xab  1      OPC=nop                  
                                                                                 popq %r11                   #  88    0xac  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d           #  89    0xae  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11             #  90    0xb2  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                   #  91    0xb5  3      OPC=jmpq_r64             
                                                                                                                                                            
                                                                               .size strcpy, .-strcpy                                                       
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (141)                                                   Lowest Known Correct Cost (152)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x3   1      OPC=nop                    nop                         #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32           nop                         #  4     0x3   1      OPC=nop                  
  orl %edx, %edi                #  5     0x6   2      OPC=orl_r32_r32_1          nop                         #  5     0x4   1      OPC=nop                  
  andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8          movl %esi, %edx             #  6     0x5   2      OPC=movl_r32_r32         
  nop                           #  7     0xc   1      OPC=nop                    movl %edi, %eax             #  7     0x7   2      OPC=movl_r32_r32         
  movq %rax, %rcx               #  8     0xd   3      OPC=movq_r64_r64_1         orl %edx, %edi              #  8     0x9   2      OPC=orl_r32_r32          
  nop                           #  9     0x10  1      OPC=nop                    movq %rax, %rcx             #  9     0xb   3      OPC=movq_r64_r64         
  jne .L_126860                 #  10    0x11  6      OPC=jne_label_1            andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8         
  orl %esp, %esi                #  11    0x17  2      OPC=orl_r32_r32_1          jne .L_126860               #  11    0x12  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8       #  12    0x19  4      OPC=movq_r64_m64           nop                         #  12    0x18  1      OPC=nop                  
  nop                           #  13    0x1d  1      OPC=nop                    nop                         #  13    0x19  1      OPC=nop                  
  nop                           #  14    0x1e  1      OPC=nop                    orl %edx, %esi              #  14    0x1a  2      OPC=orl_r32_r32_1        
  nop                           #  15    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  15    0x1c  4      OPC=movq_r64_m64         
  nop                           #  16    0x20  1      OPC=nop                    nop                         #  16    0x20  1      OPC=nop                  
  nop                           #  17    0x21  1      OPC=nop                    nop                         #  17    0x21  1      OPC=nop                  
  notb %sil                     #  18    0x22  3      OPC=notb_r8                nop                         #  18    0x22  1      OPC=nop                  
  nop                           #  19    0x25  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  nop                           #  20    0x26  1      OPC=nop                    salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl          
  nop                           #  21    0x27  1      OPC=nop                    notq %rsi                   #  21    0x27  3      OPC=notq_r64             
  nop                           #  22    0x28  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                           #  23    0x29  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                           #  24    0x2a  1      OPC=nop                    andb %r15b, %sil            #  24    0x2c  3      OPC=andb_r8_r8_1         
  nop                           #  25    0x2b  1      OPC=nop                    jne .L_126860               #  25    0x2f  6      OPC=jne_label_1          
  andb %r15b, %sil              #  26    0x2c  3      OPC=andb_r8_r8             nop                         #  26    0x35  1      OPC=nop                  
  nop                           #  27    0x2f  1      OPC=nop                    nop                         #  27    0x36  1      OPC=nop                  
  nop                           #  28    0x30  1      OPC=nop                    nop                         #  28    0x37  1      OPC=nop                  
  shrb %cl, %cl                 #  29    0x31  2      OPC=shrb_r8_cl             nop                         #  29    0x38  1      OPC=nop                  
  jne .L_126860                 #  30    0x33  6      OPC=jne_label_1            nop                         #  30    0x39  1      OPC=nop                  
  nop                           #  31    0x39  1      OPC=nop                    nop                         #  31    0x3a  1      OPC=nop                  
  nop                           #  32    0x3a  1      OPC=nop                    nop                         #  32    0x3b  1      OPC=nop                  
  nop                           #  33    0x3b  1      OPC=nop                    nop                         #  33    0x3c  1      OPC=nop                  
  nop                           #  34    0x3c  1      OPC=nop                    nop                         #  34    0x3d  1      OPC=nop                  
  nop                           #  35    0x3d  1      OPC=nop                    nop                         #  35    0x3e  1      OPC=nop                  
.L_126820:                      #        0x3e  0      OPC=<label>                nop                         #  36    0x3f  1      OPC=nop                  
  orl %ecx, %ecx                #  36    0x3e  2      OPC=orl_r32_r32_1        .L_126820:                    #        0x40  0      OPC=<label>              
  movl %r8d, (%r15,%rcx,1)      #  37    0x40  4      OPC=movl_m32_r32           orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32          
  addl $0x4, %edx               #  38    0x44  3      OPC=addl_r32_imm8          movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  movq (%r15,%rdx,1), %r8       #  39    0x47  4      OPC=movq_r64_m64           addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  addl $0x4, %ecx               #  40    0x4b  3      OPC=addl_r32_imm8          movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  movl %r8d, %r9d               #  41    0x4e  3      OPC=movl_r32_r32_1         movl %r8d, %r9d             #  41    0x4d  3      OPC=movl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  42    0x51  7      OPC=leal_r32_m32           addl $0x4, %ecx             #  42    0x50  3      OPC=addl_r32_imm8        
  notl %r9d                     #  43    0x58  3      OPC=notl_r32               notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  andl %esi, %r9d               #  44    0x5b  3      OPC=andl_r32_r32           leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16         
  andq $0x80808080, %r9         #  45    0x5e  7      OPC=andq_r64_imm32         andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  je .L_126820                  #  46    0x65  6      OPC=je_label_1             andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  nop                           #  47    0x6b  1      OPC=nop                    je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                           #  48    0x6c  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                           #  49    0x6d  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                           #  50    0x6e  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                           #  51    0x6f  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                           #  52    0x70  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                           #  53    0x71  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                           #  54    0x72  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                           #  55    0x73  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
  nop                           #  56    0x74  1      OPC=nop                    nop                         #  56    0x75  1      OPC=nop                  
  nop                           #  57    0x75  1      OPC=nop                    nop                         #  57    0x76  1      OPC=nop                  
  nop                           #  58    0x76  1      OPC=nop                    nop                         #  58    0x77  1      OPC=nop                  
  nop                           #  59    0x77  1      OPC=nop                    nop                         #  59    0x78  1      OPC=nop                  
  nop                           #  60    0x78  1      OPC=nop                    nop                         #  60    0x79  1      OPC=nop                  
  nop                           #  61    0x79  1      OPC=nop                    nop                         #  61    0x7a  1      OPC=nop                  
  nop                           #  62    0x7a  1      OPC=nop                    nop                         #  62    0x7b  1      OPC=nop                  
  nop                           #  63    0x7b  1      OPC=nop                    nop                         #  63    0x7c  1      OPC=nop                  
  nop                           #  64    0x7c  1      OPC=nop                    nopl %eax                   #  64    0x7d  3      OPC=nopl_r32             
  nop                           #  65    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                      #        0x7e  0      OPC=<label>                movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1       
  movl %edx, %edx               #  66    0x7e  2      OPC=movl_r32_r32_1         movsbl (%r15,%rdx,1), %esi  #  66    0x82  5      OPC=movsbl_r32_m8        
  movsbl (%r15,%rdx,1), %esi    #  67    0x80  5      OPC=movsbl_r32_m8          movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32         
  addl $0x1, %ecx               #  68    0x85  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)  #  69    0x88  5      OPC=movb_m8_r8             addl $0x1, %ecx             #  69    0x8d  3      OPC=addl_r32_imm8        
  addl $0x1, %edx               #  70    0x8d  6      OPC=addl_r32_imm32         addw $0x1, %dx              #  70    0x90  4      OPC=addw_r16_imm8        
  negw %si                      #  71    0x93  3      OPC=negw_r16               negq %rsi                   #  71    0x94  3      OPC=negq_r64             
  jne .L_126860                 #  72    0x96  6      OPC=jne_label_1            jne .L_126860               #  72    0x97  6      OPC=jne_label_1          
  nop                           #  73    0x9c  1      OPC=nop                    nop                         #  73    0x9d  1      OPC=nop                  
  nop                           #  74    0x9d  1      OPC=nop                    nop                         #  74    0x9e  1      OPC=nop                  
  nop                           #  75    0x9e  1      OPC=nop                    nop                         #  75    0x9f  1      OPC=nop                  
  nop                           #  76    0x9f  1      OPC=nop                    nop                         #  76    0xa0  1      OPC=nop                  
  nop                           #  77    0xa0  1      OPC=nop                    nop                         #  77    0xa1  1      OPC=nop                  
  nop                           #  78    0xa1  1      OPC=nop                    nop                         #  78    0xa2  1      OPC=nop                  
  popq %r11                     #  79    0xa2  2      OPC=popq_r64_1             nop                         #  79    0xa3  1      OPC=nop                  
  andl $0xe0, %r11d             #  80    0xa4  4      OPC=andl_r32_imm8          nop                         #  80    0xa4  1      OPC=nop                  
  addq %r15, %r11               #  81    0xa8  3      OPC=addq_r64_r64           nop                         #  81    0xa5  1      OPC=nop                  
  jmpq %r11                     #  82    0xab  3      OPC=jmpq_r64               nop                         #  82    0xa6  1      OPC=nop                  
                                                                                 nop                         #  83    0xa7  1      OPC=nop                  
.size strcpy, .-strcpy                                                           nop                         #  84    0xa8  1      OPC=nop                  
                                                                                 nop                         #  85    0xa9  1      OPC=nop                  
                                                                                 nop                         #  86    0xaa  1      OPC=nop                  
                                                                                 nop                         #  87    0xab  1      OPC=nop                  
                                                                                 popq %r11                   #  88    0xac  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d           #  89    0xae  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11             #  90    0xb2  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                   #  91    0xb5  3      OPC=jmpq_r64             
                                                                                                                                                            
                                                                               .size strcpy, .-strcpy                                                       
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (140)                                                   Lowest Known Correct Cost (152)                                              
                                                                                                                                                            
  .text                                                                          .text                                                                      
  .globl strcpy                                                                  .globl strcpy                                                              
  .type strcpy, @function                                                        .type strcpy, @function                                                    
                                                                                                                                                            
#! file-offset 0                                                               #! file-offset 0                                                             
#! rip-offset  0                                                               #! rip-offset  0                                                             
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                       
                                                                                                                                                            
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                         #  1     0     1      OPC=nop                  
  movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32           nop                         #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x3   1      OPC=nop                    nop                         #  3     0x2   1      OPC=nop                  
  movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32           nop                         #  4     0x3   1      OPC=nop                  
  orl %edx, %edi                #  5     0x6   2      OPC=orl_r32_r32_1          nop                         #  5     0x4   1      OPC=nop                  
  andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8          movl %esi, %edx             #  6     0x5   2      OPC=movl_r32_r32         
  nop                           #  7     0xc   1      OPC=nop                    movl %edi, %eax             #  7     0x7   2      OPC=movl_r32_r32         
  movq %rax, %rcx               #  8     0xd   3      OPC=movq_r64_r64_1         orl %edx, %edi              #  8     0x9   2      OPC=orl_r32_r32          
  nop                           #  9     0x10  1      OPC=nop                    movq %rax, %rcx             #  9     0xb   3      OPC=movq_r64_r64         
  jne .L_126860                 #  10    0x11  6      OPC=jne_label_1            andb $0x3, %dil             #  10    0xe   4      OPC=andb_r8_imm8         
  orl %esp, %esi                #  11    0x17  2      OPC=orl_r32_r32_1          jne .L_126860               #  11    0x12  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8       #  12    0x19  4      OPC=movq_r64_m64           nop                         #  12    0x18  1      OPC=nop                  
  nop                           #  13    0x1d  1      OPC=nop                    nop                         #  13    0x19  1      OPC=nop                  
  nop                           #  14    0x1e  1      OPC=nop                    orl %edx, %esi              #  14    0x1a  2      OPC=orl_r32_r32_1        
  nop                           #  15    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  15    0x1c  4      OPC=movq_r64_m64         
  nop                           #  16    0x20  1      OPC=nop                    nop                         #  16    0x20  1      OPC=nop                  
  nop                           #  17    0x21  1      OPC=nop                    nop                         #  17    0x21  1      OPC=nop                  
  notb %sil                     #  18    0x22  3      OPC=notb_r8                nop                         #  18    0x22  1      OPC=nop                  
  nop                           #  19    0x25  1      OPC=nop                    nop                         #  19    0x23  1      OPC=nop                  
  nop                           #  20    0x26  1      OPC=nop                    salq %cl, %rdx              #  20    0x24  3      OPC=salq_r64_cl          
  nop                           #  21    0x27  1      OPC=nop                    notq %rsi                   #  21    0x27  3      OPC=notq_r64             
  nop                           #  22    0x28  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                           #  23    0x29  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                           #  24    0x2a  1      OPC=nop                    andb %r15b, %sil            #  24    0x2c  3      OPC=andb_r8_r8_1         
  nop                           #  25    0x2b  1      OPC=nop                    jne .L_126860               #  25    0x2f  6      OPC=jne_label_1          
  andb %r15b, %sil              #  26    0x2c  3      OPC=andb_r8_r8             nop                         #  26    0x35  1      OPC=nop                  
  nop                           #  27    0x2f  1      OPC=nop                    nop                         #  27    0x36  1      OPC=nop                  
  nop                           #  28    0x30  1      OPC=nop                    nop                         #  28    0x37  1      OPC=nop                  
  nop                           #  29    0x31  1      OPC=nop                    nop                         #  29    0x38  1      OPC=nop                  
  shrb %cl, %cl                 #  30    0x32  2      OPC=shrb_r8_cl             nop                         #  30    0x39  1      OPC=nop                  
  jne .L_126860                 #  31    0x34  6      OPC=jne_label_1            nop                         #  31    0x3a  1      OPC=nop                  
  nop                           #  32    0x3a  1      OPC=nop                    nop                         #  32    0x3b  1      OPC=nop                  
  nop                           #  33    0x3b  1      OPC=nop                    nop                         #  33    0x3c  1      OPC=nop                  
  nop                           #  34    0x3c  1      OPC=nop                    nop                         #  34    0x3d  1      OPC=nop                  
  nop                           #  35    0x3d  1      OPC=nop                    nop                         #  35    0x3e  1      OPC=nop                  
  nop                           #  36    0x3e  1      OPC=nop                    nop                         #  36    0x3f  1      OPC=nop                  
.L_126820:                      #        0x3f  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  orl %ecx, %ecx                #  37    0x3f  2      OPC=orl_r32_r32_1          orl %ecx, %ecx              #  37    0x40  2      OPC=orl_r32_r32          
  movl %r8d, (%r15,%rcx,1)      #  38    0x41  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  38    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  39    0x45  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  39    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8       #  40    0x48  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8     #  40    0x49  4      OPC=movq_r64_m64         
  addl $0x4, %ecx               #  41    0x4c  3      OPC=addl_r32_imm8          movl %r8d, %r9d             #  41    0x4d  3      OPC=movl_r32_r32_1       
  movl %r8d, %r9d               #  42    0x4f  3      OPC=movl_r32_r32_1         addl $0x4, %ecx             #  42    0x50  3      OPC=addl_r32_imm8        
  leal -0x1010101(%r8), %esi    #  43    0x52  7      OPC=leal_r32_m32           notl %r9d                   #  43    0x53  3      OPC=notl_r32             
  notl %r9d                     #  44    0x59  3      OPC=notl_r32               leal -0x1010101(%r8), %esi  #  44    0x56  7      OPC=leal_r32_m16         
  andl %esi, %r9d               #  45    0x5c  3      OPC=andl_r32_r32           andq %rsi, %r9              #  45    0x5d  3      OPC=andq_r64_r64_1       
  andq $0x80808080, %r9         #  46    0x5f  7      OPC=andq_r64_imm32         andl $0x80808080, %r9d      #  46    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                  #  47    0x66  6      OPC=je_label_1             je .L_126820                #  47    0x67  6      OPC=je_label_1           
  nop                           #  48    0x6c  1      OPC=nop                    nop                         #  48    0x6d  1      OPC=nop                  
  nop                           #  49    0x6d  1      OPC=nop                    nop                         #  49    0x6e  1      OPC=nop                  
  nop                           #  50    0x6e  1      OPC=nop                    nop                         #  50    0x6f  1      OPC=nop                  
  nop                           #  51    0x6f  1      OPC=nop                    nop                         #  51    0x70  1      OPC=nop                  
  nop                           #  52    0x70  1      OPC=nop                    nop                         #  52    0x71  1      OPC=nop                  
  nop                           #  53    0x71  1      OPC=nop                    nop                         #  53    0x72  1      OPC=nop                  
  nop                           #  54    0x72  1      OPC=nop                    nop                         #  54    0x73  1      OPC=nop                  
  nop                           #  55    0x73  1      OPC=nop                    nop                         #  55    0x74  1      OPC=nop                  
  nop                           #  56    0x74  1      OPC=nop                    nop                         #  56    0x75  1      OPC=nop                  
  nop                           #  57    0x75  1      OPC=nop                    nop                         #  57    0x76  1      OPC=nop                  
  nop                           #  58    0x76  1      OPC=nop                    nop                         #  58    0x77  1      OPC=nop                  
  nop                           #  59    0x77  1      OPC=nop                    nop                         #  59    0x78  1      OPC=nop                  
  nop                           #  60    0x78  1      OPC=nop                    nop                         #  60    0x79  1      OPC=nop                  
  nop                           #  61    0x79  1      OPC=nop                    nop                         #  61    0x7a  1      OPC=nop                  
  nop                           #  62    0x7a  1      OPC=nop                    nop                         #  62    0x7b  1      OPC=nop                  
  nop                           #  63    0x7b  1      OPC=nop                    nop                         #  63    0x7c  1      OPC=nop                  
  nop                           #  64    0x7c  1      OPC=nop                    nopl %eax                   #  64    0x7d  3      OPC=nopl_r32             
  nop                           #  65    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                           #  66    0x7e  1      OPC=nop                    movl %edx, %edx             #  65    0x80  2      OPC=movl_r32_r32_1       
.L_126860:                      #        0x7f  0      OPC=<label>                movsbl (%r15,%rdx,1), %esi  #  66    0x82  5      OPC=movsbl_r32_m8        
  movl %edx, %edx               #  67    0x7f  2      OPC=movl_r32_r32_1         movl %ecx, %ecx             #  67    0x87  2      OPC=movl_r32_r32         
  movsbl (%r15,%rdx,1), %esi    #  68    0x81  5      OPC=movsbl_r32_m8          movb %sil, (%r15,%rcx,1)    #  68    0x89  4      OPC=movb_m8_r8           
  addl $0x1, %ecx               #  69    0x86  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  69    0x8d  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  70    0x89  5      OPC=movb_m8_r8             addw $0x1, %dx              #  70    0x90  4      OPC=addw_r16_imm8        
  addl $0x1, %edx               #  71    0x8e  6      OPC=addl_r32_imm32         negq %rsi                   #  71    0x94  3      OPC=negq_r64             
  negw %si                      #  72    0x94  3      OPC=negw_r16               jne .L_126860               #  72    0x97  6      OPC=jne_label_1          
  jne .L_126860                 #  73    0x97  6      OPC=jne_label_1            nop                         #  73    0x9d  1      OPC=nop                  
  nop                           #  74    0x9d  1      OPC=nop                    nop                         #  74    0x9e  1      OPC=nop                  
  nop                           #  75    0x9e  1      OPC=nop                    nop                         #  75    0x9f  1      OPC=nop                  
  nop                           #  76    0x9f  1      OPC=nop                    nop                         #  76    0xa0  1      OPC=nop                  
  nop                           #  77    0xa0  1      OPC=nop                    nop                         #  77    0xa1  1      OPC=nop                  
  nop                           #  78    0xa1  1      OPC=nop                    nop                         #  78    0xa2  1      OPC=nop                  
  nop                           #  79    0xa2  1      OPC=nop                    nop                         #  79    0xa3  1      OPC=nop                  
  popq %r11                     #  80    0xa3  2      OPC=popq_r64_1             nop                         #  80    0xa4  1      OPC=nop                  
  andl $0xe0, %r11d             #  81    0xa5  4      OPC=andl_r32_imm8          nop                         #  81    0xa5  1      OPC=nop                  
  addq %r15, %r11               #  82    0xa9  3      OPC=addq_r64_r64           nop                         #  82    0xa6  1      OPC=nop                  
  jmpq %r11                     #  83    0xac  3      OPC=jmpq_r64               nop                         #  83    0xa7  1      OPC=nop                  
                                                                                 nop                         #  84    0xa8  1      OPC=nop                  
.size strcpy, .-strcpy                                                           nop                         #  85    0xa9  1      OPC=nop                  
                                                                                 nop                         #  86    0xaa  1      OPC=nop                  
                                                                                 nop                         #  87    0xab  1      OPC=nop                  
                                                                                 popq %r11                   #  88    0xac  2      OPC=popq_r64_1           
                                                                                 andl $0xe0, %r11d           #  89    0xae  4      OPC=andl_r32_imm8        
                                                                                 addq %r15, %r11             #  90    0xb2  3      OPC=addq_r64_r64         
                                                                                 jmpq %r11                   #  91    0xb5  3      OPC=jmpq_r64             
                                                                                                                                                            
                                                                               .size strcpy, .-strcpy                                                       
                                                                                                                                                            

********************************************************************************

Progress Update: 

Lowest Cost Discovered (139)                                                   Lowest Known Correct Cost (139)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32           movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32         
  nop                           #  3     0x3   1      OPC=nop                    nop                           #  3     0x3   1      OPC=nop                  
  movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32           movl %edi, %eax               #  4     0x4   2      OPC=movl_r32_r32         
  orl %edx, %edi                #  5     0x6   2      OPC=orl_r32_r32_1          orl %edx, %edi                #  5     0x6   2      OPC=orl_r32_r32_1        
  andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8          andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8        
  nop                           #  7     0xc   1      OPC=nop                    nop                           #  7     0xc   1      OPC=nop                  
  movq %rax, %rcx               #  8     0xd   3      OPC=movq_r64_r64_1         movq %rax, %rcx               #  8     0xd   3      OPC=movq_r64_r64_1       
  nop                           #  9     0x10  1      OPC=nop                    nop                           #  9     0x10  1      OPC=nop                  
  jne .L_126860                 #  10    0x11  6      OPC=jne_label_1            jne .L_126860                 #  10    0x11  6      OPC=jne_label_1          
  orl %esp, %esi                #  11    0x17  2      OPC=orl_r32_r32_1          orl %esp, %esi                #  11    0x17  2      OPC=orl_r32_r32_1        
  movq (%r15,%rsi,1), %r8       #  12    0x19  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8       #  12    0x19  4      OPC=movq_r64_m64         
  nop                           #  13    0x1d  1      OPC=nop                    nop                           #  13    0x1d  1      OPC=nop                  
  nop                           #  14    0x1e  1      OPC=nop                    nop                           #  14    0x1e  1      OPC=nop                  
  nop                           #  15    0x1f  1      OPC=nop                    nop                           #  15    0x1f  1      OPC=nop                  
  shrb %cl, %cl                 #  16    0x20  2      OPC=shrb_r8_cl             shrb %cl, %cl                 #  16    0x20  2      OPC=shrb_r8_cl           
  nop                           #  17    0x22  1      OPC=nop                    nop                           #  17    0x22  1      OPC=nop                  
  nop                           #  18    0x23  1      OPC=nop                    nop                           #  18    0x23  1      OPC=nop                  
  notb %sil                     #  19    0x24  3      OPC=notb_r8                notb %sil                     #  19    0x24  3      OPC=notb_r8              
  nop                           #  20    0x27  1      OPC=nop                    nop                           #  20    0x27  1      OPC=nop                  
  nop                           #  21    0x28  1      OPC=nop                    nop                           #  21    0x28  1      OPC=nop                  
  nop                           #  22    0x29  1      OPC=nop                    nop                           #  22    0x29  1      OPC=nop                  
  nop                           #  23    0x2a  1      OPC=nop                    nop                           #  23    0x2a  1      OPC=nop                  
  nop                           #  24    0x2b  1      OPC=nop                    nop                           #  24    0x2b  1      OPC=nop                  
  nop                           #  25    0x2c  1      OPC=nop                    nop                           #  25    0x2c  1      OPC=nop                  
  nop                           #  26    0x2d  1      OPC=nop                    nop                           #  26    0x2d  1      OPC=nop                  
  andb %r15b, %sil              #  27    0x2e  3      OPC=andb_r8_r8             andb %r15b, %sil              #  27    0x2e  3      OPC=andb_r8_r8           
  nop                           #  28    0x31  1      OPC=nop                    nop                           #  28    0x31  1      OPC=nop                  
  nop                           #  29    0x32  1      OPC=nop                    nop                           #  29    0x32  1      OPC=nop                  
  nop                           #  30    0x33  1      OPC=nop                    nop                           #  30    0x33  1      OPC=nop                  
  nop                           #  31    0x34  1      OPC=nop                    nop                           #  31    0x34  1      OPC=nop                  
  jne .L_126860                 #  32    0x35  6      OPC=jne_label_1            jne .L_126860                 #  32    0x35  6      OPC=jne_label_1          
  nop                           #  33    0x3b  1      OPC=nop                    nop                           #  33    0x3b  1      OPC=nop                  
  nop                           #  34    0x3c  1      OPC=nop                    nop                           #  34    0x3c  1      OPC=nop                  
  nop                           #  35    0x3d  1      OPC=nop                    nop                           #  35    0x3d  1      OPC=nop                  
  nop                           #  36    0x3e  1      OPC=nop                    nop                           #  36    0x3e  1      OPC=nop                  
  nop                           #  37    0x3f  1      OPC=nop                    nop                           #  37    0x3f  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  orl %ecx, %ecx                #  38    0x40  2      OPC=orl_r32_r32_1          orl %ecx, %ecx                #  38    0x40  2      OPC=orl_r32_r32_1        
  movl %r8d, (%r15,%rcx,1)      #  39    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  39    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  40    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  40    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8       #  41    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8       #  41    0x49  4      OPC=movq_r64_m64         
  addl $0x4, %ecx               #  42    0x4d  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  42    0x4d  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d               #  43    0x50  3      OPC=movl_r32_r32_1         movl %r8d, %r9d               #  43    0x50  3      OPC=movl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  44    0x53  7      OPC=leal_r32_m32           leal -0x1010101(%r8), %esi    #  44    0x53  7      OPC=leal_r32_m32         
  notl %r9d                     #  45    0x5a  3      OPC=notl_r32               notl %r9d                     #  45    0x5a  3      OPC=notl_r32             
  andl %esi, %r9d               #  46    0x5d  3      OPC=andl_r32_r32           andl %esi, %r9d               #  46    0x5d  3      OPC=andl_r32_r32         
  andq $0x80808080, %r9         #  47    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9         #  47    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                  #  48    0x67  6      OPC=je_label_1             je .L_126820                  #  48    0x67  6      OPC=je_label_1           
  nop                           #  49    0x6d  1      OPC=nop                    nop                           #  49    0x6d  1      OPC=nop                  
  nop                           #  50    0x6e  1      OPC=nop                    nop                           #  50    0x6e  1      OPC=nop                  
  nop                           #  51    0x6f  1      OPC=nop                    nop                           #  51    0x6f  1      OPC=nop                  
  nop                           #  52    0x70  1      OPC=nop                    nop                           #  52    0x70  1      OPC=nop                  
  nop                           #  53    0x71  1      OPC=nop                    nop                           #  53    0x71  1      OPC=nop                  
  nop                           #  54    0x72  1      OPC=nop                    nop                           #  54    0x72  1      OPC=nop                  
  nop                           #  55    0x73  1      OPC=nop                    nop                           #  55    0x73  1      OPC=nop                  
  nop                           #  56    0x74  1      OPC=nop                    nop                           #  56    0x74  1      OPC=nop                  
  nop                           #  57    0x75  1      OPC=nop                    nop                           #  57    0x75  1      OPC=nop                  
  nop                           #  58    0x76  1      OPC=nop                    nop                           #  58    0x76  1      OPC=nop                  
  nop                           #  59    0x77  1      OPC=nop                    nop                           #  59    0x77  1      OPC=nop                  
  nop                           #  60    0x78  1      OPC=nop                    nop                           #  60    0x78  1      OPC=nop                  
  nop                           #  61    0x79  1      OPC=nop                    nop                           #  61    0x79  1      OPC=nop                  
  nop                           #  62    0x7a  1      OPC=nop                    nop                           #  62    0x7a  1      OPC=nop                  
  nop                           #  63    0x7b  1      OPC=nop                    nop                           #  63    0x7b  1      OPC=nop                  
  nop                           #  64    0x7c  1      OPC=nop                    nop                           #  64    0x7c  1      OPC=nop                  
  nop                           #  65    0x7d  1      OPC=nop                    nop                           #  65    0x7d  1      OPC=nop                  
  nop                           #  66    0x7e  1      OPC=nop                    nop                           #  66    0x7e  1      OPC=nop                  
  nop                           #  67    0x7f  1      OPC=nop                    nop                           #  67    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  movl %edx, %edx               #  68    0x80  2      OPC=movl_r32_r32_1         movl %edx, %edx               #  68    0x80  2      OPC=movl_r32_r32_1       
  movsbl (%r15,%rdx,1), %esi    #  69    0x82  5      OPC=movsbl_r32_m8          movsbl (%r15,%rdx,1), %esi    #  69    0x82  5      OPC=movsbl_r32_m8        
  addl $0x1, %ecx               #  70    0x87  3      OPC=addl_r32_imm8          addl $0x1, %ecx               #  70    0x87  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  71    0x8a  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  71    0x8a  5      OPC=movb_m8_r8           
  addl $0x1, %edx               #  72    0x8f  6      OPC=addl_r32_imm32         addl $0x1, %edx               #  72    0x8f  6      OPC=addl_r32_imm32       
  negw %si                      #  73    0x95  3      OPC=negw_r16               negw %si                      #  73    0x95  3      OPC=negw_r16             
  jne .L_126860                 #  74    0x98  6      OPC=jne_label_1            jne .L_126860                 #  74    0x98  6      OPC=jne_label_1          
  nop                           #  75    0x9e  1      OPC=nop                    nop                           #  75    0x9e  1      OPC=nop                  
  nop                           #  76    0x9f  1      OPC=nop                    nop                           #  76    0x9f  1      OPC=nop                  
  nop                           #  77    0xa0  1      OPC=nop                    nop                           #  77    0xa0  1      OPC=nop                  
  nop                           #  78    0xa1  1      OPC=nop                    nop                           #  78    0xa1  1      OPC=nop                  
  nop                           #  79    0xa2  1      OPC=nop                    nop                           #  79    0xa2  1      OPC=nop                  
  nop                           #  80    0xa3  1      OPC=nop                    nop                           #  80    0xa3  1      OPC=nop                  
  popq %r11                     #  81    0xa4  2      OPC=popq_r64_1             popq %r11                     #  81    0xa4  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  82    0xa6  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  82    0xa6  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  83    0xaa  3      OPC=addq_r64_r64           addq %r15, %r11               #  83    0xaa  3      OPC=addq_r64_r64         
  jmpq %r11                     #  84    0xad  3      OPC=jmpq_r64               jmpq %r11                     #  84    0xad  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (138)                                                   Lowest Known Correct Cost (138)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32           movl %esi, %edx               #  2     0x1   2      OPC=movl_r32_r32         
  movl %edi, %eax               #  3     0x3   2      OPC=movl_r32_r32           movl %edi, %eax               #  3     0x3   2      OPC=movl_r32_r32         
  nop                           #  4     0x5   1      OPC=nop                    nop                           #  4     0x5   1      OPC=nop                  
  orl %esi, %edi                #  5     0x6   2      OPC=orl_r32_r32_1          orl %esi, %edi                #  5     0x6   2      OPC=orl_r32_r32_1        
  andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8          andq $0x3, %rdi               #  6     0x8   4      OPC=andq_r64_imm8        
  nop                           #  7     0xc   1      OPC=nop                    nop                           #  7     0xc   1      OPC=nop                  
  nop                           #  8     0xd   1      OPC=nop                    nop                           #  8     0xd   1      OPC=nop                  
  nop                           #  9     0xe   1      OPC=nop                    nop                           #  9     0xe   1      OPC=nop                  
  nop                           #  10    0xf   1      OPC=nop                    nop                           #  10    0xf   1      OPC=nop                  
  movq %rax, %rcx               #  11    0x10  3      OPC=movq_r64_r64_1         movq %rax, %rcx               #  11    0x10  3      OPC=movq_r64_r64_1       
  jne .L_126860                 #  12    0x13  6      OPC=jne_label_1            jne .L_126860                 #  12    0x13  6      OPC=jne_label_1          
  orl %esp, %esi                #  13    0x19  2      OPC=orl_r32_r32_1          orl %esp, %esi                #  13    0x19  2      OPC=orl_r32_r32_1        
  movq (%r15,%rsi,1), %r8       #  14    0x1b  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8       #  14    0x1b  4      OPC=movq_r64_m64         
  nop                           #  15    0x1f  1      OPC=nop                    nop                           #  15    0x1f  1      OPC=nop                  
  nop                           #  16    0x20  1      OPC=nop                    nop                           #  16    0x20  1      OPC=nop                  
  shlb %cl, %cl                 #  17    0x21  2      OPC=shlb_r8_cl             shlb %cl, %cl                 #  17    0x21  2      OPC=shlb_r8_cl           
  notb %sil                     #  18    0x23  3      OPC=notb_r8                notb %sil                     #  18    0x23  3      OPC=notb_r8              
  nop                           #  19    0x26  1      OPC=nop                    nop                           #  19    0x26  1      OPC=nop                  
  nop                           #  20    0x27  1      OPC=nop                    nop                           #  20    0x27  1      OPC=nop                  
  nop                           #  21    0x28  1      OPC=nop                    nop                           #  21    0x28  1      OPC=nop                  
  nop                           #  22    0x29  1      OPC=nop                    nop                           #  22    0x29  1      OPC=nop                  
  nop                           #  23    0x2a  1      OPC=nop                    nop                           #  23    0x2a  1      OPC=nop                  
  nop                           #  24    0x2b  1      OPC=nop                    nop                           #  24    0x2b  1      OPC=nop                  
  nop                           #  25    0x2c  1      OPC=nop                    nop                           #  25    0x2c  1      OPC=nop                  
  nop                           #  26    0x2d  1      OPC=nop                    nop                           #  26    0x2d  1      OPC=nop                  
  andb %r15b, %sil              #  27    0x2e  3      OPC=andb_r8_r8             andb %r15b, %sil              #  27    0x2e  3      OPC=andb_r8_r8           
  nop                           #  28    0x31  1      OPC=nop                    nop                           #  28    0x31  1      OPC=nop                  
  nop                           #  29    0x32  1      OPC=nop                    nop                           #  29    0x32  1      OPC=nop                  
  nop                           #  30    0x33  1      OPC=nop                    nop                           #  30    0x33  1      OPC=nop                  
  nop                           #  31    0x34  1      OPC=nop                    nop                           #  31    0x34  1      OPC=nop                  
  nop                           #  32    0x35  1      OPC=nop                    nop                           #  32    0x35  1      OPC=nop                  
  jne .L_126860                 #  33    0x36  6      OPC=jne_label_1            jne .L_126860                 #  33    0x36  6      OPC=jne_label_1          
  nop                           #  34    0x3c  1      OPC=nop                    nop                           #  34    0x3c  1      OPC=nop                  
  nop                           #  35    0x3d  1      OPC=nop                    nop                           #  35    0x3d  1      OPC=nop                  
  nop                           #  36    0x3e  1      OPC=nop                    nop                           #  36    0x3e  1      OPC=nop                  
  nop                           #  37    0x3f  1      OPC=nop                    nop                           #  37    0x3f  1      OPC=nop                  
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  orl %ecx, %ecx                #  38    0x40  2      OPC=orl_r32_r32_1          orl %ecx, %ecx                #  38    0x40  2      OPC=orl_r32_r32_1        
  movl %r8d, (%r15,%rcx,1)      #  39    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  39    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  40    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  40    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8       #  41    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8       #  41    0x49  4      OPC=movq_r64_m64         
  addl $0x4, %ecx               #  42    0x4d  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  42    0x4d  3      OPC=addl_r32_imm8        
  movl %r8d, %r9d               #  43    0x50  3      OPC=movl_r32_r32_1         movl %r8d, %r9d               #  43    0x50  3      OPC=movl_r32_r32_1       
  leal -0x1010101(%r8), %esi    #  44    0x53  7      OPC=leal_r32_m32           leal -0x1010101(%r8), %esi    #  44    0x53  7      OPC=leal_r32_m32         
  notl %r9d                     #  45    0x5a  3      OPC=notl_r32               notl %r9d                     #  45    0x5a  3      OPC=notl_r32             
  andl %esi, %r9d               #  46    0x5d  3      OPC=andl_r32_r32           andl %esi, %r9d               #  46    0x5d  3      OPC=andl_r32_r32         
  andq $0x80808080, %r9         #  47    0x60  7      OPC=andq_r64_imm32         andq $0x80808080, %r9         #  47    0x60  7      OPC=andq_r64_imm32       
  je .L_126820                  #  48    0x67  6      OPC=je_label_1             je .L_126820                  #  48    0x67  6      OPC=je_label_1           
  nop                           #  49    0x6d  1      OPC=nop                    nop                           #  49    0x6d  1      OPC=nop                  
  nop                           #  50    0x6e  1      OPC=nop                    nop                           #  50    0x6e  1      OPC=nop                  
  nop                           #  51    0x6f  1      OPC=nop                    nop                           #  51    0x6f  1      OPC=nop                  
  nop                           #  52    0x70  1      OPC=nop                    nop                           #  52    0x70  1      OPC=nop                  
  nop                           #  53    0x71  1      OPC=nop                    nop                           #  53    0x71  1      OPC=nop                  
  nop                           #  54    0x72  1      OPC=nop                    nop                           #  54    0x72  1      OPC=nop                  
  nop                           #  55    0x73  1      OPC=nop                    nop                           #  55    0x73  1      OPC=nop                  
  nop                           #  56    0x74  1      OPC=nop                    nop                           #  56    0x74  1      OPC=nop                  
  nop                           #  57    0x75  1      OPC=nop                    nop                           #  57    0x75  1      OPC=nop                  
  nop                           #  58    0x76  1      OPC=nop                    nop                           #  58    0x76  1      OPC=nop                  
  nop                           #  59    0x77  1      OPC=nop                    nop                           #  59    0x77  1      OPC=nop                  
  nop                           #  60    0x78  1      OPC=nop                    nop                           #  60    0x78  1      OPC=nop                  
  nop                           #  61    0x79  1      OPC=nop                    nop                           #  61    0x79  1      OPC=nop                  
  nop                           #  62    0x7a  1      OPC=nop                    nop                           #  62    0x7a  1      OPC=nop                  
  nop                           #  63    0x7b  1      OPC=nop                    nop                           #  63    0x7b  1      OPC=nop                  
  nop                           #  64    0x7c  1      OPC=nop                    nop                           #  64    0x7c  1      OPC=nop                  
  nop                           #  65    0x7d  1      OPC=nop                    nop                           #  65    0x7d  1      OPC=nop                  
  nop                           #  66    0x7e  1      OPC=nop                    nop                           #  66    0x7e  1      OPC=nop                  
  nop                           #  67    0x7f  1      OPC=nop                    nop                           #  67    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  movl %edx, %edx               #  68    0x80  2      OPC=movl_r32_r32_1         movl %edx, %edx               #  68    0x80  2      OPC=movl_r32_r32_1       
  movsbl (%r15,%rdx,1), %esi    #  69    0x82  5      OPC=movsbl_r32_m8          movsbl (%r15,%rdx,1), %esi    #  69    0x82  5      OPC=movsbl_r32_m8        
  addl $0x1, %ecx               #  70    0x87  3      OPC=addl_r32_imm8          addl $0x1, %ecx               #  70    0x87  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  71    0x8a  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  71    0x8a  5      OPC=movb_m8_r8           
  addl $0x1, %edx               #  72    0x8f  6      OPC=addl_r32_imm32         addl $0x1, %edx               #  72    0x8f  6      OPC=addl_r32_imm32       
  negw %si                      #  73    0x95  3      OPC=negw_r16               negw %si                      #  73    0x95  3      OPC=negw_r16             
  jne .L_126860                 #  74    0x98  6      OPC=jne_label_1            jne .L_126860                 #  74    0x98  6      OPC=jne_label_1          
  nop                           #  75    0x9e  1      OPC=nop                    nop                           #  75    0x9e  1      OPC=nop                  
  nop                           #  76    0x9f  1      OPC=nop                    nop                           #  76    0x9f  1      OPC=nop                  
  nop                           #  77    0xa0  1      OPC=nop                    nop                           #  77    0xa0  1      OPC=nop                  
  nop                           #  78    0xa1  1      OPC=nop                    nop                           #  78    0xa1  1      OPC=nop                  
  nop                           #  79    0xa2  1      OPC=nop                    nop                           #  79    0xa2  1      OPC=nop                  
  nop                           #  80    0xa3  1      OPC=nop                    nop                           #  80    0xa3  1      OPC=nop                  
  popq %r11                     #  81    0xa4  2      OPC=popq_r64_1             popq %r11                     #  81    0xa4  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  82    0xa6  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  82    0xa6  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  83    0xaa  3      OPC=addq_r64_r64           addq %r15, %r11               #  83    0xaa  3      OPC=addq_r64_r64         
  jmpq %r11                     #  84    0xad  3      OPC=jmpq_r64               jmpq %r11                     #  84    0xad  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (137)                                                   Lowest Known Correct Cost (137)                                                
                                                                                                                                                              
  .text                                                                          .text                                                                        
  .globl strcpy                                                                  .globl strcpy                                                                
  .type strcpy, @function                                                        .type strcpy, @function                                                      
                                                                                                                                                              
#! file-offset 0                                                               #! file-offset 0                                                               
#! rip-offset  0                                                               #! rip-offset  0                                                               
#! capacity    0 bytes                                                         #! capacity    0 bytes                                                         
                                                                                                                                                              
# Text                          #  Line  RIP   Bytes  Opcode                   # Text                          #  Line  RIP   Bytes  Opcode                   
.strcpy:                        #        0     0      OPC=<label>              .strcpy:                        #        0     0      OPC=<label>              
  nop                           #  1     0     1      OPC=nop                    nop                           #  1     0     1      OPC=nop                  
  nop                           #  2     0x1   1      OPC=nop                    nop                           #  2     0x1   1      OPC=nop                  
  nop                           #  3     0x2   1      OPC=nop                    nop                           #  3     0x2   1      OPC=nop                  
  nop                           #  4     0x3   1      OPC=nop                    nop                           #  4     0x3   1      OPC=nop                  
  nop                           #  5     0x4   1      OPC=nop                    nop                           #  5     0x4   1      OPC=nop                  
  nop                           #  6     0x5   1      OPC=nop                    nop                           #  6     0x5   1      OPC=nop                  
  nop                           #  7     0x6   1      OPC=nop                    nop                           #  7     0x6   1      OPC=nop                  
  nop                           #  8     0x7   1      OPC=nop                    nop                           #  8     0x7   1      OPC=nop                  
  nop                           #  9     0x8   1      OPC=nop                    nop                           #  9     0x8   1      OPC=nop                  
  nop                           #  10    0x9   1      OPC=nop                    nop                           #  10    0x9   1      OPC=nop                  
  nop                           #  11    0xa   1      OPC=nop                    nop                           #  11    0xa   1      OPC=nop                  
  nop                           #  12    0xb   1      OPC=nop                    nop                           #  12    0xb   1      OPC=nop                  
  nop                           #  13    0xc   1      OPC=nop                    nop                           #  13    0xc   1      OPC=nop                  
  nop                           #  14    0xd   1      OPC=nop                    nop                           #  14    0xd   1      OPC=nop                  
  nop                           #  15    0xe   1      OPC=nop                    nop                           #  15    0xe   1      OPC=nop                  
  nop                           #  16    0xf   1      OPC=nop                    nop                           #  16    0xf   1      OPC=nop                  
  movl %esi, %edx               #  17    0x10  2      OPC=movl_r32_r32_1         movl %esi, %edx               #  17    0x10  2      OPC=movl_r32_r32_1       
  nop                           #  18    0x12  1      OPC=nop                    nop                           #  18    0x12  1      OPC=nop                  
  nop                           #  19    0x13  1      OPC=nop                    nop                           #  19    0x13  1      OPC=nop                  
  nop                           #  20    0x14  1      OPC=nop                    nop                           #  20    0x14  1      OPC=nop                  
  nop                           #  21    0x15  1      OPC=nop                    nop                           #  21    0x15  1      OPC=nop                  
  nop                           #  22    0x16  1      OPC=nop                    nop                           #  22    0x16  1      OPC=nop                  
  nop                           #  23    0x17  1      OPC=nop                    nop                           #  23    0x17  1      OPC=nop                  
  nop                           #  24    0x18  1      OPC=nop                    nop                           #  24    0x18  1      OPC=nop                  
  nop                           #  25    0x19  1      OPC=nop                    nop                           #  25    0x19  1      OPC=nop                  
  nop                           #  26    0x1a  1      OPC=nop                    nop                           #  26    0x1a  1      OPC=nop                  
  nop                           #  27    0x1b  1      OPC=nop                    nop                           #  27    0x1b  1      OPC=nop                  
  andb $0x3, %sil               #  28    0x1c  4      OPC=andb_r8_imm8           andb $0x3, %sil               #  28    0x1c  4      OPC=andb_r8_imm8         
  movq %rdi, %rcx               #  29    0x20  3      OPC=movq_r64_r64           movq %rdi, %rcx               #  29    0x20  3      OPC=movq_r64_r64         
  jne .L_126860                 #  30    0x23  6      OPC=jne_label_1            jne .L_126860                 #  30    0x23  6      OPC=jne_label_1          
  nop                           #  31    0x29  1      OPC=nop                    nop                           #  31    0x29  1      OPC=nop                  
  nop                           #  32    0x2a  1      OPC=nop                    nop                           #  32    0x2a  1      OPC=nop                  
  nop                           #  33    0x2b  1      OPC=nop                    nop                           #  33    0x2b  1      OPC=nop                  
  orl %edx, %esi                #  34    0x2c  2      OPC=orl_r32_r32            orl %edx, %esi                #  34    0x2c  2      OPC=orl_r32_r32          
  movq (%r15,%rsi,1), %r8       #  35    0x2e  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8       #  35    0x2e  4      OPC=movq_r64_m64         
  notw %si                      #  36    0x32  3      OPC=notw_r16               notw %si                      #  36    0x32  3      OPC=notw_r16             
  andb %r15b, %sil              #  37    0x35  3      OPC=andb_r8_r8             andb %r15b, %sil              #  37    0x35  3      OPC=andb_r8_r8           
  shlb %cl, %cl                 #  38    0x38  2      OPC=shlb_r8_cl             shlb %cl, %cl                 #  38    0x38  2      OPC=shlb_r8_cl           
  jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1            jne .L_126860                 #  39    0x3a  6      OPC=jne_label_1          
.L_126820:                      #        0x40  0      OPC=<label>              .L_126820:                      #        0x40  0      OPC=<label>              
  addl %esp, %ecx               #  40    0x40  2      OPC=addl_r32_r32           addl %esp, %ecx               #  40    0x40  2      OPC=addl_r32_r32         
  movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)      #  41    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx               #  42    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx               #  42    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8       #  43    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8       #  43    0x49  4      OPC=movq_r64_m64         
  movl %r8d, %r9d               #  44    0x4d  3      OPC=movl_r32_r32_1         movl %r8d, %r9d               #  44    0x4d  3      OPC=movl_r32_r32_1       
  leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32           leaq -0x1010101(%r8), %rsi    #  45    0x50  7      OPC=leaq_r64_m32         
  notq %r9                      #  46    0x57  3      OPC=notq_r64               notq %r9                      #  46    0x57  3      OPC=notq_r64             
  andl %esi, %r9d               #  47    0x5a  3      OPC=andl_r32_r32           andl %esi, %r9d               #  47    0x5a  3      OPC=andl_r32_r32         
  addl $0x4, %ecx               #  48    0x5d  3      OPC=addl_r32_imm8          addl $0x4, %ecx               #  48    0x5d  3      OPC=addl_r32_imm8        
  andl $0x80808080, %r9d        #  49    0x60  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d        #  49    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                  #  50    0x67  6      OPC=je_label_1             je .L_126820                  #  50    0x67  6      OPC=je_label_1           
  nop                           #  51    0x6d  1      OPC=nop                    nop                           #  51    0x6d  1      OPC=nop                  
  nop                           #  52    0x6e  1      OPC=nop                    nop                           #  52    0x6e  1      OPC=nop                  
  nop                           #  53    0x6f  1      OPC=nop                    nop                           #  53    0x6f  1      OPC=nop                  
  nop                           #  54    0x70  1      OPC=nop                    nop                           #  54    0x70  1      OPC=nop                  
  nop                           #  55    0x71  1      OPC=nop                    nop                           #  55    0x71  1      OPC=nop                  
  nop                           #  56    0x72  1      OPC=nop                    nop                           #  56    0x72  1      OPC=nop                  
  nop                           #  57    0x73  1      OPC=nop                    nop                           #  57    0x73  1      OPC=nop                  
  nop                           #  58    0x74  1      OPC=nop                    nop                           #  58    0x74  1      OPC=nop                  
  nop                           #  59    0x75  1      OPC=nop                    nop                           #  59    0x75  1      OPC=nop                  
  nop                           #  60    0x76  1      OPC=nop                    nop                           #  60    0x76  1      OPC=nop                  
  nop                           #  61    0x77  1      OPC=nop                    nop                           #  61    0x77  1      OPC=nop                  
  nop                           #  62    0x78  1      OPC=nop                    nop                           #  62    0x78  1      OPC=nop                  
  nop                           #  63    0x79  1      OPC=nop                    nop                           #  63    0x79  1      OPC=nop                  
  nop                           #  64    0x7a  1      OPC=nop                    nop                           #  64    0x7a  1      OPC=nop                  
  nop                           #  65    0x7b  1      OPC=nop                    nop                           #  65    0x7b  1      OPC=nop                  
  nop                           #  66    0x7c  1      OPC=nop                    nop                           #  66    0x7c  1      OPC=nop                  
  nop                           #  67    0x7d  1      OPC=nop                    nop                           #  67    0x7d  1      OPC=nop                  
  nop                           #  68    0x7e  1      OPC=nop                    nop                           #  68    0x7e  1      OPC=nop                  
  nop                           #  69    0x7f  1      OPC=nop                    nop                           #  69    0x7f  1      OPC=nop                  
.L_126860:                      #        0x80  0      OPC=<label>              .L_126860:                      #        0x80  0      OPC=<label>              
  andl %edx, %edx               #  70    0x80  2      OPC=andl_r32_r32           andl %edx, %edx               #  70    0x80  2      OPC=andl_r32_r32         
  movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8          movzbq (%r15,%rdx,1), %rsi    #  71    0x82  5      OPC=movzbq_r64_m8        
  addl $0x1, %edx               #  72    0x87  6      OPC=addl_r32_imm32         addl $0x1, %edx               #  72    0x87  6      OPC=addl_r32_imm32       
  addl $0x1, %ecx               #  73    0x8d  3      OPC=addl_r32_imm8          addl $0x1, %ecx               #  73    0x8d  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)  #  74    0x90  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)  #  74    0x90  5      OPC=movb_m8_r8           
  negl %esi                     #  75    0x95  2      OPC=negl_r32               negl %esi                     #  75    0x95  2      OPC=negl_r32             
  jne .L_126860                 #  76    0x97  6      OPC=jne_label_1            jne .L_126860                 #  76    0x97  6      OPC=jne_label_1          
  nop                           #  77    0x9d  1      OPC=nop                    nop                           #  77    0x9d  1      OPC=nop                  
  nop                           #  78    0x9e  1      OPC=nop                    nop                           #  78    0x9e  1      OPC=nop                  
  nop                           #  79    0x9f  1      OPC=nop                    nop                           #  79    0x9f  1      OPC=nop                  
  nop                           #  80    0xa0  1      OPC=nop                    nop                           #  80    0xa0  1      OPC=nop                  
  nop                           #  81    0xa1  1      OPC=nop                    nop                           #  81    0xa1  1      OPC=nop                  
  nop                           #  82    0xa2  1      OPC=nop                    nop                           #  82    0xa2  1      OPC=nop                  
  nop                           #  83    0xa3  1      OPC=nop                    nop                           #  83    0xa3  1      OPC=nop                  
  nop                           #  84    0xa4  1      OPC=nop                    nop                           #  84    0xa4  1      OPC=nop                  
  movl %edi, %eax               #  85    0xa5  2      OPC=movl_r32_r32           movl %edi, %eax               #  85    0xa5  2      OPC=movl_r32_r32         
  popq %r11                     #  86    0xa7  2      OPC=popq_r64_1             popq %r11                     #  86    0xa7  2      OPC=popq_r64_1           
  andl $0xe0, %r11d             #  87    0xa9  4      OPC=andl_r32_imm8          andl $0xe0, %r11d             #  87    0xa9  4      OPC=andl_r32_imm8        
  addq %r15, %r11               #  88    0xad  3      OPC=addq_r64_r64           addq %r15, %r11               #  88    0xad  3      OPC=addq_r64_r64         
  jmpq %r11                     #  89    0xb0  3      OPC=jmpq_r64               jmpq %r11                     #  89    0xb0  3      OPC=jmpq_r64             
                                                                                                                                                              
.size strcpy, .-strcpy                                                         .size strcpy, .-strcpy                                                         
                                                                                                                                                              

********************************************************************************

Progress Update: 

Lowest Cost Discovered (124)                                                     Lowest Known Correct Cost (124)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  movq %rdi, %rcx                 #  4     0x3   3      OPC=movq_r64_r64           movq %rdi, %rcx                 #  4     0x3   3      OPC=movq_r64_r64         
  nop                             #  5     0x6   1      OPC=nop                    nop                             #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                             #  6     0x7   1      OPC=nop                  
  nop                             #  7     0x8   1      OPC=nop                    nop                             #  7     0x8   1      OPC=nop                  
  nop                             #  8     0x9   1      OPC=nop                    nop                             #  8     0x9   1      OPC=nop                  
  nop                             #  9     0xa   1      OPC=nop                    nop                             #  9     0xa   1      OPC=nop                  
  movl %esi, %edx                 #  10    0xb   2      OPC=movl_r32_r32           movl %esi, %edx                 #  10    0xb   2      OPC=movl_r32_r32         
  nop                             #  11    0xd   1      OPC=nop                    nop                             #  11    0xd   1      OPC=nop                  
  nop                             #  12    0xe   1      OPC=nop                    nop                             #  12    0xe   1      OPC=nop                  
  nop                             #  13    0xf   1      OPC=nop                    nop                             #  13    0xf   1      OPC=nop                  
  nop                             #  14    0x10  1      OPC=nop                    nop                             #  14    0x10  1      OPC=nop                  
  nop                             #  15    0x11  1      OPC=nop                    nop                             #  15    0x11  1      OPC=nop                  
  nop                             #  16    0x12  1      OPC=nop                    nop                             #  16    0x12  1      OPC=nop                  
  nop                             #  17    0x13  1      OPC=nop                    nop                             #  17    0x13  1      OPC=nop                  
  nop                             #  18    0x14  1      OPC=nop                    nop                             #  18    0x14  1      OPC=nop                  
  nop                             #  19    0x15  1      OPC=nop                    nop                             #  19    0x15  1      OPC=nop                  
  movl %edi, %eax                 #  20    0x16  2      OPC=movl_r32_r32_1         movl %edi, %eax                 #  20    0x16  2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8          andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x1b  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  nop                             #  24    0x1d  1      OPC=nop                    nop                             #  24    0x1d  1      OPC=nop                  
  nop                             #  25    0x1e  1      OPC=nop                    nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x1f  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  nop                             #  27    0x20  1      OPC=nop                    nop                             #  27    0x20  1      OPC=nop                  
  jne .L_126860                   #  28    0x21  6      OPC=jne_label_1            jne .L_126860                   #  28    0x21  6      OPC=jne_label_1          
  nop                             #  29    0x27  1      OPC=nop                    nop                             #  29    0x27  1      OPC=nop                  
  nop                             #  30    0x28  1      OPC=nop                    nop                             #  30    0x28  1      OPC=nop                  
  nop                             #  31    0x29  1      OPC=nop                    nop                             #  31    0x29  1      OPC=nop                  
  movl %edx, %esi                 #  32    0x2a  2      OPC=movl_r32_r32_1         movl %edx, %esi                 #  32    0x2a  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  33    0x2c  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8         #  33    0x2c  4      OPC=movq_r64_m64         
  nop                             #  34    0x30  1      OPC=nop                    nop                             #  34    0x30  1      OPC=nop                  
  salb %cl, %dl                   #  35    0x31  2      OPC=salb_r8_cl             salb %cl, %dl                   #  35    0x31  2      OPC=salb_r8_cl           
  notl %esi                       #  36    0x33  2      OPC=notl_r32               notl %esi                       #  36    0x33  2      OPC=notl_r32             
  andb %r15b, %sil                #  37    0x35  3      OPC=andb_r8_r8_1           andb %r15b, %sil                #  37    0x35  3      OPC=andb_r8_r8_1         
  nop                             #  38    0x38  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
  nop                             #  39    0x39  1      OPC=nop                    nop                             #  39    0x39  1      OPC=nop                  
  jne .L_126860                   #  40    0x3a  6      OPC=jne_label_1            jne .L_126860                   #  40    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                        #        0x40  0      OPC=<label>              
  subl %ebp, %ecx                 #  41    0x40  2      OPC=subl_r32_r32_1         subl %ebp, %ecx                 #  41    0x40  2      OPC=subl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)        #  42    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)        #  42    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  43    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx                 #  43    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8         #  44    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8         #  44    0x49  4      OPC=movq_r64_m64         
  movq %r8, %r9                   #  45    0x4d  3      OPC=movq_r64_r64           movq %r8, %r9                   #  45    0x4d  3      OPC=movq_r64_r64         
  notl %r9d                       #  46    0x50  3      OPC=notl_r32               notl %r9d                       #  46    0x50  3      OPC=notl_r32             
  addl $0x4, %ecx                 #  47    0x53  3      OPC=addl_r32_imm8          addl $0x4, %ecx                 #  47    0x53  3      OPC=addl_r32_imm8        
  leaq -0x1010101(%r8), %rsi      #  48    0x56  7      OPC=leaq_r64_m32           leaq -0x1010101(%r8), %rsi      #  48    0x56  7      OPC=leaq_r64_m32         
  andl %esi, %r9d                 #  49    0x5d  3      OPC=andl_r32_r32_1         andl %esi, %r9d                 #  49    0x5d  3      OPC=andl_r32_r32_1       
  andl $0x80808080, %r9d          #  50    0x60  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d          #  50    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                    #  51    0x67  6      OPC=je_label_1             je .L_126820                    #  51    0x67  6      OPC=je_label_1           
  nop                             #  52    0x6d  1      OPC=nop                    nop                             #  52    0x6d  1      OPC=nop                  
  nop                             #  53    0x6e  1      OPC=nop                    nop                             #  53    0x6e  1      OPC=nop                  
  nop                             #  54    0x6f  1      OPC=nop                    nop                             #  54    0x6f  1      OPC=nop                  
  nop                             #  55    0x70  1      OPC=nop                    nop                             #  55    0x70  1      OPC=nop                  
  nop                             #  56    0x71  1      OPC=nop                    nop                             #  56    0x71  1      OPC=nop                  
  nop                             #  57    0x72  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x73  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x74  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x75  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x76  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x77  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x78  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x79  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  65    0x7a  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  66    0x7b  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  67    0x7c  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  68    0x7d  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  69    0x7e  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  70    0x7f  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              .L_126860:                        #        0x80  0      OPC=<label>              
  addl $0x1, %edx                 #  71    0x80  6      OPC=addl_r32_imm32         addl $0x1, %edx                 #  71    0x80  6      OPC=addl_r32_imm32       
  movsbq -0x1(%r15,%rdx,1), %rsi  #  72    0x86  6      OPC=movsbq_r64_m8          movsbq -0x1(%r15,%rdx,1), %rsi  #  72    0x86  6      OPC=movsbq_r64_m8        
  addl $0x1, %ecx                 #  73    0x8c  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  73    0x8c  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  74    0x8f  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)    #  74    0x8f  5      OPC=movb_m8_r8           
  negl %esi                       #  75    0x94  2      OPC=negl_r32               negl %esi                       #  75    0x94  2      OPC=negl_r32             
  jne .L_126860                   #  76    0x96  6      OPC=jne_label_1            jne .L_126860                   #  76    0x96  6      OPC=jne_label_1          
  nop                             #  77    0x9c  1      OPC=nop                    nop                             #  77    0x9c  1      OPC=nop                  
  nop                             #  78    0x9d  1      OPC=nop                    nop                             #  78    0x9d  1      OPC=nop                  
  nop                             #  79    0x9e  1      OPC=nop                    nop                             #  79    0x9e  1      OPC=nop                  
  nop                             #  80    0x9f  1      OPC=nop                    nop                             #  80    0x9f  1      OPC=nop                  
  nop                             #  81    0xa0  1      OPC=nop                    nop                             #  81    0xa0  1      OPC=nop                  
  nop                             #  82    0xa1  1      OPC=nop                    nop                             #  82    0xa1  1      OPC=nop                  
  nop                             #  83    0xa2  1      OPC=nop                    nop                             #  83    0xa2  1      OPC=nop                  
  nop                             #  84    0xa3  1      OPC=nop                    nop                             #  84    0xa3  1      OPC=nop                  
  nop                             #  85    0xa4  1      OPC=nop                    nop                             #  85    0xa4  1      OPC=nop                  
  nop                             #  86    0xa5  1      OPC=nop                    nop                             #  86    0xa5  1      OPC=nop                  
  nop                             #  87    0xa6  1      OPC=nop                    nop                             #  87    0xa6  1      OPC=nop                  
  popq %r11                       #  88    0xa7  2      OPC=popq_r64_1             popq %r11                       #  88    0xa7  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  89    0xa9  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  89    0xa9  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  90    0xad  3      OPC=addq_r64_r64           addq %r15, %r11                 #  90    0xad  3      OPC=addq_r64_r64         
  jmpq %r11                       #  91    0xb0  3      OPC=jmpq_r64               jmpq %r11                       #  91    0xb0  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (123)                                                     Lowest Known Correct Cost (123)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1         movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x6   1      OPC=nop                    nop                             #  6     0x6   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                    nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0x8   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0x9   1      OPC=nop                    nop                             #  9     0x9   1      OPC=nop                  
  nop                             #  10    0xa   1      OPC=nop                    nop                             #  10    0xa   1      OPC=nop                  
  nop                             #  11    0xb   1      OPC=nop                    nop                             #  11    0xb   1      OPC=nop                  
  nop                             #  12    0xc   1      OPC=nop                    nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0xd   1      OPC=nop                    nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0xe   1      OPC=nop                    nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0xf   1      OPC=nop                    nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x10  1      OPC=nop                    nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x11  1      OPC=nop                    nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x12  1      OPC=nop                    nop                             #  18    0x12  1      OPC=nop                  
  movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32           movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64           movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8          andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x1b  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  nop                             #  24    0x1d  1      OPC=nop                    nop                             #  24    0x1d  1      OPC=nop                  
  nop                             #  25    0x1e  1      OPC=nop                    nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x1f  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  jne .L_126860                   #  27    0x20  6      OPC=jne_label_1            jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl             salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1         movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  nop                             #  31    0x2e  1      OPC=nop                    nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x2f  1      OPC=nop                    nop                             #  32    0x2f  1      OPC=nop                  
  notl %esi                       #  33    0x30  2      OPC=notl_r32               notl %esi                       #  33    0x30  2      OPC=notl_r32             
  nop                             #  34    0x32  1      OPC=nop                    nop                             #  34    0x32  1      OPC=nop                  
  andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8             andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8           salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1            jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                        #        0x40  0      OPC=<label>              
  subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1         subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64           movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  notl %r9d                       #  43    0x50  3      OPC=notl_r32               notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16           leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8          addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1         andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                    #  48    0x67  6      OPC=je_label_1             je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x6d  1      OPC=nop                    nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x6e  1      OPC=nop                    nop                             #  50    0x6e  1      OPC=nop                  
  nop                             #  51    0x6f  1      OPC=nop                    nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x70  1      OPC=nop                    nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x71  1      OPC=nop                    nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x72  1      OPC=nop                    nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x73  1      OPC=nop                    nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x74  1      OPC=nop                    nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x75  1      OPC=nop                    nop                             #  57    0x75  1      OPC=nop                  
  nop                             #  58    0x76  1      OPC=nop                    nop                             #  58    0x76  1      OPC=nop                  
  nop                             #  59    0x77  1      OPC=nop                    nop                             #  59    0x77  1      OPC=nop                  
  nop                             #  60    0x78  1      OPC=nop                    nop                             #  60    0x78  1      OPC=nop                  
  nop                             #  61    0x79  1      OPC=nop                    nop                             #  61    0x79  1      OPC=nop                  
  nop                             #  62    0x7a  1      OPC=nop                    nop                             #  62    0x7a  1      OPC=nop                  
  nop                             #  63    0x7b  1      OPC=nop                    nop                             #  63    0x7b  1      OPC=nop                  
  nop                             #  64    0x7c  1      OPC=nop                    nop                             #  64    0x7c  1      OPC=nop                  
  nop                             #  65    0x7d  1      OPC=nop                    nop                             #  65    0x7d  1      OPC=nop                  
  nop                             #  66    0x7e  1      OPC=nop                    nop                             #  66    0x7e  1      OPC=nop                  
  nop                             #  67    0x7f  1      OPC=nop                    nop                             #  67    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              .L_126860:                        #        0x80  0      OPC=<label>              
  addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32         addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8          movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  negl %esi                       #  72    0x94  2      OPC=negl_r32               negl %esi                       #  72    0x94  2      OPC=negl_r32             
  jne .L_126860                   #  73    0x96  6      OPC=jne_label_1            jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0x9c  1      OPC=nop                    nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9d  1      OPC=nop                    nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9e  1      OPC=nop                    nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0x9f  1      OPC=nop                    nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa0  1      OPC=nop                    nop                             #  78    0xa0  1      OPC=nop                  
  nop                             #  79    0xa1  1      OPC=nop                    nop                             #  79    0xa1  1      OPC=nop                  
  nop                             #  80    0xa2  1      OPC=nop                    nop                             #  80    0xa2  1      OPC=nop                  
  nop                             #  81    0xa3  1      OPC=nop                    nop                             #  81    0xa3  1      OPC=nop                  
  nop                             #  82    0xa4  1      OPC=nop                    nop                             #  82    0xa4  1      OPC=nop                  
  popq %r11                       #  83    0xa5  2      OPC=popq_r64_1             popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64           addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
  jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64               jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Statistics Update: 

Iterations:                    100000
Elapsed Time:                  91.0332s
Iterations/s:                  1098.5

Starting cost:                 167
Lowest cost:                   123
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted     
                                                        
Delete          8.389%       7.22%         3.514%       
OpcodeWidth     8.374%       6.516%        5.475%       
Add Nops        8.38%        8.38%         3.338%       
Instruction     8.247%       3.601%        0.178%       
ReplaceNop      8.199%       7.044%        5.103%       
Rotate          8.453%       6.352%        2.513%       
Global Swap     8.323%       5.707%        3.323%       
Global Copy     8.411%       7.01%         7.01%        
Operand         8.274%       5.253%        0.853%       
Local Swap      8.185%       5.398%        3.714%       
Opcode          8.412%       7.405%        6.057%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.353%       4.764%        0.003%       
                                                        
Total           100%         74.65%        41.081%      

********************************************************************************

Statistics Update: 

Iterations:                    200000
Elapsed Time:                  181.789s
Iterations/s:                  1100.18

Starting cost:                 167
Lowest cost:                   123
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted     
                                                        
Delete          8.2665%      7.121%        3.6405%      
OpcodeWidth     8.335%       6.479%        5.653%       
Add Nops        8.3485%      8.3485%       3.4635%      
Instruction     8.3025%      3.52%         0.181%       
ReplaceNop      8.2455%      7.0935%       5.3575%      
Rotate          8.3505%      6.33%         2.65%        
Global Swap     8.313%       5.763%        3.5405%      
Global Copy     8.4115%      7.0565%       7.0565%      
Operand         8.3535%      5.166%        0.8545%      
Local Swap      8.2885%      5.5465%       3.924%       
Opcode          8.38%        7.3665%       6.119%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.405%       4.6255%       0.002%       
                                                        
Total           100%         74.416%       42.442%      

********************************************************************************

Statistics Update: 

Iterations:                    300000
Elapsed Time:                  276.678s
Iterations/s:                  1084.29

Starting cost:                 167
Lowest cost:                   123
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted        
                                                           
Delete          8.29833%     7.13867%      3.65567%        
OpcodeWidth     8.32233%     6.505%        5.73%           
Add Nops        8.31333%     8.31333%      3.47033%        
Instruction     8.32633%     3.539%        0.188333%       
ReplaceNop      8.282%       7.13367%      5.48633%        
Rotate          8.36367%     6.37167%      2.695%          
Global Swap     8.30333%     5.77067%      3.63733%        
Global Copy     8.44767%     7.11067%      7.11067%        
Operand         8.31467%     5.06133%      0.857%          
Local Swap      8.294%       5.61033%      4.011%          
Opcode          8.37733%     7.35267%      6.155%          
2xWeighted      0%           0%            0%              
Memory+Swap     8.357%       4.56833%      0.00133333%     
                                                           
Total           100%         74.4753%      42.998%         

********************************************************************************

Progress Update: 

Lowest Cost Discovered (122)                                                     Lowest Known Correct Cost (123)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  movq %rsi, %rdx                 #  1     0     3      OPC=movq_r64_r64_1         nop                             #  1     0     1      OPC=nop                  
  movl %edi, %ecx                 #  2     0x3   2      OPC=movl_r32_r32           nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x5   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  movl %ecx, %eax                 #  4     0x6   2      OPC=movl_r32_r32           nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x8   1      OPC=nop                    movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x9   1      OPC=nop                    nop                             #  6     0x6   1      OPC=nop                  
  andq $0x3, %rsi                 #  7     0xa   7      OPC=andq_r64_imm32         nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0x11  1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0x12  1      OPC=nop                    nop                             #  9     0x9   1      OPC=nop                  
  jne .L_126860                   #  10    0x13  6      OPC=jne_label_1            nop                             #  10    0xa   1      OPC=nop                  
  nop                             #  11    0x19  1      OPC=nop                    nop                             #  11    0xb   1      OPC=nop                  
  nop                             #  12    0x1a  1      OPC=nop                    nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0x1b  1      OPC=nop                    nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0x1c  1      OPC=nop                    nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0x1d  1      OPC=nop                    nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x1f  1      OPC=nop                    nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x12  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  nop                             #  20    0x22  1      OPC=nop                    movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  nop                             #  21    0x23  1      OPC=nop                    andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  orq %rdx, %rsi                  #  24    0x26  3      OPC=orq_r64_r64            nop                             #  24    0x1d  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  25    0x29  4      OPC=movq_r64_m64           nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x2d  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  sarq %cl, %rdx                  #  27    0x2e  3      OPC=sarq_r64_cl            jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  notw %si                        #  28    0x31  3      OPC=notw_r16               salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  andb %r15b, %sil                #  29    0x34  3      OPC=andb_r8_r8             movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  nop                             #  30    0x37  1      OPC=nop                    movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  jne .L_126860                   #  31    0x38  6      OPC=jne_label_1            nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x3e  1      OPC=nop                    nop                             #  32    0x2f  1      OPC=nop                  
  nop                             #  33    0x3f  1      OPC=nop                    notl %esi                       #  33    0x30  2      OPC=notl_r32             
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  34    0x32  1      OPC=nop                  
  addl $0x4, %ecx                 #  34    0x40  3      OPC=addl_r32_imm8          andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  movl %r8d, -0x4(%r15,%rcx,1)    #  35    0x43  5      OPC=movl_m32_r32           salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  subl $0xfc, %edx                #  36    0x48  3      OPC=subl_r32_imm8          jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d        #  37    0x4b  4      OPC=movl_r32_m32         .L_126820:                        #        0x40  0      OPC=<label>              
  movl %r8d, %r9d                 #  38    0x4f  3      OPC=movl_r32_r32_1         subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  leal -0x1010101(%r8), %esi      #  39    0x52  7      OPC=leal_r32_m32           movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  andq $0x80808080, %rsi          #  40    0x59  7      OPC=andq_r64_imm32         addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  notq %r9                        #  41    0x60  3      OPC=notq_r64               movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  andl %esi, %r9d                 #  42    0x63  3      OPC=andl_r32_r32           movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  je .L_126820                    #  43    0x66  6      OPC=je_label_1             notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  nop                             #  44    0x6c  1      OPC=nop                    leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  nopl %eax                       #  45    0x6d  3      OPC=nopl_r32               addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  nopl %eax                       #  46    0x70  3      OPC=nopl_r32               andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  nop                             #  47    0x73  1      OPC=nop                    andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  nop                             #  48    0x74  1      OPC=nop                    je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x75  1      OPC=nop                    nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x76  1      OPC=nop                    nop                             #  50    0x6e  1      OPC=nop                  
  nopl %eax                       #  51    0x77  3      OPC=nopl_r32               nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x7a  1      OPC=nop                    nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x7b  1      OPC=nop                    nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x7c  1      OPC=nop                    nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x7d  1      OPC=nop                    nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x7e  1      OPC=nop                    nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x7f  1      OPC=nop                    nop                             #  57    0x75  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                             #  58    0x76  1      OPC=nop                  
  addl $0x1, %edx                 #  58    0x80  3      OPC=addl_r32_imm8          nop                             #  59    0x77  1      OPC=nop                  
  movzbq -0x1(%r15,%rdx,1), %rsi  #  59    0x83  6      OPC=movzbq_r64_m8          nop                             #  60    0x78  1      OPC=nop                  
  incl %ecx                       #  60    0x89  2      OPC=incl_r32               nop                             #  61    0x79  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  61    0x8b  5      OPC=movb_m8_r8             nop                             #  62    0x7a  1      OPC=nop                  
  negb %sil                       #  62    0x90  3      OPC=negb_r8                nop                             #  63    0x7b  1      OPC=nop                  
  jne .L_126860                   #  63    0x93  6      OPC=jne_label_1            nop                             #  64    0x7c  1      OPC=nop                  
  nop                             #  64    0x99  1      OPC=nop                    nop                             #  65    0x7d  1      OPC=nop                  
  nop                             #  65    0x9a  1      OPC=nop                    nop                             #  66    0x7e  1      OPC=nop                  
  nop                             #  66    0x9b  1      OPC=nop                    nop                             #  67    0x7f  1      OPC=nop                  
  nop                             #  67    0x9c  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  68    0x9d  1      OPC=nop                    addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  nop                             #  69    0x9e  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  nop                             #  70    0x9f  1      OPC=nop                    addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  nop                             #  71    0xa0  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  nop                             #  72    0xa1  1      OPC=nop                    negl %esi                       #  72    0x94  2      OPC=negl_r32             
  nop                             #  73    0xa2  1      OPC=nop                    jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0xa3  1      OPC=nop                    nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0xa4  1      OPC=nop                    nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0xa5  1      OPC=nop                    nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0xa6  1      OPC=nop                    nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa7  1      OPC=nop                    nop                             #  78    0xa0  1      OPC=nop                  
  nop                             #  79    0xa8  1      OPC=nop                    nop                             #  79    0xa1  1      OPC=nop                  
  nop                             #  80    0xa9  1      OPC=nop                    nop                             #  80    0xa2  1      OPC=nop                  
  popq %r11                       #  81    0xaa  2      OPC=popq_r64_1             nop                             #  81    0xa3  1      OPC=nop                  
  andl $0xe0, %r11d               #  82    0xac  4      OPC=andl_r32_imm8          nop                             #  82    0xa4  1      OPC=nop                  
  addq %r15, %r11                 #  83    0xb0  3      OPC=addq_r64_r64           popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
  jmpq %r11                       #  84    0xb3  3      OPC=jmpq_r64               andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
                                                                                   addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                             jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
                                                                                                                                                                  
                                                                                 .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (121)                                                     Lowest Known Correct Cost (123)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  movl %edi, %ecx                 #  3     0x2   2      OPC=movl_r32_r32           nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x4   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x5   1      OPC=nop                    movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x6   1      OPC=nop                    nop                             #  6     0x6   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x7   3      OPC=movq_r64_r64_1         nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0xa   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                    nop                             #  9     0x9   1      OPC=nop                  
  andq $0x3, %rsi                 #  10    0xc   7      OPC=andq_r64_imm32         nop                             #  10    0xa   1      OPC=nop                  
  movl %ecx, %eax                 #  11    0x13  2      OPC=movl_r32_r32           nop                             #  11    0xb   1      OPC=nop                  
  jne .L_126860                   #  12    0x15  6      OPC=jne_label_1            nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0x1b  1      OPC=nop                    nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0x1c  1      OPC=nop                    nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0x1d  1      OPC=nop                    nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x1f  1      OPC=nop                    nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x12  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  nop                             #  20    0x22  1      OPC=nop                    movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  nop                             #  21    0x23  1      OPC=nop                    andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  movq %rdx, %rsi                 #  24    0x26  3      OPC=movq_r64_r64           nop                             #  24    0x1d  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  25    0x29  4      OPC=movq_r64_m64           nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x2d  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  sarq %cl, %rdx                  #  27    0x2e  3      OPC=sarq_r64_cl            jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  notw %si                        #  28    0x31  3      OPC=notw_r16               salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  nop                             #  29    0x34  1      OPC=nop                    movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  andb %r15b, %sil                #  30    0x35  3      OPC=andb_r8_r8             movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  jne .L_126860                   #  31    0x38  6      OPC=jne_label_1            nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x3e  1      OPC=nop                    nop                             #  32    0x2f  1      OPC=nop                  
  nop                             #  33    0x3f  1      OPC=nop                    notl %esi                       #  33    0x30  2      OPC=notl_r32             
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  34    0x32  1      OPC=nop                  
  addl $0x4, %ecx                 #  34    0x40  3      OPC=addl_r32_imm8          andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  movl %r8d, -0x4(%r15,%rcx,1)    #  35    0x43  5      OPC=movl_m32_r32           salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  subl $0xfc, %edx                #  36    0x48  3      OPC=subl_r32_imm8          jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d        #  37    0x4b  4      OPC=movl_r32_m32         .L_126820:                        #        0x40  0      OPC=<label>              
  movl %r8d, %r9d                 #  38    0x4f  3      OPC=movl_r32_r32_1         subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  leal -0x1010101(%r8), %esi      #  39    0x52  7      OPC=leal_r32_m32           movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  andq $0x80808080, %rsi          #  40    0x59  7      OPC=andq_r64_imm32         addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  notq %r9                        #  41    0x60  3      OPC=notq_r64               movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  andl %esi, %r9d                 #  42    0x63  3      OPC=andl_r32_r32           movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  je .L_126820                    #  43    0x66  6      OPC=je_label_1             notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  nop                             #  44    0x6c  1      OPC=nop                    leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  nop                             #  45    0x6d  1      OPC=nop                    addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  nop                             #  46    0x6e  1      OPC=nop                    andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  nop                             #  47    0x6f  1      OPC=nop                    andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  nop                             #  48    0x70  1      OPC=nop                    je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x71  1      OPC=nop                    nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x72  1      OPC=nop                    nop                             #  50    0x6e  1      OPC=nop                  
  nop                             #  51    0x73  1      OPC=nop                    nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x74  1      OPC=nop                    nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x75  1      OPC=nop                    nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x76  1      OPC=nop                    nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x77  1      OPC=nop                    nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x78  1      OPC=nop                    nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x79  1      OPC=nop                    nop                             #  57    0x75  1      OPC=nop                  
  nop                             #  58    0x7a  1      OPC=nop                    nop                             #  58    0x76  1      OPC=nop                  
  nop                             #  59    0x7b  1      OPC=nop                    nop                             #  59    0x77  1      OPC=nop                  
  nop                             #  60    0x7c  1      OPC=nop                    nop                             #  60    0x78  1      OPC=nop                  
  nop                             #  61    0x7d  1      OPC=nop                    nop                             #  61    0x79  1      OPC=nop                  
  nop                             #  62    0x7e  1      OPC=nop                    nop                             #  62    0x7a  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>                nop                             #  63    0x7b  1      OPC=nop                  
  addl $0x1, %edx                 #  63    0x7f  3      OPC=addl_r32_imm8          nop                             #  64    0x7c  1      OPC=nop                  
  movzbq -0x1(%r15,%rdx,1), %rsi  #  64    0x82  6      OPC=movzbq_r64_m8          nop                             #  65    0x7d  1      OPC=nop                  
  incl %ecx                       #  65    0x88  2      OPC=incl_r32               nop                             #  66    0x7e  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  66    0x8a  5      OPC=movb_m8_r8             nop                             #  67    0x7f  1      OPC=nop                  
  negb %sil                       #  67    0x8f  3      OPC=negb_r8              .L_126860:                        #        0x80  0      OPC=<label>              
  jne .L_126860                   #  68    0x92  6      OPC=jne_label_1            addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  nop                             #  69    0x98  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  nop                             #  70    0x99  1      OPC=nop                    addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  nop                             #  71    0x9a  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  nop                             #  72    0x9b  1      OPC=nop                    negl %esi                       #  72    0x94  2      OPC=negl_r32             
  nop                             #  73    0x9c  1      OPC=nop                    jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0x9d  1      OPC=nop                    nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9e  1      OPC=nop                    nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9f  1      OPC=nop                    nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0xa0  1      OPC=nop                    nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa1  1      OPC=nop                    nop                             #  78    0xa0  1      OPC=nop                  
  nop                             #  79    0xa2  1      OPC=nop                    nop                             #  79    0xa1  1      OPC=nop                  
  nop                             #  80    0xa3  1      OPC=nop                    nop                             #  80    0xa2  1      OPC=nop                  
  nop                             #  81    0xa4  1      OPC=nop                    nop                             #  81    0xa3  1      OPC=nop                  
  popq %r11                       #  82    0xa5  2      OPC=popq_r64_1             nop                             #  82    0xa4  1      OPC=nop                  
  andl $0xe0, %r11d               #  83    0xa7  4      OPC=andl_r32_imm8          popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
  addq %r15, %r11                 #  84    0xab  3      OPC=addq_r64_r64           andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
  jmpq %r11                       #  85    0xae  3      OPC=jmpq_r64               addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
                                                                                   jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
.size strcpy, .-strcpy                                                                                                                                            
                                                                                 .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (120)                                                     Lowest Known Correct Cost (123)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  movl %edi, %ecx                 #  3     0x2   2      OPC=movl_r32_r32           nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x4   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x5   1      OPC=nop                    movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x6   1      OPC=nop                    nop                             #  6     0x6   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x7   3      OPC=movq_r64_r64_1         nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0xa   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                    nop                             #  9     0x9   1      OPC=nop                  
  andq $0x3, %rsi                 #  10    0xc   7      OPC=andq_r64_imm32         nop                             #  10    0xa   1      OPC=nop                  
  movl %ecx, %eax                 #  11    0x13  2      OPC=movl_r32_r32           nop                             #  11    0xb   1      OPC=nop                  
  jne .L_126860                   #  12    0x15  6      OPC=jne_label_1            nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0x1b  1      OPC=nop                    nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0x1c  1      OPC=nop                    nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0x1d  1      OPC=nop                    nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x1f  1      OPC=nop                    nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x12  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  nop                             #  20    0x22  1      OPC=nop                    movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  nop                             #  21    0x23  1      OPC=nop                    andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  movq %rdx, %rsi                 #  24    0x26  3      OPC=movq_r64_r64           nop                             #  24    0x1d  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8         #  25    0x29  4      OPC=movq_r64_m64           nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x2d  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  sarq %cl, %rdx                  #  27    0x2e  3      OPC=sarq_r64_cl            jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  notw %si                        #  28    0x31  3      OPC=notw_r16               salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  nop                             #  29    0x34  1      OPC=nop                    movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  andb %r15b, %sil                #  30    0x35  3      OPC=andb_r8_r8             movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  jne .L_126860                   #  31    0x38  6      OPC=jne_label_1            nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x3e  1      OPC=nop                    nop                             #  32    0x2f  1      OPC=nop                  
  nop                             #  33    0x3f  1      OPC=nop                    notl %esi                       #  33    0x30  2      OPC=notl_r32             
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  34    0x32  1      OPC=nop                  
  addl $0x4, %ecx                 #  34    0x40  3      OPC=addl_r32_imm8          andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  movl %r8d, -0x4(%r15,%rcx,1)    #  35    0x43  5      OPC=movl_m32_r32           salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  subl $0xfc, %edx                #  36    0x48  3      OPC=subl_r32_imm8          jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
  movl (%r15,%rdx,1), %r8d        #  37    0x4b  4      OPC=movl_r32_m32         .L_126820:                        #        0x40  0      OPC=<label>              
  movl %r8d, %r9d                 #  38    0x4f  3      OPC=movl_r32_r32_1         subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  leal -0x1010101(%r8), %esi      #  39    0x52  7      OPC=leal_r32_m32           movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  andq $0x80808080, %rsi          #  40    0x59  7      OPC=andq_r64_imm32         addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  notq %r9                        #  41    0x60  3      OPC=notq_r64               movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  andl %esi, %r9d                 #  42    0x63  3      OPC=andl_r32_r32           movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  je .L_126820                    #  43    0x66  6      OPC=je_label_1             notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  nop                             #  44    0x6c  1      OPC=nop                    leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  nop                             #  45    0x6d  1      OPC=nop                    addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  nop                             #  46    0x6e  1      OPC=nop                    andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  nop                             #  47    0x6f  1      OPC=nop                    andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  nop                             #  48    0x70  1      OPC=nop                    je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x71  1      OPC=nop                    nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x72  1      OPC=nop                    nop                             #  50    0x6e  1      OPC=nop                  
  nop                             #  51    0x73  1      OPC=nop                    nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x74  1      OPC=nop                    nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x75  1      OPC=nop                    nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x76  1      OPC=nop                    nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x77  1      OPC=nop                    nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x78  1      OPC=nop                    nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x79  1      OPC=nop                    nop                             #  57    0x75  1      OPC=nop                  
  nop                             #  58    0x7a  1      OPC=nop                    nop                             #  58    0x76  1      OPC=nop                  
  nop                             #  59    0x7b  1      OPC=nop                    nop                             #  59    0x77  1      OPC=nop                  
  nop                             #  60    0x7c  1      OPC=nop                    nop                             #  60    0x78  1      OPC=nop                  
  nop                             #  61    0x7d  1      OPC=nop                    nop                             #  61    0x79  1      OPC=nop                  
  nop                             #  62    0x7e  1      OPC=nop                    nop                             #  62    0x7a  1      OPC=nop                  
  nop                             #  63    0x7f  1      OPC=nop                    nop                             #  63    0x7b  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                             #  64    0x7c  1      OPC=nop                  
  addl $0x1, %edx                 #  64    0x80  3      OPC=addl_r32_imm8          nop                             #  65    0x7d  1      OPC=nop                  
  movzbq -0x1(%r15,%rdx,1), %rsi  #  65    0x83  6      OPC=movzbq_r64_m8          nop                             #  66    0x7e  1      OPC=nop                  
  incl %ecx                       #  66    0x89  2      OPC=incl_r32               nop                             #  67    0x7f  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  67    0x8b  5      OPC=movb_m8_r8           .L_126860:                        #        0x80  0      OPC=<label>              
  negb %sil                       #  68    0x90  3      OPC=negb_r8                addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  jne .L_126860                   #  69    0x93  6      OPC=jne_label_1            movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  nop                             #  70    0x99  1      OPC=nop                    addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  nop                             #  71    0x9a  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  nop                             #  72    0x9b  1      OPC=nop                    negl %esi                       #  72    0x94  2      OPC=negl_r32             
  nop                             #  73    0x9c  1      OPC=nop                    jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0x9d  1      OPC=nop                    nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9e  1      OPC=nop                    nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9f  1      OPC=nop                    nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0xa0  1      OPC=nop                    nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa1  1      OPC=nop                    nop                             #  78    0xa0  1      OPC=nop                  
  nop                             #  79    0xa2  1      OPC=nop                    nop                             #  79    0xa1  1      OPC=nop                  
  nop                             #  80    0xa3  1      OPC=nop                    nop                             #  80    0xa2  1      OPC=nop                  
  nop                             #  81    0xa4  1      OPC=nop                    nop                             #  81    0xa3  1      OPC=nop                  
  nop                             #  82    0xa5  1      OPC=nop                    nop                             #  82    0xa4  1      OPC=nop                  
  popq %r11                       #  83    0xa6  2      OPC=popq_r64_1             popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  84    0xa8  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  85    0xac  3      OPC=addq_r64_r64           addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
  jmpq %r11                       #  86    0xaf  3      OPC=jmpq_r64               jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (119)                                                     Lowest Known Correct Cost (123)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  movl %edi, %ecx                 #  2     0x1   2      OPC=movl_r32_r32           nop                             #  2     0x1   1      OPC=nop                  
  movq %rsi, %rdx                 #  3     0x3   3      OPC=movq_r64_r64_1         nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x6   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x7   1      OPC=nop                    movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x8   1      OPC=nop                    nop                             #  6     0x6   1      OPC=nop                  
  nop                             #  7     0x9   1      OPC=nop                    nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0xa   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                    nop                             #  9     0x9   1      OPC=nop                  
  andq $0x3, %rsi                 #  10    0xc   7      OPC=andq_r64_imm32         nop                             #  10    0xa   1      OPC=nop                  
  movl %ecx, %eax                 #  11    0x13  2      OPC=movl_r32_r32           nop                             #  11    0xb   1      OPC=nop                  
  jne .L_126860                   #  12    0x15  6      OPC=jne_label_1            nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0x1b  1      OPC=nop                    nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0x1c  1      OPC=nop                    nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0x1d  1      OPC=nop                    nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x1f  1      OPC=nop                    nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x12  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  nop                             #  20    0x22  1      OPC=nop                    movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  nop                             #  21    0x23  1      OPC=nop                    andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x1c  1      OPC=nop                  
  nop                             #  24    0x26  1      OPC=nop                    nop                             #  24    0x1d  1      OPC=nop                  
  nop                             #  25    0x27  1      OPC=nop                    nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x28  1      OPC=nop                    nop                             #  26    0x1f  1      OPC=nop                  
  movq %rdx, %rsi                 #  27    0x29  3      OPC=movq_r64_r64           jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8         #  28    0x2c  4      OPC=movq_r64_m64           salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  notl %esi                       #  29    0x30  2      OPC=notl_r32               movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  sarq %cl, %rdx                  #  30    0x32  3      OPC=sarq_r64_cl            movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  andb %r15b, %sil                #  31    0x35  3      OPC=andb_r8_r8             nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x38  1      OPC=nop                    nop                             #  32    0x2f  1      OPC=nop                  
  nop                             #  33    0x39  1      OPC=nop                    notl %esi                       #  33    0x30  2      OPC=notl_r32             
  jne .L_126860                   #  34    0x3a  6      OPC=jne_label_1            nop                             #  34    0x32  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  addl $0x4, %ecx                 #  35    0x40  3      OPC=addl_r32_imm8          salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  movl %r8d, -0x4(%r15,%rcx,1)    #  36    0x43  5      OPC=movl_m32_r32           jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
  subl $0xfc, %edx                #  37    0x48  3      OPC=subl_r32_imm8        .L_126820:                        #        0x40  0      OPC=<label>              
  movl (%r15,%rdx,1), %r8d        #  38    0x4b  4      OPC=movl_r32_m32           subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  movl %r8d, %r9d                 #  39    0x4f  3      OPC=movl_r32_r32_1         movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  leal -0x1010101(%r8), %esi      #  40    0x52  7      OPC=leal_r32_m32           addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  andq $0x80808080, %rsi          #  41    0x59  7      OPC=andq_r64_imm32         movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  notq %r9                        #  42    0x60  3      OPC=notq_r64               movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  andl %esi, %r9d                 #  43    0x63  3      OPC=andl_r32_r32           notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  je .L_126820                    #  44    0x66  6      OPC=je_label_1             leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  nop                             #  45    0x6c  1      OPC=nop                    addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  nop                             #  46    0x6d  1      OPC=nop                    andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  nop                             #  47    0x6e  1      OPC=nop                    andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  nop                             #  48    0x6f  1      OPC=nop                    je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x70  1      OPC=nop                    nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x71  1      OPC=nop                    nop                             #  50    0x6e  1      OPC=nop                  
  nop                             #  51    0x72  1      OPC=nop                    nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                    nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                    nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                    nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                    nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                    nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                    nop                             #  57    0x75  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                    nop                             #  58    0x76  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                    nop                             #  59    0x77  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                    nop                             #  60    0x78  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                    nop                             #  61    0x79  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                    nop                             #  62    0x7a  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                    nop                             #  63    0x7b  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                    nop                             #  64    0x7c  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>                nop                             #  65    0x7d  1      OPC=nop                  
  addl $0x1, %edx                 #  65    0x80  3      OPC=addl_r32_imm8          nop                             #  66    0x7e  1      OPC=nop                  
  movzbq -0x1(%r15,%rdx,1), %rsi  #  66    0x83  6      OPC=movzbq_r64_m8          nop                             #  67    0x7f  1      OPC=nop                  
  incl %ecx                       #  67    0x89  2      OPC=incl_r32             .L_126860:                        #        0x80  0      OPC=<label>              
  movb %sil, -0x1(%r15,%rcx,1)    #  68    0x8b  5      OPC=movb_m8_r8             addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  negb %sil                       #  69    0x90  3      OPC=negb_r8                movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  jne .L_126860                   #  70    0x93  6      OPC=jne_label_1            addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  nop                             #  71    0x99  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  nop                             #  72    0x9a  1      OPC=nop                    negl %esi                       #  72    0x94  2      OPC=negl_r32             
  nop                             #  73    0x9b  1      OPC=nop                    jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0x9c  1      OPC=nop                    nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9d  1      OPC=nop                    nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9e  1      OPC=nop                    nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0x9f  1      OPC=nop                    nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa0  1      OPC=nop                    nop                             #  78    0xa0  1      OPC=nop                  
  popq %r11                       #  79    0xa1  2      OPC=popq_r64_1             nop                             #  79    0xa1  1      OPC=nop                  
  andl $0xe0, %r11d               #  80    0xa3  4      OPC=andl_r32_imm8          nop                             #  80    0xa2  1      OPC=nop                  
  addq %r15, %r11                 #  81    0xa7  3      OPC=addq_r64_r64           nop                             #  81    0xa3  1      OPC=nop                  
  jmpq %r11                       #  82    0xaa  3      OPC=jmpq_r64               nop                             #  82    0xa4  1      OPC=nop                  
                                                                                   popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
.size strcpy, .-strcpy                                                             andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
                                                                                   addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
                                                                                   jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
                                                                                                                                                                  
                                                                                 .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Statistics Update: 

Iterations:                    400000
Elapsed Time:                  365.655s
Iterations/s:                  1093.93

Starting cost:                 167
Lowest cost:                   119
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted     
                                                        
Delete          8.29275%     7.131%        3.697%       
OpcodeWidth     8.33275%     6.51525%      5.762%       
Add Nops        8.321%       8.321%        3.5065%      
Instruction     8.317%       3.53325%      0.193%       
ReplaceNop      8.296%       7.1285%       5.51375%     
Rotate          8.3425%      6.373%        2.69925%     
Global Swap     8.32275%     5.7975%       3.68325%     
Global Copy     8.42325%     7.0745%       7.0745%      
Operand         8.30575%     5.02475%      0.863%       
Local Swap      8.2965%      5.62325%      4.024%       
Opcode          8.39925%     7.35475%      6.1705%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.3505%      4.606%        0.001%       
                                                        
Total           100%         74.4827%      43.1878%     

********************************************************************************

Statistics Update: 

Iterations:                    500000
Elapsed Time:                  452.206s
Iterations/s:                  1105.69

Starting cost:                 167
Lowest cost:                   119
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted     
                                                        
Delete          8.296%       7.1272%       3.6278%      
OpcodeWidth     8.3198%      6.4712%       5.755%       
Add Nops        8.3166%      8.3166%       3.4426%      
Instruction     8.3318%      3.5168%       0.186%       
ReplaceNop      8.251%       7.0916%       5.5004%      
Rotate          8.3598%      6.367%        2.6944%      
Global Swap     8.3584%      5.8152%       3.7174%      
Global Copy     8.3962%      7.057%        7.057%       
Operand         8.3224%      4.9908%       0.8684%      
Local Swap      8.3148%      5.6246%       4.029%       
Opcode          8.386%       7.3314%       6.165%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.3472%      4.5884%       0.0008%      
                                                        
Total           100%         74.2978%      43.0438%     

********************************************************************************

===========================================
Working on pair / P: 1 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 0 (size 1 / cell size 1 / offset 0
32 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_8_6|8>)[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 1 
2  |       1 0 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 8 (cell size 8)
Access 3 cell 2 offset 0 size 1 (cell size 8)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_13|8> <TMP_BV_8_17|8>)) (== <TMP_BV_8_14|8> <TMP_BV_8_16|8>)) (== <TMP_BV_64_18|64> <TMP_BV_64_15|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_15|64>[7:0])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_13|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_13|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_13|8> <TMP_BV_8_17|8>)) (== <TMP_BV_8_14|8> <TMP_BV_8_16|8>)) (== <TMP_BV_64_18|64> <TMP_BV_64_15|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 1 0 
1  |     0 0 0 1 
2  |       0 1 0 
3  |         0 1 
4  |           0 
5  |             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 0 size 1 (cell size 2)
Access 3 cell 1 offset 0 size 1 (cell size 2)
Access 4 cell 0 offset 1 size 1 (cell size 2)
Access 5 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
30 -> 0 (size 1 / cell size 2 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
37 -> 0 (size 1 / cell size 2 / offset 1
39 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_16_25|16> <TMP_BV_16_27|16>)) (== <TMP_BV_16_26|16> <TMP_BV_16_28|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_16_27|16>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_16_27|16>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_25|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_25|16>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_25|16> <TMP_BV_16_27|16>)) (== <TMP_BV_16_26|16> <TMP_BV_16_28|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 1 0 0 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 2 offset 0 size 8 (cell size 8)
Access 3 cell 2 offset 0 size 1 (cell size 8)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 2 offset 1 size 1 (cell size 8)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_8_36|8> <TMP_BV_8_40|8>)) (== <TMP_BV_16_37|16> <TMP_BV_16_39|16>)) (== <TMP_BV_64_41|64> <TMP_BV_64_38|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_38|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_38|64>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_36|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_36|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_8_36|8> <TMP_BV_8_40|8>)) (== <TMP_BV_16_37|16> <TMP_BV_16_39|16>)) (== <TMP_BV_64_41|64> <TMP_BV_64_38|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 0 
3  |         0 0 1 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 8 (cell size 8)
Access 3 cell 3 offset 0 size 4 (cell size 5)
Access 4 cell 4 offset 0 size 8 (cell size 8)
Access 5 cell 4 offset 0 size 1 (cell size 8)
Access 6 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_8_48|8> <TMP_BV_8_53|8>)) (== <TMP_BV_8_49|8> <TMP_BV_8_54|8>)) (== <TMP_BV_64_55|64> <TMP_BV_64_50|64>)) (== <TMP_BV_40_56|40> <TMP_BV_40_51|40>)) (== <TMP_BV_64_57|64> <TMP_BV_64_52|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_52|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_52|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_52|64>[7:0])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_48|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_48|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_8_48|8> <TMP_BV_8_53|8>)) (== <TMP_BV_8_49|8> <TMP_BV_8_54|8>)) (== <TMP_BV_64_55|64> <TMP_BV_64_50|64>)) (== <TMP_BV_40_56|40> <TMP_BV_40_51|40>)) (== <TMP_BV_64_57|64> <TMP_BV_64_52|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 8 (cell size 8)
Access 3 cell 3 offset 0 size 4 (cell size 6)
Access 4 cell 4 offset 0 size 8 (cell size 8)
Access 5 cell 4 offset 0 size 1 (cell size 8)
Access 6 cell 3 offset 4 size 1 (cell size 6)
Access 7 cell 4 offset 1 size 1 (cell size 8)
Access 8 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_8_66|8> <TMP_BV_8_71|8>)) (== <TMP_BV_8_67|8> <TMP_BV_8_72|8>)) (== <TMP_BV_64_73|64> <TMP_BV_64_68|64>)) (== <TMP_BV_48_74|48> <TMP_BV_48_69|48>)) (== <TMP_BV_64_75|64> <TMP_BV_64_70|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_70|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_70|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_70|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_70|64>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_66|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_66|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_8_66|8> <TMP_BV_8_71|8>)) (== <TMP_BV_8_67|8> <TMP_BV_8_72|8>)) (== <TMP_BV_64_73|64> <TMP_BV_64_68|64>)) (== <TMP_BV_48_74|48> <TMP_BV_48_69|48>)) (== <TMP_BV_64_75|64> <TMP_BV_64_70|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 1 1 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 8 (cell size 16)
Access 3 cell 3 offset 0 size 4 (cell size 4)
Access 4 cell 4 offset 0 size 8 (cell size 8)
Access 5 cell 5 offset 0 size 4 (cell size 5)
Access 6 cell 2 offset 8 size 8 (cell size 16)
Access 7 cell 2 offset 8 size 1 (cell size 16)
Access 8 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_8_83|8> <TMP_BV_8_89|8>)) (== <TMP_BV_8_84|8> <TMP_BV_8_90|8>)) (== <TMP_BV_128_91|128> <TMP_BV_128_85|128>)) (== <TMP_BV_32_92|32> <TMP_BV_32_86|32>)) (== <TMP_BV_64_93|64> <TMP_BV_64_87|64>)) (== <TMP_BV_40_94|40> <TMP_BV_40_88|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_87|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_87|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_85|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_85|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_85|128>[71:64])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_83|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_83|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_8_83|8> <TMP_BV_8_89|8>)) (== <TMP_BV_8_84|8> <TMP_BV_8_90|8>)) (== <TMP_BV_128_91|128> <TMP_BV_128_85|128>)) (== <TMP_BV_32_92|32> <TMP_BV_32_86|32>)) (== <TMP_BV_64_93|64> <TMP_BV_64_87|64>)) (== <TMP_BV_40_94|40> <TMP_BV_40_88|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 1 1 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 2 offset 0 size 8 (cell size 16)
Access 3 cell 3 offset 0 size 4 (cell size 4)
Access 4 cell 4 offset 0 size 8 (cell size 8)
Access 5 cell 5 offset 0 size 4 (cell size 6)
Access 6 cell 2 offset 8 size 8 (cell size 16)
Access 7 cell 2 offset 8 size 1 (cell size 16)
Access 8 cell 5 offset 4 size 1 (cell size 6)
Access 9 cell 2 offset 9 size 1 (cell size 16)
Access 10 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_8_104|8> <TMP_BV_8_110|8>)) (== <TMP_BV_8_105|8> <TMP_BV_8_111|8>)) (== <TMP_BV_128_112|128> <TMP_BV_128_106|128>)) (== <TMP_BV_32_113|32> <TMP_BV_32_107|32>)) (== <TMP_BV_64_114|64> <TMP_BV_64_108|64>)) (== <TMP_BV_48_115|48> <TMP_BV_48_109|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_108|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_108|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_106|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_106|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_106|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_106|128>[79:72])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_104|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_104|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_8_104|8> <TMP_BV_8_110|8>)) (== <TMP_BV_8_105|8> <TMP_BV_8_111|8>)) (== <TMP_BV_128_112|128> <TMP_BV_128_106|128>)) (== <TMP_BV_32_113|32> <TMP_BV_32_107|32>)) (== <TMP_BV_64_114|64> <TMP_BV_64_108|64>)) (== <TMP_BV_48_115|48> <TMP_BV_48_109|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   1 0 1 0 
1  |     0 1 0 
2  |       0 1 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 0 (size 1 / cell size 4 / offset 0
32 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_121|32> <TMP_BV_32_123|32>)) (== <TMP_BV_8_122|8> <TMP_BV_8_124|8>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_32_123|32>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_121|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_121|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_121|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_121|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_121|32> <TMP_BV_32_123|32>)) (== <TMP_BV_8_122|8> <TMP_BV_8_124|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   1 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 1 
3  |         1 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 8 (cell size 8)
Access 4 cell 2 offset 0 size 1 (cell size 8)
Access 5 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_131|32> <TMP_BV_32_135|32>)) (== <TMP_BV_8_132|8> <TMP_BV_8_134|8>)) (== <TMP_BV_64_136|64> <TMP_BV_64_133|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_133|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_131|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_131|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_131|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_131|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_131|32> <TMP_BV_32_135|32>)) (== <TMP_BV_8_132|8> <TMP_BV_8_134|8>)) (== <TMP_BV_64_136|64> <TMP_BV_64_133|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 1 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 1 0 
2  |       0 0 0 1 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 0 offset 1 size 1 (cell size 4)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
30 -> 0 (size 1 / cell size 4 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
37 -> 0 (size 1 / cell size 4 / offset 1
39 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_144|32> <TMP_BV_32_146|32>)) (== <TMP_BV_16_145|16> <TMP_BV_16_147|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_32_146|32>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_32_146|32>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_144|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_144|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_144|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_144|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_144|32> <TMP_BV_32_146|32>)) (== <TMP_BV_16_145|16> <TMP_BV_16_147|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 1 0 0 
3  |         1 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 2 offset 0 size 8 (cell size 8)
Access 4 cell 2 offset 0 size 1 (cell size 8)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 2 offset 1 size 1 (cell size 8)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_156|32> <TMP_BV_32_160|32>)) (== <TMP_BV_16_157|16> <TMP_BV_16_159|16>)) (== <TMP_BV_64_161|64> <TMP_BV_64_158|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_158|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_158|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_156|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_156|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_156|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_156|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_156|32> <TMP_BV_32_160|32>)) (== <TMP_BV_16_157|16> <TMP_BV_16_159|16>)) (== <TMP_BV_64_161|64> <TMP_BV_64_158|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 1 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 8 (cell size 8)
Access 4 cell 3 offset 0 size 4 (cell size 5)
Access 5 cell 4 offset 0 size 8 (cell size 8)
Access 6 cell 4 offset 0 size 1 (cell size 8)
Access 7 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_169|32> <TMP_BV_32_174|32>)) (== <TMP_BV_8_170|8> <TMP_BV_8_175|8>)) (== <TMP_BV_64_176|64> <TMP_BV_64_171|64>)) (== <TMP_BV_40_177|40> <TMP_BV_40_172|40>)) (== <TMP_BV_64_178|64> <TMP_BV_64_173|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_173|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_173|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_173|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_169|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_169|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_169|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_169|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_169|32> <TMP_BV_32_174|32>)) (== <TMP_BV_8_170|8> <TMP_BV_8_175|8>)) (== <TMP_BV_64_176|64> <TMP_BV_64_171|64>)) (== <TMP_BV_40_177|40> <TMP_BV_40_172|40>)) (== <TMP_BV_64_178|64> <TMP_BV_64_173|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 1 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 8 (cell size 8)
Access 4 cell 3 offset 0 size 4 (cell size 6)
Access 5 cell 4 offset 0 size 8 (cell size 8)
Access 6 cell 4 offset 0 size 1 (cell size 8)
Access 7 cell 3 offset 4 size 1 (cell size 6)
Access 8 cell 4 offset 1 size 1 (cell size 8)
Access 9 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_188|32> <TMP_BV_32_193|32>)) (== <TMP_BV_8_189|8> <TMP_BV_8_194|8>)) (== <TMP_BV_64_195|64> <TMP_BV_64_190|64>)) (== <TMP_BV_48_196|48> <TMP_BV_48_191|48>)) (== <TMP_BV_64_197|64> <TMP_BV_64_192|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_192|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_192|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_192|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_192|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_188|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_188|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_188|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_188|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_188|32> <TMP_BV_32_193|32>)) (== <TMP_BV_8_189|8> <TMP_BV_8_194|8>)) (== <TMP_BV_64_195|64> <TMP_BV_64_190|64>)) (== <TMP_BV_48_196|48> <TMP_BV_48_191|48>)) (== <TMP_BV_64_197|64> <TMP_BV_64_192|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 1 1 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 8 (cell size 16)
Access 4 cell 3 offset 0 size 4 (cell size 4)
Access 5 cell 4 offset 0 size 8 (cell size 8)
Access 6 cell 5 offset 0 size 4 (cell size 5)
Access 7 cell 2 offset 8 size 8 (cell size 16)
Access 8 cell 2 offset 8 size 1 (cell size 16)
Access 9 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_32_206|32> <TMP_BV_32_212|32>)) (== <TMP_BV_8_207|8> <TMP_BV_8_213|8>)) (== <TMP_BV_128_214|128> <TMP_BV_128_208|128>)) (== <TMP_BV_32_215|32> <TMP_BV_32_209|32>)) (== <TMP_BV_64_216|64> <TMP_BV_64_210|64>)) (== <TMP_BV_40_217|40> <TMP_BV_40_211|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_210|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_210|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_208|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_208|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_208|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_206|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_206|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_206|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_206|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_32_206|32> <TMP_BV_32_212|32>)) (== <TMP_BV_8_207|8> <TMP_BV_8_213|8>)) (== <TMP_BV_128_214|128> <TMP_BV_128_208|128>)) (== <TMP_BV_32_215|32> <TMP_BV_32_209|32>)) (== <TMP_BV_64_216|64> <TMP_BV_64_210|64>)) (== <TMP_BV_40_217|40> <TMP_BV_40_211|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 1 1 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 2 offset 0 size 8 (cell size 16)
Access 4 cell 3 offset 0 size 4 (cell size 4)
Access 5 cell 4 offset 0 size 8 (cell size 8)
Access 6 cell 5 offset 0 size 4 (cell size 6)
Access 7 cell 2 offset 8 size 8 (cell size 16)
Access 8 cell 2 offset 8 size 1 (cell size 16)
Access 9 cell 5 offset 4 size 1 (cell size 6)
Access 10 cell 2 offset 9 size 1 (cell size 16)
Access 11 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_32_228|32> <TMP_BV_32_234|32>)) (== <TMP_BV_8_229|8> <TMP_BV_8_235|8>)) (== <TMP_BV_128_236|128> <TMP_BV_128_230|128>)) (== <TMP_BV_32_237|32> <TMP_BV_32_231|32>)) (== <TMP_BV_64_238|64> <TMP_BV_64_232|64>)) (== <TMP_BV_48_239|48> <TMP_BV_48_233|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_232|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_232|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_230|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_230|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_230|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_230|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_228|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_228|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_228|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_228|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_32_228|32> <TMP_BV_32_234|32>)) (== <TMP_BV_8_229|8> <TMP_BV_8_235|8>)) (== <TMP_BV_128_236|128> <TMP_BV_128_230|128>)) (== <TMP_BV_32_237|32> <TMP_BV_32_231|32>)) (== <TMP_BV_64_238|64> <TMP_BV_64_232|64>)) (== <TMP_BV_48_239|48> <TMP_BV_48_233|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 1 0 
1  |     0 0 0 1 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 1 (cell size 2)
Access 5 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 0 (size 1 / cell size 2 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_16_246|16> <TMP_BV_16_248|16>)) (== <TMP_BV_16_247|16> <TMP_BV_16_249|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_16_248|16>[7:0])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_246|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_246|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_246|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_246|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_246|16> <TMP_BV_16_248|16>)) (== <TMP_BV_16_247|16> <TMP_BV_16_249|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 8)
Access 5 cell 2 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_257|16> <TMP_BV_16_261|16>)) (== <TMP_BV_16_258|16> <TMP_BV_16_260|16>)) (== <TMP_BV_64_262|64> <TMP_BV_64_259|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_259|64>[7:0])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_257|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_257|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_257|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_257|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_257|16> <TMP_BV_16_261|16>)) (== <TMP_BV_16_258|16> <TMP_BV_16_260|16>)) (== <TMP_BV_64_262|64> <TMP_BV_64_259|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 1 0 0 0 
1  |     0 0 0 1 0 0 
2  |       0 0 0 1 0 
3  |         0 0 0 1 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 0 0 0 1 0 
1  |     0 1 0 0 0 1 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 1 (cell size 2)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 0 offset 1 size 1 (cell size 2)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 0 (size 1 / cell size 2 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
37 -> 0 (size 1 / cell size 2 / offset 1
39 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_16_271|16> <TMP_BV_16_273|16>)) (== <TMP_BV_16_272|16> <TMP_BV_16_274|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_16_273|16>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_16_273|16>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_271|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_271|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_271|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_271|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_271|16> <TMP_BV_16_273|16>)) (== <TMP_BV_16_272|16> <TMP_BV_16_274|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 1 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 8)
Access 5 cell 2 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 2 offset 1 size 1 (cell size 8)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_16_284|16> <TMP_BV_16_288|16>)) (== <TMP_BV_16_285|16> <TMP_BV_16_287|16>)) (== <TMP_BV_64_289|64> <TMP_BV_64_286|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_286|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_286|64>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_284|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_284|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_284|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_284|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_16_284|16> <TMP_BV_16_288|16>)) (== <TMP_BV_16_285|16> <TMP_BV_16_287|16>)) (== <TMP_BV_64_289|64> <TMP_BV_64_286|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 8)
Access 5 cell 3 offset 0 size 4 (cell size 5)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 8)
Access 8 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_16_298|16> <TMP_BV_16_303|16>)) (== <TMP_BV_16_299|16> <TMP_BV_16_304|16>)) (== <TMP_BV_64_305|64> <TMP_BV_64_300|64>)) (== <TMP_BV_40_306|40> <TMP_BV_40_301|40>)) (== <TMP_BV_64_307|64> <TMP_BV_64_302|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_302|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_302|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_302|64>[7:0])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_298|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_298|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_298|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_298|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_16_298|16> <TMP_BV_16_303|16>)) (== <TMP_BV_16_299|16> <TMP_BV_16_304|16>)) (== <TMP_BV_64_305|64> <TMP_BV_64_300|64>)) (== <TMP_BV_40_306|40> <TMP_BV_40_301|40>)) (== <TMP_BV_64_307|64> <TMP_BV_64_302|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 8)
Access 5 cell 3 offset 0 size 4 (cell size 6)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 8)
Access 8 cell 3 offset 4 size 1 (cell size 6)
Access 9 cell 4 offset 1 size 1 (cell size 8)
Access 10 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_16_318|16> <TMP_BV_16_323|16>)) (== <TMP_BV_16_319|16> <TMP_BV_16_324|16>)) (== <TMP_BV_64_325|64> <TMP_BV_64_320|64>)) (== <TMP_BV_48_326|48> <TMP_BV_48_321|48>)) (== <TMP_BV_64_327|64> <TMP_BV_64_322|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_322|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_322|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_322|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_322|64>[15:8])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_318|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_16_318|16> <TMP_BV_16_323|16>)) (== <TMP_BV_16_319|16> <TMP_BV_16_324|16>)) (== <TMP_BV_64_325|64> <TMP_BV_64_320|64>)) (== <TMP_BV_48_326|48> <TMP_BV_48_321|48>)) (== <TMP_BV_64_327|64> <TMP_BV_64_322|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   1 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 1 1 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 1 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 16)
Access 5 cell 3 offset 0 size 4 (cell size 4)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 5 offset 0 size 4 (cell size 5)
Access 8 cell 2 offset 8 size 8 (cell size 16)
Access 9 cell 2 offset 8 size 1 (cell size 16)
Access 10 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_16_337|16> <TMP_BV_16_343|16>)) (== <TMP_BV_16_338|16> <TMP_BV_16_344|16>)) (== <TMP_BV_128_345|128> <TMP_BV_128_339|128>)) (== <TMP_BV_32_346|32> <TMP_BV_32_340|32>)) (== <TMP_BV_64_347|64> <TMP_BV_64_341|64>)) (== <TMP_BV_40_348|40> <TMP_BV_40_342|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_341|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_341|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_339|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_339|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_339|128>[71:64])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_337|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_337|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_337|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_337|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_16_337|16> <TMP_BV_16_343|16>)) (== <TMP_BV_16_338|16> <TMP_BV_16_344|16>)) (== <TMP_BV_128_345|128> <TMP_BV_128_339|128>)) (== <TMP_BV_32_346|32> <TMP_BV_32_340|32>)) (== <TMP_BV_64_347|64> <TMP_BV_64_341|64>)) (== <TMP_BV_40_348|40> <TMP_BV_40_342|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   1 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 1 1 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 1 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 2 offset 0 size 8 (cell size 16)
Access 5 cell 3 offset 0 size 4 (cell size 4)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 5 offset 0 size 4 (cell size 6)
Access 8 cell 2 offset 8 size 8 (cell size 16)
Access 9 cell 2 offset 8 size 1 (cell size 16)
Access 10 cell 5 offset 4 size 1 (cell size 6)
Access 11 cell 2 offset 9 size 1 (cell size 16)
Access 12 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_16_360|16> <TMP_BV_16_366|16>)) (== <TMP_BV_16_361|16> <TMP_BV_16_367|16>)) (== <TMP_BV_128_368|128> <TMP_BV_128_362|128>)) (== <TMP_BV_32_369|32> <TMP_BV_32_363|32>)) (== <TMP_BV_64_370|64> <TMP_BV_64_364|64>)) (== <TMP_BV_48_371|48> <TMP_BV_48_365|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_364|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_364|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_362|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_362|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_362|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_362|128>[79:72])[31:0] <0x0|32>)))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_360|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_360|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_360|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_360|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_16_360|16> <TMP_BV_16_366|16>)) (== <TMP_BV_16_361|16> <TMP_BV_16_367|16>)) (== <TMP_BV_128_368|128> <TMP_BV_128_362|128>)) (== <TMP_BV_32_369|32> <TMP_BV_32_363|32>)) (== <TMP_BV_64_370|64> <TMP_BV_64_364|64>)) (== <TMP_BV_48_371|48> <TMP_BV_48_365|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 1 0 
1  |     0 0 0 1 0 
2  |       0 0 0 1 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 0 (size 1 / cell size 4 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_379|32> <TMP_BV_32_381|32>)) (== <TMP_BV_16_380|16> <TMP_BV_16_382|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_32_381|32>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_379|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_379|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_379|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_379|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_379|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_379|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_379|32> <TMP_BV_32_381|32>)) (== <TMP_BV_16_380|16> <TMP_BV_16_382|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 2 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_391|32> <TMP_BV_32_395|32>)) (== <TMP_BV_16_392|16> <TMP_BV_16_394|16>)) (== <TMP_BV_64_396|64> <TMP_BV_64_393|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_393|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_391|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_391|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_391|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_391|32> <TMP_BV_32_395|32>)) (== <TMP_BV_16_392|16> <TMP_BV_16_394|16>)) (== <TMP_BV_64_396|64> <TMP_BV_64_393|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   1 0 0 0 1 0 0 0 
1  |     0 0 0 1 0 0 0 
2  |       0 0 0 1 0 0 
3  |         0 0 0 1 0 
4  |           0 0 0 1 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 1 0 
2  |       0 1 0 0 0 1 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 0 offset 1 size 1 (cell size 4)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 0 (size 1 / cell size 4 / offset 0
32 -> 1 (size 1 / cell size 2 / offset 0
37 -> 0 (size 1 / cell size 4 / offset 1
39 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_406|32> <TMP_BV_32_408|32>)) (== <TMP_BV_16_407|16> <TMP_BV_16_409|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_32_408|32>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_32_408|32>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_406|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_406|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_406|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_406|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_406|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_406|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_406|32> <TMP_BV_32_408|32>)) (== <TMP_BV_16_407|16> <TMP_BV_16_409|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 1 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 1 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 1 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 2 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 2)
Access 8 cell 2 offset 1 size 1 (cell size 8)
Access 9 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_32_420|32> <TMP_BV_32_424|32>)) (== <TMP_BV_16_421|16> <TMP_BV_16_423|16>)) (== <TMP_BV_64_425|64> <TMP_BV_64_422|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_422|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_422|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_420|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_420|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_420|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_420|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_420|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_420|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_32_420|32> <TMP_BV_32_424|32>)) (== <TMP_BV_16_421|16> <TMP_BV_16_423|16>)) (== <TMP_BV_64_425|64> <TMP_BV_64_422|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 3 offset 0 size 4 (cell size 5)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_435|32> <TMP_BV_32_440|32>)) (== <TMP_BV_16_436|16> <TMP_BV_16_441|16>)) (== <TMP_BV_64_442|64> <TMP_BV_64_437|64>)) (== <TMP_BV_40_443|40> <TMP_BV_40_438|40>)) (== <TMP_BV_64_444|64> <TMP_BV_64_439|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_439|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_439|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_439|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_435|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_435|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_435|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_435|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_435|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_435|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_435|32> <TMP_BV_32_440|32>)) (== <TMP_BV_16_436|16> <TMP_BV_16_441|16>)) (== <TMP_BV_64_442|64> <TMP_BV_64_437|64>)) (== <TMP_BV_40_443|40> <TMP_BV_40_438|40>)) (== <TMP_BV_64_444|64> <TMP_BV_64_439|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 3 offset 0 size 4 (cell size 6)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 6)
Access 10 cell 4 offset 1 size 1 (cell size 8)
Access 11 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_32_456|32> <TMP_BV_32_461|32>)) (== <TMP_BV_16_457|16> <TMP_BV_16_462|16>)) (== <TMP_BV_64_463|64> <TMP_BV_64_458|64>)) (== <TMP_BV_48_464|48> <TMP_BV_48_459|48>)) (== <TMP_BV_64_465|64> <TMP_BV_64_460|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_460|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_460|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_460|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_460|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_456|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_456|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_456|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_32_456|32> <TMP_BV_32_461|32>)) (== <TMP_BV_16_457|16> <TMP_BV_16_462|16>)) (== <TMP_BV_64_463|64> <TMP_BV_64_458|64>)) (== <TMP_BV_48_464|48> <TMP_BV_48_459|48>)) (== <TMP_BV_64_465|64> <TMP_BV_64_460|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 1 1 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 16)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 5 offset 0 size 4 (cell size 5)
Access 9 cell 2 offset 8 size 8 (cell size 16)
Access 10 cell 2 offset 8 size 1 (cell size 16)
Access 11 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_32_476|32> <TMP_BV_32_482|32>)) (== <TMP_BV_16_477|16> <TMP_BV_16_483|16>)) (== <TMP_BV_128_484|128> <TMP_BV_128_478|128>)) (== <TMP_BV_32_485|32> <TMP_BV_32_479|32>)) (== <TMP_BV_64_486|64> <TMP_BV_64_480|64>)) (== <TMP_BV_40_487|40> <TMP_BV_40_481|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_480|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_480|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_478|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_478|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_478|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_476|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_476|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_476|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_476|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_476|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_476|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_32_476|32> <TMP_BV_32_482|32>)) (== <TMP_BV_16_477|16> <TMP_BV_16_483|16>)) (== <TMP_BV_128_484|128> <TMP_BV_128_478|128>)) (== <TMP_BV_32_485|32> <TMP_BV_32_479|32>)) (== <TMP_BV_64_486|64> <TMP_BV_64_480|64>)) (== <TMP_BV_40_487|40> <TMP_BV_40_481|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   1 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 1 1 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 2 offset 0 size 8 (cell size 16)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 5 offset 0 size 4 (cell size 6)
Access 9 cell 2 offset 8 size 8 (cell size 16)
Access 10 cell 2 offset 8 size 1 (cell size 16)
Access 11 cell 5 offset 4 size 1 (cell size 6)
Access 12 cell 2 offset 9 size 1 (cell size 16)
Access 13 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_32_500|32> <TMP_BV_32_506|32>)) (== <TMP_BV_16_501|16> <TMP_BV_16_507|16>)) (== <TMP_BV_128_508|128> <TMP_BV_128_502|128>)) (== <TMP_BV_32_509|32> <TMP_BV_32_503|32>)) (== <TMP_BV_64_510|64> <TMP_BV_64_504|64>)) (== <TMP_BV_48_511|48> <TMP_BV_48_505|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_504|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_504|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_502|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_502|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_502|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_502|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_500|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_500|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_500|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_500|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_500|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_500|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_32_500|32> <TMP_BV_32_506|32>)) (== <TMP_BV_16_501|16> <TMP_BV_16_507|16>)) (== <TMP_BV_128_508|128> <TMP_BV_128_502|128>)) (== <TMP_BV_32_509|32> <TMP_BV_32_503|32>)) (== <TMP_BV_64_510|64> <TMP_BV_64_504|64>)) (== <TMP_BV_48_511|48> <TMP_BV_48_505|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 1 0 
1  |     0 0 0 0 1 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 1 0 0 0 
1  |     0 0 1 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 0 (size 1 / cell size 8 / offset 0
32 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_518|64> <TMP_BV_64_520|64>)) (== <TMP_BV_40_519|40> <TMP_BV_40_521|40>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_520|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_518|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_518|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_518|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_518|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_518|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_518|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_518|64> <TMP_BV_64_520|64>)) (== <TMP_BV_40_519|40> <TMP_BV_40_521|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 
2  |       1 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 1 0 0 0 0 
1  |     0 0 1 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 2 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_529|64> <TMP_BV_64_533|64>)) (== <TMP_BV_40_530|40> <TMP_BV_40_532|40>)) (== <TMP_BV_64_534|64> <TMP_BV_64_531|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_531|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_529|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_529|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_529|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_529|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_529|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_529|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_529|64> <TMP_BV_64_533|64>)) (== <TMP_BV_40_530|40> <TMP_BV_40_532|40>)) (== <TMP_BV_64_534|64> <TMP_BV_64_531|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 1 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 5)
Access 7 cell 0 offset 1 size 1 (cell size 8)
Access 8 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 0 (size 1 / cell size 8 / offset 0
32 -> 1 (size 1 / cell size 5 / offset 0
37 -> 0 (size 1 / cell size 8 / offset 1
39 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_543|64> <TMP_BV_64_545|64>)) (== <TMP_BV_40_544|40> <TMP_BV_40_546|40>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_545|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_545|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_543|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_543|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_543|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_543|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_543|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_543|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_543|64> <TMP_BV_64_545|64>)) (== <TMP_BV_40_544|40> <TMP_BV_40_546|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 2 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 5)
Access 8 cell 2 offset 1 size 1 (cell size 8)
Access 9 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 5 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_556|64> <TMP_BV_64_560|64>)) (== <TMP_BV_40_557|40> <TMP_BV_40_559|40>)) (== <TMP_BV_64_561|64> <TMP_BV_64_558|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_558|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_558|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_556|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_556|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_556|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_556|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_556|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_556|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_556|64> <TMP_BV_64_560|64>)) (== <TMP_BV_40_557|40> <TMP_BV_40_559|40>)) (== <TMP_BV_64_561|64> <TMP_BV_64_558|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 3 offset 0 size 4 (cell size 5)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_570|64> <TMP_BV_64_575|64>)) (== <TMP_BV_40_571|40> <TMP_BV_40_576|40>)) (== <TMP_BV_64_577|64> <TMP_BV_64_572|64>)) (== <TMP_BV_40_578|40> <TMP_BV_40_573|40>)) (== <TMP_BV_64_579|64> <TMP_BV_64_574|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_574|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_574|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_574|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_570|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_570|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_570|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_570|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_570|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_570|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_570|64> <TMP_BV_64_575|64>)) (== <TMP_BV_40_571|40> <TMP_BV_40_576|40>)) (== <TMP_BV_64_577|64> <TMP_BV_64_572|64>)) (== <TMP_BV_40_578|40> <TMP_BV_40_573|40>)) (== <TMP_BV_64_579|64> <TMP_BV_64_574|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 8)
Access 6 cell 3 offset 0 size 4 (cell size 6)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 6)
Access 10 cell 4 offset 1 size 1 (cell size 8)
Access 11 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_590|64> <TMP_BV_64_595|64>)) (== <TMP_BV_40_591|40> <TMP_BV_40_596|40>)) (== <TMP_BV_64_597|64> <TMP_BV_64_592|64>)) (== <TMP_BV_48_598|48> <TMP_BV_48_593|48>)) (== <TMP_BV_64_599|64> <TMP_BV_64_594|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_594|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_594|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_594|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_594|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_590|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_590|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_590|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_590|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_590|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_590|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_590|64> <TMP_BV_64_595|64>)) (== <TMP_BV_40_591|40> <TMP_BV_40_596|40>)) (== <TMP_BV_64_597|64> <TMP_BV_64_592|64>)) (== <TMP_BV_48_598|48> <TMP_BV_48_593|48>)) (== <TMP_BV_64_599|64> <TMP_BV_64_594|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 1 1 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 16)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 5 offset 0 size 4 (cell size 5)
Access 9 cell 2 offset 8 size 8 (cell size 16)
Access 10 cell 2 offset 8 size 1 (cell size 16)
Access 11 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_64_609|64> <TMP_BV_64_615|64>)) (== <TMP_BV_40_610|40> <TMP_BV_40_616|40>)) (== <TMP_BV_128_617|128> <TMP_BV_128_611|128>)) (== <TMP_BV_32_618|32> <TMP_BV_32_612|32>)) (== <TMP_BV_64_619|64> <TMP_BV_64_613|64>)) (== <TMP_BV_40_620|40> <TMP_BV_40_614|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_613|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_613|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_611|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_611|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_611|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_609|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_609|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_609|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_609|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_609|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_609|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_64_609|64> <TMP_BV_64_615|64>)) (== <TMP_BV_40_610|40> <TMP_BV_40_616|40>)) (== <TMP_BV_128_617|128> <TMP_BV_128_611|128>)) (== <TMP_BV_32_618|32> <TMP_BV_32_612|32>)) (== <TMP_BV_64_619|64> <TMP_BV_64_613|64>)) (== <TMP_BV_40_620|40> <TMP_BV_40_614|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 1 1 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 2 offset 0 size 8 (cell size 16)
Access 6 cell 3 offset 0 size 4 (cell size 4)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 5 offset 0 size 4 (cell size 6)
Access 9 cell 2 offset 8 size 8 (cell size 16)
Access 10 cell 2 offset 8 size 1 (cell size 16)
Access 11 cell 5 offset 4 size 1 (cell size 6)
Access 12 cell 2 offset 9 size 1 (cell size 16)
Access 13 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_64_632|64> <TMP_BV_64_638|64>)) (== <TMP_BV_40_633|40> <TMP_BV_40_639|40>)) (== <TMP_BV_128_640|128> <TMP_BV_128_634|128>)) (== <TMP_BV_32_641|32> <TMP_BV_32_635|32>)) (== <TMP_BV_64_642|64> <TMP_BV_64_636|64>)) (== <TMP_BV_48_643|48> <TMP_BV_48_637|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_636|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_636|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_634|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_634|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_634|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_634|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_632|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_632|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_632|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_632|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_632|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_632|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_64_632|64> <TMP_BV_64_638|64>)) (== <TMP_BV_40_633|40> <TMP_BV_40_639|40>)) (== <TMP_BV_128_640|128> <TMP_BV_128_634|128>)) (== <TMP_BV_32_641|32> <TMP_BV_32_635|32>)) (== <TMP_BV_64_642|64> <TMP_BV_64_636|64>)) (== <TMP_BV_48_643|48> <TMP_BV_48_637|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 1 (cell size 8)
Access 8 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 0 (size 1 / cell size 8 / offset 0
32 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_652|64> <TMP_BV_64_654|64>)) (== <TMP_BV_48_653|48> <TMP_BV_48_655|48>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_654|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_652|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_652|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_652|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_652|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_652|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_652|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_652|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_652|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_652|64> <TMP_BV_64_654|64>)) (== <TMP_BV_48_653|48> <TMP_BV_48_655|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 2 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_665|64> <TMP_BV_64_669|64>)) (== <TMP_BV_48_666|48> <TMP_BV_48_668|48>)) (== <TMP_BV_64_670|64> <TMP_BV_64_667|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_667|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_665|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_665|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_665|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_665|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_665|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_665|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_665|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_665|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_665|64> <TMP_BV_64_669|64>)) (== <TMP_BV_48_666|48> <TMP_BV_48_668|48>)) (== <TMP_BV_64_670|64> <TMP_BV_64_667|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 1 (cell size 8)
Access 8 cell 1 offset 0 size 1 (cell size 6)
Access 9 cell 0 offset 1 size 1 (cell size 8)
Access 10 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 0 (size 1 / cell size 8 / offset 0
32 -> 1 (size 1 / cell size 6 / offset 0
37 -> 0 (size 1 / cell size 8 / offset 1
39 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_681|64> <TMP_BV_64_683|64>)) (== <TMP_BV_48_682|48> <TMP_BV_48_684|48>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_683|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_683|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_681|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_681|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_681|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_681|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_681|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_681|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_681|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_681|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_681|64> <TMP_BV_64_683|64>)) (== <TMP_BV_48_682|48> <TMP_BV_48_684|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 2 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 6)
Access 10 cell 2 offset 1 size 1 (cell size 8)
Access 11 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 6 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_64_696|64> <TMP_BV_64_700|64>)) (== <TMP_BV_48_697|48> <TMP_BV_48_699|48>)) (== <TMP_BV_64_701|64> <TMP_BV_64_698|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_698|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_698|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_696|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_696|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_696|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_696|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_696|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_696|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_696|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_696|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_64_696|64> <TMP_BV_64_700|64>)) (== <TMP_BV_48_697|48> <TMP_BV_48_699|48>)) (== <TMP_BV_64_701|64> <TMP_BV_64_698|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 3 offset 0 size 4 (cell size 5)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_712|64> <TMP_BV_64_717|64>)) (== <TMP_BV_48_713|48> <TMP_BV_48_718|48>)) (== <TMP_BV_64_719|64> <TMP_BV_64_714|64>)) (== <TMP_BV_40_720|40> <TMP_BV_40_715|40>)) (== <TMP_BV_64_721|64> <TMP_BV_64_716|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_716|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_716|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_716|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_712|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_712|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_712|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_712|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_712|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_712|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_712|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_712|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_712|64> <TMP_BV_64_717|64>)) (== <TMP_BV_48_713|48> <TMP_BV_48_718|48>)) (== <TMP_BV_64_719|64> <TMP_BV_64_714|64>)) (== <TMP_BV_40_720|40> <TMP_BV_40_715|40>)) (== <TMP_BV_64_721|64> <TMP_BV_64_716|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 3 offset 0 size 4 (cell size 6)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 6)
Access 12 cell 4 offset 1 size 1 (cell size 8)
Access 13 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_64_734|64> <TMP_BV_64_739|64>)) (== <TMP_BV_48_735|48> <TMP_BV_48_740|48>)) (== <TMP_BV_64_741|64> <TMP_BV_64_736|64>)) (== <TMP_BV_48_742|48> <TMP_BV_48_737|48>)) (== <TMP_BV_64_743|64> <TMP_BV_64_738|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_738|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_738|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_738|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_738|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_734|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_734|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_734|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_734|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_734|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_734|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_734|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_734|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_64_734|64> <TMP_BV_64_739|64>)) (== <TMP_BV_48_735|48> <TMP_BV_48_740|48>)) (== <TMP_BV_64_741|64> <TMP_BV_64_736|64>)) (== <TMP_BV_48_742|48> <TMP_BV_48_737|48>)) (== <TMP_BV_64_743|64> <TMP_BV_64_738|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 1 1 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 4)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 5 offset 0 size 4 (cell size 5)
Access 11 cell 2 offset 8 size 8 (cell size 16)
Access 12 cell 2 offset 8 size 1 (cell size 16)
Access 13 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_64_755|64> <TMP_BV_64_761|64>)) (== <TMP_BV_48_756|48> <TMP_BV_48_762|48>)) (== <TMP_BV_128_763|128> <TMP_BV_128_757|128>)) (== <TMP_BV_32_764|32> <TMP_BV_32_758|32>)) (== <TMP_BV_64_765|64> <TMP_BV_64_759|64>)) (== <TMP_BV_40_766|40> <TMP_BV_40_760|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_759|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_759|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_757|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_757|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_757|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_755|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_755|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_755|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_755|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_755|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_755|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_755|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_755|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_64_755|64> <TMP_BV_64_761|64>)) (== <TMP_BV_48_756|48> <TMP_BV_48_762|48>)) (== <TMP_BV_128_763|128> <TMP_BV_128_757|128>)) (== <TMP_BV_32_764|32> <TMP_BV_32_758|32>)) (== <TMP_BV_64_765|64> <TMP_BV_64_759|64>)) (== <TMP_BV_40_766|40> <TMP_BV_40_760|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 1 1 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 2 offset 0 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 4)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 5 offset 0 size 4 (cell size 6)
Access 11 cell 2 offset 8 size 8 (cell size 16)
Access 12 cell 2 offset 8 size 1 (cell size 16)
Access 13 cell 5 offset 4 size 1 (cell size 6)
Access 14 cell 2 offset 9 size 1 (cell size 16)
Access 15 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_64_780|64> <TMP_BV_64_786|64>)) (== <TMP_BV_48_781|48> <TMP_BV_48_787|48>)) (== <TMP_BV_128_788|128> <TMP_BV_128_782|128>)) (== <TMP_BV_32_789|32> <TMP_BV_32_783|32>)) (== <TMP_BV_64_790|64> <TMP_BV_64_784|64>)) (== <TMP_BV_48_791|48> <TMP_BV_48_785|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_784|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_784|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_782|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_782|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_782|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_782|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_780|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_780|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_780|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_780|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_780|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_64_780|64> <TMP_BV_64_786|64>)) (== <TMP_BV_48_781|48> <TMP_BV_48_787|48>)) (== <TMP_BV_128_788|128> <TMP_BV_128_782|128>)) (== <TMP_BV_32_789|32> <TMP_BV_32_783|32>)) (== <TMP_BV_64_790|64> <TMP_BV_64_784|64>)) (== <TMP_BV_48_791|48> <TMP_BV_48_785|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 1 (cell size 12)
Access 8 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 0 (size 1 / cell size 12 / offset 0
32 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_799|96> <TMP_BV_96_801|96>)) (== <TMP_BV_72_800|72> <TMP_BV_72_802|72>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_96_801|96>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_799|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_799|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_799|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_799|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_799|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_799|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_799|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_799|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_799|96> <TMP_BV_96_801|96>)) (== <TMP_BV_72_800|72> <TMP_BV_72_802|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           1 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 
3  |         0 0 1 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 2 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_811|96> <TMP_BV_96_815|96>)) (== <TMP_BV_72_812|72> <TMP_BV_72_814|72>)) (== <TMP_BV_64_816|64> <TMP_BV_64_813|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_813|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_811|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_811|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_811|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_811|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_811|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_811|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_811|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_811|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_811|96> <TMP_BV_96_815|96>)) (== <TMP_BV_72_812|72> <TMP_BV_72_814|72>)) (== <TMP_BV_64_816|64> <TMP_BV_64_813|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 1 (cell size 12)
Access 8 cell 1 offset 0 size 1 (cell size 9)
Access 9 cell 0 offset 1 size 1 (cell size 12)
Access 10 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 0 (size 1 / cell size 12 / offset 0
32 -> 1 (size 1 / cell size 9 / offset 0
37 -> 0 (size 1 / cell size 12 / offset 1
39 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_826|96> <TMP_BV_96_828|96>)) (== <TMP_BV_72_827|72> <TMP_BV_72_829|72>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_96_828|96>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_96_828|96>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_826|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_826|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_826|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_826|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_826|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_826|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_826|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_826|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_826|96> <TMP_BV_96_828|96>)) (== <TMP_BV_72_827|72> <TMP_BV_72_829|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 2 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 9)
Access 10 cell 2 offset 1 size 1 (cell size 8)
Access 11 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 9 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_840|96> <TMP_BV_96_844|96>)) (== <TMP_BV_72_841|72> <TMP_BV_72_843|72>)) (== <TMP_BV_64_845|64> <TMP_BV_64_842|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_842|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_842|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_840|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_840|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_840|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_840|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_840|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_840|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_840|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_840|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_840|96> <TMP_BV_96_844|96>)) (== <TMP_BV_72_841|72> <TMP_BV_72_843|72>)) (== <TMP_BV_64_845|64> <TMP_BV_64_842|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 3 offset 0 size 4 (cell size 5)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_855|96> <TMP_BV_96_860|96>)) (== <TMP_BV_72_856|72> <TMP_BV_72_861|72>)) (== <TMP_BV_64_862|64> <TMP_BV_64_857|64>)) (== <TMP_BV_40_863|40> <TMP_BV_40_858|40>)) (== <TMP_BV_64_864|64> <TMP_BV_64_859|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_859|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_859|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_859|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_855|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_855|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_855|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_855|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_855|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_855|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_855|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_855|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_855|96> <TMP_BV_96_860|96>)) (== <TMP_BV_72_856|72> <TMP_BV_72_861|72>)) (== <TMP_BV_64_862|64> <TMP_BV_64_857|64>)) (== <TMP_BV_40_863|40> <TMP_BV_40_858|40>)) (== <TMP_BV_64_864|64> <TMP_BV_64_859|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 8)
Access 8 cell 3 offset 0 size 4 (cell size 6)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 6)
Access 12 cell 4 offset 1 size 1 (cell size 8)
Access 13 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_876|96> <TMP_BV_96_881|96>)) (== <TMP_BV_72_877|72> <TMP_BV_72_882|72>)) (== <TMP_BV_64_883|64> <TMP_BV_64_878|64>)) (== <TMP_BV_48_884|48> <TMP_BV_48_879|48>)) (== <TMP_BV_64_885|64> <TMP_BV_64_880|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_880|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_880|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_880|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_880|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_876|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_876|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_876|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_876|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_876|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_876|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_876|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_876|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_876|96> <TMP_BV_96_881|96>)) (== <TMP_BV_72_877|72> <TMP_BV_72_882|72>)) (== <TMP_BV_64_883|64> <TMP_BV_64_878|64>)) (== <TMP_BV_48_884|48> <TMP_BV_48_879|48>)) (== <TMP_BV_64_885|64> <TMP_BV_64_880|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 1 1 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 4)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 5 offset 0 size 4 (cell size 5)
Access 11 cell 2 offset 8 size 8 (cell size 16)
Access 12 cell 2 offset 8 size 1 (cell size 16)
Access 13 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_96_896|96> <TMP_BV_96_902|96>)) (== <TMP_BV_72_897|72> <TMP_BV_72_903|72>)) (== <TMP_BV_128_904|128> <TMP_BV_128_898|128>)) (== <TMP_BV_32_905|32> <TMP_BV_32_899|32>)) (== <TMP_BV_64_906|64> <TMP_BV_64_900|64>)) (== <TMP_BV_40_907|40> <TMP_BV_40_901|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_900|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_900|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_898|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_898|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_898|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_96_896|96> <TMP_BV_96_902|96>)) (== <TMP_BV_72_897|72> <TMP_BV_72_903|72>)) (== <TMP_BV_128_904|128> <TMP_BV_128_898|128>)) (== <TMP_BV_32_905|32> <TMP_BV_32_899|32>)) (== <TMP_BV_64_906|64> <TMP_BV_64_900|64>)) (== <TMP_BV_40_907|40> <TMP_BV_40_901|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 1 1 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 2 offset 0 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 4)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 5 offset 0 size 4 (cell size 6)
Access 11 cell 2 offset 8 size 8 (cell size 16)
Access 12 cell 2 offset 8 size 1 (cell size 16)
Access 13 cell 5 offset 4 size 1 (cell size 6)
Access 14 cell 2 offset 9 size 1 (cell size 16)
Access 15 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_96_920|96> <TMP_BV_96_926|96>)) (== <TMP_BV_72_921|72> <TMP_BV_72_927|72>)) (== <TMP_BV_128_928|128> <TMP_BV_128_922|128>)) (== <TMP_BV_32_929|32> <TMP_BV_32_923|32>)) (== <TMP_BV_64_930|64> <TMP_BV_64_924|64>)) (== <TMP_BV_48_931|48> <TMP_BV_48_925|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_924|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_924|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_922|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_922|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_922|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_922|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_920|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_920|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_920|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_920|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_920|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_920|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_920|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_920|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_96_920|96> <TMP_BV_96_926|96>)) (== <TMP_BV_72_921|72> <TMP_BV_72_927|72>)) (== <TMP_BV_128_928|128> <TMP_BV_128_922|128>)) (== <TMP_BV_32_929|32> <TMP_BV_32_923|32>)) (== <TMP_BV_64_930|64> <TMP_BV_64_924|64>)) (== <TMP_BV_48_931|48> <TMP_BV_48_925|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 1 (cell size 12)
Access 10 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 0 (size 1 / cell size 12 / offset 0
32 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_941|96> <TMP_BV_96_943|96>)) (== <TMP_BV_80_942|80> <TMP_BV_80_944|80>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_96_943|96>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_941|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_941|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_941|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_941|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_941|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_941|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_941|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_941|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_941|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_941|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_941|96> <TMP_BV_96_943|96>)) (== <TMP_BV_80_942|80> <TMP_BV_80_944|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 8)
Access 10 cell 2 offset 0 size 1 (cell size 8)
Access 11 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_955|96> <TMP_BV_96_959|96>)) (== <TMP_BV_80_956|80> <TMP_BV_80_958|80>)) (== <TMP_BV_64_960|64> <TMP_BV_64_957|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_957|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_955|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_955|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_955|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_955|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_955|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_955|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_955|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_955|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_955|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_955|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_955|96> <TMP_BV_96_959|96>)) (== <TMP_BV_80_956|80> <TMP_BV_80_958|80>)) (== <TMP_BV_64_960|64> <TMP_BV_64_957|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 1 (cell size 12)
Access 10 cell 1 offset 0 size 1 (cell size 10)
Access 11 cell 0 offset 1 size 1 (cell size 12)
Access 12 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 0 (size 1 / cell size 12 / offset 0
32 -> 1 (size 1 / cell size 10 / offset 0
37 -> 0 (size 1 / cell size 12 / offset 1
39 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_972|96> <TMP_BV_96_974|96>)) (== <TMP_BV_80_973|80> <TMP_BV_80_975|80>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_96_974|96>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_96_974|96>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_972|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_972|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_972|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_972|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_972|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_972|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_972|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_972|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_972|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_972|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_972|96> <TMP_BV_96_974|96>)) (== <TMP_BV_80_973|80> <TMP_BV_80_975|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 8)
Access 10 cell 2 offset 0 size 1 (cell size 8)
Access 11 cell 1 offset 0 size 1 (cell size 10)
Access 12 cell 2 offset 1 size 1 (cell size 8)
Access 13 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 2 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 10 / offset 0
47 -> 2 (size 1 / cell size 8 / offset 1
49 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_988|96> <TMP_BV_96_992|96>)) (== <TMP_BV_80_989|80> <TMP_BV_80_991|80>)) (== <TMP_BV_64_993|64> <TMP_BV_64_990|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== -(sign-extend-64 <TMP_BV_64_990|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_990|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_988|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_988|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_988|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_988|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_988|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_988|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_988|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_988|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_988|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_988|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_988|96> <TMP_BV_96_992|96>)) (== <TMP_BV_80_989|80> <TMP_BV_80_991|80>)) (== <TMP_BV_64_993|64> <TMP_BV_64_990|64>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 8)
Access 10 cell 3 offset 0 size 4 (cell size 5)
Access 11 cell 4 offset 0 size 8 (cell size 8)
Access 12 cell 4 offset 0 size 1 (cell size 8)
Access 13 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 5 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_1005|96> <TMP_BV_96_1010|96>)) (== <TMP_BV_80_1006|80> <TMP_BV_80_1011|80>)) (== <TMP_BV_64_1012|64> <TMP_BV_64_1007|64>)) (== <TMP_BV_40_1013|40> <TMP_BV_40_1008|40>)) (== <TMP_BV_64_1014|64> <TMP_BV_64_1009|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_1009|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_1009|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_1009|64>[7:0])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1005|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1005|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1005|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1005|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1005|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1005|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1005|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1005|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1005|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1005|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_1005|96> <TMP_BV_96_1010|96>)) (== <TMP_BV_80_1006|80> <TMP_BV_80_1011|80>)) (== <TMP_BV_64_1012|64> <TMP_BV_64_1007|64>)) (== <TMP_BV_40_1013|40> <TMP_BV_40_1008|40>)) (== <TMP_BV_64_1014|64> <TMP_BV_64_1009|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 8)
Access 10 cell 3 offset 0 size 4 (cell size 6)
Access 11 cell 4 offset 0 size 8 (cell size 8)
Access 12 cell 4 offset 0 size 1 (cell size 8)
Access 13 cell 3 offset 4 size 1 (cell size 6)
Access 14 cell 4 offset 1 size 1 (cell size 8)
Access 15 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 8 / offset 0
40 -> 3 (size 4 / cell size 6 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
71 -> 4 (size 1 / cell size 8 / offset 0
73 -> 3 (size 1 / cell size 6 / offset 4
78 -> 4 (size 1 / cell size 8 / offset 1
80 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_1028|96> <TMP_BV_96_1033|96>)) (== <TMP_BV_80_1029|80> <TMP_BV_80_1034|80>)) (== <TMP_BV_64_1035|64> <TMP_BV_64_1030|64>)) (== <TMP_BV_48_1036|48> <TMP_BV_48_1031|48>)) (== <TMP_BV_64_1037|64> <TMP_BV_64_1032|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_1032|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_1032|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_64_1032|64>[7:0])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_64_1032|64>[15:8])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1028|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1028|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1028|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1028|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1028|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1028|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1028|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1028|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1028|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1028|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_1028|96> <TMP_BV_96_1033|96>)) (== <TMP_BV_80_1029|80> <TMP_BV_80_1034|80>)) (== <TMP_BV_64_1035|64> <TMP_BV_64_1030|64>)) (== <TMP_BV_48_1036|48> <TMP_BV_48_1031|48>)) (== <TMP_BV_64_1037|64> <TMP_BV_64_1032|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x8|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 3 4 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             1 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 1 1 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 1 
13 |                             0 0 
14 |                               0 
15 |                                 

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 4)
Access 11 cell 4 offset 0 size 8 (cell size 8)
Access 12 cell 5 offset 0 size 4 (cell size 5)
Access 13 cell 2 offset 8 size 8 (cell size 16)
Access 14 cell 2 offset 8 size 1 (cell size 16)
Access 15 cell 5 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 5 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_96_1050|96> <TMP_BV_96_1056|96>)) (== <TMP_BV_80_1051|80> <TMP_BV_80_1057|80>)) (== <TMP_BV_128_1058|128> <TMP_BV_128_1052|128>)) (== <TMP_BV_32_1059|32> <TMP_BV_32_1053|32>)) (== <TMP_BV_64_1060|64> <TMP_BV_64_1054|64>)) (== <TMP_BV_40_1061|40> <TMP_BV_40_1055|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_1054|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_1054|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_1052|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_1052|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_1052|128>[71:64])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1050|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1050|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1050|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1050|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1050|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1050|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1050|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1050|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1050|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1050|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_96_1050|96> <TMP_BV_96_1056|96>)) (== <TMP_BV_80_1051|80> <TMP_BV_80_1057|80>)) (== <TMP_BV_128_1058|128> <TMP_BV_128_1052|128>)) (== <TMP_BV_32_1059|32> <TMP_BV_32_1053|32>)) (== <TMP_BV_64_1060|64> <TMP_BV_64_1054|64>)) (== <TMP_BV_40_1061|40> <TMP_BV_40_1055|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 3 4 5 5 6
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
movl %edi, %eax
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
movq %rdi, %rcx
andl $0x3, %esi
nop 
nop 
nop 
nop 
nop 
nop 
salb %cl, %dl
movl %edx, %esi
movq (%r15,%rsi,1), %r8
nop 
nop 
notl %esi
nop 
andb %r15b, %sil
salb $0x80, %dil
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
subl %ebp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movq %r8, %r9
notl %r9d
leaq -0x1010101(%r8), %rsi
addl $0x4, %ecx
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
.L_126860:
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
negl %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 18
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 0 0 0 
13 |                             1 0 0 0 
14 |                               0 0 0 
15 |                                 0 0 
16 |                                   0 
17 |                                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 0 0 1 1 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 1 0 0 
13 |                             0 0 0 0 
14 |                               0 1 0 
15 |                                 0 1 
16 |                                   0 
17 |                                     

TOTAL CELLS: 6
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 2 offset 0 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 4)
Access 11 cell 4 offset 0 size 8 (cell size 8)
Access 12 cell 5 offset 0 size 4 (cell size 6)
Access 13 cell 2 offset 8 size 8 (cell size 16)
Access 14 cell 2 offset 8 size 1 (cell size 16)
Access 15 cell 5 offset 4 size 1 (cell size 6)
Access 16 cell 2 offset 9 size 1 (cell size 16)
Access 17 cell 5 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
30 -> 2 (size 8 / cell size 16 / offset 0
40 -> 3 (size 4 / cell size 4 / offset 0
42 -> 4 (size 8 / cell size 8 / offset 0
52 -> 5 (size 4 / cell size 6 / offset 0
54 -> 2 (size 8 / cell size 16 / offset 8
83 -> 2 (size 1 / cell size 16 / offset 8
85 -> 5 (size 1 / cell size 6 / offset 4
90 -> 2 (size 1 / cell size 16 / offset 9
92 -> 5 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and (and TRUE (== <TMP_BV_96_1076|96> <TMP_BV_96_1082|96>)) (== <TMP_BV_80_1077|80> <TMP_BV_80_1083|80>)) (== <TMP_BV_128_1084|128> <TMP_BV_128_1078|128>)) (== <TMP_BV_32_1085|32> <TMP_BV_32_1079|32>)) (== <TMP_BV_64_1086|64> <TMP_BV_64_1080|64>)) (== <TMP_BV_48_1087|48> <TMP_BV_48_1081|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])) (plus <CELL_2_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> <%rdi_2_INIT|64>[7:0]) (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>)))[7:0] <0x0|8>)) (and (not (not (== (concat <0x0|1> (and <0x80|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (and (concat <0x0|32> !(concat <0x0|32> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0])[31:0])[7:0] <%r15_2_INIT|64>[7:0]) <0x0|8>)))))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_64_1080|64>[31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_1080|64>)[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !<TMP_BV_128_1078|128>[127:64][31:0])[31:0] (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_1078|128>[127:64])[63:0][31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x4|64>))
(not (== -(sign-extend-64 <TMP_BV_128_1078|128>[71:64])[31:0] <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x1|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[63:8] (<< (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[7:0]) (concat <0x0|1> (and <%rdi_2_INIT|64>[7:0][7:0] <0x1f|8>)))[7:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (plus (plus (concat <0x0|1> !<%rbp_2_INIT|64>[31:0]) <0x1|33>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_5_ADDR|64> <0x5|64>))
(not (not (== -(sign-extend-64 <TMP_BV_128_1078|128>[79:72])[31:0] <0x0|32>)))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1076|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1076|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1076|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1076|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_1076|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_1076|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1076|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1076|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1076|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_1076|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and (and TRUE (== <TMP_BV_96_1076|96> <TMP_BV_96_1082|96>)) (== <TMP_BV_80_1077|80> <TMP_BV_80_1083|80>)) (== <TMP_BV_128_1084|128> <TMP_BV_128_1078|128>)) (== <TMP_BV_32_1085|32> <TMP_BV_32_1079|32>)) (== <TMP_BV_64_1086|64> <TMP_BV_64_1080|64>)) (== <TMP_BV_48_1087|48> <TMP_BV_48_1081|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x10|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (or (<= (plus <CELL_3_ADDR|64> <0x4|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_5_ADDR|64>) (<= (plus <CELL_5_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>))) (<= <CELL_5_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_5_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
################################################################################

Final update:

Total search iterations:       500000
Number of attempted searches:  1
Total search time:             452.21s
Total time:                    520.468s

Statistics of last search

Iterations:                    500000
Elapsed Time:                  452.206s
Iterations/s:                  1105.69

Starting cost:                 167
Lowest cost:                   119
Lowest correct cost:           123

Move Type       Proposed     Succeeded     Accepted     
                                                        
Delete          8.296%       7.1272%       3.6278%      
OpcodeWidth     8.3198%      6.4712%       5.755%       
Add Nops        8.3166%      8.3166%       3.4426%      
Instruction     8.3318%      3.5168%       0.186%       
ReplaceNop      8.251%       7.0916%       5.5004%      
Rotate          8.3598%      6.367%        2.6944%      
Global Swap     8.3584%      5.8152%       3.7174%      
Global Copy     8.3962%      7.057%        7.057%       
Operand         8.3224%      4.9908%       0.8684%      
Local Swap      8.3148%      5.6246%       4.029%       
Opcode          8.386%       7.3314%       6.165%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.3472%      4.5884%       0.0008%      
                                                        
Total           100%         74.2978%      43.0438%     

Lowest Cost Discovered (119)                                                     
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  movl %edi, %ecx                 #  2     0x1   2      OPC=movl_r32_r32         
  movq %rsi, %rdx                 #  3     0x3   3      OPC=movq_r64_r64_1       
  nop                             #  4     0x6   1      OPC=nop                  
  nop                             #  5     0x7   1      OPC=nop                  
  nop                             #  6     0x8   1      OPC=nop                  
  nop                             #  7     0x9   1      OPC=nop                  
  nop                             #  8     0xa   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                  
  andq $0x3, %rsi                 #  10    0xc   7      OPC=andq_r64_imm32       
  movl %ecx, %eax                 #  11    0x13  2      OPC=movl_r32_r32         
  jne .L_126860                   #  12    0x15  6      OPC=jne_label_1          
  nop                             #  13    0x1b  1      OPC=nop                  
  nop                             #  14    0x1c  1      OPC=nop                  
  nop                             #  15    0x1d  1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                  
  nop                             #  17    0x1f  1      OPC=nop                  
  nop                             #  18    0x20  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                  
  nop                             #  20    0x22  1      OPC=nop                  
  nop                             #  21    0x23  1      OPC=nop                  
  nop                             #  22    0x24  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                  
  nop                             #  24    0x26  1      OPC=nop                  
  nop                             #  25    0x27  1      OPC=nop                  
  nop                             #  26    0x28  1      OPC=nop                  
  movq %rdx, %rsi                 #  27    0x29  3      OPC=movq_r64_r64         
  movq (%r15,%rsi,1), %r8         #  28    0x2c  4      OPC=movq_r64_m64         
  notl %esi                       #  29    0x30  2      OPC=notl_r32             
  sarq %cl, %rdx                  #  30    0x32  3      OPC=sarq_r64_cl          
  andb %r15b, %sil                #  31    0x35  3      OPC=andb_r8_r8           
  nop                             #  32    0x38  1      OPC=nop                  
  nop                             #  33    0x39  1      OPC=nop                  
  jne .L_126860                   #  34    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  35    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)    #  36    0x43  5      OPC=movl_m32_r32         
  subl $0xfc, %edx                #  37    0x48  3      OPC=subl_r32_imm8        
  movl (%r15,%rdx,1), %r8d        #  38    0x4b  4      OPC=movl_r32_m32         
  movl %r8d, %r9d                 #  39    0x4f  3      OPC=movl_r32_r32_1       
  leal -0x1010101(%r8), %esi      #  40    0x52  7      OPC=leal_r32_m32         
  andq $0x80808080, %rsi          #  41    0x59  7      OPC=andq_r64_imm32       
  notq %r9                        #  42    0x60  3      OPC=notq_r64             
  andl %esi, %r9d                 #  43    0x63  3      OPC=andl_r32_r32         
  je .L_126820                    #  44    0x66  6      OPC=je_label_1           
  nop                             #  45    0x6c  1      OPC=nop                  
  nop                             #  46    0x6d  1      OPC=nop                  
  nop                             #  47    0x6e  1      OPC=nop                  
  nop                             #  48    0x6f  1      OPC=nop                  
  nop                             #  49    0x70  1      OPC=nop                  
  nop                             #  50    0x71  1      OPC=nop                  
  nop                             #  51    0x72  1      OPC=nop                  
  nop                             #  52    0x73  1      OPC=nop                  
  nop                             #  53    0x74  1      OPC=nop                  
  nop                             #  54    0x75  1      OPC=nop                  
  nop                             #  55    0x76  1      OPC=nop                  
  nop                             #  56    0x77  1      OPC=nop                  
  nop                             #  57    0x78  1      OPC=nop                  
  nop                             #  58    0x79  1      OPC=nop                  
  nop                             #  59    0x7a  1      OPC=nop                  
  nop                             #  60    0x7b  1      OPC=nop                  
  nop                             #  61    0x7c  1      OPC=nop                  
  nop                             #  62    0x7d  1      OPC=nop                  
  nop                             #  63    0x7e  1      OPC=nop                  
  nop                             #  64    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  addl $0x1, %edx                 #  65    0x80  3      OPC=addl_r32_imm8        
  movzbq -0x1(%r15,%rdx,1), %rsi  #  66    0x83  6      OPC=movzbq_r64_m8        
  incl %ecx                       #  67    0x89  2      OPC=incl_r32             
  movb %sil, -0x1(%r15,%rcx,1)    #  68    0x8b  5      OPC=movb_m8_r8           
  negb %sil                       #  69    0x90  3      OPC=negb_r8              
  jne .L_126860                   #  70    0x93  6      OPC=jne_label_1          
  nop                             #  71    0x99  1      OPC=nop                  
  nop                             #  72    0x9a  1      OPC=nop                  
  nop                             #  73    0x9b  1      OPC=nop                  
  nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa0  1      OPC=nop                  
  popq %r11                       #  79    0xa1  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  80    0xa3  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  81    0xa7  3      OPC=addq_r64_r64         
  jmpq %r11                       #  82    0xaa  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
Lowest Known Correct Cost (123)                                                  
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                  
  movl %edi, %eax                 #  5     0x4   2      OPC=movl_r32_r32_1       
  nop                             #  6     0x6   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                  
  nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0x9   1      OPC=nop                  
  nop                             #  10    0xa   1      OPC=nop                  
  nop                             #  11    0xb   1      OPC=nop                  
  nop                             #  12    0xc   1      OPC=nop                  
  nop                             #  13    0xd   1      OPC=nop                  
  nop                             #  14    0xe   1      OPC=nop                  
  nop                             #  15    0xf   1      OPC=nop                  
  nop                             #  16    0x10  1      OPC=nop                  
  nop                             #  17    0x11  1      OPC=nop                  
  nop                             #  18    0x12  1      OPC=nop                  
  movl %esi, %edx                 #  19    0x13  2      OPC=movl_r32_r32         
  movq %rdi, %rcx                 #  20    0x15  3      OPC=movq_r64_r64         
  andl $0x3, %esi                 #  21    0x18  3      OPC=andl_r32_imm8        
  nop                             #  22    0x1b  1      OPC=nop                  
  nop                             #  23    0x1c  1      OPC=nop                  
  nop                             #  24    0x1d  1      OPC=nop                  
  nop                             #  25    0x1e  1      OPC=nop                  
  nop                             #  26    0x1f  1      OPC=nop                  
  jne .L_126860                   #  27    0x20  6      OPC=jne_label_1          
  salb %cl, %dl                   #  28    0x26  2      OPC=salb_r8_cl           
  movl %edx, %esi                 #  29    0x28  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  30    0x2a  4      OPC=movq_r64_m64         
  nop                             #  31    0x2e  1      OPC=nop                  
  nop                             #  32    0x2f  1      OPC=nop                  
  notl %esi                       #  33    0x30  2      OPC=notl_r32             
  nop                             #  34    0x32  1      OPC=nop                  
  andb %r15b, %sil                #  35    0x33  3      OPC=andb_r8_r8           
  salb $0x80, %dil                #  36    0x36  4      OPC=salb_r8_imm8         
  jne .L_126860                   #  37    0x3a  6      OPC=jne_label_1          
.L_126820:                        #        0x40  0      OPC=<label>              
  subl %ebp, %ecx                 #  38    0x40  2      OPC=subl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)        #  39    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  40    0x46  3      OPC=addl_r32_imm8        
  movq (%r15,%rdx,1), %r8         #  41    0x49  4      OPC=movq_r64_m64         
  movq %r8, %r9                   #  42    0x4d  3      OPC=movq_r64_r64         
  notl %r9d                       #  43    0x50  3      OPC=notl_r32             
  leaq -0x1010101(%r8), %rsi      #  44    0x53  7      OPC=leaq_r64_m16         
  addl $0x4, %ecx                 #  45    0x5a  3      OPC=addl_r32_imm8        
  andl %esi, %r9d                 #  46    0x5d  3      OPC=andl_r32_r32_1       
  andl $0x80808080, %r9d          #  47    0x60  7      OPC=andl_r32_imm32       
  je .L_126820                    #  48    0x67  6      OPC=je_label_1           
  nop                             #  49    0x6d  1      OPC=nop                  
  nop                             #  50    0x6e  1      OPC=nop                  
  nop                             #  51    0x6f  1      OPC=nop                  
  nop                             #  52    0x70  1      OPC=nop                  
  nop                             #  53    0x71  1      OPC=nop                  
  nop                             #  54    0x72  1      OPC=nop                  
  nop                             #  55    0x73  1      OPC=nop                  
  nop                             #  56    0x74  1      OPC=nop                  
  nop                             #  57    0x75  1      OPC=nop                  
  nop                             #  58    0x76  1      OPC=nop                  
  nop                             #  59    0x77  1      OPC=nop                  
  nop                             #  60    0x78  1      OPC=nop                  
  nop                             #  61    0x79  1      OPC=nop                  
  nop                             #  62    0x7a  1      OPC=nop                  
  nop                             #  63    0x7b  1      OPC=nop                  
  nop                             #  64    0x7c  1      OPC=nop                  
  nop                             #  65    0x7d  1      OPC=nop                  
  nop                             #  66    0x7e  1      OPC=nop                  
  nop                             #  67    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  addl $0x1, %edx                 #  68    0x80  6      OPC=addl_r32_imm32       
  movsbq -0x1(%r15,%rdx,1), %rsi  #  69    0x86  6      OPC=movsbq_r64_m8        
  addl $0x1, %ecx                 #  70    0x8c  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  71    0x8f  5      OPC=movb_m8_r8           
  negl %esi                       #  72    0x94  2      OPC=negl_r32             
  jne .L_126860                   #  73    0x96  6      OPC=jne_label_1          
  nop                             #  74    0x9c  1      OPC=nop                  
  nop                             #  75    0x9d  1      OPC=nop                  
  nop                             #  76    0x9e  1      OPC=nop                  
  nop                             #  77    0x9f  1      OPC=nop                  
  nop                             #  78    0xa0  1      OPC=nop                  
  nop                             #  79    0xa1  1      OPC=nop                  
  nop                             #  80    0xa2  1      OPC=nop                  
  nop                             #  81    0xa3  1      OPC=nop                  
  nop                             #  82    0xa4  1      OPC=nop                  
  popq %r11                       #  83    0xa5  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  84    0xa7  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  85    0xab  3      OPC=addq_r64_r64         
  jmpq %r11                       #  86    0xae  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
                                                                                 

################################################################################

Search terminated successfully with a verified rewrite!

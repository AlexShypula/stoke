Training TCs: 14
flags for addb_al_imm8: { }
flags for addw_ax_imm16: { }
flags for addl_eax_imm32: { }
flags for addw_m16_imm16: { }
flags for addw_m16_imm8: { }
flags for addw_m16_r16: { }
flags for addl_m32_imm32: { }
flags for addl_m32_imm8: { }
flags for addl_m32_r32: { }
flags for addq_m64_imm32: { }
flags for addq_m64_imm8: { }
flags for addq_m64_r64: { }
flags for addb_m8_imm8: { }
flags for addb_m8_r8: { }
flags for addb_m8_rh: { }
flags for addw_r16_imm16: { }
flags for addw_r16_imm8: { }
flags for addw_r16_m16: { }
flags for addw_r16_r16: { }
flags for addw_r16_r16_1: { }
flags for addl_r32_imm32: { }
flags for addl_r32_imm8: { }
flags for addl_r32_m32: { }
flags for addl_r32_r32: { }
flags for addl_r32_r32_1: { }
flags for addq_r64_imm32: { }
flags for addq_r64_imm8: { }
flags for addq_r64_m64: { }
flags for addq_r64_r64: { }
flags for addq_r64_r64_1: { }
flags for addb_r8_imm8: { }
flags for addb_r8_m8: { }
flags for addb_r8_r8: { }
flags for addb_r8_r8_1: { }
flags for addb_r8_rh: { }
flags for addb_r8_rh_1: { }
flags for addq_rax_imm32: { }
flags for addb_rh_imm8: { }
flags for addb_rh_m8: { }
flags for addb_rh_r8: { }
flags for addb_rh_r8_1: { }
flags for addb_rh_rh: { }
flags for addb_rh_rh_1: { }
flags for addpd_xmm_m128: { sse2 }
flags for addpd_xmm_xmm: { sse2 }
flags for addps_xmm_m128: { sse }
flags for addps_xmm_xmm: { sse }
flags for addsd_xmm_m64: { sse2 }
flags for addsd_xmm_xmm: { sse2 }
flags for addss_xmm_m32: { sse }
flags for addss_xmm_xmm: { sse }
flags for addsubpd_xmm_m128: { pni }
flags for addsubpd_xmm_xmm: { pni }
flags for addsubps_xmm_m128: { pni }
flags for addsubps_xmm_xmm: { pni }
flags for aesdec_xmm_m128: { aes }
flags for aesdec_xmm_xmm: { aes }
flags for aesdeclast_xmm_m128: { aes }
flags for aesdeclast_xmm_xmm: { aes }
flags for aesenc_xmm_m128: { aes }
flags for aesenc_xmm_xmm: { aes }
flags for aesenclast_xmm_m128: { aes }
flags for aesenclast_xmm_xmm: { aes }
flags for aesimc_xmm_m128: { aes }
flags for aesimc_xmm_xmm: { aes }
flags for aeskeygenassist_xmm_m128_imm8: { aes }
flags for aeskeygenassist_xmm_xmm_imm8: { aes }
flags for andb_al_imm8: { }
flags for andw_ax_imm16: { }
flags for andl_eax_imm32: { }
flags for andw_m16_imm16: { }
flags for andw_m16_imm8: { }
flags for andw_m16_r16: { }
flags for andl_m32_imm32: { }
flags for andl_m32_imm8: { }
flags for andl_m32_r32: { }
flags for andq_m64_imm32: { }
flags for andq_m64_imm8: { }
flags for andq_m64_r64: { }
flags for andb_m8_imm8: { }
flags for andb_m8_r8: { }
flags for andb_m8_rh: { }
flags for andw_r16_imm16: { }
flags for andw_r16_imm8: { }
flags for andw_r16_m16: { }
flags for andw_r16_r16: { }
flags for andw_r16_r16_1: { }
flags for andl_r32_imm32: { }
flags for andl_r32_imm8: { }
flags for andl_r32_m32: { }
flags for andl_r32_r32: { }
flags for andl_r32_r32_1: { }
flags for andq_r64_imm32: { }
flags for andq_r64_imm8: { }
flags for andq_r64_m64: { }
flags for andq_r64_r64: { }
flags for andq_r64_r64_1: { }
flags for andb_r8_imm8: { }
flags for andb_r8_m8: { }
flags for andb_r8_r8: { }
flags for andb_r8_r8_1: { }
flags for andb_r8_rh: { }
flags for andb_r8_rh_1: { }
flags for andq_rax_imm32: { }
flags for andb_rh_imm8: { }
flags for andb_rh_m8: { }
flags for andb_rh_r8: { }
flags for andb_rh_r8_1: { }
flags for andb_rh_rh: { }
flags for andb_rh_rh_1: { }
flags for andnl_r32_r32_m32: { bmi1 }
flags for andnl_r32_r32_r32: { bmi1 }
flags for andnq_r64_r64_m64: { bmi1 }
flags for andnq_r64_r64_r64: { bmi1 }
flags for andnpd_xmm_m128: { sse2 }
flags for andnpd_xmm_xmm: { sse2 }
flags for andnps_xmm_m128: { sse }
flags for andnps_xmm_xmm: { sse }
flags for andpd_xmm_m128: { sse2 }
flags for andpd_xmm_xmm: { sse2 }
flags for andps_xmm_m128: { sse }
flags for andps_xmm_xmm: { sse }
flags for bextrl_r32_m32_r32: { bmi1 }
flags for bextrl_r32_r32_r32: { bmi1 }
flags for bextrq_r64_m64_r64: { bmi1 }
flags for bextrq_r64_r64_r64: { bmi1 }
flags for blendpd_xmm_m128_imm8: { sse4_1 }
flags for blendpd_xmm_xmm_imm8: { sse4_1 }
flags for blendps_xmm_m128_imm8: { sse4_1 }
flags for blendps_xmm_xmm_imm8: { sse4_1 }
flags for blendvpd_xmm_m128_xmm0: { sse4_1 }
flags for blendvpd_xmm_xmm_xmm0: { sse4_1 }
flags for blendvps_xmm_m128_xmm0: { sse4_1 }
flags for blendvps_xmm_xmm_xmm0: { sse4_1 }
flags for blsil_r32_m32: { bmi1 }
flags for blsil_r32_r32: { bmi1 }
flags for blsiq_r64_m64: { bmi1 }
flags for blsiq_r64_r64: { bmi1 }
flags for blsmskl_r32_m32: { bmi1 }
flags for blsmskl_r32_r32: { bmi1 }
flags for blsmskq_r64_m64: { bmi1 }
flags for blsmskq_r64_r64: { bmi1 }
flags for blsrl_r32_m32: { bmi1 }
flags for blsrl_r32_r32: { bmi1 }
flags for blsrq_r64_m64: { bmi1 }
flags for blsrq_r64_r64: { bmi1 }
flags for bzhil_r32_m32_r32: { bmi2 }
flags for bzhil_r32_r32_r32: { bmi2 }
flags for bzhiq_r64_m64_r64: { bmi2 }
flags for bzhiq_r64_r64_r64: { bmi2 }
flags for cli: { }
flags for cmovaw_r16_m16: { cmov }
flags for cmovaw_r16_r16: { cmov }
flags for cmoval_r32_m32: { cmov }
flags for cmoval_r32_r32: { cmov }
flags for cmovaq_r64_m64: { cmov }
flags for cmovaq_r64_r64: { cmov }
flags for cmovaew_r16_m16: { cmov }
flags for cmovaew_r16_r16: { cmov }
flags for cmovael_r32_m32: { cmov }
flags for cmovael_r32_r32: { cmov }
flags for cmovaeq_r64_m64: { cmov }
flags for cmovaeq_r64_r64: { cmov }
flags for cmovbw_r16_m16: { cmov }
flags for cmovbw_r16_r16: { cmov }
flags for cmovbl_r32_m32: { cmov }
flags for cmovbl_r32_r32: { cmov }
flags for cmovbq_r64_m64: { cmov }
flags for cmovbq_r64_r64: { cmov }
flags for cmovbew_r16_m16: { cmov }
flags for cmovbew_r16_r16: { cmov }
flags for cmovbel_r32_m32: { cmov }
flags for cmovbel_r32_r32: { cmov }
flags for cmovbeq_r64_m64: { cmov }
flags for cmovbeq_r64_r64: { cmov }
flags for cmovcw_r16_m16: { cmov }
flags for cmovcw_r16_r16: { cmov }
flags for cmovcl_r32_m32: { cmov }
flags for cmovcl_r32_r32: { cmov }
flags for cmovcq_r64_m64: { cmov }
flags for cmovcq_r64_r64: { cmov }
flags for cmovew_r16_m16: { cmov }
flags for cmovew_r16_r16: { cmov }
flags for cmovel_r32_m32: { cmov }
flags for cmovel_r32_r32: { cmov }
flags for cmoveq_r64_m64: { cmov }
flags for cmoveq_r64_r64: { cmov }
flags for cmovgw_r16_m16: { cmov }
flags for cmovgw_r16_r16: { cmov }
flags for cmovgl_r32_m32: { cmov }
flags for cmovgl_r32_r32: { cmov }
flags for cmovgq_r64_m64: { cmov }
flags for cmovgq_r64_r64: { cmov }
flags for cmovgew_r16_m16: { cmov }
flags for cmovgew_r16_r16: { cmov }
flags for cmovgel_r32_m32: { cmov }
flags for cmovgel_r32_r32: { cmov }
flags for cmovgeq_r64_m64: { cmov }
flags for cmovgeq_r64_r64: { cmov }
flags for cmovlw_r16_m16: { cmov }
flags for cmovlw_r16_r16: { cmov }
flags for cmovll_r32_m32: { cmov }
flags for cmovll_r32_r32: { cmov }
flags for cmovlq_r64_m64: { cmov }
flags for cmovlq_r64_r64: { cmov }
flags for cmovlew_r16_m16: { cmov }
flags for cmovlew_r16_r16: { cmov }
flags for cmovlel_r32_m32: { cmov }
flags for cmovlel_r32_r32: { cmov }
flags for cmovleq_r64_m64: { cmov }
flags for cmovleq_r64_r64: { cmov }
flags for cmovnaw_r16_m16: { cmov }
flags for cmovnaw_r16_r16: { cmov }
flags for cmovnal_r32_m32: { cmov }
flags for cmovnal_r32_r32: { cmov }
flags for cmovnaq_r64_m64: { cmov }
flags for cmovnaq_r64_r64: { cmov }
flags for cmovnaew_r16_m16: { cmov }
flags for cmovnaew_r16_r16: { cmov }
flags for cmovnael_r32_m32: { cmov }
flags for cmovnael_r32_r32: { cmov }
flags for cmovnaeq_r64_m64: { cmov }
flags for cmovnaeq_r64_r64: { cmov }
flags for cmovnbw_r16_m16: { cmov }
flags for cmovnbw_r16_r16: { cmov }
flags for cmovnbl_r32_m32: { cmov }
flags for cmovnbl_r32_r32: { cmov }
flags for cmovnbq_r64_m64: { cmov }
flags for cmovnbq_r64_r64: { cmov }
flags for cmovnbew_r16_m16: { cmov }
flags for cmovnbew_r16_r16: { cmov }
flags for cmovnbel_r32_m32: { cmov }
flags for cmovnbel_r32_r32: { cmov }
flags for cmovnbeq_r64_m64: { cmov }
flags for cmovnbeq_r64_r64: { cmov }
flags for cmovncw_r16_m16: { cmov }
flags for cmovncw_r16_r16: { cmov }
flags for cmovncl_r32_m32: { cmov }
flags for cmovncl_r32_r32: { cmov }
flags for cmovncq_r64_m64: { cmov }
flags for cmovncq_r64_r64: { cmov }
flags for cmovnew_r16_m16: { cmov }
flags for cmovnew_r16_r16: { cmov }
flags for cmovnel_r32_m32: { cmov }
flags for cmovnel_r32_r32: { cmov }
flags for cmovneq_r64_m64: { cmov }
flags for cmovneq_r64_r64: { cmov }
flags for cmovngw_r16_m16: { cmov }
flags for cmovngw_r16_r16: { cmov }
flags for cmovngl_r32_m32: { cmov }
flags for cmovngl_r32_r32: { cmov }
flags for cmovngq_r64_m64: { cmov }
flags for cmovngq_r64_r64: { cmov }
flags for cmovngew_r16_m16: { cmov }
flags for cmovngew_r16_r16: { cmov }
flags for cmovngel_r32_m32: { cmov }
flags for cmovngel_r32_r32: { cmov }
flags for cmovngeq_r64_m64: { cmov }
flags for cmovngeq_r64_r64: { cmov }
flags for cmovnlw_r16_m16: { cmov }
flags for cmovnlw_r16_r16: { cmov }
flags for cmovnll_r32_m32: { cmov }
flags for cmovnll_r32_r32: { cmov }
flags for cmovnlq_r64_m64: { cmov }
flags for cmovnlq_r64_r64: { cmov }
flags for cmovnlew_r16_m16: { cmov }
flags for cmovnlew_r16_r16: { cmov }
flags for cmovnlel_r32_m32: { cmov }
flags for cmovnlel_r32_r32: { cmov }
flags for cmovnleq_r64_m64: { cmov }
flags for cmovnleq_r64_r64: { cmov }
flags for cmovnow_r16_m16: { cmov }
flags for cmovnow_r16_r16: { cmov }
flags for cmovnol_r32_m32: { cmov }
flags for cmovnol_r32_r32: { cmov }
flags for cmovnoq_r64_m64: { cmov }
flags for cmovnoq_r64_r64: { cmov }
flags for cmovnpw_r16_m16: { cmov }
flags for cmovnpw_r16_r16: { cmov }
flags for cmovnpl_r32_m32: { cmov }
flags for cmovnpl_r32_r32: { cmov }
flags for cmovnpq_r64_m64: { cmov }
flags for cmovnpq_r64_r64: { cmov }
flags for cmovnsw_r16_m16: { cmov }
flags for cmovnsw_r16_r16: { cmov }
flags for cmovnsl_r32_m32: { cmov }
flags for cmovnsl_r32_r32: { cmov }
flags for cmovnsq_r64_m64: { cmov }
flags for cmovnsq_r64_r64: { cmov }
flags for cmovnzw_r16_m16: { cmov }
flags for cmovnzw_r16_r16: { cmov }
flags for cmovnzl_r32_m32: { cmov }
flags for cmovnzl_r32_r32: { cmov }
flags for cmovnzq_r64_m64: { cmov }
flags for cmovnzq_r64_r64: { cmov }
flags for cmovow_r16_m16: { cmov }
flags for cmovow_r16_r16: { cmov }
flags for cmovol_r32_m32: { cmov }
flags for cmovol_r32_r32: { cmov }
flags for cmovoq_r64_m64: { cmov }
flags for cmovoq_r64_r64: { cmov }
flags for cmovpw_r16_m16: { cmov }
flags for cmovpw_r16_r16: { cmov }
flags for cmovpl_r32_m32: { cmov }
flags for cmovpl_r32_r32: { cmov }
flags for cmovpq_r64_m64: { cmov }
flags for cmovpq_r64_r64: { cmov }
flags for cmovpew_r16_m16: { cmov }
flags for cmovpew_r16_r16: { cmov }
flags for cmovpel_r32_m32: { cmov }
flags for cmovpel_r32_r32: { cmov }
flags for cmovpeq_r64_m64: { cmov }
flags for cmovpeq_r64_r64: { cmov }
flags for cmovpow_r16_m16: { cmov }
flags for cmovpow_r16_r16: { cmov }
flags for cmovpol_r32_m32: { cmov }
flags for cmovpol_r32_r32: { cmov }
flags for cmovpoq_r64_m64: { cmov }
flags for cmovpoq_r64_r64: { cmov }
flags for cmovsw_r16_m16: { cmov }
flags for cmovsw_r16_r16: { cmov }
flags for cmovsl_r32_m32: { cmov }
flags for cmovsl_r32_r32: { cmov }
flags for cmovsq_r64_m64: { cmov }
flags for cmovsq_r64_r64: { cmov }
flags for cmovzw_r16_m16: { cmov }
flags for cmovzw_r16_r16: { cmov }
flags for cmovzl_r32_m32: { cmov }
flags for cmovzl_r32_r32: { cmov }
flags for cmovzq_r64_m64: { cmov }
flags for cmovzq_r64_r64: { cmov }
flags for comisd_xmm_m64: { sse2 }
flags for comisd_xmm_xmm: { sse2 }
flags for comiss_xmm_m32: { sse }
flags for comiss_xmm_xmm: { sse }
flags for cpuid: { }
flags for cvtdq2pd_xmm_m64: { sse2 }
flags for cvtdq2pd_xmm_xmm: { sse2 }
flags for cvtdq2ps_xmm_m128: { sse2 }
flags for cvtdq2ps_xmm_xmm: { sse2 }
flags for cvtpd2dq_xmm_m128: { sse2 }
flags for cvtpd2dq_xmm_xmm: { sse2 }
flags for cvtpd2pi_mm_m128: { }
flags for cvtpd2pi_mm_xmm: { }
flags for cvtpd2ps_xmm_m128: { sse2 }
flags for cvtpd2ps_xmm_xmm: { sse2 }
flags for cvtpi2pd_xmm_m64: { }
flags for cvtpi2pd_xmm_mm: { }
flags for cvtpi2ps_xmm_m64: { }
flags for cvtpi2ps_xmm_mm: { }
flags for cvtps2dq_xmm_m128: { sse2 }
flags for cvtps2dq_xmm_xmm: { sse2 }
flags for cvtps2pd_xmm_m64: { sse2 }
flags for cvtps2pd_xmm_xmm: { sse2 }
flags for cvtps2pi_mm_m64: { }
flags for cvtps2pi_mm_xmm: { }
flags for cvtsd2sil_r32_m64: { sse2 }
flags for cvtsd2sil_r32_xmm: { sse2 }
flags for cvtsd2siq_r64_m64: { sse2 }
flags for cvtsd2siq_r64_xmm: { sse2 }
flags for cvtsd2ss_xmm_m64: { sse2 }
flags for cvtsd2ss_xmm_xmm: { sse2 }
flags for cvtsi2sdl_xmm_m32: { sse2 }
flags for cvtsi2sdq_xmm_m64: { sse2 }
flags for cvtsi2sdl_xmm_r32: { sse2 }
flags for cvtsi2sdq_xmm_r64: { sse2 }
flags for cvtsi2ssl_xmm_m32: { sse }
flags for cvtsi2ssq_xmm_m64: { sse }
flags for cvtsi2ssl_xmm_r32: { sse }
flags for cvtsi2ssq_xmm_r64: { sse }
flags for cvtss2sd_xmm_m32: { sse2 }
flags for cvtss2sd_xmm_xmm: { sse2 }
flags for cvtss2sil_r32_m32: { sse }
flags for cvtss2sil_r32_xmm: { sse }
flags for cvtss2siq_r64_m32: { sse }
flags for cvtss2siq_r64_xmm: { sse }
flags for cvttpd2dq_xmm_m128: { sse2 }
flags for cvttpd2dq_xmm_xmm: { sse2 }
flags for cvttpd2pi_mm_m128: { }
flags for cvttpd2pi_mm_xmm: { }
flags for cvttps2dq_xmm_m128: { sse2 }
flags for cvttps2dq_xmm_xmm: { sse2 }
flags for cvttps2pi_mm_m64: { }
flags for cvttps2pi_mm_xmm: { }
flags for cvttsd2sil_r32_m64: { sse2 }
flags for cvttsd2sil_r32_xmm: { sse2 }
flags for cvttsd2siq_r64_m64: { sse2 }
flags for cvttsd2siq_r64_xmm: { sse2 }
flags for cvttss2sil_r32_m32: { sse }
flags for cvttss2sil_r32_xmm: { sse }
flags for cvttss2siq_r64_m32: { sse }
flags for cvttss2siq_r64_xmm: { sse }
flags for decw_m16: { }
flags for decl_m32: { }
flags for decq_m64: { }
flags for decb_m8: { }
flags for decw_r16: { }
flags for decl_r32: { }
flags for decq_r64: { }
flags for decb_r8: { }
flags for decb_rh: { }
flags for dppd_xmm_m128_imm8: { sse4_1 }
flags for dppd_xmm_xmm_imm8: { sse4_1 }
flags for dpps_xmm_m128_imm8: { sse4_1 }
flags for dpps_xmm_xmm_imm8: { sse4_1 }
flags for extractps_m32_xmm_imm8: { sse4_1 }
flags for extractps_r32_xmm_imm8: { sse4_1 }
flags for extractps_r64_xmm_imm8: { sse4_1 }
flags for f2xm1: { fpu }
flags for fabs: { fpu }
flags for fadds_m32fp: { fpu }
flags for faddl_m64fp: { fpu }
flags for faddp: { fpu }
flags for fbld_m80bcd: { fpu }
flags for fbstp_m80bcd: { fpu }
flags for fchs: { fpu }
flags for fclex: { fpu }
flags for fcom: { fpu }
flags for fcoms_m32fp: { fpu }
flags for fcoml_m64fp: { fpu }
flags for fcomp: { fpu }
flags for fcomps_m32fp: { fpu }
flags for fcompl_m64fp: { fpu }
flags for fcompp: { fpu }
flags for fcos: { fpu }
flags for fdecstp: { fpu }
flags for fdivs_m32fp: { fpu }
flags for fdivl_m64fp: { fpu }
flags for fdivp: { fpu }
flags for fdivrs_m32fp: { fpu }
flags for fdivrl_m64fp: { fpu }
flags for fdivrp: { fpu }
flags for fiadd_m16int: { fpu }
flags for fiaddl_m32int: { fpu }
flags for ficom_m16int: { fpu }
flags for ficoml_m32int: { fpu }
flags for ficomp_m16int: { fpu }
flags for ficompl_m32int: { fpu }
flags for fidiv_m16int: { fpu }
flags for fidivl_m32int: { fpu }
flags for fidivr_m16int: { fpu }
flags for fidivrl_m32int: { fpu }
flags for fild_m16int: { fpu }
flags for fildl_m32int: { fpu }
flags for fildll_m64int: { fpu }
flags for fimul_m16int: { fpu }
flags for fimull_m32int: { fpu }
flags for fincstp: { fpu }
flags for finit: { fpu }
flags for fist_m16int: { fpu }
flags for fistl_m32int: { fpu }
flags for fistp_m16int: { fpu }
flags for fistpl_m32int: { fpu }
flags for fistpll_m64int: { fpu }
flags for fisttp_m16int: { fpu }
flags for fisttpl_m32int: { fpu }
flags for fisttpll_m64int: { fpu }
flags for fisub_m16int: { fpu }
flags for fisubl_m32int: { fpu }
flags for fisubr_m16int: { fpu }
flags for fisubrl_m32int: { fpu }
flags for flds_m32fp: { fpu }
flags for fldl_m64fp: { fpu }
flags for fldt_m80fp: { fpu }
flags for fld1: { fpu }
flags for fldl2e: { fpu }
flags for fldl2t: { fpu }
flags for fldlg2: { fpu }
flags for fldln2: { fpu }
flags for fldpi: { fpu }
flags for fldz: { fpu }
flags for fmuls_m32fp: { fpu }
flags for fmull_m64fp: { fpu }
flags for fmulp: { fpu }
flags for fnclex: { fpu }
flags for fninit: { fpu }
flags for fnop: { fpu }
flags for fnstsw_ax: { fpu }
flags for fpatan: { fpu }
flags for fprem: { fpu }
flags for fprem1: { fpu }
flags for fptan: { fpu }
flags for frndint: { fpu }
flags for fscale: { fpu }
flags for fsin: { fpu }
flags for fsincos: { fpu }
flags for fsqrt: { fpu }
flags for fsts_m32fp: { fpu }
flags for fstl_m64fp: { fpu }
flags for fstps_m32fp: { fpu }
flags for fstpl_m64fp: { fpu }
flags for fstpt_m80fp: { fpu }
flags for fstsw_ax: { fpu }
flags for fsubs_m32fp: { fpu }
flags for fsubl_m64fp: { fpu }
flags for fsubp: { fpu }
flags for fsubrs_m32fp: { fpu }
flags for fsubrl_m64fp: { fpu }
flags for fsubrp: { fpu }
flags for ftst: { fpu }
flags for fucom: { fpu }
flags for fucomp: { fpu }
flags for fucompp: { fpu }
flags for fwait: { fpu }
flags for fxam: { fpu }
flags for fxch: { fpu }
flags for fxtract: { fpu }
flags for fyl2x: { fpu }
flags for fyl2xp1: { fpu }
flags for haddpd_xmm_m128: { pni }
flags for haddpd_xmm_xmm: { pni }
flags for haddps_xmm_m128: { pni }
flags for haddps_xmm_xmm: { pni }
flags for hsubpd_xmm_m128: { pni }
flags for hsubpd_xmm_xmm: { pni }
flags for hsubps_xmm_m128: { pni }
flags for hsubps_xmm_xmm: { pni }
flags for incw_m16: { }
flags for incl_m32: { }
flags for incq_m64: { }
flags for incb_m8: { }
flags for incw_r16: { }
flags for incl_r32: { }
flags for incq_r64: { }
flags for incb_r8: { }
flags for incb_rh: { }
flags for insertps_xmm_m32_imm8: { sse4_1 }
flags for insertps_xmm_xmm_imm8: { sse4_1 }
flags for int_imm8: { }
flags for int_three: { }
flags for lahf: { lahf_lm }
flags for lddqu_xmm_m128: { pni }
flags for leaw_r16_m16: { }
flags for leaw_r16_m32: { }
flags for leaw_r16_m64: { }
flags for leal_r32_m16: { }
flags for leal_r32_m32: { }
flags for leal_r32_m64: { }
flags for leaq_r64_m16: { }
flags for leaq_r64_m32: { }
flags for leaq_r64_m64: { }
flags for lzcntw_r16_m16: { bmi1 }
flags for lzcntw_r16_r16: { bmi1 }
flags for lzcntl_r32_m32: { bmi1 }
flags for lzcntl_r32_r32: { bmi1 }
flags for lzcntq_r64_m64: { bmi1 }
flags for lzcntq_r64_r64: { bmi1 }
flags for maxpd_xmm_m128: { sse2 }
flags for maxpd_xmm_xmm: { sse2 }
flags for maxps_xmm_m128: { sse }
flags for maxps_xmm_xmm: { sse }
flags for maxsd_xmm_m64: { sse2 }
flags for maxsd_xmm_xmm: { sse2 }
flags for maxss_xmm_m32: { sse }
flags for maxss_xmm_xmm: { sse }
flags for minpd_xmm_m128: { sse2 }
flags for minpd_xmm_xmm: { sse2 }
flags for minps_xmm_m128: { sse }
flags for minps_xmm_xmm: { sse }
flags for minsd_xmm_m64: { sse2 }
flags for minsd_xmm_xmm: { sse2 }
flags for minss_xmm_m32: { sse }
flags for minss_xmm_xmm: { sse }
flags for movw_m16_imm16: { }
flags for movw_m16_r16: { }
flags for movl_m32_imm32: { }
flags for movl_m32_r32: { }
flags for movq_m64_imm32: { }
flags for movq_m64_r64: { }
flags for movb_m8_imm8: { }
flags for movb_m8_r8: { }
flags for movb_m8_rh: { }
flags for movw_r16_imm16: { }
flags for movw_r16_imm16_1: { }
flags for movw_r16_m16: { }
flags for movw_r16_r16: { }
flags for movw_r16_r16_1: { }
flags for movl_r32_imm32: { }
flags for movl_r32_imm32_1: { }
flags for movl_r32_m32: { }
flags for movl_r32_r32: { }
flags for movl_r32_r32_1: { }
flags for movq_r64_imm32: { }
flags for movq_r64_imm64: { }
flags for movq_r64_m64: { }
flags for movq_r64_r64: { }
flags for movq_r64_r64_1: { }
flags for movb_r8_imm8: { }
flags for movb_r8_imm8_1: { }
flags for movb_r8_m8: { }
flags for movb_r8_r8: { }
flags for movb_r8_r8_1: { }
flags for movb_r8_rh: { }
flags for movb_r8_rh_1: { }
flags for movb_rh_imm8: { }
flags for movb_rh_imm8_1: { }
flags for movb_rh_m8: { }
flags for movb_rh_r8: { }
flags for movb_rh_r8_1: { }
flags for movb_rh_rh: { }
flags for movb_rh_rh_1: { }
flags for movapd_m128_xmm: { sse2 }
flags for movapd_xmm_m128: { sse2 }
flags for movapd_xmm_xmm: { sse2 }
flags for movapd_xmm_xmm_1: { sse2 }
flags for movaps_m128_xmm: { sse }
flags for movaps_xmm_m128: { sse }
flags for movaps_xmm_xmm: { sse }
flags for movaps_xmm_xmm_1: { sse }
flags for movbew_m16_r16: { movbe }
flags for movbel_m32_r32: { movbe }
flags for movbeq_m64_r64: { movbe }
flags for movbew_r16_m16: { movbe }
flags for movbel_r32_m32: { movbe }
flags for movbeq_r64_m64: { movbe }
flags for movd_m32_mm: { mmx }
flags for movd_m32_xmm: { sse2 }
flags for movd_mm_m32: { mmx }
flags for movd_mm_r32: { mmx }
flags for movd_r32_mm: { mmx }
flags for movd_r32_xmm: { sse2 }
flags for movd_xmm_m32: { sse2 }
flags for movd_xmm_r32: { sse2 }
flags for movddup_xmm_m64: { pni }
flags for movddup_xmm_xmm: { pni }
flags for movdq2q_mm_xmm: { mmx }
flags for movdqa_m128_xmm: { sse2 }
flags for movdqa_xmm_m128: { sse2 }
flags for movdqa_xmm_xmm: { sse2 }
flags for movdqa_xmm_xmm_1: { sse2 }
flags for movdqu_m128_xmm: { sse2 }
flags for movdqu_xmm_m128: { sse2 }
flags for movdqu_xmm_xmm: { sse2 }
flags for movdqu_xmm_xmm_1: { sse2 }
flags for movhlps_xmm_xmm: { sse }
flags for movhpd_m64_xmm: { sse2 }
flags for movhpd_xmm_m64: { sse2 }
flags for movhps_m64_xmm: { sse }
flags for movhps_xmm_m64: { sse }
flags for movlhps_xmm_xmm: { sse }
flags for movlpd_m64_xmm: { sse2 }
flags for movlpd_xmm_m64: { sse2 }
flags for movlps_m64_xmm: { sse }
flags for movlps_xmm_m64: { sse }
flags for movmskpd_r32_xmm: { sse2 }
flags for movmskpd_r64_xmm: { sse2 }
flags for movmskps_r32_xmm: { sse }
flags for movmskps_r64_xmm: { sse }
flags for movntdq_m128_xmm: { sse2 }
flags for movntdq_m256_ymm: { avx }
flags for movntdqa_xmm_m128: { sse4_1 }
flags for movnti_m32_r32: { }
flags for movnti_m64_r64: { }
flags for movntpd_m128_xmm: { sse2 }
flags for movntps_m128_xmm: { sse }
flags for movntq_m64_mm: { }
flags for movq_m64_mm: { mmx }
flags for movq_m64_mm_1: { mmx }
flags for movq_m64_xmm: { sse2 }
flags for movq_m64_xmm_1: { sse2 }
flags for movq_mm_m64: { mmx }
flags for movq_mm_m64_1: { mmx }
flags for movq_mm_mm: { mmx }
flags for movq_mm_mm_1: { mmx }
flags for movq_mm_r64: { mmx }
flags for movq_r64_mm: { mmx }
flags for movq_r64_xmm: { sse2 }
flags for movq_xmm_m64: { sse2 }
flags for movq_xmm_m64_1: { sse2 }
flags for movq_xmm_r64: { sse2 }
flags for movq_xmm_xmm: { sse2 }
flags for movq_xmm_xmm_1: { sse2 }
flags for movq2dq_xmm_mm: { mmx }
flags for movsd_m64_xmm: { sse2 }
flags for movsd_xmm_m64: { sse2 }
flags for movsd_xmm_xmm: { sse2 }
flags for movsd_xmm_xmm_1: { sse2 }
flags for movshdup_xmm_m128: { pni }
flags for movshdup_xmm_xmm: { pni }
flags for movsldup_xmm_m128: { pni }
flags for movsldup_xmm_xmm: { pni }
flags for movss_m32_xmm: { sse }
flags for movss_xmm_m32: { sse }
flags for movss_xmm_xmm: { sse }
flags for movss_xmm_xmm_1: { sse }
flags for movsbw_r16_m8: { }
flags for movsbw_r16_r8: { }
flags for movsbw_r16_rh: { }
flags for movswl_r32_m16: { }
flags for movsbl_r32_m8: { }
flags for movswl_r32_r16: { }
flags for movsbl_r32_r8: { }
flags for movsbl_r32_rh: { }
flags for movswq_r64_m16: { }
flags for movsbq_r64_m8: { }
flags for movswq_r64_r16: { }
flags for movsbq_r64_r8: { }
flags for movslq_r64_m32: { }
flags for movslq_r64_r32: { }
flags for movupd_m128_xmm: { sse2 }
flags for movupd_xmm_m128: { sse2 }
flags for movupd_xmm_xmm: { sse2 }
flags for movupd_xmm_xmm_1: { sse2 }
flags for movups_m128_xmm: { sse }
flags for movups_xmm_m128: { sse }
flags for movups_xmm_xmm: { sse }
flags for movups_xmm_xmm_1: { sse }
flags for movzbw_r16_m8: { }
flags for movzbw_r16_r8: { }
flags for movzbw_r16_rh: { }
flags for movzwl_r32_m16: { }
flags for movzbl_r32_m8: { }
flags for movzwl_r32_r16: { }
flags for movzbl_r32_r8: { }
flags for movzbl_r32_rh: { }
flags for movzwq_r64_m16: { }
flags for movzbq_r64_m8: { }
flags for movzwq_r64_r16: { }
flags for movzbq_r64_r8: { }
flags for mpsadbw_xmm_m128_imm8: { sse4_1 }
flags for mpsadbw_xmm_xmm_imm8: { sse4_1 }
flags for negw_m16: { }
flags for negl_m32: { }
flags for negq_m64: { }
flags for negb_m8: { }
flags for negw_r16: { }
flags for negl_r32: { }
flags for negq_r64: { }
flags for negb_r8: { }
flags for negb_rh: { }
flags for nop: { }
flags for nopw_m16: { nopl }
flags for nopl_m32: { nopl }
flags for nopw_r16: { nopl }
flags for nopl_r32: { nopl }
flags for notw_m16: { }
flags for notl_m32: { }
flags for notq_m64: { }
flags for notb_m8: { }
flags for notw_r16: { }
flags for notl_r32: { }
flags for notq_r64: { }
flags for notb_r8: { }
flags for notb_rh: { }
flags for orb_al_imm8: { }
flags for orw_ax_imm16: { }
flags for orl_eax_imm32: { }
flags for orw_m16_imm16: { }
flags for orw_m16_imm8: { }
flags for orw_m16_r16: { }
flags for orl_m32_imm32: { }
flags for orl_m32_imm8: { }
flags for orl_m32_r32: { }
flags for orq_m64_imm32: { }
flags for orq_m64_imm8: { }
flags for orq_m64_r64: { }
flags for orb_m8_imm8: { }
flags for orb_m8_r8: { }
flags for orb_m8_rh: { }
flags for orw_r16_imm16: { }
flags for orw_r16_imm8: { }
flags for orw_r16_m16: { }
flags for orw_r16_r16: { }
flags for orw_r16_r16_1: { }
flags for orl_r32_imm32: { }
flags for orl_r32_imm8: { }
flags for orl_r32_m32: { }
flags for orl_r32_r32: { }
flags for orl_r32_r32_1: { }
flags for orq_r64_imm32: { }
flags for orq_r64_imm8: { }
flags for orq_r64_m64: { }
flags for orq_r64_r64: { }
flags for orq_r64_r64_1: { }
flags for orb_r8_imm8: { }
flags for orb_r8_m8: { }
flags for orb_r8_r8: { }
flags for orb_r8_r8_1: { }
flags for orb_r8_rh: { }
flags for orb_r8_rh_1: { }
flags for orq_rax_imm32: { }
flags for orb_rh_imm8: { }
flags for orb_rh_m8: { }
flags for orb_rh_r8: { }
flags for orb_rh_r8_1: { }
flags for orb_rh_rh: { }
flags for orb_rh_rh_1: { }
flags for orpd_xmm_m128: { sse2 }
flags for orpd_xmm_xmm: { sse2 }
flags for orps_xmm_m128: { sse }
flags for orps_xmm_xmm: { sse }
flags for pabsb_mm_m64: { ssse3 }
flags for pabsb_mm_mm: { ssse3 }
flags for pabsb_xmm_m128: { ssse3 }
flags for pabsb_xmm_xmm: { ssse3 }
flags for pabsd_mm_m64: { ssse3 }
flags for pabsd_mm_mm: { ssse3 }
flags for pabsd_xmm_m128: { ssse3 }
flags for pabsd_xmm_xmm: { ssse3 }
flags for pabsw_mm_m64: { ssse3 }
flags for pabsw_mm_mm: { ssse3 }
flags for pabsw_xmm_m128: { ssse3 }
flags for pabsw_xmm_xmm: { ssse3 }
flags for packssdw_mm_m64: { mmx }
flags for packssdw_mm_mm: { mmx }
flags for packssdw_xmm_m128: { sse2 }
flags for packssdw_xmm_xmm: { sse2 }
flags for packsswb_mm_m64: { mmx }
flags for packsswb_mm_mm: { mmx }
flags for packsswb_xmm_m128: { sse2 }
flags for packsswb_xmm_xmm: { sse2 }
flags for packusdw_xmm_m128: { sse4_1 }
flags for packusdw_xmm_xmm: { sse4_1 }
flags for packuswb_mm_m64: { mmx }
flags for packuswb_mm_mm: { mmx }
flags for packuswb_xmm_m128: { sse2 }
flags for packuswb_xmm_xmm: { sse2 }
flags for paddb_mm_m64: { mmx }
flags for paddb_mm_mm: { mmx }
flags for paddb_xmm_m128: { sse2 }
flags for paddb_xmm_xmm: { sse2 }
flags for paddd_mm_m64: { mmx }
flags for paddd_mm_mm: { mmx }
flags for paddd_xmm_m128: { sse2 }
flags for paddd_xmm_xmm: { sse2 }
flags for paddq_mm_m64: { sse2 }
flags for paddq_mm_mm: { sse2 }
flags for paddq_xmm_m128: { sse2 }
flags for paddq_xmm_xmm: { sse2 }
flags for paddsb_mm_m64: { mmx }
flags for paddsb_mm_mm: { mmx }
flags for paddsb_xmm_m128: { sse2 }
flags for paddsb_xmm_xmm: { sse2 }
flags for paddsw_mm_m64: { mmx }
flags for paddsw_mm_mm: { mmx }
flags for paddsw_xmm_m128: { sse2 }
flags for paddsw_xmm_xmm: { sse2 }
flags for paddusb_mm_m64: { mmx }
flags for paddusb_mm_mm: { mmx }
flags for paddusb_xmm_m128: { sse2 }
flags for paddusb_xmm_xmm: { sse2 }
flags for paddusw_mm_m64: { mmx }
flags for paddusw_mm_mm: { mmx }
flags for paddusw_xmm_m128: { sse2 }
flags for paddusw_xmm_xmm: { sse2 }
flags for paddw_mm_m64: { mmx }
flags for paddw_mm_mm: { mmx }
flags for paddw_xmm_m128: { sse2 }
flags for paddw_xmm_xmm: { sse2 }
flags for palignr_mm_m64_imm8: { ssse3 }
flags for palignr_mm_mm_imm8: { ssse3 }
flags for palignr_xmm_m128_imm8: { ssse3 }
flags for palignr_xmm_xmm_imm8: { ssse3 }
flags for pand_mm_m64: { mmx }
flags for pand_mm_mm: { mmx }
flags for pand_xmm_m128: { sse2 }
flags for pand_xmm_xmm: { sse2 }
flags for pandn_mm_m64: { mmx }
flags for pandn_mm_mm: { mmx }
flags for pandn_xmm_m128: { sse2 }
flags for pandn_xmm_xmm: { sse2 }
flags for pavgb_mm_m64: { sse }
flags for pavgb_mm_mm: { sse }
flags for pavgb_xmm_m128: { sse2 }
flags for pavgb_xmm_xmm: { sse2 }
flags for pavgw_mm_m64: { sse }
flags for pavgw_mm_mm: { sse }
flags for pavgw_xmm_m128: { sse2 }
flags for pavgw_xmm_xmm: { sse2 }
flags for pblendvb_xmm_m128_xmm0: { sse4_1 }
flags for pblendvb_xmm_xmm_xmm0: { sse4_1 }
flags for pblendw_xmm_m128_imm8: { sse4_1 }
flags for pblendw_xmm_xmm_imm8: { sse4_1 }
flags for pclmulqdq_xmm_m128_imm8: { pclmulqdq }
flags for pclmulqdq_xmm_xmm_imm8: { pclmulqdq }
flags for pcmpeqb_mm_m64: { mmx }
flags for pcmpeqb_mm_mm: { mmx }
flags for pcmpeqb_xmm_m128: { sse2 }
flags for pcmpeqb_xmm_xmm: { sse2 }
flags for pcmpeqd_mm_m64: { mmx }
flags for pcmpeqd_mm_mm: { mmx }
flags for pcmpeqd_xmm_m128: { sse2 }
flags for pcmpeqd_xmm_xmm: { sse2 }
flags for pcmpeqq_xmm_m128: { sse4_1 }
flags for pcmpeqq_xmm_xmm: { sse4_1 }
flags for pcmpeqw_mm_m64: { mmx }
flags for pcmpeqw_mm_mm: { mmx }
flags for pcmpeqw_xmm_m128: { sse2 }
flags for pcmpeqw_xmm_xmm: { sse2 }
flags for pcmpestri_xmm_m128_imm8: { sse4_2 }
flags for pcmpestri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpestrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpestrm_xmm_xmm_imm8: { sse4_2 }
flags for pcmpgtb_mm_m64: { mmx }
flags for pcmpgtb_mm_mm: { mmx }
flags for pcmpgtb_xmm_m128: { sse2 }
flags for pcmpgtb_xmm_xmm: { sse2 }
flags for pcmpgtd_mm_m64: { mmx }
flags for pcmpgtd_mm_mm: { mmx }
flags for pcmpgtd_xmm_m128: { sse2 }
flags for pcmpgtd_xmm_xmm: { sse2 }
flags for pcmpgtq_xmm_m128: { sse4_2 }
flags for pcmpgtq_xmm_xmm: { sse4_2 }
flags for pcmpgtw_mm_m64: { mmx }
flags for pcmpgtw_mm_mm: { mmx }
flags for pcmpgtw_xmm_m128: { sse2 }
flags for pcmpgtw_xmm_xmm: { sse2 }
flags for pcmpistri_xmm_m128_imm8: { sse4_2 }
flags for pcmpistri_xmm_xmm_imm8: { sse4_2 }
flags for pcmpistrm_xmm_m128_imm8: { sse4_2 }
flags for pcmpistrm_xmm_xmm_imm8: { sse4_2 }
flags for pdepl_r32_r32_m32: { bmi2 }
flags for pdepl_r32_r32_r32: { bmi2 }
flags for pdepq_r64_r64_m64: { bmi2 }
flags for pdepq_r64_r64_r64: { bmi2 }
flags for pextl_r32_r32_m32: { bmi2 }
flags for pextl_r32_r32_r32: { bmi2 }
flags for pextq_r64_r64_m64: { bmi2 }
flags for pextq_r64_r64_r64: { bmi2 }
flags for pextrb_m8_xmm_imm8: { sse4_1 }
flags for pextrb_r32_xmm_imm8: { sse4_1 }
flags for pextrb_r64_xmm_imm8: { sse4_1 }
flags for pextrd_m32_xmm_imm8: { sse4_1 }
flags for pextrd_r32_xmm_imm8: { sse4_1 }
flags for pextrq_m64_xmm_imm8: { sse4_1 }
flags for pextrq_r64_xmm_imm8: { sse4_1 }
flags for pextrw_m16_xmm_imm8: { sse4_1 }
flags for pextrw_r32_mm_imm8: { sse }
flags for pextrw_r32_xmm_imm8: { sse2 }
flags for pextrw_r32_xmm_imm8_1: { sse4_1 }
flags for pextrw_r64_mm_imm8: { sse }
flags for pextrw_r64_xmm_imm8: { sse2 }
flags for pextrw_r64_xmm_imm8_1: { sse4_1 }
flags for phaddd_mm_m64: { ssse3 }
flags for phaddd_mm_mm: { ssse3 }
flags for phaddd_xmm_m128: { ssse3 }
flags for phaddd_xmm_xmm: { ssse3 }
flags for phaddsw_mm_m64: { ssse3 }
flags for phaddsw_mm_mm: { ssse3 }
flags for phaddsw_xmm_m128: { ssse3 }
flags for phaddsw_xmm_xmm: { ssse3 }
flags for phaddw_mm_m64: { ssse3 }
flags for phaddw_mm_mm: { ssse3 }
flags for phaddw_xmm_m128: { ssse3 }
flags for phaddw_xmm_xmm: { ssse3 }
flags for phminposuw_xmm_m128: { sse4_1 }
flags for phminposuw_xmm_xmm: { sse4_1 }
flags for phsubd_mm_m64: { ssse3 }
flags for phsubd_mm_mm: { ssse3 }
flags for phsubd_xmm_m128: { ssse3 }
flags for phsubd_xmm_xmm: { ssse3 }
flags for phsubsw_mm_m64: { ssse3 }
flags for phsubsw_mm_mm: { ssse3 }
flags for phsubsw_xmm_m128: { ssse3 }
flags for phsubsw_xmm_xmm: { ssse3 }
flags for phsubw_mm_m64: { ssse3 }
flags for phsubw_mm_mm: { ssse3 }
flags for phsubw_xmm_m128: { ssse3 }
flags for phsubw_xmm_xmm: { ssse3 }
flags for pinsrb_xmm_m8_imm8: { sse4_1 }
flags for pinsrb_xmm_r32_imm8: { sse4_1 }
flags for pinsrd_xmm_m32_imm8: { sse4_1 }
flags for pinsrd_xmm_r32_imm8: { sse4_1 }
flags for pinsrw_mm_m16_imm8: { sse }
flags for pinsrw_mm_r32_imm8: { sse }
flags for pinsrw_xmm_m16_imm8: { sse2 }
flags for pinsrw_xmm_r32_imm8: { sse2 }
flags for pmaddubsw_mm_m64: { mmx ssse3 }
flags for pmaddubsw_mm_mm: { mmx ssse3 }
flags for pmaddubsw_xmm_m128: { ssse3 }
flags for pmaddubsw_xmm_xmm: { ssse3 }
flags for pmaddwd_mm_m64: { mmx }
flags for pmaddwd_mm_mm: { mmx }
flags for pmaddwd_xmm_m128: { sse2 }
flags for pmaddwd_xmm_xmm: { sse2 }
flags for pmaxsb_xmm_m128: { sse4_1 }
flags for pmaxsb_xmm_xmm: { sse4_1 }
flags for pmaxsd_xmm_m128: { sse4_1 }
flags for pmaxsd_xmm_xmm: { sse4_1 }
flags for pmaxsw_mm_m64: { sse }
flags for pmaxsw_mm_mm: { sse }
flags for pmaxsw_xmm_m128: { sse2 }
flags for pmaxsw_xmm_xmm: { sse2 }
flags for pmaxub_mm_m64: { sse }
flags for pmaxub_mm_mm: { sse }
flags for pmaxub_xmm_m128: { sse2 }
flags for pmaxub_xmm_xmm: { sse2 }
flags for pmaxud_xmm_m128: { sse4_1 }
flags for pmaxud_xmm_xmm: { sse4_1 }
flags for pmaxuw_xmm_m128: { sse4_1 }
flags for pmaxuw_xmm_xmm: { sse4_1 }
flags for pminsb_xmm_m128: { sse4_1 }
flags for pminsb_xmm_xmm: { sse4_1 }
flags for pminsd_xmm_m128: { sse4_1 }
flags for pminsd_xmm_xmm: { sse4_1 }
flags for pminsw_mm_m64: { sse }
flags for pminsw_mm_mm: { sse }
flags for pminsw_xmm_m128: { sse2 }
flags for pminsw_xmm_xmm: { sse2 }
flags for pminub_mm_m64: { sse }
flags for pminub_mm_mm: { sse }
flags for pminub_xmm_m128: { sse2 }
flags for pminub_xmm_xmm: { sse2 }
flags for pminud_xmm_m128: { sse4_1 }
flags for pminud_xmm_xmm: { sse4_1 }
flags for pminuw_xmm_m128: { sse4_1 }
flags for pminuw_xmm_xmm: { sse4_1 }
flags for pmovmskb_r32_mm: { sse }
flags for pmovmskb_r32_xmm: { sse2 }
flags for pmovmskb_r64_mm: { sse }
flags for pmovmskb_r64_xmm: { sse2 }
flags for pmovsxbd_xmm_m32: { sse4_1 }
flags for pmovsxbd_xmm_xmm: { sse4_1 }
flags for pmovsxbq_xmm_m16: { sse4_1 }
flags for pmovsxbq_xmm_xmm: { sse4_1 }
flags for pmovsxbw_xmm_m64: { sse4_1 }
flags for pmovsxbw_xmm_xmm: { sse4_1 }
flags for pmovsxdq_xmm_m64: { sse4_1 }
flags for pmovsxdq_xmm_xmm: { sse4_1 }
flags for pmovsxwd_xmm_m64: { sse4_1 }
flags for pmovsxwd_xmm_xmm: { sse4_1 }
flags for pmovsxwq_xmm_m32: { sse4_1 }
flags for pmovsxwq_xmm_xmm: { sse4_1 }
flags for pmovzxbd_xmm_m32: { sse4_1 }
flags for pmovzxbd_xmm_xmm: { sse4_1 }
flags for pmovzxbq_xmm_m16: { sse4_1 }
flags for pmovzxbq_xmm_xmm: { sse4_1 }
flags for pmovzxbw_xmm_m64: { sse4_1 }
flags for pmovzxbw_xmm_xmm: { sse4_1 }
flags for pmovzxdq_xmm_m64: { sse4_1 }
flags for pmovzxdq_xmm_xmm: { sse4_1 }
flags for pmovzxwd_xmm_m64: { sse4_1 }
flags for pmovzxwd_xmm_xmm: { sse4_1 }
flags for pmovzxwq_xmm_m32: { sse4_1 }
flags for pmovzxwq_xmm_xmm: { sse4_1 }
flags for pmuldq_xmm_m128: { sse4_1 }
flags for pmuldq_xmm_xmm: { sse4_1 }
flags for pmulhrsw_mm_m64: { ssse3 }
flags for pmulhrsw_mm_mm: { ssse3 }
flags for pmulhrsw_xmm_m128: { ssse3 }
flags for pmulhrsw_xmm_xmm: { ssse3 }
flags for pmulhuw_mm_m64: { sse }
flags for pmulhuw_mm_mm: { sse }
flags for pmulhuw_xmm_m128: { sse2 }
flags for pmulhuw_xmm_xmm: { sse2 }
flags for pmulhw_mm_m64: { mmx }
flags for pmulhw_mm_mm: { mmx }
flags for pmulhw_xmm_m128: { sse2 }
flags for pmulhw_xmm_xmm: { sse2 }
flags for pmulld_xmm_m128: { sse4_1 }
flags for pmulld_xmm_xmm: { sse4_1 }
flags for pmullw_mm_m64: { mmx }
flags for pmullw_mm_mm: { mmx }
flags for pmullw_xmm_m128: { sse2 }
flags for pmullw_xmm_xmm: { sse2 }
flags for pmuludq_mm_m64: { sse2 }
flags for pmuludq_mm_mm: { sse2 }
flags for pmuludq_xmm_m128: { sse2 }
flags for pmuludq_xmm_xmm: { sse2 }
flags for popw_m16: { }
flags for popq_m64: { }
flags for popw_r16: { }
flags for popw_r16_1: { }
flags for popq_r64: { }
flags for popq_r64_1: { }
flags for popcntw_r16_m16: { popcnt }
flags for popcntw_r16_r16: { popcnt }
flags for popcntl_r32_m32: { popcnt }
flags for popcntl_r32_r32: { popcnt }
flags for popcntq_r64_m64: { popcnt }
flags for popcntq_r64_r64: { popcnt }
flags for popf: { }
flags for popfq: { }
flags for por_mm_m64: { mmx }
flags for por_mm_mm: { mmx }
flags for por_xmm_m128: { sse2 }
flags for por_xmm_xmm: { sse2 }
flags for psadbw_mm_m64: { sse }
flags for psadbw_mm_mm: { sse }
flags for psadbw_xmm_m128: { sse2 }
flags for psadbw_xmm_xmm: { sse2 }
flags for pshufb_mm_m64: { ssse3 }
flags for pshufb_mm_mm: { ssse3 }
flags for pshufb_xmm_m128: { ssse3 }
flags for pshufb_xmm_xmm: { ssse3 }
flags for pshufd_xmm_m128_imm8: { sse2 }
flags for pshufd_xmm_xmm_imm8: { sse2 }
flags for pshufhw_xmm_m128_imm8: { sse2 }
flags for pshufhw_xmm_xmm_imm8: { sse2 }
flags for pshuflw_xmm_m128_imm8: { sse2 }
flags for pshuflw_xmm_xmm_imm8: { sse2 }
flags for pshufw_mm_m64_imm8: { }
flags for pshufw_mm_mm_imm8: { }
flags for psignb_mm_m64: { ssse3 }
flags for psignb_mm_mm: { ssse3 }
flags for psignb_xmm_m128: { ssse3 }
flags for psignb_xmm_xmm: { ssse3 }
flags for psignd_mm_m64: { ssse3 }
flags for psignd_mm_mm: { ssse3 }
flags for psignd_xmm_m128: { ssse3 }
flags for psignd_xmm_xmm: { ssse3 }
flags for psignw_mm_m64: { ssse3 }
flags for psignw_mm_mm: { ssse3 }
flags for psignw_xmm_m128: { ssse3 }
flags for psignw_xmm_xmm: { ssse3 }
flags for pslld_mm_imm8: { mmx }
flags for pslld_mm_m64: { mmx }
flags for pslld_mm_mm: { mmx }
flags for pslld_xmm_imm8: { sse2 }
flags for pslld_xmm_m128: { sse2 }
flags for pslld_xmm_xmm: { sse2 }
flags for pslldq_xmm_imm8: { sse2 }
flags for psllq_mm_imm8: { mmx }
flags for psllq_mm_m64: { mmx }
flags for psllq_mm_mm: { mmx }
flags for psllq_xmm_imm8: { sse2 }
flags for psllq_xmm_m128: { sse2 }
flags for psllq_xmm_xmm: { sse2 }
flags for psllw_mm_imm8: { mmx }
flags for psllw_mm_m64: { mmx }
flags for psllw_mm_mm: { mmx }
flags for psllw_xmm_imm8: { sse2 }
flags for psllw_xmm_m128: { sse2 }
flags for psllw_xmm_xmm: { sse2 }
flags for psrad_mm_imm8: { mmx }
flags for psrad_mm_m64: { mmx }
flags for psrad_mm_mm: { mmx }
flags for psrad_xmm_imm8: { sse2 }
flags for psrad_xmm_m128: { sse2 }
flags for psrad_xmm_xmm: { sse2 }
flags for psraw_mm_imm8: { mmx }
flags for psraw_mm_m64: { mmx }
flags for psraw_mm_mm: { mmx }
flags for psraw_xmm_imm8: { sse2 }
flags for psraw_xmm_m128: { sse2 }
flags for psraw_xmm_xmm: { sse2 }
flags for psrld_mm_imm8: { mmx }
flags for psrld_mm_m64: { mmx }
flags for psrld_mm_mm: { mmx }
flags for psrld_xmm_imm8: { sse2 }
flags for psrld_xmm_m128: { sse2 }
flags for psrld_xmm_xmm: { sse2 }
flags for psrldq_xmm_imm8: { sse2 }
flags for psrlq_mm_imm8: { mmx }
flags for psrlq_mm_m64: { mmx }
flags for psrlq_mm_mm: { mmx }
flags for psrlq_xmm_imm8: { sse2 }
flags for psrlq_xmm_m128: { sse2 }
flags for psrlq_xmm_xmm: { sse2 }
flags for psrlw_mm_imm8: { mmx }
flags for psrlw_mm_m64: { mmx }
flags for psrlw_mm_mm: { mmx }
flags for psrlw_xmm_imm8: { sse2 }
flags for psrlw_xmm_m128: { sse2 }
flags for psrlw_xmm_xmm: { sse2 }
flags for psubb_mm_m64: { mmx }
flags for psubb_mm_mm: { mmx }
flags for psubb_xmm_m128: { sse2 }
flags for psubb_xmm_xmm: { sse2 }
flags for psubd_mm_m64: { mmx }
flags for psubd_mm_mm: { mmx }
flags for psubd_xmm_m128: { sse2 }
flags for psubd_xmm_xmm: { sse2 }
flags for psubq_mm_m64: { sse2 }
flags for psubq_mm_mm: { sse2 }
flags for psubq_xmm_m128: { sse2 }
flags for psubq_xmm_xmm: { sse2 }
flags for psubsb_mm_m64: { mmx }
flags for psubsb_mm_mm: { mmx }
flags for psubsb_xmm_m128: { sse2 }
flags for psubsb_xmm_xmm: { sse2 }
flags for psubsw_mm_m64: { mmx }
flags for psubsw_mm_mm: { mmx }
flags for psubsw_xmm_m128: { sse2 }
flags for psubsw_xmm_xmm: { sse2 }
flags for psubusb_mm_m64: { mmx }
flags for psubusb_mm_mm: { mmx }
flags for psubusb_xmm_m128: { sse2 }
flags for psubusb_xmm_xmm: { sse2 }
flags for psubusw_mm_m64: { mmx }
flags for psubusw_mm_mm: { mmx }
flags for psubusw_xmm_m128: { sse2 }
flags for psubusw_xmm_xmm: { sse2 }
flags for psubw_mm_m64: { mmx }
flags for psubw_mm_mm: { mmx }
flags for psubw_xmm_m128: { sse2 }
flags for psubw_xmm_xmm: { sse2 }
flags for ptest_xmm_m128: { sse4_1 }
flags for ptest_xmm_xmm: { sse4_1 }
flags for punpckhbw_mm_m64: { mmx }
flags for punpckhbw_mm_mm: { mmx }
flags for punpckhbw_xmm_m128: { sse2 }
flags for punpckhbw_xmm_xmm: { sse2 }
flags for punpckhdq_mm_m64: { mmx }
flags for punpckhdq_mm_mm: { mmx }
flags for punpckhdq_xmm_m128: { sse2 }
flags for punpckhdq_xmm_xmm: { sse2 }
flags for punpckhqdq_xmm_m128: { sse2 }
flags for punpckhqdq_xmm_xmm: { sse2 }
flags for punpckhwd_mm_m64: { mmx }
flags for punpckhwd_mm_mm: { mmx }
flags for punpckhwd_xmm_m128: { sse2 }
flags for punpckhwd_xmm_xmm: { sse2 }
flags for punpcklbw_mm_m32: { mmx }
flags for punpcklbw_mm_mm: { mmx }
flags for punpcklbw_xmm_m128: { sse2 }
flags for punpcklbw_xmm_xmm: { sse2 }
flags for punpckldq_mm_m32: { mmx }
flags for punpckldq_mm_mm: { mmx }
flags for punpckldq_xmm_m128: { sse2 }
flags for punpckldq_xmm_xmm: { sse2 }
flags for punpcklqdq_xmm_m128: { sse2 }
flags for punpcklqdq_xmm_xmm: { sse2 }
flags for punpcklwd_mm_m32: { mmx }
flags for punpcklwd_mm_mm: { mmx }
flags for punpcklwd_xmm_m128: { sse2 }
flags for punpcklwd_xmm_xmm: { sse2 }
flags for pushq_imm16: { }
flags for pushq_imm32: { }
flags for pushq_imm8: { }
flags for pushw_m16: { }
flags for pushq_m64: { }
flags for pushw_r16: { }
flags for pushw_r16_1: { }
flags for pushq_r64: { }
flags for pushq_r64_1: { }
flags for pushf: { }
flags for pushfq: { }
flags for pxor_mm_m64: { mmx }
flags for pxor_mm_mm: { mmx }
flags for pxor_xmm_m128: { sse2 }
flags for pxor_xmm_xmm: { sse2 }
flags for rcpps_xmm_m128: { sse }
flags for rcpps_xmm_xmm: { sse }
flags for rcpss_xmm_m32: { sse }
flags for rcpss_xmm_xmm: { sse }
flags for rdrand_r16: { rdrand }
flags for rdrand_r32: { rdrand }
flags for rdrand_r64: { rdrand }
flags for repz scasb_m8_1: { rep_good }
flags for roundpd_xmm_m128_imm8: { sse4_1 }
flags for roundpd_xmm_xmm_imm8: { sse4_1 }
flags for roundps_xmm_m128_imm8: { sse4_1 }
flags for roundps_xmm_xmm_imm8: { sse4_1 }
flags for roundsd_xmm_m64_imm8: { sse4_1 }
flags for roundsd_xmm_xmm_imm8: { sse4_1 }
flags for roundss_xmm_m32_imm8: { sse4_1 }
flags for roundss_xmm_xmm_imm8: { sse4_1 }
flags for rsqrtps_xmm_m128: { sse }
flags for rsqrtps_xmm_xmm: { sse }
flags for rsqrtss_xmm_m32: { sse }
flags for rsqrtss_xmm_xmm: { sse }
flags for sahf: { lahf_lm }
flags for salw_m16_cl: { }
flags for salw_m16_imm8: { }
flags for salw_m16_one: { }
flags for sall_m32_cl: { }
flags for sall_m32_imm8: { }
flags for sall_m32_one: { }
flags for salq_m64_cl: { }
flags for salq_m64_imm8: { }
flags for salq_m64_one: { }
flags for salb_m8_cl: { }
flags for salb_m8_imm8: { }
flags for salb_m8_one: { }
flags for salw_r16_cl: { }
flags for salw_r16_imm8: { }
flags for salw_r16_one: { }
flags for sall_r32_cl: { }
flags for sall_r32_imm8: { }
flags for sall_r32_one: { }
flags for salq_r64_cl: { }
flags for salq_r64_imm8: { }
flags for salq_r64_one: { }
flags for salb_r8_cl: { }
flags for salb_r8_imm8: { }
flags for salb_r8_one: { }
flags for salb_rh_cl: { }
flags for salb_rh_imm8: { }
flags for salb_rh_one: { }
flags for sarw_m16_cl: { }
flags for sarw_m16_imm8: { }
flags for sarw_m16_one: { }
flags for sarl_m32_cl: { }
flags for sarl_m32_imm8: { }
flags for sarl_m32_one: { }
flags for sarq_m64_cl: { }
flags for sarq_m64_imm8: { }
flags for sarq_m64_one: { }
flags for sarb_m8_cl: { }
flags for sarb_m8_imm8: { }
flags for sarb_m8_one: { }
flags for sarw_r16_cl: { }
flags for sarw_r16_imm8: { }
flags for sarw_r16_one: { }
flags for sarl_r32_cl: { }
flags for sarl_r32_imm8: { }
flags for sarl_r32_one: { }
flags for sarq_r64_cl: { }
flags for sarq_r64_imm8: { }
flags for sarq_r64_one: { }
flags for sarb_r8_cl: { }
flags for sarb_r8_imm8: { }
flags for sarb_r8_one: { }
flags for sarb_rh_cl: { }
flags for sarb_rh_imm8: { }
flags for sarb_rh_one: { }
flags for sarxl_r32_m32_r32: { bmi2 }
flags for sarxl_r32_r32_r32: { bmi2 }
flags for sarxq_r64_m64_r64: { bmi2 }
flags for sarxq_r64_r64_r64: { bmi2 }
flags for shlw_m16_cl: { }
flags for shlw_m16_imm8: { }
flags for shlw_m16_one: { }
flags for shll_m32_cl: { }
flags for shll_m32_imm8: { }
flags for shll_m32_one: { }
flags for shlq_m64_cl: { }
flags for shlq_m64_imm8: { }
flags for shlq_m64_one: { }
flags for shlb_m8_cl: { }
flags for shlb_m8_imm8: { }
flags for shlb_m8_one: { }
flags for shlw_r16_cl: { }
flags for shlw_r16_imm8: { }
flags for shlw_r16_one: { }
flags for shll_r32_cl: { }
flags for shll_r32_imm8: { }
flags for shll_r32_one: { }
flags for shlq_r64_cl: { }
flags for shlq_r64_imm8: { }
flags for shlq_r64_one: { }
flags for shlb_r8_cl: { }
flags for shlb_r8_imm8: { }
flags for shlb_r8_one: { }
flags for shlb_rh_cl: { }
flags for shlb_rh_imm8: { }
flags for shlb_rh_one: { }
flags for shldw_m16_r16_cl: { }
flags for shldw_m16_r16_imm8: { }
flags for shldl_m32_r32_cl: { }
flags for shldl_m32_r32_imm8: { }
flags for shldq_m64_r64_cl: { }
flags for shldq_m64_r64_imm8: { }
flags for shldw_r16_r16_cl: { }
flags for shldw_r16_r16_imm8: { }
flags for shldl_r32_r32_cl: { }
flags for shldl_r32_r32_imm8: { }
flags for shldq_r64_r64_cl: { }
flags for shldq_r64_r64_imm8: { }
flags for shlxl_r32_m32_r32: { bmi2 }
flags for shlxl_r32_r32_r32: { bmi2 }
flags for shlxq_r64_m64_r64: { bmi2 }
flags for shlxq_r64_r64_r64: { bmi2 }
flags for shrw_m16_cl: { }
flags for shrw_m16_imm8: { }
flags for shrw_m16_one: { }
flags for shrl_m32_cl: { }
flags for shrl_m32_imm8: { }
flags for shrl_m32_one: { }
flags for shrq_m64_cl: { }
flags for shrq_m64_imm8: { }
flags for shrq_m64_one: { }
flags for shrb_m8_cl: { }
flags for shrb_m8_imm8: { }
flags for shrb_m8_one: { }
flags for shrw_r16_cl: { }
flags for shrw_r16_imm8: { }
flags for shrw_r16_one: { }
flags for shrl_r32_cl: { }
flags for shrl_r32_imm8: { }
flags for shrl_r32_one: { }
flags for shrq_r64_cl: { }
flags for shrq_r64_imm8: { }
flags for shrq_r64_one: { }
flags for shrb_r8_cl: { }
flags for shrb_r8_imm8: { }
flags for shrb_r8_one: { }
flags for shrb_rh_cl: { }
flags for shrb_rh_imm8: { }
flags for shrb_rh_one: { }
flags for shrxl_r32_m32_r32: { bmi2 }
flags for shrxl_r32_r32_r32: { bmi2 }
flags for shrxq_r64_m64_r64: { bmi2 }
flags for shrxq_r64_r64_r64: { bmi2 }
flags for shufpd_xmm_m128_imm8: { sse2 }
flags for shufpd_xmm_xmm_imm8: { sse2 }
flags for shufps_xmm_m128_imm8: { sse }
flags for shufps_xmm_xmm_imm8: { sse }
flags for sqrtpd_xmm_m128: { sse2 }
flags for sqrtpd_xmm_xmm: { sse2 }
flags for sqrtps_xmm_m128: { sse }
flags for sqrtps_xmm_xmm: { sse }
flags for sqrtsd_xmm_m64: { sse2 }
flags for sqrtsd_xmm_xmm: { sse2 }
flags for sqrtss_xmm_m32: { sse }
flags for sqrtss_xmm_xmm: { sse }
flags for sti: { }
flags for subb_al_imm8: { }
flags for subw_ax_imm16: { }
flags for subl_eax_imm32: { }
flags for subw_m16_imm16: { }
flags for subw_m16_imm8: { }
flags for subw_m16_r16: { }
flags for subl_m32_imm32: { }
flags for subl_m32_imm8: { }
flags for subl_m32_r32: { }
flags for subq_m64_imm32: { }
flags for subq_m64_imm8: { }
flags for subq_m64_r64: { }
flags for subb_m8_imm8: { }
flags for subb_m8_r8: { }
flags for subb_m8_rh: { }
flags for subw_r16_imm16: { }
flags for subw_r16_imm8: { }
flags for subw_r16_m16: { }
flags for subw_r16_r16: { }
flags for subw_r16_r16_1: { }
flags for subl_r32_imm32: { }
flags for subl_r32_imm8: { }
flags for subl_r32_m32: { }
flags for subl_r32_r32: { }
flags for subl_r32_r32_1: { }
flags for subq_r64_imm32: { }
flags for subq_r64_imm8: { }
flags for subq_r64_m64: { }
flags for subq_r64_r64: { }
flags for subq_r64_r64_1: { }
flags for subb_r8_imm8: { }
flags for subb_r8_m8: { }
flags for subb_r8_r8: { }
flags for subb_r8_r8_1: { }
flags for subb_r8_rh: { }
flags for subb_r8_rh_1: { }
flags for subq_rax_imm32: { }
flags for subb_rh_imm8: { }
flags for subb_rh_m8: { }
flags for subb_rh_r8: { }
flags for subb_rh_r8_1: { }
flags for subb_rh_rh: { }
flags for subb_rh_rh_1: { }
flags for subpd_xmm_m128: { sse2 }
flags for subpd_xmm_xmm: { sse2 }
flags for subps_xmm_m128: { sse }
flags for subps_xmm_xmm: { sse }
flags for subsd_xmm_m64: { sse2 }
flags for subsd_xmm_xmm: { sse2 }
flags for subss_xmm_m32: { sse }
flags for subss_xmm_xmm: { sse }
flags for tzcntw_r16_m16: { bmi1 }
flags for tzcntw_r16_r16: { bmi1 }
flags for tzcntl_r32_m32: { bmi1 }
flags for tzcntl_r32_r32: { bmi1 }
flags for tzcntq_r64_m64: { bmi1 }
flags for tzcntq_r64_r64: { bmi1 }
flags for ucomisd_xmm_m64: { sse2 }
flags for ucomisd_xmm_xmm: { sse2 }
flags for ucomiss_xmm_m32: { sse }
flags for ucomiss_xmm_xmm: { sse }
flags for unpckhpd_xmm_m128: { sse2 }
flags for unpckhpd_xmm_xmm: { sse2 }
flags for unpckhps_xmm_m128: { sse }
flags for unpckhps_xmm_xmm: { sse }
flags for unpcklpd_xmm_m128: { sse2 }
flags for unpcklpd_xmm_xmm: { sse2 }
flags for unpcklps_xmm_m128: { sse }
flags for unpcklps_xmm_xmm: { sse }
flags for vaddpd_xmm_xmm_m128: { avx }
flags for vaddpd_xmm_xmm_xmm: { avx }
flags for vaddpd_ymm_ymm_m256: { avx }
flags for vaddpd_ymm_ymm_ymm: { avx }
flags for vaddps_xmm_xmm_m128: { avx }
flags for vaddps_xmm_xmm_xmm: { avx }
flags for vaddps_ymm_ymm_m256: { avx }
flags for vaddps_ymm_ymm_ymm: { avx }
flags for vaddsd_xmm_xmm_m64: { avx }
flags for vaddsd_xmm_xmm_xmm: { avx }
flags for vaddss_xmm_xmm_m32: { avx }
flags for vaddss_xmm_xmm_xmm: { avx }
flags for vaddsubpd_xmm_xmm_m128: { avx }
flags for vaddsubpd_xmm_xmm_xmm: { avx }
flags for vaddsubpd_ymm_ymm_m256: { avx }
flags for vaddsubpd_ymm_ymm_ymm: { avx }
flags for vaddsubps_xmm_xmm_m128: { avx }
flags for vaddsubps_xmm_xmm_xmm: { avx }
flags for vaddsubps_ymm_ymm_m256: { avx }
flags for vaddsubps_ymm_ymm_ymm: { avx }
flags for vaesdec_xmm_xmm_m128: { aes avx }
flags for vaesdec_xmm_xmm_xmm: { aes avx }
flags for vaesdeclast_xmm_xmm_m128: { aes avx }
flags for vaesdeclast_xmm_xmm_xmm: { aes avx }
flags for vaesenc_xmm_xmm_m128: { aes avx }
flags for vaesenc_xmm_xmm_xmm: { aes avx }
flags for vaesenclast_xmm_xmm_m128: { aes avx }
flags for vaesenclast_xmm_xmm_xmm: { aes avx }
flags for vaesimc_xmm_m128: { aes avx }
flags for vaesimc_xmm_xmm: { aes avx }
flags for vaeskeygenassist_xmm_m128_imm8: { aes avx }
flags for vaeskeygenassist_xmm_xmm_imm8: { aes avx }
flags for vandnpd_xmm_xmm_m128: { avx }
flags for vandnpd_xmm_xmm_xmm: { avx }
flags for vandnpd_ymm_ymm_m256: { avx }
flags for vandnpd_ymm_ymm_ymm: { avx }
flags for vandnps_xmm_xmm_m128: { avx }
flags for vandnps_xmm_xmm_xmm: { avx }
flags for vandnps_ymm_ymm_m256: { avx }
flags for vandnps_ymm_ymm_ymm: { avx }
flags for vandpd_xmm_xmm_m128: { avx }
flags for vandpd_xmm_xmm_xmm: { avx }
flags for vandpd_ymm_ymm_m256: { avx }
flags for vandpd_ymm_ymm_ymm: { avx }
flags for vandps_xmm_xmm_m128: { avx }
flags for vandps_xmm_xmm_xmm: { avx }
flags for vandps_ymm_ymm_m256: { avx }
flags for vandps_ymm_ymm_ymm: { avx }
flags for vblendpd_xmm_xmm_m128_imm8: { avx }
flags for vblendpd_xmm_xmm_xmm_imm8: { avx }
flags for vblendpd_ymm_ymm_m256_imm8: { avx }
flags for vblendpd_ymm_ymm_ymm_imm8: { avx }
flags for vblendps_xmm_xmm_m128_imm8: { avx }
flags for vblendps_xmm_xmm_xmm_imm8: { avx }
flags for vblendps_ymm_ymm_m256_imm8: { avx }
flags for vblendps_ymm_ymm_ymm_imm8: { avx }
flags for vblendvpd_xmm_xmm_m128_xmm: { avx }
flags for vblendvpd_xmm_xmm_xmm_xmm: { avx }
flags for vblendvpd_ymm_ymm_m256_ymm: { avx }
flags for vblendvpd_ymm_ymm_ymm_ymm: { avx }
flags for vblendvps_xmm_xmm_m128_xmm: { avx }
flags for vblendvps_xmm_xmm_xmm_xmm: { avx }
flags for vblendvps_ymm_ymm_m256_ymm: { avx }
flags for vblendvps_ymm_ymm_ymm_ymm: { avx }
flags for vbroadcastf128_ymm_m128: { avx }
flags for vpbroadcasti128_ymm_m128: { avx2 }
flags for vbroadcastsd_ymm_m64: { avx }
flags for vbroadcastsd_ymm_xmm: { avx2 }
flags for vbroadcastss_xmm_m32: { avx }
flags for vbroadcastss_xmm_xmm: { avx2 }
flags for vbroadcastss_ymm_m32: { avx }
flags for vbroadcastss_ymm_xmm: { avx2 }
flags for vcmppd_xmm_xmm_m128_imm8: { avx }
flags for vcmppd_xmm_xmm_xmm_imm8: { avx }
flags for vcmppd_ymm_ymm_m256_imm8: { avx }
flags for vcmppd_ymm_ymm_ymm_imm8: { avx }
flags for vcmpps_xmm_xmm_m128_imm8: { avx }
flags for vcmpps_xmm_xmm_xmm_imm8: { avx }
flags for vcmpps_ymm_ymm_m256_imm8: { avx }
flags for vcmpps_ymm_ymm_ymm_imm8: { avx }
flags for vcmpsd_xmm_xmm_m64_imm8: { avx }
flags for vcmpsd_xmm_xmm_xmm_imm8: { avx }
flags for vcmpss_xmm_xmm_m32_imm8: { avx }
flags for vcmpss_xmm_xmm_xmm_imm8: { avx }
flags for vcomisd_xmm_m64: { avx }
flags for vcomisd_xmm_xmm: { avx }
flags for vcomiss_xmm_m32: { avx }
flags for vcomiss_xmm_xmm: { avx }
flags for vcvtdq2pd_xmm_m64: { avx }
flags for vcvtdq2pd_xmm_xmm: { avx }
flags for vcvtdq2pd_ymm_m128: { avx }
flags for vcvtdq2pd_ymm_ymm: { avx }
flags for vcvtdq2ps_xmm_m128: { avx }
flags for vcvtdq2ps_xmm_xmm: { avx }
flags for vcvtdq2ps_ymm_m256: { avx }
flags for vcvtdq2ps_ymm_ymm: { avx }
flags for vcvtpd2dqx_xmm_m128: { avx }
flags for vcvtpd2dq_xmm_m256: { avx }
flags for vcvtpd2dqx_xmm_xmm: { avx }
flags for vcvtpd2dq_xmm_ymm: { avx }
flags for vcvtpd2ps_xmm_m128: { avx }
flags for vcvtpd2ps_xmm_m256: { avx }
flags for vcvtpd2ps_xmm_xmm: { avx }
flags for vcvtpd2ps_xmm_ymm: { avx }
flags for vcvtph2ps_xmm_m64: { f16c }
flags for vcvtph2ps_xmm_xmm: { f16c }
flags for vcvtph2ps_ymm_m128: { f16c }
flags for vcvtph2ps_ymm_xmm: { f16c }
flags for vcvtps2dq_xmm_m128: { avx }
flags for vcvtps2dq_xmm_xmm: { avx }
flags for vcvtps2dq_ymm_m256: { avx }
flags for vcvtps2dq_ymm_ymm: { avx }
flags for vcvtps2pd_xmm_m64: { avx }
flags for vcvtps2pd_xmm_xmm: { avx }
flags for vcvtps2pd_ymm_m128: { avx }
flags for vcvtps2pd_ymm_xmm: { avx }
flags for vcvtps2ph_m128_ymm_imm8: { f16c }
flags for vcvtps2ph_m64_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_xmm_imm8: { f16c }
flags for vcvtps2ph_xmm_ymm_imm8: { f16c }
flags for vcvtsd2sil_r32_m64: { avx }
flags for vcvtsd2sil_r32_xmm: { avx }
flags for vcvtsd2siq_r64_m64: { avx }
flags for vcvtsd2siq_r64_xmm: { avx }
flags for vcvtsd2ss_xmm_xmm_m64: { avx }
flags for vcvtsd2ss_xmm_xmm_xmm: { avx }
flags for vcvtsi2sdl_xmm_xmm_m32: { avx }
flags for vcvtsi2sdq_xmm_xmm_m64: { avx }
flags for vcvtsi2sdl_xmm_xmm_r32: { avx }
flags for vcvtsi2sdq_xmm_xmm_r64: { avx }
flags for vcvtsi2ssl_xmm_xmm_m32: { avx }
flags for vcvtsi2ssq_xmm_xmm_m64: { avx }
flags for vcvtsi2ssl_xmm_xmm_r32: { avx }
flags for vcvtsi2ssq_xmm_xmm_r64: { avx }
flags for vcvtss2sd_xmm_xmm_m32: { avx }
flags for vcvtss2sd_xmm_xmm_xmm: { avx }
flags for vcvtss2sil_r32_m32: { avx }
flags for vcvtss2sil_r32_xmm: { avx }
flags for vcvtss2siq_r64_m32: { avx }
flags for vcvtss2siq_r64_xmm: { avx }
flags for vcvttpd2dq_xmm_m128: { avx }
flags for vcvttpd2dq_xmm_m256: { avx }
flags for vcvttpd2dq_xmm_xmm: { avx }
flags for vcvttpd2dq_xmm_ymm: { avx }
flags for vcvttps2dq_xmm_m128: { avx }
flags for vcvttps2dq_xmm_xmm: { avx }
flags for vcvttps2dq_ymm_m256: { avx }
flags for vcvttps2dq_ymm_ymm: { avx }
flags for vcvttsd2sil_r32_m64: { avx }
flags for vcvttsd2sil_r32_xmm: { avx }
flags for vcvttsd2siq_r64_m64: { avx }
flags for vcvttsd2siq_r64_xmm: { avx }
flags for vcvttss2sil_r32_m32: { avx }
flags for vcvttss2sil_r32_xmm: { avx }
flags for vcvttss2siq_r64_m32: { avx }
flags for vcvttss2siq_r64_xmm: { avx }
flags for vdivpd_xmm_xmm_m128: { avx }
flags for vdivpd_xmm_xmm_xmm: { avx }
flags for vdivpd_ymm_ymm_m256: { avx }
flags for vdivpd_ymm_ymm_ymm: { avx }
flags for vdivps_xmm_xmm_m128: { avx }
flags for vdivps_xmm_xmm_xmm: { avx }
flags for vdivps_ymm_ymm_m256: { avx }
flags for vdivps_ymm_ymm_ymm: { avx }
flags for vdivsd_xmm_xmm_m64: { avx }
flags for vdivsd_xmm_xmm_xmm: { avx }
flags for vdivss_xmm_xmm_m32: { avx }
flags for vdivss_xmm_xmm_xmm: { avx }
flags for vdppd_xmm_xmm_m128_imm8: { avx }
flags for vdppd_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_xmm_xmm_m128_imm8: { avx }
flags for vdpps_xmm_xmm_xmm_imm8: { avx }
flags for vdpps_ymm_ymm_m256_imm8: { avx }
flags for vdpps_ymm_ymm_ymm_imm8: { avx }
flags for vextractf128_m128_ymm_imm8: { avx }
flags for vextractf128_xmm_ymm_imm8: { avx }
flags for vextracti128_m128_ymm_imm8: { avx2 }
flags for vextracti128_xmm_ymm_imm8: { avx2 }
flags for vextractps_m32_xmm_imm8: { avx }
flags for vextractps_r32_xmm_imm8: { avx }
flags for vfmadd132pd_xmm_xmm_m128: { fma }
flags for vfmadd132pd_xmm_xmm_xmm: { fma }
flags for vfmadd132pd_ymm_ymm_m256: { fma }
flags for vfmadd132pd_ymm_ymm_ymm: { fma }
flags for vfmadd132ps_xmm_xmm_m128: { fma }
flags for vfmadd132ps_xmm_xmm_xmm: { fma }
flags for vfmadd132ps_ymm_ymm_m256: { fma }
flags for vfmadd132ps_ymm_ymm_ymm: { fma }
flags for vfmadd132sd_xmm_xmm_m64: { fma }
flags for vfmadd132sd_xmm_xmm_xmm: { fma }
flags for vfmadd132ss_xmm_xmm_m32: { fma }
flags for vfmadd132ss_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_xmm_xmm_m128: { fma }
flags for vfmadd213pd_xmm_xmm_xmm: { fma }
flags for vfmadd213pd_ymm_ymm_m256: { fma }
flags for vfmadd213pd_ymm_ymm_ymm: { fma }
flags for vfmadd213ps_xmm_xmm_m128: { fma }
flags for vfmadd213ps_xmm_xmm_xmm: { fma }
flags for vfmadd213ps_ymm_ymm_m256: { fma }
flags for vfmadd213ps_ymm_ymm_ymm: { fma }
flags for vfmadd213sd_xmm_xmm_m64: { fma }
flags for vfmadd213sd_xmm_xmm_xmm: { fma }
flags for vfmadd213ss_xmm_xmm_m32: { fma }
flags for vfmadd213ss_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_xmm_xmm_m128: { fma }
flags for vfmadd231pd_xmm_xmm_xmm: { fma }
flags for vfmadd231pd_ymm_ymm_m256: { fma }
flags for vfmadd231pd_ymm_ymm_ymm: { fma }
flags for vfmadd231ps_xmm_xmm_m128: { fma }
flags for vfmadd231ps_xmm_xmm_xmm: { fma }
flags for vfmadd231ps_ymm_ymm_m256: { fma }
flags for vfmadd231ps_ymm_ymm_ymm: { fma }
flags for vfmadd231sd_xmm_xmm_m64: { fma }
flags for vfmadd231sd_xmm_xmm_xmm: { fma }
flags for vfmadd231ss_xmm_xmm_m32: { fma }
flags for vfmadd231ss_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_xmm_xmm_m128: { fma }
flags for vfmaddsub132pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub132pd_ymm_ymm_m256: { fma }
flags for vfmaddsub132pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub132ps_xmm_xmm_m128: { fma }
flags for vfmaddsub132ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub132ps_ymm_ymm_m256: { fma }
flags for vfmaddsub132ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub213pd_xmm_xmm_m128: { fma }
flags for vfmaddsub213pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub213pd_ymm_ymm_m256: { fma }
flags for vfmaddsub213pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub213ps_xmm_xmm_m128: { fma }
flags for vfmaddsub213ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub213ps_ymm_ymm_m256: { fma }
flags for vfmaddsub213ps_ymm_ymm_ymm: { fma }
flags for vfmaddsub231pd_xmm_xmm_m128: { fma }
flags for vfmaddsub231pd_xmm_xmm_xmm: { fma }
flags for vfmaddsub231pd_ymm_ymm_m256: { fma }
flags for vfmaddsub231pd_ymm_ymm_ymm: { fma }
flags for vfmaddsub231ps_xmm_xmm_m128: { fma }
flags for vfmaddsub231ps_xmm_xmm_xmm: { fma }
flags for vfmaddsub231ps_ymm_ymm_m256: { fma }
flags for vfmaddsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub132pd_xmm_xmm_m128: { fma }
flags for vfmsub132pd_xmm_xmm_xmm: { fma }
flags for vfmsub132pd_ymm_ymm_m256: { fma }
flags for vfmsub132pd_ymm_ymm_ymm: { fma }
flags for vfmsub132ps_xmm_xmm_m128: { fma }
flags for vfmsub132ps_xmm_xmm_xmm: { fma }
flags for vfmsub132ps_ymm_ymm_m256: { fma }
flags for vfmsub132ps_ymm_ymm_ymm: { fma }
flags for vfmsub132sd_xmm_xmm_m64: { fma }
flags for vfmsub132sd_xmm_xmm_xmm: { fma }
flags for vfmsub132ss_xmm_xmm_m32: { fma }
flags for vfmsub132ss_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_xmm_xmm_m128: { fma }
flags for vfmsub213pd_xmm_xmm_xmm: { fma }
flags for vfmsub213pd_ymm_ymm_m256: { fma }
flags for vfmsub213pd_ymm_ymm_ymm: { fma }
flags for vfmsub213ps_xmm_xmm_m128: { fma }
flags for vfmsub213ps_xmm_xmm_xmm: { fma }
flags for vfmsub213ps_ymm_ymm_m256: { fma }
flags for vfmsub213ps_ymm_ymm_ymm: { fma }
flags for vfmsub213sd_xmm_xmm_m64: { fma }
flags for vfmsub213sd_xmm_xmm_xmm: { fma }
flags for vfmsub213ss_xmm_xmm_m32: { fma }
flags for vfmsub213ss_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_xmm_xmm_m128: { fma }
flags for vfmsub231pd_xmm_xmm_xmm: { fma }
flags for vfmsub231pd_ymm_ymm_m256: { fma }
flags for vfmsub231pd_ymm_ymm_ymm: { fma }
flags for vfmsub231ps_xmm_xmm_m128: { fma }
flags for vfmsub231ps_xmm_xmm_xmm: { fma }
flags for vfmsub231ps_ymm_ymm_m256: { fma }
flags for vfmsub231ps_ymm_ymm_ymm: { fma }
flags for vfmsub231sd_xmm_xmm_m64: { fma }
flags for vfmsub231sd_xmm_xmm_xmm: { fma }
flags for vfmsub231ss_xmm_xmm_m32: { fma }
flags for vfmsub231ss_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_xmm_xmm_m128: { fma }
flags for vfmsubadd132pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd132pd_ymm_ymm_m256: { fma }
flags for vfmsubadd132pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd132ps_xmm_xmm_m128: { fma }
flags for vfmsubadd132ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd132ps_ymm_ymm_m256: { fma }
flags for vfmsubadd132ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd213pd_xmm_xmm_m128: { fma }
flags for vfmsubadd213pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd213pd_ymm_ymm_m256: { fma }
flags for vfmsubadd213pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd213ps_xmm_xmm_m128: { fma }
flags for vfmsubadd213ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd213ps_ymm_ymm_m256: { fma }
flags for vfmsubadd213ps_ymm_ymm_ymm: { fma }
flags for vfmsubadd231pd_xmm_xmm_m128: { fma }
flags for vfmsubadd231pd_xmm_xmm_xmm: { fma }
flags for vfmsubadd231pd_ymm_ymm_m256: { fma }
flags for vfmsubadd231pd_ymm_ymm_ymm: { fma }
flags for vfmsubadd231ps_xmm_xmm_m128: { fma }
flags for vfmsubadd231ps_xmm_xmm_xmm: { fma }
flags for vfmsubadd231ps_ymm_ymm_m256: { fma }
flags for vfmsubadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132pd_xmm_xmm_m128: { fma }
flags for vfnmadd132pd_xmm_xmm_xmm: { fma }
flags for vfnmadd132pd_ymm_ymm_m256: { fma }
flags for vfnmadd132pd_ymm_ymm_ymm: { fma }
flags for vfnmadd132ps_xmm_xmm_m128: { fma }
flags for vfnmadd132ps_xmm_xmm_xmm: { fma }
flags for vfnmadd132ps_ymm_ymm_m256: { fma }
flags for vfnmadd132ps_ymm_ymm_ymm: { fma }
flags for vfnmadd132sd_xmm_xmm_m64: { fma }
flags for vfnmadd132sd_xmm_xmm_xmm: { fma }
flags for vfnmadd132ss_xmm_xmm_m32: { fma }
flags for vfnmadd132ss_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_xmm_xmm_m128: { fma }
flags for vfnmadd213pd_xmm_xmm_xmm: { fma }
flags for vfnmadd213pd_ymm_ymm_m256: { fma }
flags for vfnmadd213pd_ymm_ymm_ymm: { fma }
flags for vfnmadd213ps_xmm_xmm_m128: { fma }
flags for vfnmadd213ps_xmm_xmm_xmm: { fma }
flags for vfnmadd213ps_ymm_ymm_m256: { fma }
flags for vfnmadd213ps_ymm_ymm_ymm: { fma }
flags for vfnmadd213sd_xmm_xmm_m64: { fma }
flags for vfnmadd213sd_xmm_xmm_xmm: { fma }
flags for vfnmadd213ss_xmm_xmm_m32: { fma }
flags for vfnmadd213ss_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_xmm_xmm_m128: { fma }
flags for vfnmadd231pd_xmm_xmm_xmm: { fma }
flags for vfnmadd231pd_ymm_ymm_m256: { fma }
flags for vfnmadd231pd_ymm_ymm_ymm: { fma }
flags for vfnmadd231ps_xmm_xmm_m128: { fma }
flags for vfnmadd231ps_xmm_xmm_xmm: { fma }
flags for vfnmadd231ps_ymm_ymm_m256: { fma }
flags for vfnmadd231ps_ymm_ymm_ymm: { fma }
flags for vfnmadd231sd_xmm_xmm_m64: { fma }
flags for vfnmadd231sd_xmm_xmm_xmm: { fma }
flags for vfnmadd231ss_xmm_xmm_m32: { fma }
flags for vfnmadd231ss_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_xmm_xmm_m128: { fma }
flags for vfnmsub132pd_xmm_xmm_xmm: { fma }
flags for vfnmsub132pd_ymm_ymm_m256: { fma }
flags for vfnmsub132pd_ymm_ymm_ymm: { fma }
flags for vfnmsub132ps_xmm_xmm_m128: { fma }
flags for vfnmsub132ps_xmm_xmm_xmm: { fma }
flags for vfnmsub132ps_ymm_ymm_m256: { fma }
flags for vfnmsub132ps_ymm_ymm_ymm: { fma }
flags for vfnmsub132sd_xmm_xmm_m64: { fma }
flags for vfnmsub132sd_xmm_xmm_xmm: { fma }
flags for vfnmsub132ss_xmm_xmm_m32: { fma }
flags for vfnmsub132ss_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_xmm_xmm_m128: { fma }
flags for vfnmsub213pd_xmm_xmm_xmm: { fma }
flags for vfnmsub213pd_ymm_ymm_m256: { fma }
flags for vfnmsub213pd_ymm_ymm_ymm: { fma }
flags for vfnmsub213ps_xmm_xmm_m128: { fma }
flags for vfnmsub213ps_xmm_xmm_xmm: { fma }
flags for vfnmsub213ps_ymm_ymm_m256: { fma }
flags for vfnmsub213ps_ymm_ymm_ymm: { fma }
flags for vfnmsub213sd_xmm_xmm_m64: { fma }
flags for vfnmsub213sd_xmm_xmm_xmm: { fma }
flags for vfnmsub213ss_xmm_xmm_m32: { fma }
flags for vfnmsub213ss_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_xmm_xmm_m128: { fma }
flags for vfnmsub231pd_xmm_xmm_xmm: { fma }
flags for vfnmsub231pd_ymm_ymm_m256: { fma }
flags for vfnmsub231pd_ymm_ymm_ymm: { fma }
flags for vfnmsub231ps_xmm_xmm_m128: { fma }
flags for vfnmsub231ps_xmm_xmm_xmm: { fma }
flags for vfnmsub231ps_ymm_ymm_m256: { fma }
flags for vfnmsub231ps_ymm_ymm_ymm: { fma }
flags for vfnmsub231sd_xmm_xmm_m64: { fma }
flags for vfnmsub231sd_xmm_xmm_xmm: { fma }
flags for vfnmsub231ss_xmm_xmm_m32: { fma }
flags for vfnmsub231ss_xmm_xmm_xmm: { fma }
flags for vgatherdpd_xmm_m32_xmm: { avx2 }
flags for vgatherdpd_ymm_m32_ymm: { avx2 }
flags for vgatherdps_xmm_m32_xmm: { avx2 }
flags for vgatherdps_ymm_m32_ymm: { avx2 }
flags for vgatherqpd_xmm_m64_xmm: { avx2 }
flags for vgatherqpd_ymm_m64_ymm: { avx2 }
flags for vgatherqps_xmm_m64_xmm: { avx2 }
flags for vgatherqps_xmm_m64_xmm_1: { avx2 }
flags for vhaddpd_xmm_xmm_m128: { avx }
flags for vhaddpd_xmm_xmm_xmm: { avx }
flags for vhaddpd_ymm_ymm_m256: { avx }
flags for vhaddpd_ymm_ymm_ymm: { avx }
flags for vhaddps_xmm_xmm_m128: { avx }
flags for vhaddps_xmm_xmm_xmm: { avx }
flags for vhaddps_ymm_ymm_m256: { avx }
flags for vhaddps_ymm_ymm_ymm: { avx }
flags for vhsubpd_xmm_xmm_m128: { avx }
flags for vhsubpd_xmm_xmm_xmm: { avx }
flags for vhsubpd_ymm_ymm_m256: { avx }
flags for vhsubpd_ymm_ymm_ymm: { avx }
flags for vhsubps_xmm_xmm_m128: { avx }
flags for vhsubps_xmm_xmm_xmm: { avx }
flags for vhsubps_ymm_ymm_m256: { avx }
flags for vhsubps_ymm_ymm_ymm: { avx }
flags for vinsertf128_ymm_ymm_m128_imm8: { avx }
flags for vinsertf128_ymm_ymm_xmm_imm8: { avx }
flags for vinserti128_ymm_ymm_m128_imm8: { avx2 }
flags for vinserti128_ymm_ymm_xmm_imm8: { avx2 }
flags for vinsertps_xmm_xmm_m32_imm8: { avx }
flags for vinsertps_xmm_xmm_xmm_imm8: { avx }
flags for vlddqu_xmm_m128: { avx }
flags for vlddqu_ymm_m256: { avx }
flags for vmaskmovpd_m128_xmm_xmm: { avx }
flags for vmaskmovpd_m256_ymm_ymm: { avx }
flags for vmaskmovpd_xmm_xmm_m128: { avx }
flags for vmaskmovpd_ymm_ymm_m256: { avx }
flags for vmaskmovps_m128_xmm_xmm: { avx }
flags for vmaskmovps_m256_ymm_ymm: { avx }
flags for vmaskmovps_xmm_xmm_m128: { avx }
flags for vmaskmovps_ymm_ymm_m256: { avx }
flags for vmaxpd_xmm_xmm_m128: { avx }
flags for vmaxpd_xmm_xmm_xmm: { avx }
flags for vmaxpd_ymm_ymm_m256: { avx }
flags for vmaxpd_ymm_ymm_ymm: { avx }
flags for vmaxps_xmm_xmm_m128: { avx }
flags for vmaxps_xmm_xmm_xmm: { avx }
flags for vmaxps_ymm_ymm_m256: { avx }
flags for vmaxps_ymm_ymm_ymm: { avx }
flags for vmaxsd_xmm_xmm_m64: { avx }
flags for vmaxsd_xmm_xmm_xmm: { avx }
flags for vmaxss_xmm_xmm_m32: { avx }
flags for vmaxss_xmm_xmm_xmm: { avx }
flags for vminpd_xmm_xmm_m128: { avx }
flags for vminpd_xmm_xmm_xmm: { avx }
flags for vminpd_ymm_ymm_m256: { avx }
flags for vminpd_ymm_ymm_ymm: { avx }
flags for vminps_xmm_xmm_m128: { avx }
flags for vminps_xmm_xmm_xmm: { avx }
flags for vminps_ymm_ymm_m256: { avx }
flags for vminps_ymm_ymm_ymm: { avx }
flags for vminsd_xmm_xmm_m64: { avx }
flags for vminsd_xmm_xmm_xmm: { avx }
flags for vminss_xmm_xmm_m32: { avx }
flags for vminss_xmm_xmm_xmm: { avx }
flags for vmovapd_m128_xmm: { avx }
flags for vmovapd_m256_ymm: { avx }
flags for vmovapd_xmm_m128: { avx }
flags for vmovapd_xmm_xmm: { avx }
flags for vmovapd_xmm_xmm_1: { avx }
flags for vmovapd_ymm_m256: { avx }
flags for vmovapd_ymm_ymm: { avx }
flags for vmovapd_ymm_ymm_1: { avx }
flags for vmovaps_m128_xmm: { avx }
flags for vmovaps_m256_ymm: { avx }
flags for vmovaps_xmm_m128: { avx }
flags for vmovaps_xmm_xmm: { avx }
flags for vmovaps_xmm_xmm_1: { avx }
flags for vmovaps_ymm_m256: { avx }
flags for vmovaps_ymm_ymm: { avx }
flags for vmovaps_ymm_ymm_1: { avx }
flags for vmovd_m32_xmm: { avx }
flags for vmovd_r32_xmm: { avx }
flags for vmovd_xmm_m32: { avx }
flags for vmovd_xmm_r32: { avx }
flags for vmovddup_xmm_m64: { avx }
flags for vmovddup_xmm_xmm: { avx }
flags for vmovddup_ymm_m256: { avx }
flags for vmovddup_ymm_ymm: { avx }
flags for vmovdqa_m128_xmm: { avx }
flags for vmovdqa_m256_ymm: { avx }
flags for vmovdqa_xmm_m128: { avx }
flags for vmovdqa_xmm_xmm: { avx }
flags for vmovdqa_xmm_xmm_1: { avx }
flags for vmovdqa_ymm_m256: { avx }
flags for vmovdqa_ymm_ymm: { avx }
flags for vmovdqa_ymm_ymm_1: { avx }
flags for vmovdqu_m128_xmm: { avx }
flags for vmovdqu_m256_ymm: { avx }
flags for vmovdqu_xmm_m128: { avx }
flags for vmovdqu_xmm_xmm: { avx }
flags for vmovdqu_xmm_xmm_1: { avx }
flags for vmovdqu_ymm_m256: { avx }
flags for vmovdqu_ymm_ymm: { avx }
flags for vmovdqu_ymm_ymm_1: { avx }
flags for vmovhlps_xmm_xmm_xmm: { avx }
flags for vmovhpd_m64_xmm: { avx }
flags for vmovhpd_xmm_xmm_m64: { avx }
flags for vmovhps_m64_xmm: { avx }
flags for vmovhps_xmm_xmm_m64: { avx }
flags for vmovlhps_xmm_xmm_xmm: { avx }
flags for vmovlpd_m64_xmm: { avx }
flags for vmovlpd_xmm_xmm_m64: { avx }
flags for vmovlps_m64_xmm: { avx }
flags for vmovlps_xmm_xmm_m64: { avx }
flags for vmovmskpd_r32_xmm: { avx }
flags for vmovmskpd_r32_ymm: { avx }
flags for vmovmskpd_r64_xmm: { avx }
flags for vmovmskpd_r64_ymm: { avx }
flags for vmovmskps_r32_xmm: { avx }
flags for vmovmskps_r32_ymm: { avx }
flags for vmovmskps_r64_xmm: { avx }
flags for vmovmskps_r64_ymm: { avx }
flags for vmovntdqa_m128_xmm: { avx }
flags for vmovntdqa_xmm_m128: { avx }
flags for vmovntdqa_ymm_m256: { avx2 }
flags for vmovntpd_m128_xmm: { avx }
flags for vmovntpd_m256_ymm: { avx }
flags for vmovntps_m128_xmm: { avx }
flags for vmovntps_m256_ymm: { avx }
flags for vmovq_m64_xmm: { avx }
flags for vmovq_m64_xmm_1: { avx }
flags for vmovq_r64_xmm: { avx }
flags for vmovq_xmm_m64: { avx }
flags for vmovq_xmm_m64_1: { avx }
flags for vmovq_xmm_r64: { avx }
flags for vmovq_xmm_xmm: { avx }
flags for vmovq_xmm_xmm_1: { avx }
flags for vmovsd_m64_xmm: { avx }
flags for vmovsd_xmm_m64: { avx }
flags for vmovsd_xmm_xmm_xmm: { avx }
flags for vmovsd_xmm_xmm_xmm_1: { avx }
flags for vmovshdup_xmm_m128: { avx }
flags for vmovshdup_xmm_xmm: { avx }
flags for vmovshdup_ymm_m256: { avx }
flags for vmovshdup_ymm_ymm: { avx }
flags for vmovsldup_xmm_m128: { avx }
flags for vmovsldup_xmm_xmm: { avx }
flags for vmovsldup_ymm_m256: { avx }
flags for vmovsldup_ymm_ymm: { avx }
flags for vmovss_m32_xmm: { avx }
flags for vmovss_xmm_m32: { avx }
flags for vmovss_xmm_xmm_xmm: { avx }
flags for vmovss_xmm_xmm_xmm_1: { avx }
flags for vmovupd_m128_xmm: { avx }
flags for vmovupd_m256_ymm: { avx }
flags for vmovupd_xmm_m128: { avx }
flags for vmovupd_xmm_xmm: { avx }
flags for vmovupd_xmm_xmm_1: { avx }
flags for vmovupd_ymm_m256: { avx }
flags for vmovupd_ymm_ymm: { avx }
flags for vmovupd_ymm_ymm_1: { avx }
flags for vmovups_m128_xmm: { avx }
flags for vmovups_m256_ymm: { avx }
flags for vmovups_xmm_m128: { avx }
flags for vmovups_xmm_xmm: { avx }
flags for vmovups_xmm_xmm_1: { avx }
flags for vmovups_ymm_m256: { avx }
flags for vmovups_ymm_ymm: { avx }
flags for vmovups_ymm_ymm_1: { avx }
flags for vmpsadbw_xmm_xmm_m128_imm8: { avx }
flags for vmpsadbw_xmm_xmm_xmm_imm8: { avx }
flags for vmpsadbw_ymm_ymm_m256_imm8: { avx2 }
flags for vmpsadbw_ymm_ymm_ymm_imm8: { avx2 }
flags for vmulpd_xmm_xmm_m128: { avx }
flags for vmulpd_xmm_xmm_xmm: { avx }
flags for vmulpd_ymm_ymm_m256: { avx }
flags for vmulpd_ymm_ymm_ymm: { avx }
flags for vmulps_xmm_xmm_m128: { avx }
flags for vmulps_xmm_xmm_xmm: { avx }
flags for vmulps_ymm_ymm_m256: { avx }
flags for vmulps_ymm_ymm_ymm: { avx }
flags for vmulsd_xmm_xmm_m64: { avx }
flags for vmulsd_xmm_xmm_xmm: { avx }
flags for vmulss_xmm_xmm_m32: { avx }
flags for vmulss_xmm_xmm_xmm: { avx }
flags for vorpd_xmm_xmm_m128: { avx }
flags for vorpd_xmm_xmm_xmm: { avx }
flags for vorpd_ymm_ymm_m256: { avx }
flags for vorpd_ymm_ymm_ymm: { avx }
flags for vorps_xmm_xmm_m128: { avx }
flags for vorps_xmm_xmm_xmm: { avx }
flags for vorps_ymm_ymm_m256: { avx }
flags for vorps_ymm_ymm_ymm: { avx }
flags for vpabsb_xmm_m128: { avx }
flags for vpabsb_xmm_xmm: { avx }
flags for vpabsb_ymm_m256: { avx2 }
flags for vpabsb_ymm_ymm: { avx2 }
flags for vpabsd_xmm_m128: { avx }
flags for vpabsd_xmm_xmm: { avx }
flags for vpabsd_ymm_m256: { avx2 }
flags for vpabsd_ymm_ymm: { avx2 }
flags for vpabsw_xmm_m128: { avx }
flags for vpabsw_xmm_xmm: { avx }
flags for vpabsw_ymm_m256: { avx2 }
flags for vpabsw_ymm_ymm: { avx2 }
flags for vpackssdw_xmm_xmm_m128: { avx }
flags for vpackssdw_xmm_xmm_xmm: { avx }
flags for vpackssdw_ymm_ymm_m256: { avx2 }
flags for vpackssdw_ymm_ymm_ymm: { avx2 }
flags for vpacksswb_xmm_xmm_m128: { avx }
flags for vpacksswb_xmm_xmm_xmm: { avx }
flags for vpacksswb_ymm_ymm_m256: { avx2 }
flags for vpacksswb_ymm_ymm_ymm: { avx2 }
flags for vpackusdw_xmm_xmm_m128: { avx }
flags for vpackusdw_xmm_xmm_xmm: { avx }
flags for vpackusdw_ymm_ymm_m256: { avx2 }
flags for vpackusdw_ymm_ymm_ymm: { avx2 }
flags for vpackuswb_xmm_xmm_m128: { avx }
flags for vpackuswb_xmm_xmm_xmm: { avx }
flags for vpackuswb_ymm_ymm_m256: { avx2 }
flags for vpackuswb_ymm_ymm_ymm: { avx2 }
flags for vpaddb_xmm_xmm_m128: { avx }
flags for vpaddb_xmm_xmm_xmm: { avx }
flags for vpaddb_ymm_ymm_m256: { avx2 }
flags for vpaddb_ymm_ymm_ymm: { avx2 }
flags for vpaddd_xmm_xmm_m128: { avx }
flags for vpaddd_xmm_xmm_xmm: { avx }
flags for vpaddd_ymm_ymm_m256: { avx2 }
flags for vpaddd_ymm_ymm_ymm: { avx2 }
flags for vpaddq_xmm_xmm_m128: { avx }
flags for vpaddq_xmm_xmm_xmm: { avx }
flags for vpaddq_ymm_ymm_m256: { avx2 }
flags for vpaddq_ymm_ymm_ymm: { avx2 }
flags for vpaddsb_xmm_xmm_m128: { avx }
flags for vpaddsb_xmm_xmm_xmm: { avx }
flags for vpaddsb_ymm_ymm_m256: { avx2 }
flags for vpaddsb_ymm_ymm_ymm: { avx2 }
flags for vpaddsw_xmm_xmm_m128: { avx }
flags for vpaddsw_xmm_xmm_xmm: { avx }
flags for vpaddsw_ymm_ymm_m256: { avx2 }
flags for vpaddsw_ymm_ymm_ymm: { avx2 }
flags for vpaddusb_xmm_xmm_m128: { avx }
flags for vpaddusb_xmm_xmm_xmm: { avx }
flags for vpaddusb_ymm_ymm_m256: { avx2 }
flags for vpaddusb_ymm_ymm_ymm: { avx2 }
flags for vpaddusw_xmm_xmm_m128: { avx }
flags for vpaddusw_xmm_xmm_xmm: { avx }
flags for vpaddusw_ymm_ymm_m256: { avx2 }
flags for vpaddusw_ymm_ymm_ymm: { avx2 }
flags for vpaddw_xmm_xmm_m128: { avx }
flags for vpaddw_xmm_xmm_xmm: { avx }
flags for vpaddw_ymm_ymm_m256: { avx2 }
flags for vpaddw_ymm_ymm_ymm: { avx2 }
flags for vpalignr_xmm_xmm_m128_imm8: { avx }
flags for vpalignr_xmm_xmm_xmm_imm8: { avx }
flags for vpalignr_ymm_ymm_m256_imm8: { avx2 }
flags for vpalignr_ymm_ymm_ymm_imm8: { avx2 }
flags for vpand_xmm_xmm_m128: { avx }
flags for vpand_xmm_xmm_xmm: { avx }
flags for vpand_ymm_ymm_m256: { avx2 }
flags for vpand_ymm_ymm_ymm: { avx2 }
flags for vpandn_xmm_xmm_m128: { avx }
flags for vpandn_xmm_xmm_xmm: { avx }
flags for vpandn_ymm_ymm_m256: { avx2 }
flags for vpandn_ymm_ymm_ymm: { avx2 }
flags for vpavgb_xmm_xmm_m128: { avx }
flags for vpavgb_xmm_xmm_xmm: { avx }
flags for vpavgb_ymm_ymm_m256: { avx2 }
flags for vpavgb_ymm_ymm_ymm: { avx2 }
flags for vpavgw_xmm_xmm_m128: { avx }
flags for vpavgw_xmm_xmm_xmm: { avx }
flags for vpavgw_ymm_ymm_m256: { avx2 }
flags for vpavgw_ymm_ymm_ymm: { avx2 }
flags for vpblendd_xmm_xmm_m128_imm8: { avx2 }
flags for vpblendd_xmm_xmm_xmm_imm8: { avx2 }
flags for vpblendd_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendd_ymm_ymm_ymm_imm8: { avx2 }
flags for vpblendvb_xmm_xmm_m128_xmm: { avx }
flags for vpblendvb_xmm_xmm_xmm_xmm: { avx }
flags for vpblendvb_ymm_ymm_m256_ymm: { avx2 }
flags for vpblendvb_ymm_ymm_ymm_ymm: { avx2 }
flags for vpblendw_xmm_xmm_m128_imm8: { avx }
flags for vpblendw_xmm_xmm_xmm_imm8: { avx }
flags for vpblendw_ymm_ymm_m256_imm8: { avx2 }
flags for vpblendw_ymm_ymm_ymm_imm8: { avx2 }
flags for vpbroadcastb_xmm_m8: { avx2 }
flags for vpbroadcastb_xmm_xmm: { avx2 }
flags for vpbroadcastb_ymm_m8: { avx2 }
flags for vpbroadcastb_ymm_xmm: { avx2 }
flags for vpbroadcastd_xmm_m32: { avx2 }
flags for vpbroadcastd_xmm_xmm: { avx2 }
flags for vpbroadcastd_ymm_m32: { avx2 }
flags for vpbroadcastd_ymm_xmm: { avx2 }
flags for vpbroadcastq_xmm_m64: { avx2 }
flags for vpbroadcastq_xmm_xmm: { avx2 }
flags for vpbroadcastq_ymm_m64: { avx2 }
flags for vpbroadcastq_ymm_xmm: { avx2 }
flags for vpbroadcastw_xmm_m16: { avx2 }
flags for vpbroadcastw_xmm_xmm: { avx2 }
flags for vpbroadcastw_ymm_m16: { avx2 }
flags for vpbroadcastw_ymm_xmm: { avx2 }
flags for vpclmulqdq_xmm_xmm_m128_imm8: { pclmulqdq avx }
flags for vpclmulqdq_xmm_xmm_xmm_imm8: { pclmulqdq avx }
flags for vpcmpeqb_xmm_xmm_m128: { avx }
flags for vpcmpeqb_xmm_xmm_xmm: { avx }
flags for vpcmpeqb_ymm_ymm_m256: { avx2 }
flags for vpcmpeqb_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqd_xmm_xmm_m128: { avx }
flags for vpcmpeqd_xmm_xmm_xmm: { avx }
flags for vpcmpeqd_ymm_ymm_m256: { avx2 }
flags for vpcmpeqd_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqq_xmm_xmm_m128: { avx }
flags for vpcmpeqq_xmm_xmm_xmm: { avx }
flags for vpcmpeqq_ymm_ymm_m256: { avx2 }
flags for vpcmpeqq_ymm_ymm_ymm: { avx2 }
flags for vpcmpeqw_xmm_xmm_m128: { avx }
flags for vpcmpeqw_xmm_xmm_xmm: { avx }
flags for vpcmpeqw_ymm_ymm_m256: { avx2 }
flags for vpcmpeqw_ymm_ymm_ymm: { avx2 }
flags for vpcmpestri_xmm_m128_imm8: { avx }
flags for vpcmpestri_xmm_xmm_imm8: { avx }
flags for vpcmpestrm_xmm_m128_imm8: { avx }
flags for vpcmpestrm_xmm_xmm_imm8: { avx }
flags for vpcmpgtb_xmm_xmm_m128: { avx }
flags for vpcmpgtb_xmm_xmm_xmm: { avx }
flags for vpcmpgtb_ymm_ymm_m256: { avx }
flags for vpcmpgtb_ymm_ymm_ymm: { avx }
flags for vpcmpgtd_xmm_xmm_m128: { avx }
flags for vpcmpgtd_xmm_xmm_xmm: { avx }
flags for vpcmpgtd_ymm_ymm_m256: { avx2 }
flags for vpcmpgtd_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtq_xmm_xmm_m128: { avx }
flags for vpcmpgtq_xmm_xmm_xmm: { avx }
flags for vpvmpgtq_ymm_ymm_m256: { avx2 }
flags for vpvmpgtq_ymm_ymm_ymm: { avx2 }
flags for vpcmpgtw_xmm_xmm_m128: { avx }
flags for vpcmpgtw_xmm_xmm_xmm: { avx }
flags for vpcmpgtw_ymm_ymm_m256: { avx2 }
flags for vpcmpgtw_ymm_ymm_ymm: { avx2 }
flags for vpcmpistri_xmm_m128_imm8: { avx }
flags for vpcmpistri_xmm_xmm_imm8: { avx }
flags for vpcmpistrm_xmm_m128_imm8: { avx }
flags for vpcmpistrm_xmm_xmm_imm8: { avx }
flags for vperm2f128_ymm_ymm_m256_imm8: { avx }
flags for vperm2f128_ymm_ymm_ymm_imm8: { avx }
flags for vperm2i128_ymm_ymm_m256_imm8: { avx2 }
flags for vperm2i128_ymm_ymm_ymm_imm8: { avx2 }
flags for vpermd_ymm_ymm_m256: { avx2 }
flags for vpermd_ymm_ymm_ymm: { avx2 }
flags for vpermilpd_xmm_m128_imm8: { avx }
flags for vpermilpd_xmm_xmm_imm8: { avx }
flags for vpermilpd_xmm_xmm_m128: { avx }
flags for vpermilpd_xmm_xmm_xmm: { avx }
flags for vpermilpd_ymm_m256_imm8: { avx }
flags for vpermilpd_ymm_ymm_imm8: { avx }
flags for vpermilpd_ymm_ymm_m256: { avx }
flags for vpermilpd_ymm_ymm_ymm: { avx }
flags for vpermilps_xmm_m128_imm8: { avx }
flags for vpermilps_xmm_xmm_imm8: { avx }
flags for vpermilps_xmm_xmm_m128: { avx }
flags for vpermilps_xmm_xmm_xmm: { avx }
flags for vpermilps_ymm_m256_imm8: { avx }
flags for vpermilps_ymm_ymm_imm8: { avx }
flags for vpermilps_ymm_ymm_m256: { avx }
flags for vpermilps_ymm_ymm_ymm: { avx }
flags for vpermpd_ymm_m256_imm8: { avx2 }
flags for vpermpd_ymm_ymm_imm8: { avx2 }
flags for vpermps_ymm_ymm_m256: { avx2 }
flags for vpermps_ymm_ymm_ymm: { avx2 }
flags for vpermq_ymm_m256_imm8: { avx2 }
flags for vpermq_ymm_ymm_imm8: { avx2 }
flags for vpextrb_m8_xmm_imm8: { avx }
flags for vpextrb_r32_xmm_imm8: { avx }
flags for vpextrb_r64_xmm_imm8: { avx }
flags for vpextrd_m32_xmm_imm8: { avx }
flags for vpextrd_r32_xmm_imm8: { avx }
flags for vpextrq_m64_xmm_imm8: { avx }
flags for vpextrq_r64_xmm_imm8: { avx }
flags for vpextrw_m16_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8: { avx }
flags for vpextrw_r32_xmm_imm8_1: { avx }
flags for vpextrw_r64_xmm_imm8: { avx }
flags for vpextrw_r64_xmm_imm8_1: { avx }
flags for vpgatherdd_xmm_m32_xmm: { avx2 }
flags for vpgatherdd_ymm_m32_ymm: { avx2 }
flags for vpgatherdq_xmm_m32_xmm: { avx2 }
flags for vpgatherdq_ymm_m32_ymm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm: { avx2 }
flags for vpgatherqd_xmm_m64_xmm_1: { avx2 }
flags for vpgatherqq_xmm_m64_xmm: { avx2 }
flags for vpgatherqq_ymm_m64_ymm: { avx2 }
flags for vphaddd_xmm_xmm_m128: { avx }
flags for vphaddd_xmm_xmm_xmm: { avx }
flags for vphaddd_ymm_ymm_m256: { avx2 }
flags for vphaddd_ymm_ymm_ymm: { avx2 }
flags for vphaddsw_xmm_xmm_m128: { avx }
flags for vphaddsw_xmm_xmm_xmm: { avx }
flags for vphaddsw_ymm_ymm_m256: { avx2 }
flags for vphaddsw_ymm_ymm_ymm: { avx2 }
flags for vphaddw_xmm_xmm_m128: { avx }
flags for vphaddw_xmm_xmm_xmm: { avx }
flags for vphaddw_ymm_ymm_m256: { avx2 }
flags for vphaddw_ymm_ymm_ymm: { avx2 }
flags for vphminposuw_xmm_m128: { avx }
flags for vphminposuw_xmm_xmm: { avx }
flags for vphsubd_xmm_xmm_m128: { avx }
flags for vphsubd_xmm_xmm_xmm: { avx }
flags for vphsubd_ymm_ymm_m256: { avx2 }
flags for vphsubd_ymm_ymm_ymm: { avx2 }
flags for vphsubsw_xmm_xmm_m128: { avx }
flags for vphsubsw_xmm_xmm_xmm: { avx }
flags for vphsubsw_ymm_ymm_m256: { avx2 }
flags for vphsubsw_ymm_ymm_ymm: { avx2 }
flags for vphsubw_xmm_xmm_m128: { avx }
flags for vphsubw_xmm_xmm_xmm: { avx }
flags for vphsubw_ymm_ymm_m256: { avx2 }
flags for vphsubw_ymm_ymm_ymm: { avx2 }
flags for vpinsrb_xmm_xmm_m8_imm8: { avx }
flags for vpinsrb_xmm_xmm_r32_imm8: { avx }
flags for vpinsrd_xmm_xmm_m32_imm8: { avx }
flags for vpinsrd_xmm_xmm_r32_imm8: { avx }
flags for vpinsrq_xmm_xmm_m64_imm8: { avx }
flags for vpinsrq_xmm_xmm_r64_imm8: { avx }
flags for vpinsrw_xmm_xmm_m16_imm8: { avx }
flags for vpinsrw_xmm_xmm_r32_imm8: { avx }
flags for vpmaddubsw_xmm_xmm_m128: { avx }
flags for vpmaddubsw_xmm_xmm_xmm: { avx }
flags for vpmaddubsw_ymm_ymm_m256: { avx2 }
flags for vpmaddubsw_ymm_ymm_ymm: { avx2 }
flags for vpmaddwd_xmm_xmm_m128: { avx }
flags for vpmaddwd_xmm_xmm_xmm: { avx }
flags for vpmaddwd_ymm_ymm_m256: { avx2 }
flags for vpmaddwd_ymm_ymm_ymm: { avx2 }
flags for vpmaskmovd_m128_xmm_xmm: { avx2 }
flags for vpmaskmovd_m256_ymm_ymm: { avx2 }
flags for vpmaskmovd_xmm_xmm_m128: { avx2 }
flags for vpmaskmovd_ymm_ymm_m256: { avx2 }
flags for vpmaskmovq_m128_xmm_xmm: { avx2 }
flags for vpmaskmovq_m256_ymm_ymm: { avx2 }
flags for vpmaskmovq_xmm_xmm_m128: { avx2 }
flags for vpmaskmovq_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_xmm_xmm_m128: { avx }
flags for vpmaxsb_xmm_xmm_xmm: { avx }
flags for vpmaxsb_ymm_ymm_m256: { avx2 }
flags for vpmaxsb_ymm_ymm_ymm: { avx2 }
flags for vpmaxsd_xmm_xmm_m128: { avx }
flags for vpmaxsd_xmm_xmm_xmm: { avx }
flags for vpmaxsd_ymm_ymm_m256: { avx2 }
flags for vpmaxsd_ymm_ymm_ymm: { avx2 }
flags for vpmaxsw_xmm_xmm_m128: { avx }
flags for vpmaxsw_xmm_xmm_xmm: { avx }
flags for vpmaxsw_ymm_ymm_m256: { avx2 }
flags for vpmaxsw_ymm_ymm_ymm: { avx2 }
flags for vpmaxub_xmm_xmm_m128: { avx }
flags for vpmaxub_xmm_xmm_xmm: { avx }
flags for vpmaxub_ymm_ymm_m256: { avx2 }
flags for vpmaxub_ymm_ymm_ymm: { avx2 }
flags for vpmaxud_xmm_xmm_m128: { avx }
flags for vpmaxud_xmm_xmm_xmm: { avx }
flags for vpmaxud_ymm_ymm_m256: { avx2 }
flags for vpmaxud_ymm_ymm_ymm: { avx2 }
flags for vpmaxuw_xmm_xmm_m128: { avx }
flags for vpmaxuw_xmm_xmm_xmm: { avx }
flags for vpmaxuw_ymm_ymm_m256: { avx2 }
flags for vpmaxuw_ymm_ymm_ymm: { avx2 }
flags for vpminsb_xmm_xmm_m128: { avx }
flags for vpminsb_xmm_xmm_xmm: { avx }
flags for vpminsb_ymm_ymm_m256: { avx2 }
flags for vpminsb_ymm_ymm_ymm: { avx2 }
flags for vpminsd_xmm_xmm_m128: { avx }
flags for vpminsd_xmm_xmm_xmm: { avx }
flags for vpminsd_ymm_ymm_m256: { avx2 }
flags for vpminsd_ymm_ymm_ymm: { avx2 }
flags for vpminsw_xmm_xmm_m128: { avx }
flags for vpminsw_xmm_xmm_xmm: { avx }
flags for vpminub_xmm_xmm_m128: { avx }
flags for vpminub_xmm_xmm_xmm: { avx }
flags for vpminub_ymm_ymm_m256: { avx2 }
flags for vpminub_ymm_ymm_ymm: { avx2 }
flags for vpminud_xmm_xmm_m128: { avx }
flags for vpminud_xmm_xmm_xmm: { avx }
flags for vpminud_ymm_ymm_m256: { avx2 }
flags for vpminud_ymm_ymm_ymm: { avx2 }
flags for vpminuw_xmm_xmm_m128: { avx }
flags for vpminuw_xmm_xmm_xmm: { avx }
flags for vpminuw_ymm_ymm_m256: { avx2 }
flags for vpminuw_ymm_ymm_ymm: { avx2 }
flags for vpmovmskb_r32_xmm: { avx }
flags for vpmovmskb_r32_ymm: { avx2 }
flags for vpmovmskb_r64_xmm: { avx }
flags for vpmovmskb_r64_ymm: { avx2 }
flags for vpmovsxbd_xmm_m32: { avx }
flags for vpmovsxbd_xmm_xmm: { avx }
flags for vpmovsxbd_ymm_m64: { avx2 }
flags for vpmovsxbd_ymm_xmm: { avx2 }
flags for vpmovsxbq_xmm_m16: { avx }
flags for vpmovsxbq_xmm_xmm: { avx }
flags for vpmovsxbq_ymm_m32: { avx2 }
flags for vpmovsxbq_ymm_xmm: { avx2 }
flags for vpmovsxbw_xmm_m64: { avx }
flags for vpmovsxbw_xmm_xmm: { avx }
flags for vpmovsxbw_ymm_m128: { avx2 }
flags for vpmovsxbw_ymm_xmm: { avx2 }
flags for vpmovsxdq_xmm_m64: { avx }
flags for vpmovsxdq_xmm_xmm: { avx }
flags for vpmovsxdq_ymm_m128: { avx2 }
flags for vpmovsxdq_ymm_xmm: { avx2 }
flags for vpmovsxwd_xmm_m64: { avx }
flags for vpmovsxwd_xmm_xmm: { avx }
flags for vpmovsxwd_ymm_m128: { avx2 }
flags for vpmovsxwd_ymm_xmm: { avx2 }
flags for vpmovsxwq_xmm_m32: { avx }
flags for vpmovsxwq_xmm_xmm: { avx }
flags for vpmovsxwq_ymm_m64: { avx2 }
flags for vpmovsxwq_ymm_xmm: { avx2 }
flags for vpmovzxbd_xmm_m32: { avx }
flags for vpmovzxbd_xmm_xmm: { avx }
flags for vpmovzxbd_ymm_m64: { avx2 }
flags for vpmovzxbd_ymm_xmm: { avx2 }
flags for vpmovzxbq_xmm_m16: { avx }
flags for vpmovzxbq_xmm_xmm: { avx }
flags for vpmovzxbq_ymm_m32: { avx2 }
flags for vpmovzxbq_ymm_xmm: { avx2 }
flags for vpmovzxbw_xmm_m64: { avx }
flags for vpmovzxbw_xmm_xmm: { avx }
flags for vpmovzxbw_ymm_m128: { avx2 }
flags for vpmovzxbw_ymm_xmm: { avx2 }
flags for vpmovzxdq_xmm_m64: { avx }
flags for vpmovzxdq_xmm_xmm: { avx }
flags for vpmovzxdq_ymm_m128: { avx2 }
flags for vpmovzxdq_ymm_xmm: { avx2 }
flags for vpmovzxwd_xmm_m64: { avx }
flags for vpmovzxwd_xmm_xmm: { avx }
flags for vpmovzxwd_ymm_m128: { avx2 }
flags for vpmovzxwd_ymm_xmm: { avx2 }
flags for vpmovzxwq_xmm_m32: { avx }
flags for vpmovzxwq_xmm_xmm: { avx }
flags for vpmovzxwq_ymm_m64: { avx2 }
flags for vpmovzxwq_ymm_xmm: { avx2 }
flags for vpmuldq_xmm_xmm_m128: { avx }
flags for vpmuldq_xmm_xmm_xmm: { avx }
flags for vpmuldq_ymm_ymm_m256: { avx2 }
flags for vpmuldq_ymm_ymm_ymm: { avx2 }
flags for vpmulhrsw_xmm_xmm_m128: { avx }
flags for vpmulhrsw_xmm_xmm_xmm: { avx }
flags for vpmulhrsw_ymm_ymm_m256: { avx2 }
flags for vpmulhrsw_ymm_ymm_ymm: { avx2 }
flags for vpmulhuw_xmm_xmm_m128: { avx }
flags for vpmulhuw_xmm_xmm_xmm: { avx }
flags for vpmulhuw_ymm_ymm_m256: { avx2 }
flags for vpmulhuw_ymm_ymm_ymm: { avx2 }
flags for vpmulhw_xmm_xmm_m128: { avx }
flags for vpmulhw_xmm_xmm_xmm: { avx }
flags for vpmulhw_ymm_ymm_m256: { avx2 }
flags for vpmulhw_ymm_ymm_ymm: { avx2 }
flags for vpmulld_xmm_xmm_m128: { avx }
flags for vpmulld_xmm_xmm_xmm: { avx }
flags for vpmulld_ymm_ymm_m256: { avx2 }
flags for vpmulld_ymm_ymm_ymm: { avx2 }
flags for vpmullw_xmm_xmm_m128: { avx }
flags for vpmullw_xmm_xmm_xmm: { avx }
flags for vpmullw_ymm_ymm_m256: { avx2 }
flags for vpmullw_ymm_ymm_ymm: { avx2 }
flags for vpmuludq_xmm_xmm_m128: { avx }
flags for vpmuludq_xmm_xmm_xmm: { avx }
flags for vpmuludq_ymm_ymm_m256: { avx2 }
flags for vpmuludq_ymm_ymm_ymm: { avx2 }
flags for vpor_xmm_xmm_m128: { avx }
flags for vpor_xmm_xmm_xmm: { avx }
flags for vpor_ymm_ymm_m256: { avx2 }
flags for vpor_ymm_ymm_ymm: { avx2 }
flags for vpsadbw_xmm_xmm_m128: { avx }
flags for vpsadbw_xmm_xmm_xmm: { avx }
flags for vpsadbw_ymm_ymm_m256: { avx2 }
flags for vpsadbw_ymm_ymm_ymm: { avx2 }
flags for vpshufb_xmm_xmm_m128: { avx }
flags for vpshufb_xmm_xmm_xmm: { avx }
flags for vpshufb_ymm_ymm_m256: { avx2 }
flags for vpshufb_ymm_ymm_ymm: { avx2 }
flags for vpshufd_xmm_m128_imm8: { avx }
flags for vpshufd_xmm_xmm_imm8: { avx }
flags for vpshufd_ymm_m256_imm8: { avx2 }
flags for vpshufd_ymm_ymm_imm8: { avx2 }
flags for vpshufhw_xmm_m128_imm8: { avx }
flags for vpshufhw_xmm_xmm_imm8: { avx }
flags for vpshufhw_ymm_m256_imm8: { avx2 }
flags for vpshufhw_ymm_ymm_imm8: { avx2 }
flags for vpshuflw_xmm_m128_imm8: { avx }
flags for vpshuflw_xmm_xmm_imm8: { avx }
flags for vpshuflw_ymm_m256_imm8: { avx2 }
flags for vpshuflw_ymm_ymm_imm8: { avx2 }
flags for vpsignb_xmm_xmm_m128: { avx }
flags for vpsignb_xmm_xmm_xmm: { avx }
flags for vpsignd_xmm_xmm_m128: { avx }
flags for vpsignd_xmm_xmm_xmm: { avx }
flags for vpsignw_xmm_xmm_m128: { avx }
flags for vpsignw_xmm_xmm_xmm: { avx }
flags for vpslld_xmm_xmm_imm8: { avx }
flags for vpslld_xmm_xmm_m128: { avx }
flags for vpslld_xmm_xmm_xmm: { avx }
flags for vpslld_ymm_ymm_imm8: { avx2 }
flags for vpslld_ymm_ymm_m128: { avx2 }
flags for vpslld_ymm_ymm_xmm: { avx2 }
flags for vpslldq_xmm_xmm_imm8: { avx }
flags for vpslldq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_xmm_xmm_imm8: { avx }
flags for vpsllq_xmm_xmm_m128: { avx }
flags for vpsllq_xmm_xmm_xmm: { avx }
flags for vpsllq_ymm_ymm_imm8: { avx2 }
flags for vpsllq_ymm_ymm_m128: { avx2 }
flags for vpsllq_ymm_ymm_xmm: { avx2 }
flags for vpsllvd_xmm_xmm_m128: { avx2 }
flags for vpsllvd_xmm_xmm_xmm: { avx2 }
flags for vpsllvd_ymm_ymm_m256: { avx2 }
flags for vpsllvd_ymm_ymm_ymm: { avx2 }
flags for vpsllvq_xmm_xmm_m128: { avx2 }
flags for vpsllvq_xmm_xmm_xmm: { avx2 }
flags for vpsllvq_ymm_ymm_m256: { avx2 }
flags for vpsllvq_ymm_ymm_ymm: { avx2 }
flags for vpsllw_xmm_xmm_imm8: { avx }
flags for vpsllw_xmm_xmm_m128: { avx }
flags for vpsllw_xmm_xmm_xmm: { avx }
flags for vpsllw_ymm_ymm_imm8: { avx2 }
flags for vpsllw_ymm_ymm_m128: { avx2 }
flags for vpsllw_ymm_ymm_xmm: { avx2 }
flags for vpsrad_xmm_xmm_imm8: { avx }
flags for vpsrad_xmm_xmm_m128: { avx }
flags for vpsrad_xmm_xmm_xmm: { avx }
flags for vpsrad_ymm_ymm_imm8: { avx2 }
flags for vpsrad_ymm_ymm_m128: { avx2 }
flags for vpsrad_ymm_ymm_xmm: { avx2 }
flags for vpsravd_xmm_xmm_m128: { avx2 }
flags for vpsravd_xmm_xmm_xmm: { avx2 }
flags for vpsravd_ymm_ymm_m256: { avx2 }
flags for vpsravd_ymm_ymm_ymm: { avx2 }
flags for vpsraw_xmm_xmm_imm8: { avx }
flags for vpsraw_xmm_xmm_m128: { avx }
flags for vpsraw_xmm_xmm_xmm: { avx }
flags for vpsraw_ymm_ymm_imm8: { avx2 }
flags for vpsraw_ymm_ymm_m128: { avx2 }
flags for vpsraw_ymm_ymm_xmm: { avx2 }
flags for vpsrld_xmm_xmm_imm8: { avx }
flags for vpsrld_xmm_xmm_m128: { avx }
flags for vpsrld_xmm_xmm_xmm: { avx }
flags for vpsrld_ymm_ymm_imm8: { avx2 }
flags for vpsrld_ymm_ymm_m128: { avx2 }
flags for vpsrld_ymm_ymm_xmm: { avx2 }
flags for vpsrldq_xmm_xmm_imm8: { avx }
flags for vpsrldq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_xmm_xmm_imm8: { avx }
flags for vpsrlq_xmm_xmm_m128: { avx }
flags for vpsrlq_xmm_xmm_xmm: { avx }
flags for vpsrlq_ymm_ymm_imm8: { avx2 }
flags for vpsrlq_ymm_ymm_m128: { avx2 }
flags for vpsrlq_ymm_ymm_xmm: { avx2 }
flags for vpsrlvd_xmm_xmm_m128: { avx2 }
flags for vpsrlvd_xmm_xmm_xmm: { avx2 }
flags for vpsrlvd_ymm_ymm_m256: { avx2 }
flags for vpsrlvd_ymm_ymm_ymm: { avx2 }
flags for vpsrlvq_xmm_xmm_m128: { avx2 }
flags for vpsrlvq_xmm_xmm_xmm: { avx2 }
flags for vpsrlvq_ymm_ymm_m256: { avx2 }
flags for vpsrlvq_ymm_ymm_ymm: { avx2 }
flags for vpsrlw_xmm_xmm_imm8: { avx }
flags for vpsrlw_xmm_xmm_m128: { avx }
flags for vpsrlw_xmm_xmm_xmm: { avx }
flags for vpsrlw_ymm_ymm_imm8: { avx2 }
flags for vpsrlw_ymm_ymm_m128: { avx2 }
flags for vpsrlw_ymm_ymm_xmm: { avx2 }
flags for vpsubb_xmm_xmm_m128: { avx }
flags for vpsubb_xmm_xmm_xmm: { avx }
flags for vpsubb_ymm_ymm_m256: { avx2 }
flags for vpsubb_ymm_ymm_ymm: { avx2 }
flags for vpsubd_xmm_xmm_m128: { avx }
flags for vpsubd_xmm_xmm_xmm: { avx }
flags for vpsubd_ymm_ymm_m256: { avx2 }
flags for vpsubd_ymm_ymm_ymm: { avx2 }
flags for vpsubq_xmm_xmm_m128: { avx }
flags for vpsubq_xmm_xmm_xmm: { avx }
flags for vpsubq_ymm_ymm_m256: { avx2 }
flags for vpsubq_ymm_ymm_ymm: { avx2 }
flags for vpsubsb_xmm_xmm_m128: { avx }
flags for vpsubsb_xmm_xmm_xmm: { avx }
flags for vpsubsb_ymm_ymm_m256: { avx2 }
flags for vpsubsb_ymm_ymm_ymm: { avx2 }
flags for vpsubsw_xmm_xmm_m128: { avx }
flags for vpsubsw_xmm_xmm_xmm: { avx }
flags for vpsubsw_ymm_ymm_m256: { avx2 }
flags for vpsubsw_ymm_ymm_ymm: { avx2 }
flags for vpsubusb_xmm_xmm_m128: { avx }
flags for vpsubusb_xmm_xmm_xmm: { avx }
flags for vpsubusb_ymm_ymm_m256: { avx2 }
flags for vpsubusb_ymm_ymm_ymm: { avx2 }
flags for vpsubusw_xmm_xmm_m128: { avx }
flags for vpsubusw_xmm_xmm_xmm: { avx }
flags for vpsubusw_ymm_ymm_m256: { avx2 }
flags for vpsubusw_ymm_ymm_ymm: { avx2 }
flags for vpsubw_xmm_xmm_m128: { avx }
flags for vpsubw_xmm_xmm_xmm: { avx }
flags for vpsubw_ymm_ymm_m256: { avx2 }
flags for vpsubw_ymm_ymm_ymm: { avx2 }
flags for vptest_xmm_m128: { avx }
flags for vptest_xmm_xmm: { avx }
flags for vptest_ymm_m256: { avx }
flags for vptest_ymm_ymm: { avx }
flags for vpunpckhbw_xmm_xmm_m128: { avx }
flags for vpunpckhbw_xmm_xmm_xmm: { avx }
flags for vpunpckhbw_ymm_ymm_m256: { avx2 }
flags for vpunpckhbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckhdq_xmm_xmm_m128: { avx }
flags for vpunpckhdq_xmm_xmm_xmm: { avx }
flags for vpunpckhdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhqdq_xmm_xmm_m128: { avx }
flags for vpunpckhqdq_xmm_xmm_xmm: { avx }
flags for vpunpckhqdq_ymm_ymm_m256: { avx2 }
flags for vpunpckhqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpckhwd_xmm_xmm_m128: { avx }
flags for vpunpckhwd_xmm_xmm_xmm: { avx }
flags for vpunpckhwd_ymm_ymm_m256: { avx2 }
flags for vpunpckhwd_ymm_ymm_ymm: { avx2 }
flags for vpunpcklbw_xmm_xmm_m128: { avx }
flags for vpunpcklbw_xmm_xmm_xmm: { avx }
flags for vpunpcklbw_ymm_ymm_m256: { avx2 }
flags for vpunpcklbw_ymm_ymm_ymm: { avx2 }
flags for vpunpckldq_xmm_xmm_m128: { avx }
flags for vpunpckldq_xmm_xmm_xmm: { avx }
flags for vpunpckldq_ymm_ymm_m256: { avx2 }
flags for vpunpckldq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklqdq_xmm_xmm_m128: { avx }
flags for vpunpcklqdq_xmm_xmm_xmm: { avx }
flags for vpunpcklqdq_ymm_ymm_m256: { avx2 }
flags for vpunpcklqdq_ymm_ymm_ymm: { avx2 }
flags for vpunpcklwd_xmm_xmm_m128: { avx }
flags for vpunpcklwd_xmm_xmm_xmm: { avx }
flags for vpunpcklwd_ymm_ymm_m256: { avx2 }
flags for vpunpcklwd_ymm_ymm_ymm: { avx2 }
flags for vpxor_xmm_xmm_m128: { avx }
flags for vpxor_xmm_xmm_xmm: { avx }
flags for vpxor_ymm_ymm_m256: { avx2 }
flags for vpxor_ymm_ymm_ymm: { avx2 }
flags for vrcpps_xmm_m128: { avx }
flags for vrcpps_xmm_xmm: { avx }
flags for vrcpps_ymm_m256: { avx }
flags for vrcpps_ymm_ymm: { avx }
flags for vrcpss_xmm_xmm_m32: { avx }
flags for vrcpss_xmm_xmm_xmm: { avx }
flags for vroundpd_xmm_m128_imm8: { avx }
flags for vroundpd_xmm_xmm_imm8: { avx }
flags for vroundpd_ymm_m256_imm8: { avx }
flags for vroundpd_ymm_ymm_imm8: { avx }
flags for vroundps_xmm_m128_imm8: { avx }
flags for vroundps_xmm_xmm_imm8: { avx }
flags for vroundps_ymm_m256_imm8: { avx }
flags for vroundps_ymm_ymm_imm8: { avx }
flags for vroundsd_xmm_xmm_m64_imm8: { avx }
flags for vroundsd_xmm_xmm_xmm_imm8: { avx }
flags for vroundss_xmm_xmm_m32_imm8: { avx }
flags for vroundss_xmm_xmm_xmm_imm8: { avx }
flags for vrsqrtps_xmm_m128: { avx }
flags for vrsqrtps_xmm_xmm: { avx }
flags for vrsqrtps_ymm_m256: { avx }
flags for vrsqrtps_ymm_ymm: { avx }
flags for vrsqrtss_xmm_xmm_m32: { avx }
flags for vrsqrtss_xmm_xmm_xmm: { avx }
flags for vshufpd_xmm_xmm_m128_imm8: { avx }
flags for vshufpd_xmm_xmm_xmm_imm8: { avx }
flags for vshufpd_ymm_ymm_m256_imm8: { avx }
flags for vshufpd_ymm_ymm_ymm_imm8: { avx }
flags for vshufps_xmm_xmm_m128_imm8: { avx }
flags for vshufps_xmm_xmm_xmm_imm8: { avx }
flags for vshufps_ymm_ymm_m256_imm8: { avx }
flags for vshufps_ymm_ymm_ymm_imm8: { avx }
flags for vsqrtpd_xmm_m128: { avx }
flags for vsqrtpd_xmm_xmm: { avx }
flags for vsqrtpd_ymm_m256: { avx }
flags for vsqrtpd_ymm_ymm: { avx }
flags for vsqrtps_xmm_m128: { avx }
flags for vsqrtps_xmm_xmm: { avx }
flags for vsqrtps_ymm_m256: { avx }
flags for vsqrtps_ymm_ymm: { avx }
flags for vsqrtsd_xmm_xmm_m64: { avx }
flags for vsqrtsd_xmm_xmm_xmm: { avx }
flags for vsqrtss_xmm_xmm_m32: { avx }
flags for vsqrtss_xmm_xmm_xmm: { avx }
flags for vsubpd_xmm_xmm_m128: { avx }
flags for vsubpd_xmm_xmm_xmm: { avx }
flags for vsubpd_ymm_ymm_m256: { avx }
flags for vsubpd_ymm_ymm_ymm: { avx }
flags for vsubps_xmm_xmm_m128: { avx }
flags for vsubps_xmm_xmm_xmm: { avx }
flags for vsubps_ymm_ymm_m256: { avx }
flags for vsubps_ymm_ymm_ymm: { avx }
flags for vsubsd_xmm_xmm_m64: { avx }
flags for vsubsd_xmm_xmm_xmm: { avx }
flags for vsubss_xmm_xmm_m32: { avx }
flags for vsubss_xmm_xmm_xmm: { avx }
flags for vtestpd_xmm_m128: { avx }
flags for vtestpd_xmm_xmm: { avx }
flags for vtestpd_ymm_m256: { avx }
flags for vtestpd_ymm_ymm: { avx }
flags for vtestps_xmm_m128: { avx }
flags for vtestps_xmm_xmm: { avx }
flags for vtestps_ymm_m256: { avx }
flags for vtestps_ymm_ymm: { avx }
flags for vucomisd_xmm_m64: { avx }
flags for vucomisd_xmm_xmm: { avx }
flags for vucomiss_xmm_m32: { avx }
flags for vucomiss_xmm_xmm: { avx }
flags for vunpckhpd_xmm_xmm_m128: { avx }
flags for vunpckhpd_xmm_xmm_xmm: { avx }
flags for vunpckhpd_ymm_ymm_m256: { avx }
flags for vunpckhpd_ymm_ymm_ymm: { avx }
flags for vunpckhps_xmm_xmm_m128: { avx }
flags for vunpckhps_xmm_xmm_xmm: { avx }
flags for vunpckhps_ymm_ymm_m256: { avx }
flags for vunpckhps_ymm_ymm_ymm: { avx }
flags for vunpcklpd_xmm_xmm_m128: { avx }
flags for vunpcklpd_xmm_xmm_xmm: { avx }
flags for vunpcklpd_ymm_ymm_m256: { avx }
flags for vunpcklpd_ymm_ymm_ymm: { avx }
flags for vunpcklps_xmm_xmm_m128: { avx }
flags for vunpcklps_xmm_xmm_xmm: { avx }
flags for vunpcklps_ymm_ymm_m256: { avx }
flags for vunpcklps_ymm_ymm_ymm: { avx }
flags for vxorpd_xmm_xmm_m128: { avx }
flags for vxorpd_xmm_xmm_xmm: { avx }
flags for vxorpd_ymm_ymm_m256: { avx }
flags for vxorpd_ymm_ymm_ymm: { avx }
flags for vxorps_xmm_xmm_m128: { avx }
flags for vxorps_xmm_xmm_xmm: { avx }
flags for vxorps_ymm_ymm_m256: { avx }
flags for vxorps_ymm_ymm_ymm: { avx }
flags for vzeroall: { avx }
flags for vzeroupper: { avx }
flags for wait: { fpu }
flags for xabort_imm8: { rtm }
flags for xacquire: { hle }
flags for xbegin_label: { rtm }
flags for xend: { rtm }
flags for xlat_m8: { }
flags for xlatb: { }
flags for xorb_al_imm8: { }
flags for xorw_ax_imm16: { }
flags for xorl_eax_imm32: { }
flags for xorw_m16_imm16: { }
flags for xorw_m16_imm8: { }
flags for xorw_m16_r16: { }
flags for xorl_m32_imm32: { }
flags for xorl_m32_imm8: { }
flags for xorl_m32_r32: { }
flags for xorq_m64_imm32: { }
flags for xorq_m64_imm8: { }
flags for xorq_m64_r64: { }
flags for xorb_m8_imm8: { }
flags for xorb_m8_r8: { }
flags for xorb_m8_rh: { }
flags for xorw_r16_imm16: { }
flags for xorw_r16_imm8: { }
flags for xorw_r16_m16: { }
flags for xorw_r16_r16: { }
flags for xorw_r16_r16_1: { }
flags for xorl_r32_imm32: { }
flags for xorl_r32_imm8: { }
flags for xorl_r32_m32: { }
flags for xorl_r32_r32: { }
flags for xorl_r32_r32_1: { }
flags for xorq_r64_imm32: { }
flags for xorq_r64_imm8: { }
flags for xorq_r64_m64: { }
flags for xorq_r64_r64: { }
flags for xorq_r64_r64_1: { }
flags for xorb_r8_imm8: { }
flags for xorb_r8_m8: { }
flags for xorb_r8_r8: { }
flags for xorb_r8_r8_1: { }
flags for xorb_r8_rh: { }
flags for xorb_r8_rh_1: { }
flags for xorq_rax_imm32: { }
flags for xorb_rh_imm8: { }
flags for xorb_rh_m8: { }
flags for xorb_rh_r8: { }
flags for xorb_rh_r8_1: { }
flags for xorb_rh_rh: { }
flags for xorb_rh_rh_1: { }
flags for xorpd_xmm_m128: { sse2 }
flags for xorpd_xmm_xmm: { sse2 }
flags for xorps_xmm_m128: { sse }
flags for xorps_xmm_xmm: { sse }
flags for xrelease: { hle }
flags for xtest: { rtm }
Computing reference outputs for 14 testcases
Computing reference outputs for 14 testcases
Computing reference outputs for 14 testcases
Computing reference outputs for 14 testcases
Running search (timeout is 500000 iterations):

Progress Update: 

Lowest Cost Discovered (263)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  nop                         #  10    0xf   1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  andl $0x3, %edi             #  11    0x10  3      OPC=andl_r32_imm8          movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  jne .L_126860               #  12    0x13  6      OPC=jne_label_1            leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movw %dx, %si               #  13    0x19  3      OPC=movw_r16_r16           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl (%r15,%rsi,1), %r8d    #  14    0x1c  4      OPC=movl_r32_m32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x20  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  jne .L_126860               #  16    0x21  6      OPC=jne_label_1            jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  41    0x72  1      OPC=nop                  
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          nop                         #  42    0x73  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           nop                         #  43    0x74  1      OPC=nop                  
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          nop                         #  44    0x75  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           nop                         #  45    0x76  1      OPC=nop                  
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           nop                         #  46    0x77  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           nop                         #  47    0x78  1      OPC=nop                  
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  notl %r9d                   #  60    0x65  3      OPC=notl_r32               movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  andl %esi, %r9d             #  61    0x68  3      OPC=andl_r32_r32_1         addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  andq $0x80808080, %r9       #  62    0x6b  7      OPC=andq_r64_imm32         testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  je .L_126820                #  63    0x72  6      OPC=je_label_1             jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  64    0x78  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  65    0x79  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  66    0x7a  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  67    0x7b  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  68    0x7c  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
.L_126860:                    #        0x7d  0      OPC=<label>                popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  andl %edx, %edx             #  69    0x7d  2      OPC=andl_r32_r32_1         andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  movsbl (%r15,%rdx,1), %esi  #  70    0x7f  5      OPC=movsbl_r32_m8          addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  71    0x84  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  xorl %esp, %ecx             #  72    0x85  2      OPC=xorl_r32_r32_1                                                                                    
  movb %sil, (%r15,%rcx,1)    #  73    0x87  4      OPC=movb_m8_r8           .size strcpy, .-strcpy                                                       
  addb $0x1, %dl              #  74    0x8b  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  75    0x8e  3      OPC=addl_r32_imm8                                                                                     
  nop                         #  76    0x91  1      OPC=nop                                                                                               
  nop                         #  77    0x92  1      OPC=nop                                                                                               
  nop                         #  78    0x93  1      OPC=nop                                                                                               
  testb %sil, %sil            #  79    0x94  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  80    0x97  6      OPC=jne_label_1                                                                                       
  nop                         #  81    0x9d  1      OPC=nop                                                                                               
  nop                         #  82    0x9e  1      OPC=nop                                                                                               
  nop                         #  83    0x9f  1      OPC=nop                                                                                               
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  nop                         #  97    0xad  1      OPC=nop                                                                                               
  popq %r11                   #  98    0xae  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  99    0xb0  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  100   0xb4  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  101   0xb7  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (262)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  nop                         #  10    0xf   1      OPC=nop                    movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  andl $0x3, %edi             #  11    0x10  3      OPC=andl_r32_imm8          movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  jne .L_126860               #  12    0x13  6      OPC=jne_label_1            leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movw %dx, %si               #  13    0x19  3      OPC=movw_r16_r16           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  movl (%r15,%rsi,1), %r8d    #  14    0x1c  4      OPC=movl_r32_m32           andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  nop                         #  15    0x20  1      OPC=nop                    andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  jne .L_126860               #  16    0x21  6      OPC=jne_label_1            jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  41    0x72  1      OPC=nop                  
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          nop                         #  42    0x73  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           nop                         #  43    0x74  1      OPC=nop                  
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          nop                         #  44    0x75  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           nop                         #  45    0x76  1      OPC=nop                  
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           nop                         #  46    0x77  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           nop                         #  47    0x78  1      OPC=nop                  
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x65  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  notl %r9d                   #  61    0x66  3      OPC=notl_r32               addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  andl %esi, %r9d             #  62    0x69  3      OPC=andl_r32_r32_1         testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  andq $0x80808080, %r9       #  63    0x6c  7      OPC=andq_r64_imm32         jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  je .L_126820                #  64    0x73  6      OPC=je_label_1             nop                         #  63    0x9c  1      OPC=nop                  
  nop                         #  65    0x79  1      OPC=nop                    nop                         #  64    0x9d  1      OPC=nop                  
  nop                         #  66    0x7a  1      OPC=nop                    nop                         #  65    0x9e  1      OPC=nop                  
  nop                         #  67    0x7b  1      OPC=nop                    nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  68    0x7c  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  69    0x7d  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
.L_126860:                    #        0x7e  0      OPC=<label>                andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  andl %edx, %edx             #  70    0x7e  2      OPC=andl_r32_r32_1         addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  movsbl (%r15,%rdx,1), %esi  #  71    0x80  5      OPC=movsbl_r32_m8          jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  72    0x85  1      OPC=nop                                                                                               
  xorl %esp, %ecx             #  73    0x86  2      OPC=xorl_r32_r32_1       .size strcpy, .-strcpy                                                       
  movb %sil, (%r15,%rcx,1)    #  74    0x88  4      OPC=movb_m8_r8                                                                                        
  addb $0x1, %dl              #  75    0x8c  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  76    0x8f  3      OPC=addl_r32_imm8                                                                                     
  nop                         #  77    0x92  1      OPC=nop                                                                                               
  nop                         #  78    0x93  1      OPC=nop                                                                                               
  nop                         #  79    0x94  1      OPC=nop                                                                                               
  testb %sil, %sil            #  80    0x95  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  81    0x98  6      OPC=jne_label_1                                                                                       
  nop                         #  82    0x9e  1      OPC=nop                                                                                               
  nop                         #  83    0x9f  1      OPC=nop                                                                                               
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  nop                         #  97    0xad  1      OPC=nop                                                                                               
  popq %r11                   #  98    0xae  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  99    0xb0  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  100   0xb4  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  101   0xb7  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (261)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1f  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x26  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  42    0x40  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
  nop                         #  43    0x41  1      OPC=nop                    nop                         #  42    0x73  1      OPC=nop                  
.L_126820:                    #        0x42  0      OPC=<label>                nop                         #  43    0x74  1      OPC=nop                  
  orl %ebp, %ecx              #  44    0x42  2      OPC=orl_r32_r32_1          nop                         #  44    0x75  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  45    0x44  4      OPC=movl_m32_r32           nop                         #  45    0x76  1      OPC=nop                  
  addl $0x4, %edx             #  46    0x48  3      OPC=addl_r32_imm8          nop                         #  46    0x77  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  47    0x4b  4      OPC=movl_r32_m32           nop                         #  47    0x78  1      OPC=nop                  
  movl %r8d, %r9d             #  48    0x4f  3      OPC=movl_r32_r32           nop                         #  48    0x79  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  49    0x52  7      OPC=leal_r32_m64           nop                         #  49    0x7a  1      OPC=nop                  
  addl $0x4, %ecx             #  50    0x59  3      OPC=addl_r32_imm8          nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x65  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  nop                         #  61    0x66  1      OPC=nop                    addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  nop                         #  62    0x67  1      OPC=nop                    testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  63    0x68  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  64    0x69  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  notl %r9d                   #  65    0x6a  3      OPC=notl_r32               nop                         #  64    0x9d  1      OPC=nop                  
  andl %esi, %r9d             #  66    0x6d  3      OPC=andl_r32_r32_1         nop                         #  65    0x9e  1      OPC=nop                  
  andq $0x80808080, %r9       #  67    0x70  7      OPC=andq_r64_imm32         nop                         #  66    0x9f  1      OPC=nop                  
  je .L_126820                #  68    0x77  6      OPC=je_label_1             nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  69    0x7d  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  70    0x7e  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  71    0x7f  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  72    0x80  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  nop                         #  73    0x81  1      OPC=nop                                                                                               
.L_126860:                    #        0x82  0      OPC=<label>              .size strcpy, .-strcpy                                                       
  andl %edx, %edx             #  74    0x82  2      OPC=andl_r32_r32_1                                                                                    
  movsbl (%r15,%rdx,1), %esi  #  75    0x84  5      OPC=movsbl_r32_m8                                                                                     
  nop                         #  76    0x89  1      OPC=nop                                                                                               
  nop                         #  77    0x8a  1      OPC=nop                                                                                               
  xorl %esp, %ecx             #  78    0x8b  2      OPC=xorl_r32_r32_1                                                                                    
  movb %sil, (%r15,%rcx,1)    #  79    0x8d  4      OPC=movb_m8_r8                                                                                        
  addb $0x1, %dl              #  80    0x91  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  81    0x94  3      OPC=addl_r32_imm8                                                                                     
  nop                         #  82    0x97  1      OPC=nop                                                                                               
  testb %sil, %sil            #  83    0x98  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  84    0x9b  6      OPC=jne_label_1                                                                                       
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  nop                         #  97    0xad  1      OPC=nop                                                                                               
  nop                         #  98    0xae  1      OPC=nop                                                                                               
  nop                         #  99    0xaf  1      OPC=nop                                                                                               
  popq %r11                   #  100   0xb0  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  101   0xb2  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  102   0xb6  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  103   0xb9  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (260)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1f  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x26  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
  nop                         #  42    0x40  1      OPC=nop                    nop                         #  41    0x72  1      OPC=nop                  
.L_126820:                    #        0x41  0      OPC=<label>                nop                         #  42    0x73  1      OPC=nop                  
  orl %ebp, %ecx              #  43    0x41  2      OPC=orl_r32_r32_1          nop                         #  43    0x74  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  44    0x43  4      OPC=movl_m32_r32           nop                         #  44    0x75  1      OPC=nop                  
  addl $0x4, %edx             #  45    0x47  3      OPC=addl_r32_imm8          nop                         #  45    0x76  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  46    0x4a  4      OPC=movl_r32_m32           nop                         #  46    0x77  1      OPC=nop                  
  movl %r8d, %r9d             #  47    0x4e  3      OPC=movl_r32_r32           nop                         #  47    0x78  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  48    0x51  7      OPC=leal_r32_m64           nop                         #  48    0x79  1      OPC=nop                  
  addl $0x4, %ecx             #  49    0x58  3      OPC=addl_r32_imm8          nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x65  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  nop                         #  61    0x66  1      OPC=nop                    addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  nop                         #  62    0x67  1      OPC=nop                    testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  63    0x68  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  nop                         #  64    0x69  1      OPC=nop                    nop                         #  63    0x9c  1      OPC=nop                  
  notl %r9d                   #  65    0x6a  3      OPC=notl_r32               nop                         #  64    0x9d  1      OPC=nop                  
  andl %esi, %r9d             #  66    0x6d  3      OPC=andl_r32_r32_1         nop                         #  65    0x9e  1      OPC=nop                  
  andq $0x80808080, %r9       #  67    0x70  7      OPC=andq_r64_imm32         nop                         #  66    0x9f  1      OPC=nop                  
  je .L_126820                #  68    0x77  6      OPC=je_label_1             nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  69    0x7d  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  70    0x7e  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  71    0x7f  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
  nop                         #  72    0x80  1      OPC=nop                    jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
.L_126860:                    #        0x81  0      OPC=<label>                                                                                           
  andl %edx, %edx             #  73    0x81  2      OPC=andl_r32_r32_1       .size strcpy, .-strcpy                                                       
  movsbl (%r15,%rdx,1), %esi  #  74    0x83  5      OPC=movsbl_r32_m8                                                                                     
  nop                         #  75    0x88  1      OPC=nop                                                                                               
  nop                         #  76    0x89  1      OPC=nop                                                                                               
  xorl %esp, %ecx             #  77    0x8a  2      OPC=xorl_r32_r32_1                                                                                    
  movb %sil, (%r15,%rcx,1)    #  78    0x8c  4      OPC=movb_m8_r8                                                                                        
  addb $0x1, %dl              #  79    0x90  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  80    0x93  3      OPC=addl_r32_imm8                                                                                     
  nop                         #  81    0x96  1      OPC=nop                                                                                               
  testb %sil, %sil            #  82    0x97  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  83    0x9a  6      OPC=jne_label_1                                                                                       
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  nop                         #  97    0xad  1      OPC=nop                                                                                               
  nop                         #  98    0xae  1      OPC=nop                                                                                               
  popq %r11                   #  99    0xaf  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  100   0xb1  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  101   0xb5  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  102   0xb8  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (259)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1f  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x26  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  41    0x72  1      OPC=nop                  
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          nop                         #  42    0x73  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           nop                         #  43    0x74  1      OPC=nop                  
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          nop                         #  44    0x75  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           nop                         #  45    0x76  1      OPC=nop                  
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           nop                         #  46    0x77  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           nop                         #  47    0x78  1      OPC=nop                  
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x65  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  nop                         #  61    0x66  1      OPC=nop                    addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  nop                         #  62    0x67  1      OPC=nop                    testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  63    0x68  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  notl %r9d                   #  64    0x69  3      OPC=notl_r32               nop                         #  63    0x9c  1      OPC=nop                  
  andl %esi, %r9d             #  65    0x6c  3      OPC=andl_r32_r32_1         nop                         #  64    0x9d  1      OPC=nop                  
  andq $0x80808080, %r9       #  66    0x6f  7      OPC=andq_r64_imm32         nop                         #  65    0x9e  1      OPC=nop                  
  je .L_126820                #  67    0x76  6      OPC=je_label_1             nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  68    0x7c  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  69    0x7d  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  70    0x7e  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  71    0x7f  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
.L_126860:                    #        0x80  0      OPC=<label>                jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  andl %edx, %edx             #  72    0x80  2      OPC=andl_r32_r32_1                                                                                    
  movsbl (%r15,%rdx,1), %esi  #  73    0x82  5      OPC=movsbl_r32_m8        .size strcpy, .-strcpy                                                       
  nop                         #  74    0x87  1      OPC=nop                                                                                               
  nop                         #  75    0x88  1      OPC=nop                                                                                               
  xorl %esp, %ecx             #  76    0x89  2      OPC=xorl_r32_r32_1                                                                                    
  movb %sil, (%r15,%rcx,1)    #  77    0x8b  4      OPC=movb_m8_r8                                                                                        
  addb $0x1, %dl              #  78    0x8f  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8                                                                                     
  nop                         #  80    0x95  1      OPC=nop                                                                                               
  testb %sil, %sil            #  81    0x96  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  82    0x99  6      OPC=jne_label_1                                                                                       
  nop                         #  83    0x9f  1      OPC=nop                                                                                               
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  nop                         #  97    0xad  1      OPC=nop                                                                                               
  popq %r11                   #  98    0xae  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  99    0xb0  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  100   0xb4  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  101   0xb7  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (258)                                                 Lowest Known Correct Cost (280)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %esi, %esi             #  1     0     2      OPC=movl_r32_r32         
  nop                         #  2     0x3   1      OPC=nop                    movl %edi, %eax             #  2     0x2   2      OPC=movl_r32_r32         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x4   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         movq %rsi, %rdx             #  4     0x6   3      OPC=movq_r64_r64         
  nop                         #  5     0x8   1      OPC=nop                    movq %rax, %rcx             #  5     0x9   3      OPC=movq_r64_r64         
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          orl %eax, %edi              #  6     0xc   2      OPC=orl_r32_r32          
  nop                         #  7     0xc   1      OPC=nop                    andl $0x3, %edi             #  7     0xe   3      OPC=andl_r32_imm8        
  nop                         #  8     0xd   1      OPC=nop                    jne .L_126860               #  8     0x11  6      OPC=jne_label_1          
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %esi             #  9     0x17  2      OPC=movl_r32_r32         
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          movl (%r15,%rsi,1), %r8d    #  10    0x19  4      OPC=movl_r32_m32         
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            movl %r8d, %esi             #  11    0x1d  3      OPC=movl_r32_r32         
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           leal -0x1010101(%r8), %edi  #  12    0x20  7      OPC=leal_r32_m16         
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           notl %esi                   #  13    0x27  2      OPC=notl_r32             
  nop                         #  14    0x1f  1      OPC=nop                    andl %edi, %esi             #  14    0x29  2      OPC=andl_r32_r32         
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            andl $0x80808080, %esi      #  15    0x2b  6      OPC=andl_r32_imm32       
  nop                         #  16    0x26  1      OPC=nop                    jne .L_126860               #  16    0x31  6      OPC=jne_label_1          
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x37  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x38  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x39  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x3a  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x3b  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x3c  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x3d  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x3e  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x3f  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                         #  27    0x31  1      OPC=nop                    addl $0x4, %edx             #  26    0x40  3      OPC=addl_r32_imm8        
  nop                         #  28    0x32  1      OPC=nop                    movl %ecx, %ecx             #  27    0x43  2      OPC=movl_r32_r32         
  nop                         #  29    0x33  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  28    0x45  4      OPC=movl_m32_r32         
  nop                         #  30    0x34  1      OPC=nop                    addl $0x4, %ecx             #  29    0x49  3      OPC=addl_r32_imm8        
  nop                         #  31    0x35  1      OPC=nop                    movl %edx, %edx             #  30    0x4c  2      OPC=movl_r32_r32         
  nop                         #  32    0x36  1      OPC=nop                    movl (%r15,%rdx,1), %r8d    #  31    0x4e  4      OPC=movl_r32_m32         
  nop                         #  33    0x37  1      OPC=nop                    movl %r8d, %r9d             #  32    0x52  3      OPC=movl_r32_r32         
  nop                         #  34    0x38  1      OPC=nop                    leal -0x1010101(%r8), %esi  #  33    0x55  7      OPC=leal_r32_m16         
  nop                         #  35    0x39  1      OPC=nop                    notl %r9d                   #  34    0x5c  3      OPC=notl_r32             
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  35    0x5f  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    andl %esi, %r9d             #  36    0x60  3      OPC=andl_r32_r32         
  nop                         #  38    0x3c  1      OPC=nop                    andl $0x80808080, %r9d      #  37    0x63  7      OPC=andl_r32_imm32       
  nop                         #  39    0x3d  1      OPC=nop                    je .L_126820                #  38    0x6a  6      OPC=je_label_1           
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  39    0x70  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  40    0x71  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>                nop                         #  41    0x72  1      OPC=nop                  
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          nop                         #  42    0x73  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           nop                         #  43    0x74  1      OPC=nop                  
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          nop                         #  44    0x75  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           nop                         #  45    0x76  1      OPC=nop                  
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           nop                         #  46    0x77  1      OPC=nop                  
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           nop                         #  47    0x78  1      OPC=nop                  
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          nop                         #  48    0x79  1      OPC=nop                  
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x7a  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x7b  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x7c  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x7d  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x7e  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x7f  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  56    0x61  1      OPC=nop                    movl %edx, %edx             #  55    0x80  2      OPC=movl_r32_r32         
  nop                         #  57    0x62  1      OPC=nop                    movzbl (%r15,%rdx,1), %esi  #  56    0x82  5      OPC=movzbl_r32_m8        
  nop                         #  58    0x63  1      OPC=nop                    addl $0x1, %edx             #  57    0x87  3      OPC=addl_r32_imm8        
  nop                         #  59    0x64  1      OPC=nop                    movl %ecx, %ecx             #  58    0x8a  2      OPC=movl_r32_r32         
  nop                         #  60    0x65  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  59    0x8c  4      OPC=movb_m8_r8           
  nop                         #  61    0x66  1      OPC=nop                    addl $0x1, %ecx             #  60    0x90  3      OPC=addl_r32_imm8        
  nop                         #  62    0x67  1      OPC=nop                    testb %sil, %sil            #  61    0x93  3      OPC=testb_r8_r8          
  nop                         #  63    0x68  1      OPC=nop                    jne .L_126860               #  62    0x96  6      OPC=jne_label_1          
  notl %r9d                   #  64    0x69  3      OPC=notl_r32               nop                         #  63    0x9c  1      OPC=nop                  
  andl %esi, %r9d             #  65    0x6c  3      OPC=andl_r32_r32_1         nop                         #  64    0x9d  1      OPC=nop                  
  andq $0x80808080, %r9       #  66    0x6f  7      OPC=andq_r64_imm32         nop                         #  65    0x9e  1      OPC=nop                  
  je .L_126820                #  67    0x76  6      OPC=je_label_1             nop                         #  66    0x9f  1      OPC=nop                  
  nop                         #  68    0x7c  1      OPC=nop                    nop                         #  67    0xa0  1      OPC=nop                  
  nop                         #  69    0x7d  1      OPC=nop                    popq %r11                   #  68    0xa1  2      OPC=popq_r64_1           
  nop                         #  70    0x7e  1      OPC=nop                    andl $0xe0, %r11d           #  69    0xa3  4      OPC=andl_r32_imm8        
  nop                         #  71    0x7f  1      OPC=nop                    addq %r15, %r11             #  70    0xa7  3      OPC=addq_r64_r64         
.L_126860:                    #        0x80  0      OPC=<label>                jmpq %r11                   #  71    0xaa  3      OPC=jmpq_r64             
  andl %edx, %edx             #  72    0x80  2      OPC=andl_r32_r32_1                                                                                    
  movsbl (%r15,%rdx,1), %esi  #  73    0x82  5      OPC=movsbl_r32_m8        .size strcpy, .-strcpy                                                       
  nop                         #  74    0x87  1      OPC=nop                                                                                               
  nop                         #  75    0x88  1      OPC=nop                                                                                               
  xorl %esp, %ecx             #  76    0x89  2      OPC=xorl_r32_r32_1                                                                                    
  movb %sil, (%r15,%rcx,1)    #  77    0x8b  4      OPC=movb_m8_r8                                                                                        
  addb $0x1, %dl              #  78    0x8f  3      OPC=addb_r8_imm8                                                                                      
  addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8                                                                                     
  testb %sil, %sil            #  80    0x95  3      OPC=testb_r8_r8                                                                                       
  jne .L_126860               #  81    0x98  6      OPC=jne_label_1                                                                                       
  nop                         #  82    0x9e  1      OPC=nop                                                                                               
  nop                         #  83    0x9f  1      OPC=nop                                                                                               
  nop                         #  84    0xa0  1      OPC=nop                                                                                               
  nop                         #  85    0xa1  1      OPC=nop                                                                                               
  nop                         #  86    0xa2  1      OPC=nop                                                                                               
  nop                         #  87    0xa3  1      OPC=nop                                                                                               
  nop                         #  88    0xa4  1      OPC=nop                                                                                               
  nop                         #  89    0xa5  1      OPC=nop                                                                                               
  nop                         #  90    0xa6  1      OPC=nop                                                                                               
  nop                         #  91    0xa7  1      OPC=nop                                                                                               
  nop                         #  92    0xa8  1      OPC=nop                                                                                               
  nop                         #  93    0xa9  1      OPC=nop                                                                                               
  nop                         #  94    0xaa  1      OPC=nop                                                                                               
  nop                         #  95    0xab  1      OPC=nop                                                                                               
  nop                         #  96    0xac  1      OPC=nop                                                                                               
  popq %r11                   #  97    0xad  2      OPC=popq_r64_1                                                                                        
  andl $0xe0, %r11d           #  98    0xaf  4      OPC=andl_r32_imm8                                                                                     
  addq %r15, %r11             #  99    0xb3  3      OPC=addq_r64_r64                                                                                      
  jmpq %r11                   #  100   0xb6  3      OPC=jmpq_r64                                                                                          
                                                                                                                                                          
.size strcpy, .-strcpy                                                                                                                                    
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (258)                                                 Lowest Known Correct Cost (261)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  nop                         #  2     0x3   1      OPC=nop                    nop                         #  2     0x2   1      OPC=nop                  
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           nop                         #  3     0x3   1      OPC=nop                  
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         nop                         #  4     0x4   1      OPC=nop                  
  nop                         #  5     0x8   1      OPC=nop                    nop                         #  5     0x5   1      OPC=nop                  
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          movl %edi, %ecx             #  6     0x6   2      OPC=movl_r32_r32_1       
  nop                         #  7     0xc   1      OPC=nop                    nop                         #  7     0x8   1      OPC=nop                  
  nop                         #  8     0xd   1      OPC=nop                    orb %sil, %dil              #  8     0x9   3      OPC=orb_r8_r8            
  nop                         #  9     0xe   1      OPC=nop                    movl %esi, %edx             #  9     0xc   2      OPC=movl_r32_r32_1       
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          andl $0x3, %edi             #  10    0xe   3      OPC=andl_r32_imm8        
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            nop                         #  11    0x11  1      OPC=nop                  
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           jne .L_126860               #  12    0x12  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           movl %edx, %esi             #  13    0x18  2      OPC=movl_r32_r32_1       
  nop                         #  14    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  14    0x1a  4      OPC=movq_r64_m64         
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            nop                         #  15    0x1e  1      OPC=nop                  
  nop                         #  16    0x26  1      OPC=nop                    nop                         #  16    0x1f  1      OPC=nop                  
  nop                         #  17    0x27  1      OPC=nop                    nop                         #  17    0x20  1      OPC=nop                  
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x21  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x22  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x23  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x24  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x25  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x26  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x27  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x28  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                    nop                         #  26    0x29  1      OPC=nop                  
  nop                         #  27    0x31  1      OPC=nop                    nop                         #  27    0x2a  1      OPC=nop                  
  nop                         #  28    0x32  1      OPC=nop                    nop                         #  28    0x2b  1      OPC=nop                  
  nop                         #  29    0x33  1      OPC=nop                    nop                         #  29    0x2c  1      OPC=nop                  
  nop                         #  30    0x34  1      OPC=nop                    nop                         #  30    0x2d  1      OPC=nop                  
  nop                         #  31    0x35  1      OPC=nop                    jne .L_126860               #  31    0x2e  6      OPC=jne_label_1          
  nop                         #  32    0x36  1      OPC=nop                    nop                         #  32    0x34  1      OPC=nop                  
  nop                         #  33    0x37  1      OPC=nop                    nop                         #  33    0x35  1      OPC=nop                  
  nop                         #  34    0x38  1      OPC=nop                    nop                         #  34    0x36  1      OPC=nop                  
  nop                         #  35    0x39  1      OPC=nop                    nop                         #  35    0x37  1      OPC=nop                  
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  36    0x38  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    nop                         #  37    0x39  1      OPC=nop                  
  nop                         #  38    0x3c  1      OPC=nop                    nop                         #  38    0x3a  1      OPC=nop                  
  nop                         #  39    0x3d  1      OPC=nop                    nop                         #  39    0x3b  1      OPC=nop                  
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  40    0x3c  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    orb %r8b, %r8b              #  41    0x3d  3      OPC=orb_r8_r8_1          
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          andl %ecx, %ecx             #  42    0x40  2      OPC=andl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           leal -0x1010101(%r8), %esi  #  46    0x50  7      OPC=leal_r32_m16         
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           movl %r8d, %r9d             #  47    0x57  3      OPC=movl_r32_r32_1       
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          notq %r9                    #  48    0x5a  3      OPC=notq_r64             
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x5d  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x5e  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x5f  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x60  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x61  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x62  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                    nop                         #  55    0x63  1      OPC=nop                  
  nop                         #  56    0x61  1      OPC=nop                    nop                         #  56    0x64  1      OPC=nop                  
  nop                         #  57    0x62  1      OPC=nop                    nop                         #  57    0x65  1      OPC=nop                  
  nop                         #  58    0x63  1      OPC=nop                    nop                         #  58    0x66  1      OPC=nop                  
  nop                         #  59    0x64  1      OPC=nop                    nop                         #  59    0x67  1      OPC=nop                  
  nop                         #  60    0x65  1      OPC=nop                    nop                         #  60    0x68  1      OPC=nop                  
  nop                         #  61    0x66  1      OPC=nop                    nop                         #  61    0x69  1      OPC=nop                  
  nop                         #  62    0x67  1      OPC=nop                    nop                         #  62    0x6a  1      OPC=nop                  
  nop                         #  63    0x68  1      OPC=nop                    nop                         #  63    0x6b  1      OPC=nop                  
  notl %r9d                   #  64    0x69  3      OPC=notl_r32               addw $0x4, %cx              #  64    0x6c  4      OPC=addw_r16_imm8        
  andl %esi, %r9d             #  65    0x6c  3      OPC=andl_r32_r32_1         andl $0x80808080, %r9d      #  65    0x70  7      OPC=andl_r32_imm32       
  andq $0x80808080, %r9       #  66    0x6f  7      OPC=andq_r64_imm32         andq %rsi, %r9              #  66    0x77  3      OPC=andq_r64_r64         
  je .L_126820                #  67    0x76  6      OPC=je_label_1             je .L_126820                #  67    0x7a  6      OPC=je_label_1           
  nop                         #  68    0x7c  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  69    0x7d  1      OPC=nop                    nop                         #  68    0x80  1      OPC=nop                  
  nop                         #  70    0x7e  1      OPC=nop                    nop                         #  69    0x81  1      OPC=nop                  
  nop                         #  71    0x7f  1      OPC=nop                    nop                         #  70    0x82  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>                nop                         #  71    0x83  1      OPC=nop                  
  andl %edx, %edx             #  72    0x80  2      OPC=andl_r32_r32_1         nop                         #  72    0x84  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi  #  73    0x82  5      OPC=movsbl_r32_m8          nop                         #  73    0x85  1      OPC=nop                  
  nop                         #  74    0x87  1      OPC=nop                    addl %esp, %edx             #  74    0x86  2      OPC=addl_r32_r32         
  nop                         #  75    0x88  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  75    0x88  5      OPC=movsbl_r32_m8        
  xorl %esp, %ecx             #  76    0x89  2      OPC=xorl_r32_r32_1         nop                         #  76    0x8d  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)    #  77    0x8b  4      OPC=movb_m8_r8             nop                         #  77    0x8e  1      OPC=nop                  
  addb $0x1, %dl              #  78    0x8f  3      OPC=addb_r8_imm8           subl %ebp, %ecx             #  78    0x8f  2      OPC=subl_r32_r32_1       
  addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  79    0x91  4      OPC=movb_m8_r8           
  testb %sil, %sil            #  80    0x95  3      OPC=testb_r8_r8            nop                         #  80    0x95  1      OPC=nop                  
  jne .L_126860               #  81    0x98  6      OPC=jne_label_1            addl $0x1, %ecx             #  81    0x96  3      OPC=addl_r32_imm8        
  nop                         #  82    0x9e  1      OPC=nop                    nop                         #  82    0x99  1      OPC=nop                  
  nop                         #  83    0x9f  1      OPC=nop                    nop                         #  83    0x9a  1      OPC=nop                  
  nop                         #  84    0xa0  1      OPC=nop                    addb $0x1, %dl              #  84    0x9b  3      OPC=addb_r8_imm8         
  nop                         #  85    0xa1  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                         #  86    0xa2  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                         #  87    0xa3  1      OPC=nop                    testb %sil, %sil            #  87    0xa0  3      OPC=testb_r8_r8          
  nop                         #  88    0xa4  1      OPC=nop                    nop                         #  88    0xa3  1      OPC=nop                  
  nop                         #  89    0xa5  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  nop                         #  90    0xa6  1      OPC=nop                    nop                         #  90    0xa5  1      OPC=nop                  
  nop                         #  91    0xa7  1      OPC=nop                    nop                         #  91    0xa6  1      OPC=nop                  
  nop                         #  92    0xa8  1      OPC=nop                    nop                         #  92    0xa7  1      OPC=nop                  
  nop                         #  93    0xa9  1      OPC=nop                    jne .L_126860               #  93    0xa8  6      OPC=jne_label_1          
  nop                         #  94    0xaa  1      OPC=nop                    nop                         #  94    0xae  1      OPC=nop                  
  nop                         #  95    0xab  1      OPC=nop                    nop                         #  95    0xaf  1      OPC=nop                  
  nop                         #  96    0xac  1      OPC=nop                    nop                         #  96    0xb0  1      OPC=nop                  
  popq %r11                   #  97    0xad  2      OPC=popq_r64_1             nop                         #  97    0xb1  1      OPC=nop                  
  andl $0xe0, %r11d           #  98    0xaf  4      OPC=andl_r32_imm8          nop                         #  98    0xb2  1      OPC=nop                  
  addq %r15, %r11             #  99    0xb3  3      OPC=addq_r64_r64           popq %r11                   #  99    0xb3  2      OPC=popq_r64_1           
  jmpq %r11                   #  100   0xb6  3      OPC=jmpq_r64               andl $0xe0, %r11d           #  100   0xb5  4      OPC=andl_r32_imm8        
                                                                               addq %r15, %r11             #  101   0xb9  3      OPC=addq_r64_r64         
.size strcpy, .-strcpy                                                         jmpq %r11                   #  102   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Progress Update: 

Lowest Cost Discovered (258)                                                 Lowest Known Correct Cost (259)                                              
                                                                                                                                                          
  .text                                                                        .text                                                                      
  .globl strcpy                                                                .globl strcpy                                                              
  .type strcpy, @function                                                      .type strcpy, @function                                                    
                                                                                                                                                          
#! file-offset 0                                                             #! file-offset 0                                                             
#! rip-offset  0                                                             #! rip-offset  0                                                             
#! capacity    0 bytes                                                       #! capacity    0 bytes                                                       
                                                                                                                                                          
# Text                        #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                      #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movq %rsi, %rdx             #  1     0     3      OPC=movq_r64_r64           movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  nop                         #  2     0x3   1      OPC=nop                    movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  movl %edi, %ecx             #  3     0x4   2      OPC=movl_r32_r32           movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  movl %edi, %eax             #  4     0x6   2      OPC=movl_r32_r32_1         nop                         #  4     0x7   1      OPC=nop                  
  nop                         #  5     0x8   1      OPC=nop                    movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  orw %dx, %di                #  6     0x9   3      OPC=orw_r16_r16_1          nop                         #  6     0xa   1      OPC=nop                  
  nop                         #  7     0xc   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  nop                         #  8     0xd   1      OPC=nop                    andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                         #  9     0xe   1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  andl $0x3, %edi             #  10    0xf   3      OPC=andl_r32_imm8          nop                         #  10    0x10  1      OPC=nop                  
  jne .L_126860               #  11    0x12  6      OPC=jne_label_1            nop                         #  11    0x11  1      OPC=nop                  
  movw %dx, %si               #  12    0x18  3      OPC=movw_r16_r16           nop                         #  12    0x12  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d    #  13    0x1b  4      OPC=movl_r32_m32           jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                         #  14    0x1f  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  jne .L_126860               #  15    0x20  6      OPC=jne_label_1            movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  nop                         #  16    0x26  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  nop                         #  17    0x27  1      OPC=nop                    jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                         #  18    0x28  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                         #  19    0x29  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                         #  20    0x2a  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                         #  21    0x2b  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                         #  22    0x2c  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                         #  23    0x2d  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                         #  24    0x2e  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                         #  25    0x2f  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                         #  26    0x30  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                         #  27    0x31  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                         #  28    0x32  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                         #  29    0x33  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                         #  30    0x34  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                         #  31    0x35  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                         #  32    0x36  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                         #  33    0x37  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                         #  34    0x38  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                         #  35    0x39  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                         #  36    0x3a  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                         #  37    0x3b  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                         #  38    0x3c  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                         #  39    0x3d  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                         #  40    0x3e  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nop                         #  41    0x3f  1      OPC=nop                    nop                         #  41    0x3f  1      OPC=nop                  
.L_126820:                    #        0x40  0      OPC=<label>              .L_126820:                    #        0x40  0      OPC=<label>              
  orl %ebp, %ecx              #  42    0x40  2      OPC=orl_r32_r32_1          xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
  movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx             #  44    0x46  3      OPC=addl_r32_imm8          addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl (%r15,%rdx,1), %r8d    #  45    0x49  4      OPC=movl_r32_m32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  movl %r8d, %r9d             #  46    0x4d  3      OPC=movl_r32_r32           movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  leal -0x1010101(%r8), %esi  #  47    0x50  7      OPC=leal_r32_m64           addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  addl $0x4, %ecx             #  48    0x57  3      OPC=addl_r32_imm8          leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  nop                         #  49    0x5a  1      OPC=nop                    nop                         #  49    0x5e  1      OPC=nop                  
  nop                         #  50    0x5b  1      OPC=nop                    nop                         #  50    0x5f  1      OPC=nop                  
  nop                         #  51    0x5c  1      OPC=nop                    nop                         #  51    0x60  1      OPC=nop                  
  nop                         #  52    0x5d  1      OPC=nop                    nop                         #  52    0x61  1      OPC=nop                  
  nop                         #  53    0x5e  1      OPC=nop                    nop                         #  53    0x62  1      OPC=nop                  
  nop                         #  54    0x5f  1      OPC=nop                    nop                         #  54    0x63  1      OPC=nop                  
  nop                         #  55    0x60  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  nop                         #  56    0x61  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                         #  57    0x62  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                         #  58    0x63  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                         #  59    0x64  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                         #  60    0x65  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                         #  61    0x66  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                         #  62    0x67  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                         #  63    0x68  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  notl %r9d                   #  64    0x69  3      OPC=notl_r32               je .L_126820                #  64    0x77  6      OPC=je_label_1           
  andl %esi, %r9d             #  65    0x6c  3      OPC=andl_r32_r32_1         nop                         #  65    0x7d  1      OPC=nop                  
  andq $0x80808080, %r9       #  66    0x6f  7      OPC=andq_r64_imm32         nop                         #  66    0x7e  1      OPC=nop                  
  je .L_126820                #  67    0x76  6      OPC=je_label_1             nop                         #  67    0x7f  1      OPC=nop                  
  nop                         #  68    0x7c  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                         #  69    0x7d  1      OPC=nop                    orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nop                         #  70    0x7e  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  nop                         #  71    0x7f  1      OPC=nop                    nop                         #  70    0x87  1      OPC=nop                  
.L_126860:                    #        0x80  0      OPC=<label>                nop                         #  71    0x88  1      OPC=nop                  
  andl %edx, %edx             #  72    0x80  2      OPC=andl_r32_r32_1         nop                         #  72    0x89  1      OPC=nop                  
  movsbl (%r15,%rdx,1), %esi  #  73    0x82  5      OPC=movsbl_r32_m8          nop                         #  73    0x8a  1      OPC=nop                  
  nop                         #  74    0x87  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  nop                         #  75    0x88  1      OPC=nop                    nop                         #  75    0x8c  1      OPC=nop                  
  xorl %esp, %ecx             #  76    0x89  2      OPC=xorl_r32_r32_1         addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  movb %sil, (%r15,%rcx,1)    #  77    0x8b  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  addb $0x1, %dl              #  78    0x8f  3      OPC=addb_r8_imm8           addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx             #  79    0x92  3      OPC=addl_r32_imm8          addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  testb %sil, %sil            #  80    0x95  3      OPC=testb_r8_r8            nop                         #  80    0x99  1      OPC=nop                  
  jne .L_126860               #  81    0x98  6      OPC=jne_label_1            nop                         #  81    0x9a  1      OPC=nop                  
  nop                         #  82    0x9e  1      OPC=nop                    nop                         #  82    0x9b  1      OPC=nop                  
  nop                         #  83    0x9f  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                         #  84    0xa0  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                         #  85    0xa1  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                         #  86    0xa2  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                         #  87    0xa3  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  nop                         #  88    0xa4  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                         #  89    0xa5  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  nop                         #  90    0xa6  1      OPC=nop                    jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  nop                         #  91    0xa7  1      OPC=nop                    nop                         #  91    0xab  1      OPC=nop                  
  nop                         #  92    0xa8  1      OPC=nop                    nop                         #  92    0xac  1      OPC=nop                  
  nop                         #  93    0xa9  1      OPC=nop                    nop                         #  93    0xad  1      OPC=nop                  
  nop                         #  94    0xaa  1      OPC=nop                    nop                         #  94    0xae  1      OPC=nop                  
  nop                         #  95    0xab  1      OPC=nop                    nop                         #  95    0xaf  1      OPC=nop                  
  nop                         #  96    0xac  1      OPC=nop                    nop                         #  96    0xb0  1      OPC=nop                  
  popq %r11                   #  97    0xad  2      OPC=popq_r64_1             nop                         #  97    0xb1  1      OPC=nop                  
  andl $0xe0, %r11d           #  98    0xaf  4      OPC=andl_r32_imm8          nop                         #  98    0xb2  1      OPC=nop                  
  addq %r15, %r11             #  99    0xb3  3      OPC=addq_r64_r64           nop                         #  99    0xb3  1      OPC=nop                  
  jmpq %r11                   #  100   0xb6  3      OPC=jmpq_r64               popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                               andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
.size strcpy, .-strcpy                                                         addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                               jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                          
                                                                             .size strcpy, .-strcpy                                                       
                                                                                                                                                          

********************************************************************************

Statistics Update: 

Iterations:                    100000
Elapsed Time:                  131.497s
Iterations/s:                  760.472

Starting cost:                 280
Lowest cost:                   258
Lowest correct cost:           259

Move Type       Proposed     Succeeded     Accepted     
                                                        
OpcodeWidth     8.282%       6.652%        5.832%       
Delete          8.447%       7.39%         3.652%       
Opcode          8.43%        7.359%        6.29%        
Operand         8.3%         5.184%        0.731%       
Local Swap      8.233%       5.671%        4.03%        
Instruction     8.393%       3.698%        0.135%       
Add Nops        8.362%       8.362%        3.519%       
ReplaceNop      8.429%       7.378%        5.72%        
Rotate          8.239%       6.422%        2.79%        
Global Swap     8.395%       5.991%        3.911%       
Global Copy     8.285%       7.051%        7.051%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.205%       4.637%        0.006%       
                                                        
Total           100%         75.795%       43.667%      

********************************************************************************

Statistics Update: 

Iterations:                    200000
Elapsed Time:                  272.394s
Iterations/s:                  734.231

Starting cost:                 280
Lowest cost:                   258
Lowest correct cost:           259

Move Type       Proposed     Succeeded     Accepted     
                                                        
OpcodeWidth     8.3315%      6.6955%       5.945%       
Delete          8.408%       7.304%        3.4905%      
Opcode          8.351%       7.3365%       6.2655%      
Operand         8.313%       5.05%         0.7075%      
Local Swap      8.253%       5.5025%       3.9035%      
Instruction     8.3645%      3.5425%       0.11%        
Add Nops        8.313%       8.313%        3.389%       
ReplaceNop      8.381%       7.3015%       5.7595%      
Rotate          8.285%       6.4235%       2.7945%      
Global Swap     8.3455%      5.9175%       3.91%        
Global Copy     8.3715%      7.1375%       7.1375%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.283%       4.5845%       0.0085%      
                                                        
Total           100%         75.1085%      43.421%      

********************************************************************************

Progress Update: 

Lowest Cost Discovered (257)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx                #  1     0     2      OPC=movl_r32_r32_1         movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  2     0x2   3      OPC=andl_r32_imm8          movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  movq %rdi, %rcx                #  3     0x5   3      OPC=movq_r64_r64           movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x8   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  jne .L_126860                  #  5     0x9   6      OPC=jne_label_1            movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  nop                            #  6     0xf   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0x10  1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  nop                            #  8     0x11  1      OPC=nop                    andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  16    0x19  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movl %edx, %esi                #  17    0x1a  2      OPC=movl_r32_r32_1         jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  movl (%r15,%rsi,1), %r8d       #  18    0x1c  4      OPC=movl_r32_m32           nop                         #  18    0x26  1      OPC=nop                  
  jne .L_126860                  #  19    0x20  6      OPC=jne_label_1            nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x26  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x27  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x28  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                            #  23    0x29  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nop                            #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3c  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3d  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
  nop                            #  44    0x3e  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  nop                            #  45    0x3f  1      OPC=nop                    addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
.L_126820:                       #        0x40  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  subl %esp, %ecx                #  46    0x40  2      OPC=subl_r32_r32           movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  movl %r8d, (%r15,%rcx,1)       #  47    0x42  4      OPC=movl_m32_r32           addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  addl $0x4, %ecx                #  48    0x46  6      OPC=addl_r32_imm32         leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  addl $0x4, %edx                #  49    0x4c  6      OPC=addl_r32_imm32         nop                         #  49    0x5e  1      OPC=nop                  
  movl (%r15,%rdx,1), %r8d       #  50    0x52  4      OPC=movl_r32_m32           nop                         #  50    0x5f  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi     #  51    0x56  7      OPC=leaq_r64_m16           nop                         #  51    0x60  1      OPC=nop                  
  movq %r8, %r9                  #  52    0x5d  3      OPC=movq_r64_r64_1         nop                         #  52    0x61  1      OPC=nop                  
  nop                            #  53    0x60  1      OPC=nop                    nop                         #  53    0x62  1      OPC=nop                  
  nop                            #  54    0x61  1      OPC=nop                    nop                         #  54    0x63  1      OPC=nop                  
  nop                            #  55    0x62  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  notq %r9                       #  56    0x63  3      OPC=notq_r64               nop                         #  56    0x65  1      OPC=nop                  
  andl $0x80808080, %esi         #  57    0x66  6      OPC=andl_r32_imm32         nop                         #  57    0x66  1      OPC=nop                  
  andl %esi, %r9d                #  58    0x6c  3      OPC=andl_r32_r32           nop                         #  58    0x67  1      OPC=nop                  
  je .L_126820                   #  59    0x6f  6      OPC=je_label_1             nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x75  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x76  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x77  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x78  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x79  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7a  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7b  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7c  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
  nop                            #  68    0x7d  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                            #  69    0x7e  1      OPC=nop                    orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nop                            #  70    0x7f  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
.L_126860:                       #        0x80  0      OPC=<label>                nop                         #  70    0x87  1      OPC=nop                  
  addl $0x1, %edx                #  71    0x80  3      OPC=addl_r32_imm8          nop                         #  71    0x88  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  72    0x83  7      OPC=movsbw_r16_m8          nop                         #  72    0x89  1      OPC=nop                  
  movq %rdi, %rax                #  73    0x8a  3      OPC=movq_r64_r64           nop                         #  73    0x8a  1      OPC=nop                  
  movw %cx, %cx                  #  74    0x8d  3      OPC=movw_r16_r16_1         nop                         #  74    0x8b  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  75    0x90  4      OPC=movb_m8_r8             nop                         #  75    0x8c  1      OPC=nop                  
  addl $0x1, %ecx                #  76    0x94  3      OPC=addl_r32_imm8          addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  nop                            #  77    0x97  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  nop                            #  78    0x98  1      OPC=nop                    addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x99  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  salw $0x1, %si                 #  80    0x9a  3      OPC=salw_r16_one           nop                         #  80    0x99  1      OPC=nop                  
  nop                            #  81    0x9d  1      OPC=nop                    nop                         #  81    0x9a  1      OPC=nop                  
  nop                            #  82    0x9e  1      OPC=nop                    nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0x9f  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa0  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa1  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  jne .L_126860                  #  86    0xa2  6      OPC=jne_label_1            nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xa8  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  nop                            #  88    0xa9  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xaa  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  popq %r11                      #  90    0xab  2      OPC=popq_r64_1             jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  andl $0xe0, %r11d              #  91    0xad  4      OPC=andl_r32_imm8          nop                         #  91    0xab  1      OPC=nop                  
  addq %r15, %r11                #  92    0xb1  3      OPC=addq_r64_r64           nop                         #  92    0xac  1      OPC=nop                  
  jmpq %r11                      #  93    0xb4  3      OPC=jmpq_r64               nop                         #  93    0xad  1      OPC=nop                  
                                                                                  nop                         #  94    0xae  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  95    0xaf  1      OPC=nop                  
                                                                                  nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (242)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  2     0x1   2      OPC=movl_r32_r32_1         movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x4   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  movq %rdi, %rcx                #  5     0x5   3      OPC=movq_r64_r64_1         movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0xb   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  jne .L_126860                  #  8     0xc   6      OPC=jne_label_1            andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  movl %edx, %esi                #  16    0x19  2      OPC=movl_r32_r32           movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movq (%r15,%rsi,1), %r8        #  17    0x1b  4      OPC=movq_r64_m64           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                            #  18    0x1f  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  jne .L_126860                  #  23    0x24  6      OPC=jne_label_1            nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nop                            #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3f  1      OPC=nop                  
  nopl %eax                      #  42    0x3c  3      OPC=nopl_r32             .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
  nop                            #  44    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  nop                            #  45    0x41  1      OPC=nop                    addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
.L_126820:                       #        0x42  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  subl %ebp, %ecx                #  46    0x42  2      OPC=subl_r32_r32_1         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  movl %r8d, (%r15,%rcx,1)       #  47    0x44  4      OPC=movl_m32_r32           addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  addl $0x4, %ecx                #  48    0x48  6      OPC=addl_r32_imm32         leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  addl $0x4, %edx                #  49    0x4e  6      OPC=addl_r32_imm32         nop                         #  49    0x5e  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8        #  50    0x54  4      OPC=movq_r64_m64           nop                         #  50    0x5f  1      OPC=nop                  
  leal -0x1010101(%r8), %esi     #  51    0x58  7      OPC=leal_r32_m32           nop                         #  51    0x60  1      OPC=nop                  
  movq %r8, %r9                  #  52    0x5f  3      OPC=movq_r64_r64_1         nop                         #  52    0x61  1      OPC=nop                  
  notq %r9                       #  53    0x62  3      OPC=notq_r64               nop                         #  53    0x62  1      OPC=nop                  
  andl %esi, %r9d                #  54    0x65  3      OPC=andl_r32_r32           nop                         #  54    0x63  1      OPC=nop                  
  andl $0x80808080, %r9d         #  55    0x68  7      OPC=andl_r32_imm32         nop                         #  55    0x64  1      OPC=nop                  
  je .L_126820                   #  56    0x6f  6      OPC=je_label_1             nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
  nop                            #  68    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                            #  69    0x81  1      OPC=nop                    orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nop                            #  70    0x82  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
.L_126860:                       #        0x83  0      OPC=<label>                nop                         #  70    0x87  1      OPC=nop                  
  nop                            #  71    0x83  1      OPC=nop                    nop                         #  71    0x88  1      OPC=nop                  
  addl $0x1, %edx                #  72    0x84  3      OPC=addl_r32_imm8          nop                         #  72    0x89  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  73    0x87  7      OPC=movsbw_r16_m8          nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x8e  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  nop                            #  75    0x8f  1      OPC=nop                    nop                         #  75    0x8c  1      OPC=nop                  
  andq %rcx, %rcx                #  76    0x90  3      OPC=andq_r64_r64           addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  movb %sil, (%r15,%rcx,1)       #  77    0x93  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  movq %rdi, %rax                #  78    0x97  3      OPC=movq_r64_r64           addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx                #  79    0x9a  3      OPC=addl_r32_imm8          addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x9d  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  nop                            #  81    0x9e  1      OPC=nop                    nop                         #  81    0x9a  1      OPC=nop                  
  shlw $0x1, %si                 #  82    0x9f  3      OPC=shlw_r16_one           nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0xa2  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa3  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa4  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                            #  86    0xa5  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xa6  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  jne .L_126860                  #  88    0xa7  6      OPC=jne_label_1            testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xad  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  nop                            #  90    0xae  1      OPC=nop                    jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  nop                            #  91    0xaf  1      OPC=nop                    nop                         #  91    0xab  1      OPC=nop                  
  nop                            #  92    0xb0  1      OPC=nop                    nop                         #  92    0xac  1      OPC=nop                  
  popq %r11                      #  93    0xb1  2      OPC=popq_r64_1             nop                         #  93    0xad  1      OPC=nop                  
  andl $0xe0, %r11d              #  94    0xb3  4      OPC=andl_r32_imm8          nop                         #  94    0xae  1      OPC=nop                  
  addq %r15, %r11                #  95    0xb7  3      OPC=addq_r64_r64           nop                         #  95    0xaf  1      OPC=nop                  
  jmpq %r11                      #  96    0xba  3      OPC=jmpq_r64               nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (241)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  2     0x1   2      OPC=movl_r32_r32_1         movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x4   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  movq %rdi, %rcx                #  5     0x5   3      OPC=movq_r64_r64_1         movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0xb   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  jne .L_126860                  #  8     0xc   6      OPC=jne_label_1            andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  movl %edx, %esi                #  16    0x19  2      OPC=movl_r32_r32           movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movq (%r15,%rsi,1), %r8        #  17    0x1b  4      OPC=movq_r64_m64           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                            #  18    0x1f  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  jne .L_126860                  #  23    0x24  6      OPC=jne_label_1            nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nop                            #  41    0x3b  1      OPC=nop                    nop                         #  41    0x3f  1      OPC=nop                  
  nopl %eax                      #  42    0x3c  3      OPC=nopl_r32             .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
  nop                            #  44    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  nop                            #  45    0x41  1      OPC=nop                    addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
.L_126820:                       #        0x42  0      OPC=<label>                movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  subl %ebp, %ecx                #  46    0x42  2      OPC=subl_r32_r32_1         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  movl %r8d, (%r15,%rcx,1)       #  47    0x44  4      OPC=movl_m32_r32           addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  addl $0x4, %ecx                #  48    0x48  6      OPC=addl_r32_imm32         leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  addl $0x4, %edx                #  49    0x4e  6      OPC=addl_r32_imm32         nop                         #  49    0x5e  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8        #  50    0x54  4      OPC=movq_r64_m64           nop                         #  50    0x5f  1      OPC=nop                  
  leal -0x1010101(%r8), %esi     #  51    0x58  7      OPC=leal_r32_m32           nop                         #  51    0x60  1      OPC=nop                  
  movq %r8, %r9                  #  52    0x5f  3      OPC=movq_r64_r64_1         nop                         #  52    0x61  1      OPC=nop                  
  notq %r9                       #  53    0x62  3      OPC=notq_r64               nop                         #  53    0x62  1      OPC=nop                  
  andl %esi, %r9d                #  54    0x65  3      OPC=andl_r32_r32           nop                         #  54    0x63  1      OPC=nop                  
  andl $0x80808080, %r9d         #  55    0x68  7      OPC=andl_r32_imm32         nop                         #  55    0x64  1      OPC=nop                  
  je .L_126820                   #  56    0x6f  6      OPC=je_label_1             nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
  nop                            #  68    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
  nop                            #  69    0x81  1      OPC=nop                    orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
.L_126860:                       #        0x82  0      OPC=<label>                movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  nop                            #  70    0x82  1      OPC=nop                    nop                         #  70    0x87  1      OPC=nop                  
  addl $0x1, %edx                #  71    0x83  3      OPC=addl_r32_imm8          nop                         #  71    0x88  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  72    0x86  7      OPC=movsbw_r16_m8          nop                         #  72    0x89  1      OPC=nop                  
  nop                            #  73    0x8d  1      OPC=nop                    nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x8e  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  andq %rcx, %rcx                #  75    0x8f  3      OPC=andq_r64_r64           nop                         #  75    0x8c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  76    0x92  4      OPC=movb_m8_r8             addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  movq %rdi, %rax                #  77    0x96  3      OPC=movq_r64_r64           movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  addl $0x1, %ecx                #  78    0x99  3      OPC=addl_r32_imm8          addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x9c  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x9d  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  shlw $0x1, %si                 #  81    0x9e  3      OPC=shlw_r16_one           nop                         #  81    0x9a  1      OPC=nop                  
  nop                            #  82    0xa1  1      OPC=nop                    nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0xa2  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa3  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa4  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                            #  86    0xa5  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  jne .L_126860                  #  87    0xa6  6      OPC=jne_label_1            nop                         #  87    0xa0  1      OPC=nop                  
  nop                            #  88    0xac  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xad  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  nop                            #  90    0xae  1      OPC=nop                    jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  nop                            #  91    0xaf  1      OPC=nop                    nop                         #  91    0xab  1      OPC=nop                  
  nop                            #  92    0xb0  1      OPC=nop                    nop                         #  92    0xac  1      OPC=nop                  
  popq %r11                      #  93    0xb1  2      OPC=popq_r64_1             nop                         #  93    0xad  1      OPC=nop                  
  andl $0xe0, %r11d              #  94    0xb3  4      OPC=andl_r32_imm8          nop                         #  94    0xae  1      OPC=nop                  
  addq %r15, %r11                #  95    0xb7  3      OPC=addq_r64_r64           nop                         #  95    0xaf  1      OPC=nop                  
  jmpq %r11                      #  96    0xba  3      OPC=jmpq_r64               nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (240)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  2     0x1   2      OPC=movl_r32_r32_1         movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x4   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  movq %rdi, %rcx                #  5     0x5   3      OPC=movq_r64_r64_1         movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0xb   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  jne .L_126860                  #  8     0xc   6      OPC=jne_label_1            andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  movl %edx, %esi                #  16    0x19  2      OPC=movl_r32_r32           movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movq (%r15,%rsi,1), %r8        #  17    0x1b  4      OPC=movq_r64_m64           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                            #  18    0x1f  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  jne .L_126860                  #  23    0x24  6      OPC=jne_label_1            nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nopl %eax                      #  41    0x3b  3      OPC=nopl_r32               nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
  nop                            #  44    0x40  1      OPC=nop                    movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
.L_126820:                       #        0x41  0      OPC=<label>                addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  subl %ebp, %ecx                #  45    0x41  2      OPC=subl_r32_r32_1         movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  movl %r8d, (%r15,%rcx,1)       #  46    0x43  4      OPC=movl_m32_r32           movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  addl $0x4, %ecx                #  47    0x47  6      OPC=addl_r32_imm32         addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  addl $0x4, %edx                #  48    0x4d  6      OPC=addl_r32_imm32         leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  movq (%r15,%rdx,1), %r8        #  49    0x53  4      OPC=movq_r64_m64           nop                         #  49    0x5e  1      OPC=nop                  
  leal -0x1010101(%r8), %esi     #  50    0x57  7      OPC=leal_r32_m32           nop                         #  50    0x5f  1      OPC=nop                  
  movq %r8, %r9                  #  51    0x5e  3      OPC=movq_r64_r64_1         nop                         #  51    0x60  1      OPC=nop                  
  notq %r9                       #  52    0x61  3      OPC=notq_r64               nop                         #  52    0x61  1      OPC=nop                  
  andl %esi, %r9d                #  53    0x64  3      OPC=andl_r32_r32           nop                         #  53    0x62  1      OPC=nop                  
  andl $0x80808080, %r9d         #  54    0x67  7      OPC=andl_r32_imm32         nop                         #  54    0x63  1      OPC=nop                  
  je .L_126820                   #  55    0x6e  6      OPC=je_label_1             nop                         #  55    0x64  1      OPC=nop                  
  nop                            #  56    0x74  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
  nop                            #  68    0x80  1      OPC=nop                  .L_126860:                    #        0x80  0      OPC=<label>              
.L_126860:                       #        0x81  0      OPC=<label>                orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nop                            #  69    0x81  1      OPC=nop                    movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  addl $0x1, %edx                #  70    0x82  3      OPC=addl_r32_imm8          nop                         #  70    0x87  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  71    0x85  7      OPC=movsbw_r16_m8          nop                         #  71    0x88  1      OPC=nop                  
  nop                            #  72    0x8c  1      OPC=nop                    nop                         #  72    0x89  1      OPC=nop                  
  nop                            #  73    0x8d  1      OPC=nop                    nop                         #  73    0x8a  1      OPC=nop                  
  andq %rcx, %rcx                #  74    0x8e  3      OPC=andq_r64_r64           nop                         #  74    0x8b  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  75    0x91  4      OPC=movb_m8_r8             nop                         #  75    0x8c  1      OPC=nop                  
  movq %rdi, %rax                #  76    0x95  3      OPC=movq_r64_r64           addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  addl $0x1, %ecx                #  77    0x98  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  nop                            #  78    0x9b  1      OPC=nop                    addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x9c  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  shlw $0x1, %si                 #  80    0x9d  3      OPC=shlw_r16_one           nop                         #  80    0x99  1      OPC=nop                  
  nop                            #  81    0xa0  1      OPC=nop                    nop                         #  81    0x9a  1      OPC=nop                  
  nop                            #  82    0xa1  1      OPC=nop                    nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0xa2  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa3  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa4  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  jne .L_126860                  #  86    0xa5  6      OPC=jne_label_1            nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xab  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  nop                            #  88    0xac  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xad  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  popq %r11                      #  90    0xae  2      OPC=popq_r64_1             jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  andl $0xe0, %r11d              #  91    0xb0  4      OPC=andl_r32_imm8          nop                         #  91    0xab  1      OPC=nop                  
  addq %r15, %r11                #  92    0xb4  3      OPC=addq_r64_r64           nop                         #  92    0xac  1      OPC=nop                  
  jmpq %r11                      #  93    0xb7  3      OPC=jmpq_r64               nop                         #  93    0xad  1      OPC=nop                  
                                                                                  nop                         #  94    0xae  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  95    0xaf  1      OPC=nop                  
                                                                                  nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (239)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  2     0x1   2      OPC=movl_r32_r32_1         movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x4   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  movq %rdi, %rcx                #  5     0x5   3      OPC=movq_r64_r64_1         movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0xb   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  jne .L_126860                  #  8     0xc   6      OPC=jne_label_1            andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  16    0x19  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movl %edx, %esi                #  17    0x1a  2      OPC=movl_r32_r32           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8        #  18    0x1c  4      OPC=movq_r64_m64           nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                            #  23    0x24  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  jne .L_126860                  #  24    0x25  6      OPC=jne_label_1            nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nopl %eax                      #  41    0x3b  3      OPC=nopl_r32               nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                       #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  subl %ebp, %ecx                #  44    0x40  2      OPC=subl_r32_r32_1         addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           nop                         #  49    0x5e  1      OPC=nop                  
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         nop                         #  50    0x5f  1      OPC=nop                  
  notq %r9                       #  51    0x60  3      OPC=notq_r64               nop                         #  51    0x60  1      OPC=nop                  
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           nop                         #  52    0x61  1      OPC=nop                  
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         nop                         #  53    0x62  1      OPC=nop                  
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             nop                         #  54    0x63  1      OPC=nop                  
  nop                            #  55    0x73  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  nop                            #  56    0x74  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  nopl %eax                      #  68    0x80  3      OPC=nopl_r32               orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nopl %eax                      #  69    0x83  3      OPC=nopl_r32               movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  nop                            #  70    0x86  1      OPC=nop                    nop                         #  70    0x87  1      OPC=nop                  
  nop                            #  71    0x87  1      OPC=nop                    nop                         #  71    0x88  1      OPC=nop                  
  addl $0x1, %edx                #  72    0x88  3      OPC=addl_r32_imm8          nop                         #  72    0x89  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  73    0x8b  7      OPC=movsbw_r16_m8          nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x92  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  nop                            #  75    0x93  1      OPC=nop                    nop                         #  75    0x8c  1      OPC=nop                  
  andq %rcx, %rcx                #  76    0x94  3      OPC=andq_r64_r64           addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  movb %sil, (%r15,%rcx,1)       #  77    0x97  4      OPC=movb_m8_r8             movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  movq %rdi, %rax                #  78    0x9b  3      OPC=movq_r64_r64           addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x9e  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x9f  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  nop                            #  81    0xa0  1      OPC=nop                    nop                         #  81    0x9a  1      OPC=nop                  
  addl $0x1, %ecx                #  82    0xa1  3      OPC=addl_r32_imm8          nop                         #  82    0x9b  1      OPC=nop                  
  shlw $0x1, %si                 #  83    0xa4  3      OPC=shlw_r16_one           nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa7  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa8  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                            #  86    0xa9  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xaa  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  nop                            #  88    0xab  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  jne .L_126860                  #  89    0xac  6      OPC=jne_label_1            nop                         #  89    0xa4  1      OPC=nop                  
  nop                            #  90    0xb2  1      OPC=nop                    jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  popq %r11                      #  91    0xb3  2      OPC=popq_r64_1             nop                         #  91    0xab  1      OPC=nop                  
  andl $0xe0, %r11d              #  92    0xb5  4      OPC=andl_r32_imm8          nop                         #  92    0xac  1      OPC=nop                  
  addq %r15, %r11                #  93    0xb9  3      OPC=addq_r64_r64           nop                         #  93    0xad  1      OPC=nop                  
  jmpq %r11                      #  94    0xbc  3      OPC=jmpq_r64               nop                         #  94    0xae  1      OPC=nop                  
                                                                                  nop                         #  95    0xaf  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (238)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  2     0x1   2      OPC=movl_r32_r32_1         movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  nop                            #  4     0x4   1      OPC=nop                    nop                         #  4     0x7   1      OPC=nop                  
  movq %rdi, %rcx                #  5     0x5   3      OPC=movq_r64_r64_1         movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0xb   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  jne .L_126860                  #  8     0xc   6      OPC=jne_label_1            andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  16    0x19  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movl %edx, %esi                #  17    0x1a  2      OPC=movl_r32_r32           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  movq (%r15,%rsi,1), %r8        #  18    0x1c  4      OPC=movq_r64_m64           nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                            #  23    0x24  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x25  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  jne .L_126860                  #  25    0x26  6      OPC=jne_label_1            nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nopl %eax                      #  41    0x3b  3      OPC=nopl_r32               nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                       #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  subl %ebp, %ecx                #  44    0x40  2      OPC=subl_r32_r32_1         addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           nop                         #  49    0x5e  1      OPC=nop                  
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         nop                         #  50    0x5f  1      OPC=nop                  
  notq %r9                       #  51    0x60  3      OPC=notq_r64               nop                         #  51    0x60  1      OPC=nop                  
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           nop                         #  52    0x61  1      OPC=nop                  
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         nop                         #  53    0x62  1      OPC=nop                  
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             nop                         #  54    0x63  1      OPC=nop                  
  nop                            #  55    0x73  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  nop                            #  56    0x74  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  nopl %eax                      #  68    0x80  3      OPC=nopl_r32               orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  nopl %eax                      #  69    0x83  3      OPC=nopl_r32               movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  nop                            #  70    0x86  1      OPC=nop                    nop                         #  70    0x87  1      OPC=nop                  
  nop                            #  71    0x87  1      OPC=nop                    nop                         #  71    0x88  1      OPC=nop                  
  addl $0x1, %edx                #  72    0x88  3      OPC=addl_r32_imm8          nop                         #  72    0x89  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  73    0x8b  7      OPC=movsbw_r16_m8          nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x92  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  andq %rcx, %rcx                #  75    0x93  3      OPC=andq_r64_r64           nop                         #  75    0x8c  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  76    0x96  4      OPC=movb_m8_r8             addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  movq %rdi, %rax                #  77    0x9a  3      OPC=movq_r64_r64           movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  nop                            #  78    0x9d  1      OPC=nop                    addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x9e  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x9f  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  addl $0x1, %ecx                #  81    0xa0  3      OPC=addl_r32_imm8          nop                         #  81    0x9a  1      OPC=nop                  
  shlw $0x1, %si                 #  82    0xa3  3      OPC=shlw_r16_one           nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0xa6  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa7  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa8  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                            #  86    0xa9  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xaa  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  jne .L_126860                  #  88    0xab  6      OPC=jne_label_1            testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xb1  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  popq %r11                      #  90    0xb2  2      OPC=popq_r64_1             jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  andl $0xe0, %r11d              #  91    0xb4  4      OPC=andl_r32_imm8          nop                         #  91    0xab  1      OPC=nop                  
  addq %r15, %r11                #  92    0xb8  3      OPC=addq_r64_r64           nop                         #  92    0xac  1      OPC=nop                  
  jmpq %r11                      #  93    0xbb  3      OPC=jmpq_r64               nop                         #  93    0xad  1      OPC=nop                  
                                                                                  nop                         #  94    0xae  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  95    0xaf  1      OPC=nop                  
                                                                                  nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (237)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  movl %esi, %edx                #  1     0     2      OPC=movl_r32_r32_1         movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  nop                            #  2     0x2   1      OPC=nop                    movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  nop                            #  3     0x3   1      OPC=nop                    movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  movq %rdi, %rcx                #  4     0x4   3      OPC=movq_r64_r64_1         nop                         #  4     0x7   1      OPC=nop                  
  nop                            #  5     0x7   1      OPC=nop                    movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  6     0x8   3      OPC=andl_r32_imm8          nop                         #  6     0xa   1      OPC=nop                  
  jne .L_126860                  #  7     0xb   6      OPC=jne_label_1            nop                         #  7     0xb   1      OPC=nop                  
  nop                            #  8     0x11  1      OPC=nop                    andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  nop                            #  9     0x12  1      OPC=nop                    nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0x13  1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  nop                            #  11    0x14  1      OPC=nop                    nop                         #  11    0x11  1      OPC=nop                  
  nop                            #  12    0x15  1      OPC=nop                    nop                         #  12    0x12  1      OPC=nop                  
  nop                            #  13    0x16  1      OPC=nop                    jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x17  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x18  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  movl %edx, %esi                #  16    0x19  2      OPC=movl_r32_r32           movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  movq (%r15,%rsi,1), %r8        #  17    0x1b  4      OPC=movq_r64_m64           jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                            #  18    0x1f  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  nop                            #  22    0x23  1      OPC=nop                    nop                         #  22    0x2a  1      OPC=nop                  
  nop                            #  23    0x24  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x25  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  jne .L_126860                  #  25    0x26  6      OPC=jne_label_1            nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nop                            #  33    0x33  1      OPC=nop                    nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x34  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x35  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x36  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x37  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x38  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x39  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3a  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nopl %eax                      #  41    0x3b  3      OPC=nopl_r32               nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                       #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  subl %ebp, %ecx                #  44    0x40  2      OPC=subl_r32_r32_1         addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  leaq -0x1010101(%r8), %rsi     #  49    0x56  7      OPC=leaq_r64_m64           nop                         #  49    0x5e  1      OPC=nop                  
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         nop                         #  50    0x5f  1      OPC=nop                  
  notq %r9                       #  51    0x60  3      OPC=notq_r64               nop                         #  51    0x60  1      OPC=nop                  
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           nop                         #  52    0x61  1      OPC=nop                  
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         nop                         #  53    0x62  1      OPC=nop                  
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             nop                         #  54    0x63  1      OPC=nop                  
  nop                            #  55    0x73  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  nop                            #  56    0x74  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  nopl %eax                      #  68    0x80  3      OPC=nopl_r32               orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  addl $0x1, %edx                #  69    0x83  3      OPC=addl_r32_imm8          movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  movsbw -0x1(%r15,%rdx,1), %si  #  70    0x86  7      OPC=movsbw_r16_m8          nop                         #  70    0x87  1      OPC=nop                  
  andq %rcx, %rcx                #  71    0x8d  3      OPC=andq_r64_r64           nop                         #  71    0x88  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  72    0x90  4      OPC=movb_m8_r8             nop                         #  72    0x89  1      OPC=nop                  
  nop                            #  73    0x94  1      OPC=nop                    nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x95  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  nop                            #  75    0x96  1      OPC=nop                    nop                         #  75    0x8c  1      OPC=nop                  
  nop                            #  76    0x97  1      OPC=nop                    addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  addl $0x1, %ecx                #  77    0x98  3      OPC=addl_r32_imm8          movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  salw $0x1, %si                 #  78    0x9b  3      OPC=salw_r16_one           addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x9e  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x9f  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  movq %rdi, %rax                #  81    0xa0  3      OPC=movq_r64_r64           nop                         #  81    0x9a  1      OPC=nop                  
  jne .L_126860                  #  82    0xa3  6      OPC=jne_label_1            nop                         #  82    0x9b  1      OPC=nop                  
  nopl %eax                      #  83    0xa9  3      OPC=nopl_r32               nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xac  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xad  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  popq %r11                      #  86    0xae  2      OPC=popq_r64_1             nop                         #  86    0x9f  1      OPC=nop                  
  andl $0xe0, %r11d              #  87    0xb0  4      OPC=andl_r32_imm8          nop                         #  87    0xa0  1      OPC=nop                  
  addq %r15, %r11                #  88    0xb4  3      OPC=addq_r64_r64           testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  jmpq %r11                      #  89    0xb7  3      OPC=jmpq_r64               nop                         #  89    0xa4  1      OPC=nop                  
                                                                                  jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
.size strcpy, .-strcpy                                                            nop                         #  91    0xab  1      OPC=nop                  
                                                                                  nop                         #  92    0xac  1      OPC=nop                  
                                                                                  nop                         #  93    0xad  1      OPC=nop                  
                                                                                  nop                         #  94    0xae  1      OPC=nop                  
                                                                                  nop                         #  95    0xaf  1      OPC=nop                  
                                                                                  nop                         #  96    0xb0  1      OPC=nop                  
                                                                                  nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
                                                                                  nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (236)                                                    Lowest Known Correct Cost (259)                                              
                                                                                                                                                             
  .text                                                                           .text                                                                      
  .globl strcpy                                                                   .globl strcpy                                                              
  .type strcpy, @function                                                         .type strcpy, @function                                                    
                                                                                                                                                             
#! file-offset 0                                                                #! file-offset 0                                                             
#! rip-offset  0                                                                #! rip-offset  0                                                             
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                       
                                                                                                                                                             
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                        #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                      #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %edi, %eax             #  1     0     2      OPC=movl_r32_r32_1       
  nop                            #  2     0x1   1      OPC=nop                    movq %rdi, %rcx             #  2     0x2   3      OPC=movq_r64_r64         
  movl %esi, %edx                #  3     0x2   2      OPC=movl_r32_r32_1         movl %esi, %edi             #  3     0x5   2      OPC=movl_r32_r32         
  andl $0x3, %esi                #  4     0x4   3      OPC=andl_r32_imm8          nop                         #  4     0x7   1      OPC=nop                  
  nop                            #  5     0x7   1      OPC=nop                    movl %esi, %edx             #  5     0x8   2      OPC=movl_r32_r32_1       
  nop                            #  6     0x8   1      OPC=nop                    nop                         #  6     0xa   1      OPC=nop                  
  nop                            #  7     0x9   1      OPC=nop                    nop                         #  7     0xb   1      OPC=nop                  
  nop                            #  8     0xa   1      OPC=nop                    andl $0x3, %edi             #  8     0xc   3      OPC=andl_r32_imm8        
  movq %rdi, %rcx                #  9     0xb   3      OPC=movq_r64_r64_1         nop                         #  9     0xf   1      OPC=nop                  
  nop                            #  10    0xe   1      OPC=nop                    nop                         #  10    0x10  1      OPC=nop                  
  jne .L_126860                  #  11    0xf   6      OPC=jne_label_1            nop                         #  11    0x11  1      OPC=nop                  
  movl %edx, %esi                #  12    0x15  2      OPC=movl_r32_r32           nop                         #  12    0x12  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8        #  13    0x17  4      OPC=movq_r64_m64           jne .L_126860               #  13    0x13  6      OPC=jne_label_1          
  nop                            #  14    0x1b  1      OPC=nop                    nop                         #  14    0x19  1      OPC=nop                  
  nop                            #  15    0x1c  1      OPC=nop                    movl %esi, %esi             #  15    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  16    0x1d  1      OPC=nop                    movq (%r15,%rsi,1), %r8     #  16    0x1c  4      OPC=movq_r64_m64         
  nop                            #  17    0x1e  1      OPC=nop                    jne .L_126860               #  17    0x20  6      OPC=jne_label_1          
  nop                            #  18    0x1f  1      OPC=nop                    nop                         #  18    0x26  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                         #  19    0x27  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                         #  20    0x28  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                         #  21    0x29  1      OPC=nop                  
  jne .L_126860                  #  22    0x23  6      OPC=jne_label_1            nop                         #  22    0x2a  1      OPC=nop                  
  nop                            #  23    0x29  1      OPC=nop                    nop                         #  23    0x2b  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                         #  24    0x2c  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                         #  25    0x2d  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nopl %eax                   #  26    0x2e  3      OPC=nopl_r32             
  nop                            #  27    0x2d  1      OPC=nop                    nop                         #  27    0x31  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                         #  28    0x32  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                         #  29    0x33  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                         #  30    0x34  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                         #  31    0x35  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                         #  32    0x36  1      OPC=nop                  
  nopl %eax                      #  33    0x33  3      OPC=nopl_r32               nop                         #  33    0x37  1      OPC=nop                  
  nop                            #  34    0x36  1      OPC=nop                    nop                         #  34    0x38  1      OPC=nop                  
  nop                            #  35    0x37  1      OPC=nop                    nop                         #  35    0x39  1      OPC=nop                  
  nop                            #  36    0x38  1      OPC=nop                    nop                         #  36    0x3a  1      OPC=nop                  
  nop                            #  37    0x39  1      OPC=nop                    nop                         #  37    0x3b  1      OPC=nop                  
  nop                            #  38    0x3a  1      OPC=nop                    nop                         #  38    0x3c  1      OPC=nop                  
  nop                            #  39    0x3b  1      OPC=nop                    nop                         #  39    0x3d  1      OPC=nop                  
  nop                            #  40    0x3c  1      OPC=nop                    nop                         #  40    0x3e  1      OPC=nop                  
  nop                            #  41    0x3d  1      OPC=nop                    nop                         #  41    0x3f  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                  .L_126820:                    #        0x40  0      OPC=<label>              
  nop                            #  43    0x3f  1      OPC=nop                    xorl %esp, %ecx             #  42    0x40  2      OPC=xorl_r32_r32_1       
.L_126820:                       #        0x40  0      OPC=<label>                movl %r8d, (%r15,%rcx,1)    #  43    0x42  4      OPC=movl_m32_r32         
  orl %ecx, %ecx                 #  44    0x40  2      OPC=orl_r32_r32            addl $0x4, %edx             #  44    0x46  6      OPC=addl_r32_imm32       
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           movl (%r15,%rdx,1), %r8d    #  45    0x4c  4      OPC=movl_r32_m32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movq %r8, %r9               #  46    0x50  3      OPC=movq_r64_r64_1       
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addw $0x4, %cx              #  47    0x53  4      OPC=addw_r16_imm8        
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           leaq -0x1010101(%r8), %rsi  #  48    0x57  7      OPC=leaq_r64_m32         
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           nop                         #  49    0x5e  1      OPC=nop                  
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         nop                         #  50    0x5f  1      OPC=nop                  
  notq %r9                       #  51    0x60  3      OPC=notq_r64               nop                         #  51    0x60  1      OPC=nop                  
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           nop                         #  52    0x61  1      OPC=nop                  
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         nop                         #  53    0x62  1      OPC=nop                  
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             nop                         #  54    0x63  1      OPC=nop                  
  nop                            #  55    0x73  1      OPC=nop                    nop                         #  55    0x64  1      OPC=nop                  
  nop                            #  56    0x74  1      OPC=nop                    nop                         #  56    0x65  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                         #  57    0x66  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                         #  58    0x67  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                         #  59    0x68  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                         #  60    0x69  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    notl %r9d                   #  61    0x6a  3      OPC=notl_r32             
  nop                            #  62    0x7a  1      OPC=nop                    andl $0x80808080, %r9d      #  62    0x6d  7      OPC=andl_r32_imm32       
  nop                            #  63    0x7b  1      OPC=nop                    andl %esi, %r9d             #  63    0x74  3      OPC=andl_r32_r32_1       
  nop                            #  64    0x7c  1      OPC=nop                    je .L_126820                #  64    0x77  6      OPC=je_label_1           
  nop                            #  65    0x7d  1      OPC=nop                    nop                         #  65    0x7d  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                         #  66    0x7e  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                         #  67    0x7f  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>              .L_126860:                    #        0x80  0      OPC=<label>              
  addl $0x1, %edx                #  68    0x80  3      OPC=addl_r32_imm8          orl %esp, %edx              #  68    0x80  2      OPC=orl_r32_r32_1        
  movsbw -0x1(%r15,%rdx,1), %si  #  69    0x83  7      OPC=movsbw_r16_m8          movsbl (%r15,%rdx,1), %esi  #  69    0x82  5      OPC=movsbl_r32_m8        
  orq %rcx, %rcx                 #  70    0x8a  3      OPC=orq_r64_r64_1          nop                         #  70    0x87  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  71    0x8d  4      OPC=movb_m8_r8             nop                         #  71    0x88  1      OPC=nop                  
  nop                            #  72    0x91  1      OPC=nop                    nop                         #  72    0x89  1      OPC=nop                  
  nop                            #  73    0x92  1      OPC=nop                    nop                         #  73    0x8a  1      OPC=nop                  
  nop                            #  74    0x93  1      OPC=nop                    nop                         #  74    0x8b  1      OPC=nop                  
  nop                            #  75    0x94  1      OPC=nop                    nop                         #  75    0x8c  1      OPC=nop                  
  nop                            #  76    0x95  1      OPC=nop                    addl %esp, %ecx             #  76    0x8d  2      OPC=addl_r32_r32_1       
  nop                            #  77    0x96  1      OPC=nop                    movb %sil, (%r15,%rcx,1)    #  77    0x8f  4      OPC=movb_m8_r8           
  nop                            #  78    0x97  1      OPC=nop                    addl $0x1, %ecx             #  78    0x93  3      OPC=addl_r32_imm8        
  nop                            #  79    0x98  1      OPC=nop                    addb $0x1, %dl              #  79    0x96  3      OPC=addb_r8_imm8         
  nop                            #  80    0x99  1      OPC=nop                    nop                         #  80    0x99  1      OPC=nop                  
  addl $0x1, %ecx                #  81    0x9a  3      OPC=addl_r32_imm8          nop                         #  81    0x9a  1      OPC=nop                  
  salw $0x1, %si                 #  82    0x9d  3      OPC=salw_r16_one           nop                         #  82    0x9b  1      OPC=nop                  
  nop                            #  83    0xa0  1      OPC=nop                    nop                         #  83    0x9c  1      OPC=nop                  
  nop                            #  84    0xa1  1      OPC=nop                    nop                         #  84    0x9d  1      OPC=nop                  
  nop                            #  85    0xa2  1      OPC=nop                    nop                         #  85    0x9e  1      OPC=nop                  
  nop                            #  86    0xa3  1      OPC=nop                    nop                         #  86    0x9f  1      OPC=nop                  
  nop                            #  87    0xa4  1      OPC=nop                    nop                         #  87    0xa0  1      OPC=nop                  
  nop                            #  88    0xa5  1      OPC=nop                    testb %sil, %sil            #  88    0xa1  3      OPC=testb_r8_r8          
  nop                            #  89    0xa6  1      OPC=nop                    nop                         #  89    0xa4  1      OPC=nop                  
  movl %edi, %eax                #  90    0xa7  2      OPC=movl_r32_r32_1         jne .L_126860               #  90    0xa5  6      OPC=jne_label_1          
  jne .L_126860                  #  91    0xa9  6      OPC=jne_label_1            nop                         #  91    0xab  1      OPC=nop                  
  nop                            #  92    0xaf  1      OPC=nop                    nop                         #  92    0xac  1      OPC=nop                  
  nop                            #  93    0xb0  1      OPC=nop                    nop                         #  93    0xad  1      OPC=nop                  
  popq %r11                      #  94    0xb1  2      OPC=popq_r64_1             nop                         #  94    0xae  1      OPC=nop                  
  andl $0xe0, %r11d              #  95    0xb3  4      OPC=andl_r32_imm8          nop                         #  95    0xaf  1      OPC=nop                  
  addq %r15, %r11                #  96    0xb7  3      OPC=addq_r64_r64           nop                         #  96    0xb0  1      OPC=nop                  
  jmpq %r11                      #  97    0xba  3      OPC=jmpq_r64               nop                         #  97    0xb1  1      OPC=nop                  
                                                                                  nop                         #  98    0xb2  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                         #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                   #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d           #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11             #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                   #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                             
                                                                                .size strcpy, .-strcpy                                                       
                                                                                                                                                             

********************************************************************************

Progress Update: 

Lowest Cost Discovered (236)                                                    Lowest Known Correct Cost (238)                                                  
                                                                                                                                                                 
  .text                                                                           .text                                                                          
  .globl strcpy                                                                   .globl strcpy                                                                  
  .type strcpy, @function                                                         .type strcpy, @function                                                        
                                                                                                                                                                 
#! file-offset 0                                                                #! file-offset 0                                                                 
#! rip-offset  0                                                                #! rip-offset  0                                                                 
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                           
                                                                                                                                                                 
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                            #  2     0x1   1      OPC=nop                    movl %edi, %eax                 #  2     0x1   2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  3     0x2   2      OPC=movl_r32_r32_1         nop                             #  3     0x3   1      OPC=nop                  
  andl $0x3, %esi                #  4     0x4   3      OPC=andl_r32_imm8          movl %edi, %ecx                 #  4     0x4   2      OPC=movl_r32_r32         
  nop                            #  5     0x7   1      OPC=nop                    nop                             #  5     0x6   1      OPC=nop                  
  nop                            #  6     0x8   1      OPC=nop                    nop                             #  6     0x7   1      OPC=nop                  
  nop                            #  7     0x9   1      OPC=nop                    nop                             #  7     0x8   1      OPC=nop                  
  nop                            #  8     0xa   1      OPC=nop                    nop                             #  8     0x9   1      OPC=nop                  
  movq %rdi, %rcx                #  9     0xb   3      OPC=movq_r64_r64_1         nop                             #  9     0xa   1      OPC=nop                  
  nop                            #  10    0xe   1      OPC=nop                    movl %esi, %edx                 #  10    0xb   2      OPC=movl_r32_r32_1       
  jne .L_126860                  #  11    0xf   6      OPC=jne_label_1            nop                             #  11    0xd   1      OPC=nop                  
  movl %edx, %esi                #  12    0x15  2      OPC=movl_r32_r32           andl $0x3, %esi                 #  12    0xe   3      OPC=andl_r32_imm8        
  movq (%r15,%rsi,1), %r8        #  13    0x17  4      OPC=movq_r64_m64           nop                             #  13    0x11  1      OPC=nop                  
  nop                            #  14    0x1b  1      OPC=nop                    jne .L_126860                   #  14    0x12  6      OPC=jne_label_1          
  nop                            #  15    0x1c  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  nop                            #  16    0x1d  1      OPC=nop                    nop                             #  16    0x19  1      OPC=nop                  
  nop                            #  17    0x1e  1      OPC=nop                    movl %edx, %esi                 #  17    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  18    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8         #  18    0x1c  4      OPC=movq_r64_m64         
  nop                            #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  jne .L_126860                  #  22    0x23  6      OPC=jne_label_1            nop                             #  22    0x23  1      OPC=nop                  
  nop                            #  23    0x29  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                            #  27    0x2d  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                             #  31    0x2c  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                             #  32    0x2d  1      OPC=nop                  
  nopl %eax                      #  33    0x33  3      OPC=nopl_r32               nop                             #  33    0x2e  1      OPC=nop                  
  nop                            #  34    0x36  1      OPC=nop                    nop                             #  34    0x2f  1      OPC=nop                  
  nop                            #  35    0x37  1      OPC=nop                    nop                             #  35    0x30  1      OPC=nop                  
  nop                            #  36    0x38  1      OPC=nop                    nop                             #  36    0x31  1      OPC=nop                  
  nop                            #  37    0x39  1      OPC=nop                    nop                             #  37    0x32  1      OPC=nop                  
  nop                            #  38    0x3a  1      OPC=nop                    nop                             #  38    0x33  1      OPC=nop                  
  nop                            #  39    0x3b  1      OPC=nop                    nop                             #  39    0x34  1      OPC=nop                  
  nop                            #  40    0x3c  1      OPC=nop                    nop                             #  40    0x35  1      OPC=nop                  
  nop                            #  41    0x3d  1      OPC=nop                    jne .L_126860                   #  41    0x36  6      OPC=jne_label_1          
  nop                            #  42    0x3e  1      OPC=nop                    andb %ah, %ah                   #  42    0x3c  2      OPC=andb_rh_rh           
  nop                            #  43    0x3f  1      OPC=nop                    nop                             #  43    0x3e  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                             #  44    0x3f  1      OPC=nop                  
  orl %ecx, %ecx                 #  44    0x40  2      OPC=orl_r32_r32          .L_126820:                        #        0x40  0      OPC=<label>              
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           xorl %ebp, %ecx                 #  45    0x40  2      OPC=xorl_r32_r32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  46    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addl $0x4, %ecx                 #  47    0x46  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           addl $0x4, %edx                 #  48    0x4c  6      OPC=addl_r32_imm32       
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           movq (%r15,%rdx,1), %r8         #  49    0x52  4      OPC=movq_r64_m64         
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         movl %r8d, %r9d                 #  50    0x56  3      OPC=movl_r32_r32         
  notq %r9                       #  51    0x60  3      OPC=notq_r64               leaq -0x1010101(%r8), %rsi      #  51    0x59  7      OPC=leaq_r64_m64         
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           notq %r9                        #  52    0x60  3      OPC=notq_r64             
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         andl %esi, %r9d                 #  53    0x63  3      OPC=andl_r32_r32_1       
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             andl $0x80808080, %r9d          #  54    0x66  7      OPC=andl_r32_imm32       
  nop                            #  55    0x73  1      OPC=nop                    je .L_126820                    #  55    0x6d  6      OPC=je_label_1           
  nop                            #  56    0x74  1      OPC=nop                    nop                             #  56    0x73  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                             #  57    0x74  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                             #  58    0x75  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                             #  59    0x76  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                             #  60    0x77  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    nop                             #  61    0x78  1      OPC=nop                  
  nop                            #  62    0x7a  1      OPC=nop                    nop                             #  62    0x79  1      OPC=nop                  
  nop                            #  63    0x7b  1      OPC=nop                    nop                             #  63    0x7a  1      OPC=nop                  
  nop                            #  64    0x7c  1      OPC=nop                    nop                             #  64    0x7b  1      OPC=nop                  
  nop                            #  65    0x7d  1      OPC=nop                    nop                             #  65    0x7c  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                             #  66    0x7d  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                             #  67    0x7e  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>                nop                             #  68    0x7f  1      OPC=nop                  
  addl $0x1, %edx                #  68    0x80  3      OPC=addl_r32_imm8        .L_126860:                        #        0x80  0      OPC=<label>              
  movsbw -0x1(%r15,%rdx,1), %si  #  69    0x83  7      OPC=movsbw_r16_m8          nop                             #  69    0x80  1      OPC=nop                  
  orq %rcx, %rcx                 #  70    0x8a  3      OPC=orq_r64_r64_1          nop                             #  70    0x81  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  71    0x8d  4      OPC=movb_m8_r8             nop                             #  71    0x82  1      OPC=nop                  
  nop                            #  72    0x91  1      OPC=nop                    nop                             #  72    0x83  1      OPC=nop                  
  nop                            #  73    0x92  1      OPC=nop                    nop                             #  73    0x84  1      OPC=nop                  
  nop                            #  74    0x93  1      OPC=nop                    addl $0x1, %edx                 #  74    0x85  3      OPC=addl_r32_imm8        
  nop                            #  75    0x94  1      OPC=nop                    movsbl -0x1(%r15,%rdx,1), %esi  #  75    0x88  6      OPC=movsbl_r32_m8        
  nop                            #  76    0x95  1      OPC=nop                    nop                             #  76    0x8e  1      OPC=nop                  
  nop                            #  77    0x96  1      OPC=nop                    nop                             #  77    0x8f  1      OPC=nop                  
  nop                            #  78    0x97  1      OPC=nop                    nop                             #  78    0x90  1      OPC=nop                  
  nop                            #  79    0x98  1      OPC=nop                    nop                             #  79    0x91  1      OPC=nop                  
  nop                            #  80    0x99  1      OPC=nop                    addl $0x1, %ecx                 #  80    0x92  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx                #  81    0x9a  3      OPC=addl_r32_imm8          movb %sil, -0x1(%r15,%rcx,1)    #  81    0x95  5      OPC=movb_m8_r8           
  salw $0x1, %si                 #  82    0x9d  3      OPC=salw_r16_one           orb $0x0, %al                   #  82    0x9a  3      OPC=orb_r8_imm8          
  nop                            #  83    0xa0  1      OPC=nop                    nop                             #  83    0x9d  1      OPC=nop                  
  nop                            #  84    0xa1  1      OPC=nop                    nop                             #  84    0x9e  1      OPC=nop                  
  nop                            #  85    0xa2  1      OPC=nop                    nop                             #  85    0x9f  1      OPC=nop                  
  nop                            #  86    0xa3  1      OPC=nop                    shll $0x1, %esi                 #  86    0xa0  2      OPC=shll_r32_one         
  nop                            #  87    0xa4  1      OPC=nop                    nop                             #  87    0xa2  1      OPC=nop                  
  nop                            #  88    0xa5  1      OPC=nop                    nop                             #  88    0xa3  1      OPC=nop                  
  nop                            #  89    0xa6  1      OPC=nop                    nop                             #  89    0xa4  1      OPC=nop                  
  movl %edi, %eax                #  90    0xa7  2      OPC=movl_r32_r32_1         jne .L_126860                   #  90    0xa5  6      OPC=jne_label_1          
  jne .L_126860                  #  91    0xa9  6      OPC=jne_label_1            nop                             #  91    0xab  1      OPC=nop                  
  nop                            #  92    0xaf  1      OPC=nop                    nop                             #  92    0xac  1      OPC=nop                  
  nop                            #  93    0xb0  1      OPC=nop                    nop                             #  93    0xad  1      OPC=nop                  
  popq %r11                      #  94    0xb1  2      OPC=popq_r64_1             nop                             #  94    0xae  1      OPC=nop                  
  andl $0xe0, %r11d              #  95    0xb3  4      OPC=andl_r32_imm8          nop                             #  95    0xaf  1      OPC=nop                  
  addq %r15, %r11                #  96    0xb7  3      OPC=addq_r64_r64           nop                             #  96    0xb0  1      OPC=nop                  
  jmpq %r11                      #  97    0xba  3      OPC=jmpq_r64               nop                             #  97    0xb1  1      OPC=nop                  
                                                                                  nop                             #  98    0xb2  1      OPC=nop                  
.size strcpy, .-strcpy                                                            popq %r11                       #  99    0xb3  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d               #  100   0xb5  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11                 #  101   0xb9  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                       #  102   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                                 
                                                                                .size strcpy, .-strcpy                                                           
                                                                                                                                                                 

********************************************************************************

Progress Update: 

Lowest Cost Discovered (236)                                                    Lowest Known Correct Cost (237)                                                  
                                                                                                                                                                 
  .text                                                                           .text                                                                          
  .globl strcpy                                                                   .globl strcpy                                                                  
  .type strcpy, @function                                                         .type strcpy, @function                                                        
                                                                                                                                                                 
#! file-offset 0                                                                #! file-offset 0                                                                 
#! rip-offset  0                                                                #! rip-offset  0                                                                 
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                           
                                                                                                                                                                 
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                            #  2     0x1   1      OPC=nop                    movl %edi, %eax                 #  2     0x1   2      OPC=movl_r32_r32_1       
  movl %esi, %edx                #  3     0x2   2      OPC=movl_r32_r32_1         movl %esi, %edx                 #  3     0x3   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                #  4     0x4   3      OPC=andl_r32_imm8          movl %edi, %ecx                 #  4     0x5   2      OPC=movl_r32_r32         
  nop                            #  5     0x7   1      OPC=nop                    nop                             #  5     0x7   1      OPC=nop                  
  nop                            #  6     0x8   1      OPC=nop                    nop                             #  6     0x8   1      OPC=nop                  
  nop                            #  7     0x9   1      OPC=nop                    nop                             #  7     0x9   1      OPC=nop                  
  nop                            #  8     0xa   1      OPC=nop                    nop                             #  8     0xa   1      OPC=nop                  
  movq %rdi, %rcx                #  9     0xb   3      OPC=movq_r64_r64_1         nop                             #  9     0xb   1      OPC=nop                  
  nop                            #  10    0xe   1      OPC=nop                    nop                             #  10    0xc   1      OPC=nop                  
  jne .L_126860                  #  11    0xf   6      OPC=jne_label_1            nop                             #  11    0xd   1      OPC=nop                  
  movl %edx, %esi                #  12    0x15  2      OPC=movl_r32_r32           andl $0x3, %esi                 #  12    0xe   3      OPC=andl_r32_imm8        
  movq (%r15,%rsi,1), %r8        #  13    0x17  4      OPC=movq_r64_m64           nop                             #  13    0x11  1      OPC=nop                  
  nop                            #  14    0x1b  1      OPC=nop                    jne .L_126860                   #  14    0x12  6      OPC=jne_label_1          
  nop                            #  15    0x1c  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  nop                            #  16    0x1d  1      OPC=nop                    nop                             #  16    0x19  1      OPC=nop                  
  nop                            #  17    0x1e  1      OPC=nop                    movl %edx, %esi                 #  17    0x1a  2      OPC=movl_r32_r32_1       
  nop                            #  18    0x1f  1      OPC=nop                    movq (%r15,%rsi,1), %r8         #  18    0x1c  4      OPC=movq_r64_m64         
  nop                            #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  jne .L_126860                  #  22    0x23  6      OPC=jne_label_1            nop                             #  22    0x23  1      OPC=nop                  
  nop                            #  23    0x29  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                            #  27    0x2d  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                             #  31    0x2c  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                             #  32    0x2d  1      OPC=nop                  
  nopl %eax                      #  33    0x33  3      OPC=nopl_r32               nop                             #  33    0x2e  1      OPC=nop                  
  nop                            #  34    0x36  1      OPC=nop                    nop                             #  34    0x2f  1      OPC=nop                  
  nop                            #  35    0x37  1      OPC=nop                    nop                             #  35    0x30  1      OPC=nop                  
  nop                            #  36    0x38  1      OPC=nop                    nop                             #  36    0x31  1      OPC=nop                  
  nop                            #  37    0x39  1      OPC=nop                    nop                             #  37    0x32  1      OPC=nop                  
  nop                            #  38    0x3a  1      OPC=nop                    nop                             #  38    0x33  1      OPC=nop                  
  nop                            #  39    0x3b  1      OPC=nop                    nop                             #  39    0x34  1      OPC=nop                  
  nop                            #  40    0x3c  1      OPC=nop                    nop                             #  40    0x35  1      OPC=nop                  
  nop                            #  41    0x3d  1      OPC=nop                    jne .L_126860                   #  41    0x36  6      OPC=jne_label_1          
  nop                            #  42    0x3e  1      OPC=nop                    andb %ah, %ah                   #  42    0x3c  2      OPC=andb_rh_rh           
  nop                            #  43    0x3f  1      OPC=nop                    nop                             #  43    0x3e  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                             #  44    0x3f  1      OPC=nop                  
  orl %ecx, %ecx                 #  44    0x40  2      OPC=orl_r32_r32          .L_126820:                        #        0x40  0      OPC=<label>              
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32           xorl %ebp, %ecx                 #  45    0x40  2      OPC=xorl_r32_r32         
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  46    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         addl $0x4, %ecx                 #  47    0x46  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           addl $0x4, %edx                 #  48    0x4c  6      OPC=addl_r32_imm32       
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           movq (%r15,%rdx,1), %r8         #  49    0x52  4      OPC=movq_r64_m64         
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         movl %r8d, %r9d                 #  50    0x56  3      OPC=movl_r32_r32         
  notq %r9                       #  51    0x60  3      OPC=notq_r64               leaq -0x1010101(%r8), %rsi      #  51    0x59  7      OPC=leaq_r64_m64         
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           notq %r9                        #  52    0x60  3      OPC=notq_r64             
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         andl %esi, %r9d                 #  53    0x63  3      OPC=andl_r32_r32_1       
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             andl $0x80808080, %r9d          #  54    0x66  7      OPC=andl_r32_imm32       
  nop                            #  55    0x73  1      OPC=nop                    je .L_126820                    #  55    0x6d  6      OPC=je_label_1           
  nop                            #  56    0x74  1      OPC=nop                    nop                             #  56    0x73  1      OPC=nop                  
  nop                            #  57    0x75  1      OPC=nop                    nop                             #  57    0x74  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                             #  58    0x75  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                             #  59    0x76  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                             #  60    0x77  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    nop                             #  61    0x78  1      OPC=nop                  
  nop                            #  62    0x7a  1      OPC=nop                    nop                             #  62    0x79  1      OPC=nop                  
  nop                            #  63    0x7b  1      OPC=nop                    nop                             #  63    0x7a  1      OPC=nop                  
  nop                            #  64    0x7c  1      OPC=nop                    nop                             #  64    0x7b  1      OPC=nop                  
  nop                            #  65    0x7d  1      OPC=nop                    nop                             #  65    0x7c  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                             #  66    0x7d  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                             #  67    0x7e  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>                nop                             #  68    0x7f  1      OPC=nop                  
  addl $0x1, %edx                #  68    0x80  3      OPC=addl_r32_imm8        .L_126860:                        #        0x80  0      OPC=<label>              
  movsbw -0x1(%r15,%rdx,1), %si  #  69    0x83  7      OPC=movsbw_r16_m8          nop                             #  69    0x80  1      OPC=nop                  
  orq %rcx, %rcx                 #  70    0x8a  3      OPC=orq_r64_r64_1          nop                             #  70    0x81  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  71    0x8d  4      OPC=movb_m8_r8             nop                             #  71    0x82  1      OPC=nop                  
  nop                            #  72    0x91  1      OPC=nop                    nop                             #  72    0x83  1      OPC=nop                  
  nop                            #  73    0x92  1      OPC=nop                    nop                             #  73    0x84  1      OPC=nop                  
  nop                            #  74    0x93  1      OPC=nop                    addl $0x1, %edx                 #  74    0x85  3      OPC=addl_r32_imm8        
  nop                            #  75    0x94  1      OPC=nop                    movsbl -0x1(%r15,%rdx,1), %esi  #  75    0x88  6      OPC=movsbl_r32_m8        
  nop                            #  76    0x95  1      OPC=nop                    nop                             #  76    0x8e  1      OPC=nop                  
  nop                            #  77    0x96  1      OPC=nop                    nop                             #  77    0x8f  1      OPC=nop                  
  nop                            #  78    0x97  1      OPC=nop                    nop                             #  78    0x90  1      OPC=nop                  
  nop                            #  79    0x98  1      OPC=nop                    nop                             #  79    0x91  1      OPC=nop                  
  nop                            #  80    0x99  1      OPC=nop                    addl $0x1, %ecx                 #  80    0x92  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx                #  81    0x9a  3      OPC=addl_r32_imm8          movb %sil, -0x1(%r15,%rcx,1)    #  81    0x95  5      OPC=movb_m8_r8           
  salw $0x1, %si                 #  82    0x9d  3      OPC=salw_r16_one           orb $0x0, %al                   #  82    0x9a  3      OPC=orb_r8_imm8          
  nop                            #  83    0xa0  1      OPC=nop                    nop                             #  83    0x9d  1      OPC=nop                  
  nop                            #  84    0xa1  1      OPC=nop                    nop                             #  84    0x9e  1      OPC=nop                  
  nop                            #  85    0xa2  1      OPC=nop                    nop                             #  85    0x9f  1      OPC=nop                  
  nop                            #  86    0xa3  1      OPC=nop                    shll $0x1, %esi                 #  86    0xa0  2      OPC=shll_r32_one         
  nop                            #  87    0xa4  1      OPC=nop                    nop                             #  87    0xa2  1      OPC=nop                  
  nop                            #  88    0xa5  1      OPC=nop                    nop                             #  88    0xa3  1      OPC=nop                  
  nop                            #  89    0xa6  1      OPC=nop                    nop                             #  89    0xa4  1      OPC=nop                  
  movl %edi, %eax                #  90    0xa7  2      OPC=movl_r32_r32_1         jne .L_126860                   #  90    0xa5  6      OPC=jne_label_1          
  jne .L_126860                  #  91    0xa9  6      OPC=jne_label_1            nop                             #  91    0xab  1      OPC=nop                  
  nop                            #  92    0xaf  1      OPC=nop                    nop                             #  92    0xac  1      OPC=nop                  
  nop                            #  93    0xb0  1      OPC=nop                    nop                             #  93    0xad  1      OPC=nop                  
  popq %r11                      #  94    0xb1  2      OPC=popq_r64_1             nop                             #  94    0xae  1      OPC=nop                  
  andl $0xe0, %r11d              #  95    0xb3  4      OPC=andl_r32_imm8          nop                             #  95    0xaf  1      OPC=nop                  
  addq %r15, %r11                #  96    0xb7  3      OPC=addq_r64_r64           nop                             #  96    0xb0  1      OPC=nop                  
  jmpq %r11                      #  97    0xba  3      OPC=jmpq_r64               nop                             #  97    0xb1  1      OPC=nop                  
                                                                                  nop                             #  98    0xb2  1      OPC=nop                  
.size strcpy, .-strcpy                                                            nop                             #  99    0xb3  1      OPC=nop                  
                                                                                  popq %r11                       #  100   0xb4  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d               #  101   0xb6  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11                 #  102   0xba  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                       #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                                 
                                                                                .size strcpy, .-strcpy                                                           
                                                                                                                                                                 

********************************************************************************

Progress Update: 

Lowest Cost Discovered (236)                                                    Lowest Known Correct Cost (236)                                                  
                                                                                                                                                                 
  .text                                                                           .text                                                                          
  .globl strcpy                                                                   .globl strcpy                                                                  
  .type strcpy, @function                                                         .type strcpy, @function                                                        
                                                                                                                                                                 
#! file-offset 0                                                                #! file-offset 0                                                                 
#! rip-offset  0                                                                #! rip-offset  0                                                                 
#! capacity    0 bytes                                                          #! capacity    0 bytes                                                           
                                                                                                                                                                 
# Text                           #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                         #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                            #  1     0     1      OPC=nop                    movl %esi, %edx                 #  1     0     2      OPC=movl_r32_r32_1       
  nop                            #  2     0x1   1      OPC=nop                    nop                             #  2     0x2   1      OPC=nop                  
  movl %esi, %edx                #  3     0x2   2      OPC=movl_r32_r32_1         nop                             #  3     0x3   1      OPC=nop                  
  andl $0x3, %esi                #  4     0x4   3      OPC=andl_r32_imm8          movl %edi, %ecx                 #  4     0x4   2      OPC=movl_r32_r32         
  nop                            #  5     0x7   1      OPC=nop                    movl %edi, %eax                 #  5     0x6   2      OPC=movl_r32_r32_1       
  nop                            #  6     0x8   1      OPC=nop                    nop                             #  6     0x8   1      OPC=nop                  
  nop                            #  7     0x9   1      OPC=nop                    nop                             #  7     0x9   1      OPC=nop                  
  nop                            #  8     0xa   1      OPC=nop                    andl $0x3, %esi                 #  8     0xa   3      OPC=andl_r32_imm8        
  movq %rdi, %rcx                #  9     0xb   3      OPC=movq_r64_r64_1         nop                             #  9     0xd   1      OPC=nop                  
  nop                            #  10    0xe   1      OPC=nop                    jne .L_126860                   #  10    0xe   6      OPC=jne_label_1          
  jne .L_126860                  #  11    0xf   6      OPC=jne_label_1            nop                             #  11    0x14  1      OPC=nop                  
  movl %edx, %esi                #  12    0x15  2      OPC=movl_r32_r32           nop                             #  12    0x15  1      OPC=nop                  
  movq (%r15,%rsi,1), %r8        #  13    0x17  4      OPC=movq_r64_m64           nop                             #  13    0x16  1      OPC=nop                  
  nop                            #  14    0x1b  1      OPC=nop                    movl %edx, %esi                 #  14    0x17  2      OPC=movl_r32_r32_1       
  nop                            #  15    0x1c  1      OPC=nop                    movq (%r15,%rsi,1), %r8         #  15    0x19  4      OPC=movq_r64_m64         
  nop                            #  16    0x1d  1      OPC=nop                    nop                             #  16    0x1d  1      OPC=nop                  
  nop                            #  17    0x1e  1      OPC=nop                    nop                             #  17    0x1e  1      OPC=nop                  
  nop                            #  18    0x1f  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                            #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                            #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                            #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  jne .L_126860                  #  22    0x23  6      OPC=jne_label_1            nop                             #  22    0x23  1      OPC=nop                  
  nop                            #  23    0x29  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                            #  24    0x2a  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                            #  25    0x2b  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                            #  26    0x2c  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                            #  27    0x2d  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                            #  28    0x2e  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                            #  29    0x2f  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                            #  30    0x30  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                            #  31    0x31  1      OPC=nop                    nop                             #  31    0x2c  1      OPC=nop                  
  nop                            #  32    0x32  1      OPC=nop                    nop                             #  32    0x2d  1      OPC=nop                  
  nopl %eax                      #  33    0x33  3      OPC=nopl_r32               nop                             #  33    0x2e  1      OPC=nop                  
  nop                            #  34    0x36  1      OPC=nop                    nop                             #  34    0x2f  1      OPC=nop                  
  nop                            #  35    0x37  1      OPC=nop                    nop                             #  35    0x30  1      OPC=nop                  
  nop                            #  36    0x38  1      OPC=nop                    nop                             #  36    0x31  1      OPC=nop                  
  nop                            #  37    0x39  1      OPC=nop                    nop                             #  37    0x32  1      OPC=nop                  
  nop                            #  38    0x3a  1      OPC=nop                    nop                             #  38    0x33  1      OPC=nop                  
  nop                            #  39    0x3b  1      OPC=nop                    nop                             #  39    0x34  1      OPC=nop                  
  nop                            #  40    0x3c  1      OPC=nop                    jne .L_126860                   #  40    0x35  6      OPC=jne_label_1          
  nop                            #  41    0x3d  1      OPC=nop                    nop                             #  41    0x3b  1      OPC=nop                  
  nop                            #  42    0x3e  1      OPC=nop                    nop                             #  42    0x3c  1      OPC=nop                  
  nop                            #  43    0x3f  1      OPC=nop                    nop                             #  43    0x3d  1      OPC=nop                  
.L_126820:                       #        0x40  0      OPC=<label>                nop                             #  44    0x3e  1      OPC=nop                  
  orl %ecx, %ecx                 #  44    0x40  2      OPC=orl_r32_r32            nop                             #  45    0x3f  1      OPC=nop                  
  movl %r8d, (%r15,%rcx,1)       #  45    0x42  4      OPC=movl_m32_r32         .L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                #  46    0x46  6      OPC=addl_r32_imm32         xorl %ebp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  addl $0x4, %edx                #  47    0x4c  6      OPC=addl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  movq (%r15,%rdx,1), %r8        #  48    0x52  4      OPC=movq_r64_m64           addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  leal -0x1010101(%r8), %esi     #  49    0x56  7      OPC=leal_r32_m32           addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  movq %r8, %r9                  #  50    0x5d  3      OPC=movq_r64_r64_1         movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  notq %r9                       #  51    0x60  3      OPC=notq_r64               movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  andl %esi, %r9d                #  52    0x63  3      OPC=andl_r32_r32           leaq -0x1010101(%r8), %rsi      #  52    0x59  7      OPC=leaq_r64_m64         
  andl $0x80808080, %r9d         #  53    0x66  7      OPC=andl_r32_imm32         notq %r9                        #  53    0x60  3      OPC=notq_r64             
  je .L_126820                   #  54    0x6d  6      OPC=je_label_1             andl %esi, %r9d                 #  54    0x63  3      OPC=andl_r32_r32_1       
  nop                            #  55    0x73  1      OPC=nop                    andl $0x80808080, %r9d          #  55    0x66  7      OPC=andl_r32_imm32       
  nop                            #  56    0x74  1      OPC=nop                    je .L_126820                    #  56    0x6d  6      OPC=je_label_1           
  nop                            #  57    0x75  1      OPC=nop                    nop                             #  57    0x73  1      OPC=nop                  
  nop                            #  58    0x76  1      OPC=nop                    nop                             #  58    0x74  1      OPC=nop                  
  nop                            #  59    0x77  1      OPC=nop                    nop                             #  59    0x75  1      OPC=nop                  
  nop                            #  60    0x78  1      OPC=nop                    nop                             #  60    0x76  1      OPC=nop                  
  nop                            #  61    0x79  1      OPC=nop                    nop                             #  61    0x77  1      OPC=nop                  
  nop                            #  62    0x7a  1      OPC=nop                    nop                             #  62    0x78  1      OPC=nop                  
  nop                            #  63    0x7b  1      OPC=nop                    nop                             #  63    0x79  1      OPC=nop                  
  nop                            #  64    0x7c  1      OPC=nop                    nop                             #  64    0x7a  1      OPC=nop                  
  nop                            #  65    0x7d  1      OPC=nop                    nop                             #  65    0x7b  1      OPC=nop                  
  nop                            #  66    0x7e  1      OPC=nop                    nop                             #  66    0x7c  1      OPC=nop                  
  nop                            #  67    0x7f  1      OPC=nop                    nop                             #  67    0x7d  1      OPC=nop                  
.L_126860:                       #        0x80  0      OPC=<label>                nop                             #  68    0x7e  1      OPC=nop                  
  addl $0x1, %edx                #  68    0x80  3      OPC=addl_r32_imm8          nop                             #  69    0x7f  1      OPC=nop                  
  movsbw -0x1(%r15,%rdx,1), %si  #  69    0x83  7      OPC=movsbw_r16_m8        .L_126860:                        #        0x80  0      OPC=<label>              
  orq %rcx, %rcx                 #  70    0x8a  3      OPC=orq_r64_r64_1          nop                             #  70    0x80  1      OPC=nop                  
  movb %sil, (%r15,%rcx,1)       #  71    0x8d  4      OPC=movb_m8_r8             nop                             #  71    0x81  1      OPC=nop                  
  nop                            #  72    0x91  1      OPC=nop                    nop                             #  72    0x82  1      OPC=nop                  
  nop                            #  73    0x92  1      OPC=nop                    nop                             #  73    0x83  1      OPC=nop                  
  nop                            #  74    0x93  1      OPC=nop                    nop                             #  74    0x84  1      OPC=nop                  
  nop                            #  75    0x94  1      OPC=nop                    addl $0x1, %edx                 #  75    0x85  3      OPC=addl_r32_imm8        
  nop                            #  76    0x95  1      OPC=nop                    movzbq -0x1(%r15,%rdx,1), %rsi  #  76    0x88  6      OPC=movzbq_r64_m8        
  nop                            #  77    0x96  1      OPC=nop                    nop                             #  77    0x8e  1      OPC=nop                  
  nop                            #  78    0x97  1      OPC=nop                    nop                             #  78    0x8f  1      OPC=nop                  
  nop                            #  79    0x98  1      OPC=nop                    nop                             #  79    0x90  1      OPC=nop                  
  nop                            #  80    0x99  1      OPC=nop                    nop                             #  80    0x91  1      OPC=nop                  
  addl $0x1, %ecx                #  81    0x9a  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  81    0x92  3      OPC=addl_r32_imm8        
  salw $0x1, %si                 #  82    0x9d  3      OPC=salw_r16_one           movb %sil, -0x1(%r15,%rcx,1)    #  82    0x95  5      OPC=movb_m8_r8           
  nop                            #  83    0xa0  1      OPC=nop                    shll $0x1, %esi                 #  83    0x9a  2      OPC=shll_r32_one         
  nop                            #  84    0xa1  1      OPC=nop                    nop                             #  84    0x9c  1      OPC=nop                  
  nop                            #  85    0xa2  1      OPC=nop                    nop                             #  85    0x9d  1      OPC=nop                  
  nop                            #  86    0xa3  1      OPC=nop                    nop                             #  86    0x9e  1      OPC=nop                  
  nop                            #  87    0xa4  1      OPC=nop                    nop                             #  87    0x9f  1      OPC=nop                  
  nop                            #  88    0xa5  1      OPC=nop                    nop                             #  88    0xa0  1      OPC=nop                  
  nop                            #  89    0xa6  1      OPC=nop                    nop                             #  89    0xa1  1      OPC=nop                  
  movl %edi, %eax                #  90    0xa7  2      OPC=movl_r32_r32_1         nop                             #  90    0xa2  1      OPC=nop                  
  jne .L_126860                  #  91    0xa9  6      OPC=jne_label_1            nop                             #  91    0xa3  1      OPC=nop                  
  nop                            #  92    0xaf  1      OPC=nop                    nop                             #  92    0xa4  1      OPC=nop                  
  nop                            #  93    0xb0  1      OPC=nop                    jne .L_126860                   #  93    0xa5  6      OPC=jne_label_1          
  popq %r11                      #  94    0xb1  2      OPC=popq_r64_1             nop                             #  94    0xab  1      OPC=nop                  
  andl $0xe0, %r11d              #  95    0xb3  4      OPC=andl_r32_imm8          nop                             #  95    0xac  1      OPC=nop                  
  addq %r15, %r11                #  96    0xb7  3      OPC=addq_r64_r64           nop                             #  96    0xad  1      OPC=nop                  
  jmpq %r11                      #  97    0xba  3      OPC=jmpq_r64               nop                             #  97    0xae  1      OPC=nop                  
                                                                                  nopl %eax                       #  98    0xaf  3      OPC=nopl_r32             
.size strcpy, .-strcpy                                                            nop                             #  99    0xb2  1      OPC=nop                  
                                                                                  popq %r11                       #  100   0xb3  2      OPC=popq_r64_1           
                                                                                  andl $0xe0, %r11d               #  101   0xb5  4      OPC=andl_r32_imm8        
                                                                                  addq %r15, %r11                 #  102   0xb9  3      OPC=addq_r64_r64         
                                                                                  jmpq %r11                       #  103   0xbc  3      OPC=jmpq_r64             
                                                                                                                                                                 
                                                                                .size strcpy, .-strcpy                                                           
                                                                                                                                                                 

********************************************************************************

Progress Update: 

Lowest Cost Discovered (235)                                                     Lowest Known Correct Cost (235)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  movl %esi, %edx                 #  2     0x1   2      OPC=movl_r32_r32_1         movl %esi, %edx                 #  2     0x1   2      OPC=movl_r32_r32_1       
  andl $0x1, %esi                 #  3     0x3   3      OPC=andl_r32_imm8          andl $0x1, %esi                 #  3     0x3   3      OPC=andl_r32_imm8        
  nop                             #  4     0x6   1      OPC=nop                    nop                             #  4     0x6   1      OPC=nop                  
  nop                             #  5     0x7   1      OPC=nop                    nop                             #  5     0x7   1      OPC=nop                  
  nop                             #  6     0x8   1      OPC=nop                    nop                             #  6     0x8   1      OPC=nop                  
  nop                             #  7     0x9   1      OPC=nop                    nop                             #  7     0x9   1      OPC=nop                  
  movl %edi, %eax                 #  8     0xa   2      OPC=movl_r32_r32           movl %edi, %eax                 #  8     0xa   2      OPC=movl_r32_r32         
  movl %edi, %ecx                 #  9     0xc   2      OPC=movl_r32_r32           movl %edi, %ecx                 #  9     0xc   2      OPC=movl_r32_r32         
  jne .L_126860                   #  10    0xe   6      OPC=jne_label_1            jne .L_126860                   #  10    0xe   6      OPC=jne_label_1          
  nop                             #  11    0x14  1      OPC=nop                    nop                             #  11    0x14  1      OPC=nop                  
  nop                             #  12    0x15  1      OPC=nop                    nop                             #  12    0x15  1      OPC=nop                  
  nop                             #  13    0x16  1      OPC=nop                    nop                             #  13    0x16  1      OPC=nop                  
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  movl %edx, %esi                 #  15    0x18  2      OPC=movl_r32_r32_1         movl %edx, %esi                 #  15    0x18  2      OPC=movl_r32_r32_1       
  movq (%r15,%rsi,1), %r8         #  16    0x1a  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8         #  16    0x1a  4      OPC=movq_r64_m64         
  nop                             #  17    0x1e  1      OPC=nop                    nop                             #  17    0x1e  1      OPC=nop                  
  nop                             #  18    0x1f  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x23  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x24  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x25  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                             #  25    0x26  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                             #  26    0x27  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x28  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x29  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x2a  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x2b  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x2c  1      OPC=nop                    nop                             #  31    0x2c  1      OPC=nop                  
  nop                             #  32    0x2d  1      OPC=nop                    nop                             #  32    0x2d  1      OPC=nop                  
  nop                             #  33    0x2e  1      OPC=nop                    nop                             #  33    0x2e  1      OPC=nop                  
  nop                             #  34    0x2f  1      OPC=nop                    nop                             #  34    0x2f  1      OPC=nop                  
  jne .L_126860                   #  35    0x30  6      OPC=jne_label_1            jne .L_126860                   #  35    0x30  6      OPC=jne_label_1          
  nop                             #  36    0x36  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x37  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x38  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
  nop                             #  39    0x39  1      OPC=nop                    nop                             #  39    0x39  1      OPC=nop                  
  nop                             #  40    0x3a  1      OPC=nop                    nop                             #  40    0x3a  1      OPC=nop                  
  nop                             #  41    0x3b  1      OPC=nop                    nop                             #  41    0x3b  1      OPC=nop                  
  nop                             #  42    0x3c  1      OPC=nop                    nop                             #  42    0x3c  1      OPC=nop                  
  nop                             #  43    0x3d  1      OPC=nop                    nop                             #  43    0x3d  1      OPC=nop                  
  nop                             #  44    0x3e  1      OPC=nop                    nop                             #  44    0x3e  1      OPC=nop                  
  nop                             #  45    0x3f  1      OPC=nop                    nop                             #  45    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                        #        0x40  0      OPC=<label>              
  addl %ebp, %ecx                 #  46    0x40  2      OPC=addl_r32_r32           addl %ebp, %ecx                 #  46    0x40  2      OPC=addl_r32_r32         
  movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32         addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32         addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32           movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  leaq -0x1010101(%r8), %rsi      #  52    0x59  7      OPC=leaq_r64_m64           leaq -0x1010101(%r8), %rsi      #  52    0x59  7      OPC=leaq_r64_m64         
  notq %r9                        #  53    0x60  3      OPC=notq_r64               notq %r9                        #  53    0x60  3      OPC=notq_r64             
  andl %esi, %r9d                 #  54    0x63  3      OPC=andl_r32_r32_1         andl %esi, %r9d                 #  54    0x63  3      OPC=andl_r32_r32_1       
  andl $0x80808080, %r9d          #  55    0x66  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d          #  55    0x66  7      OPC=andl_r32_imm32       
  je .L_126820                    #  56    0x6d  6      OPC=je_label_1             je .L_126820                    #  56    0x6d  6      OPC=je_label_1           
  nop                             #  57    0x73  1      OPC=nop                    nop                             #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x74  1      OPC=nop                    nop                             #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x75  1      OPC=nop                    nop                             #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x76  1      OPC=nop                    nop                             #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x77  1      OPC=nop                    nop                             #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x78  1      OPC=nop                    nop                             #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x79  1      OPC=nop                    nop                             #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7a  1      OPC=nop                    nop                             #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x7b  1      OPC=nop                    nop                             #  65    0x7b  1      OPC=nop                  
  nop                             #  66    0x7c  1      OPC=nop                    nop                             #  66    0x7c  1      OPC=nop                  
  nop                             #  67    0x7d  1      OPC=nop                    nop                             #  67    0x7d  1      OPC=nop                  
  nop                             #  68    0x7e  1      OPC=nop                    nop                             #  68    0x7e  1      OPC=nop                  
  nop                             #  69    0x7f  1      OPC=nop                    nop                             #  69    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  70    0x80  1      OPC=nop                    nop                             #  70    0x80  1      OPC=nop                  
  nop                             #  71    0x81  1      OPC=nop                    nop                             #  71    0x81  1      OPC=nop                  
  nop                             #  72    0x82  1      OPC=nop                    nop                             #  72    0x82  1      OPC=nop                  
  addl $0x1, %edx                 #  73    0x83  3      OPC=addl_r32_imm8          addl $0x1, %edx                 #  73    0x83  3      OPC=addl_r32_imm8        
  movzbq -0x1(%r15,%rdx,1), %rsi  #  74    0x86  6      OPC=movzbq_r64_m8          movzbq -0x1(%r15,%rdx,1), %rsi  #  74    0x86  6      OPC=movzbq_r64_m8        
  nop                             #  75    0x8c  1      OPC=nop                    nop                             #  75    0x8c  1      OPC=nop                  
  nop                             #  76    0x8d  1      OPC=nop                    nop                             #  76    0x8d  1      OPC=nop                  
  nop                             #  77    0x8e  1      OPC=nop                    nop                             #  77    0x8e  1      OPC=nop                  
  addl $0x1, %ecx                 #  78    0x8f  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  78    0x8f  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  79    0x92  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)    #  79    0x92  5      OPC=movb_m8_r8           
  nop                             #  80    0x97  1      OPC=nop                    nop                             #  80    0x97  1      OPC=nop                  
  sall $0x1, %esi                 #  81    0x98  2      OPC=sall_r32_one           sall $0x1, %esi                 #  81    0x98  2      OPC=sall_r32_one         
  nop                             #  82    0x9a  1      OPC=nop                    nop                             #  82    0x9a  1      OPC=nop                  
  nop                             #  83    0x9b  1      OPC=nop                    nop                             #  83    0x9b  1      OPC=nop                  
  nop                             #  84    0x9c  1      OPC=nop                    nop                             #  84    0x9c  1      OPC=nop                  
  nop                             #  85    0x9d  1      OPC=nop                    nop                             #  85    0x9d  1      OPC=nop                  
  nop                             #  86    0x9e  1      OPC=nop                    nop                             #  86    0x9e  1      OPC=nop                  
  nop                             #  87    0x9f  1      OPC=nop                    nop                             #  87    0x9f  1      OPC=nop                  
  nop                             #  88    0xa0  1      OPC=nop                    nop                             #  88    0xa0  1      OPC=nop                  
  nop                             #  89    0xa1  1      OPC=nop                    nop                             #  89    0xa1  1      OPC=nop                  
  nop                             #  90    0xa2  1      OPC=nop                    nop                             #  90    0xa2  1      OPC=nop                  
  nop                             #  91    0xa3  1      OPC=nop                    nop                             #  91    0xa3  1      OPC=nop                  
  jne .L_126860                   #  92    0xa4  6      OPC=jne_label_1            jne .L_126860                   #  92    0xa4  6      OPC=jne_label_1          
  nop                             #  93    0xaa  1      OPC=nop                    nop                             #  93    0xaa  1      OPC=nop                  
  nop                             #  94    0xab  1      OPC=nop                    nop                             #  94    0xab  1      OPC=nop                  
  nop                             #  95    0xac  1      OPC=nop                    nop                             #  95    0xac  1      OPC=nop                  
  nop                             #  96    0xad  1      OPC=nop                    nop                             #  96    0xad  1      OPC=nop                  
  popq %r11                       #  97    0xae  2      OPC=popq_r64_1             popq %r11                       #  97    0xae  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  98    0xb0  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  98    0xb0  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  99    0xb4  3      OPC=addq_r64_r64           addq %r15, %r11                 #  99    0xb4  3      OPC=addq_r64_r64         
  jmpq %r11                       #  100   0xb7  3      OPC=jmpq_r64               jmpq %r11                       #  100   0xb7  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (234)                                                     Lowest Known Correct Cost (234)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  movl %esi, %edx                 #  1     0     2      OPC=movl_r32_r32           movl %esi, %edx                 #  1     0     2      OPC=movl_r32_r32         
  movl %edi, %ecx                 #  2     0x2   2      OPC=movl_r32_r32_1         movl %edi, %ecx                 #  2     0x2   2      OPC=movl_r32_r32_1       
  nop                             #  3     0x4   1      OPC=nop                    nop                             #  3     0x4   1      OPC=nop                  
  nop                             #  4     0x5   1      OPC=nop                    nop                             #  4     0x5   1      OPC=nop                  
  nop                             #  5     0x6   1      OPC=nop                    nop                             #  5     0x6   1      OPC=nop                  
  nop                             #  6     0x7   1      OPC=nop                    nop                             #  6     0x7   1      OPC=nop                  
  andl $0x1, %esi                 #  7     0x8   3      OPC=andl_r32_imm8          andl $0x1, %esi                 #  7     0x8   3      OPC=andl_r32_imm8        
  nop                             #  8     0xb   1      OPC=nop                    nop                             #  8     0xb   1      OPC=nop                  
  nop                             #  9     0xc   1      OPC=nop                    nop                             #  9     0xc   1      OPC=nop                  
  nop                             #  10    0xd   1      OPC=nop                    nop                             #  10    0xd   1      OPC=nop                  
  jne .L_126860                   #  11    0xe   6      OPC=jne_label_1            jne .L_126860                   #  11    0xe   6      OPC=jne_label_1          
  nop                             #  12    0x14  1      OPC=nop                    nop                             #  12    0x14  1      OPC=nop                  
  nop                             #  13    0x15  1      OPC=nop                    nop                             #  13    0x15  1      OPC=nop                  
  nop                             #  14    0x16  1      OPC=nop                    nop                             #  14    0x16  1      OPC=nop                  
  movl %edx, %esi                 #  15    0x17  2      OPC=movl_r32_r32           movl %edx, %esi                 #  15    0x17  2      OPC=movl_r32_r32         
  movq (%r15,%rsi,1), %r8         #  16    0x19  4      OPC=movq_r64_m64           movq (%r15,%rsi,1), %r8         #  16    0x19  4      OPC=movq_r64_m64         
  nop                             #  17    0x1d  1      OPC=nop                    nop                             #  17    0x1d  1      OPC=nop                  
  nop                             #  18    0x1e  1      OPC=nop                    nop                             #  18    0x1e  1      OPC=nop                  
  nop                             #  19    0x1f  1      OPC=nop                    nop                             #  19    0x1f  1      OPC=nop                  
  nop                             #  20    0x20  1      OPC=nop                    nop                             #  20    0x20  1      OPC=nop                  
  nop                             #  21    0x21  1      OPC=nop                    nop                             #  21    0x21  1      OPC=nop                  
  nop                             #  22    0x22  1      OPC=nop                    nop                             #  22    0x22  1      OPC=nop                  
  nop                             #  23    0x23  1      OPC=nop                    nop                             #  23    0x23  1      OPC=nop                  
  nop                             #  24    0x24  1      OPC=nop                    nop                             #  24    0x24  1      OPC=nop                  
  nop                             #  25    0x25  1      OPC=nop                    nop                             #  25    0x25  1      OPC=nop                  
  nop                             #  26    0x26  1      OPC=nop                    nop                             #  26    0x26  1      OPC=nop                  
  nop                             #  27    0x27  1      OPC=nop                    nop                             #  27    0x27  1      OPC=nop                  
  nop                             #  28    0x28  1      OPC=nop                    nop                             #  28    0x28  1      OPC=nop                  
  nop                             #  29    0x29  1      OPC=nop                    nop                             #  29    0x29  1      OPC=nop                  
  nop                             #  30    0x2a  1      OPC=nop                    nop                             #  30    0x2a  1      OPC=nop                  
  nop                             #  31    0x2b  1      OPC=nop                    nop                             #  31    0x2b  1      OPC=nop                  
  nop                             #  32    0x2c  1      OPC=nop                    nop                             #  32    0x2c  1      OPC=nop                  
  nop                             #  33    0x2d  1      OPC=nop                    nop                             #  33    0x2d  1      OPC=nop                  
  nop                             #  34    0x2e  1      OPC=nop                    nop                             #  34    0x2e  1      OPC=nop                  
  nop                             #  35    0x2f  1      OPC=nop                    nop                             #  35    0x2f  1      OPC=nop                  
  nop                             #  36    0x30  1      OPC=nop                    nop                             #  36    0x30  1      OPC=nop                  
  jne .L_126860                   #  37    0x31  6      OPC=jne_label_1            jne .L_126860                   #  37    0x31  6      OPC=jne_label_1          
  nop                             #  38    0x37  1      OPC=nop                    nop                             #  38    0x37  1      OPC=nop                  
  nop                             #  39    0x38  1      OPC=nop                    nop                             #  39    0x38  1      OPC=nop                  
  nop                             #  40    0x39  1      OPC=nop                    nop                             #  40    0x39  1      OPC=nop                  
  nop                             #  41    0x3a  1      OPC=nop                    nop                             #  41    0x3a  1      OPC=nop                  
  nop                             #  42    0x3b  1      OPC=nop                    nop                             #  42    0x3b  1      OPC=nop                  
  nop                             #  43    0x3c  1      OPC=nop                    nop                             #  43    0x3c  1      OPC=nop                  
  nop                             #  44    0x3d  1      OPC=nop                    nop                             #  44    0x3d  1      OPC=nop                  
  nop                             #  45    0x3e  1      OPC=nop                    nop                             #  45    0x3e  1      OPC=nop                  
  nop                             #  46    0x3f  1      OPC=nop                    nop                             #  46    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                        #        0x40  0      OPC=<label>              
  xorl %esp, %ecx                 #  47    0x40  2      OPC=xorl_r32_r32           xorl %esp, %ecx                 #  47    0x40  2      OPC=xorl_r32_r32         
  movl %r8d, (%r15,%rcx,1)        #  48    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)        #  48    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx                 #  49    0x46  6      OPC=addl_r32_imm32         addl $0x4, %ecx                 #  49    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                 #  50    0x4c  6      OPC=addl_r32_imm32         addl $0x4, %edx                 #  50    0x4c  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8         #  51    0x52  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8         #  51    0x52  4      OPC=movq_r64_m64         
  movl %r8d, %r9d                 #  52    0x56  3      OPC=movl_r32_r32           movl %r8d, %r9d                 #  52    0x56  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %esi      #  53    0x59  7      OPC=leal_r32_m32           leal -0x1010101(%r8), %esi      #  53    0x59  7      OPC=leal_r32_m32         
  notq %r9                        #  54    0x60  3      OPC=notq_r64               notq %r9                        #  54    0x60  3      OPC=notq_r64             
  andl $0x80808080, %r9d          #  55    0x63  7      OPC=andl_r32_imm32         andl $0x80808080, %r9d          #  55    0x63  7      OPC=andl_r32_imm32       
  andq %rsi, %r9                  #  56    0x6a  3      OPC=andq_r64_r64_1         andq %rsi, %r9                  #  56    0x6a  3      OPC=andq_r64_r64_1       
  je .L_126820                    #  57    0x6d  6      OPC=je_label_1             je .L_126820                    #  57    0x6d  6      OPC=je_label_1           
  nop                             #  58    0x73  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x74  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x75  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x76  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x77  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x78  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x79  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  65    0x7a  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  66    0x7b  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  67    0x7c  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nopl %eax                       #  68    0x7d  3      OPC=nopl_r32               nopl %eax                       #  68    0x7d  3      OPC=nopl_r32             
.L_126860:                        #        0x80  0      OPC=<label>              .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  69    0x80  1      OPC=nop                    nop                             #  69    0x80  1      OPC=nop                  
  nop                             #  70    0x81  1      OPC=nop                    nop                             #  70    0x81  1      OPC=nop                  
  nop                             #  71    0x82  1      OPC=nop                    nop                             #  71    0x82  1      OPC=nop                  
  nop                             #  72    0x83  1      OPC=nop                    nop                             #  72    0x83  1      OPC=nop                  
  addl $0x1, %edx                 #  73    0x84  3      OPC=addl_r32_imm8          addl $0x1, %edx                 #  73    0x84  3      OPC=addl_r32_imm8        
  movsbl -0x1(%r15,%rdx,1), %esi  #  74    0x87  6      OPC=movsbl_r32_m8          movsbl -0x1(%r15,%rdx,1), %esi  #  74    0x87  6      OPC=movsbl_r32_m8        
  nop                             #  75    0x8d  1      OPC=nop                    nop                             #  75    0x8d  1      OPC=nop                  
  nop                             #  76    0x8e  1      OPC=nop                    nop                             #  76    0x8e  1      OPC=nop                  
  nop                             #  77    0x8f  1      OPC=nop                    nop                             #  77    0x8f  1      OPC=nop                  
  nop                             #  78    0x90  1      OPC=nop                    nop                             #  78    0x90  1      OPC=nop                  
  nop                             #  79    0x91  1      OPC=nop                    nop                             #  79    0x91  1      OPC=nop                  
  nop                             #  80    0x92  1      OPC=nop                    nop                             #  80    0x92  1      OPC=nop                  
  nop                             #  81    0x93  1      OPC=nop                    nop                             #  81    0x93  1      OPC=nop                  
  nop                             #  82    0x94  1      OPC=nop                    nop                             #  82    0x94  1      OPC=nop                  
  nop                             #  83    0x95  1      OPC=nop                    nop                             #  83    0x95  1      OPC=nop                  
  nop                             #  84    0x96  1      OPC=nop                    nop                             #  84    0x96  1      OPC=nop                  
  nop                             #  85    0x97  1      OPC=nop                    nop                             #  85    0x97  1      OPC=nop                  
  addl $0x1, %ecx                 #  86    0x98  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  86    0x98  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  87    0x9b  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)    #  87    0x9b  5      OPC=movb_m8_r8           
  sall $0x2, %esi                 #  88    0xa0  3      OPC=sall_r32_imm8          sall $0x2, %esi                 #  88    0xa0  3      OPC=sall_r32_imm8        
  jne .L_126860                   #  89    0xa3  6      OPC=jne_label_1            jne .L_126860                   #  89    0xa3  6      OPC=jne_label_1          
  nop                             #  90    0xa9  1      OPC=nop                    nop                             #  90    0xa9  1      OPC=nop                  
  nop                             #  91    0xaa  1      OPC=nop                    nop                             #  91    0xaa  1      OPC=nop                  
  nop                             #  92    0xab  1      OPC=nop                    nop                             #  92    0xab  1      OPC=nop                  
  nop                             #  93    0xac  1      OPC=nop                    nop                             #  93    0xac  1      OPC=nop                  
  nop                             #  94    0xad  1      OPC=nop                    nop                             #  94    0xad  1      OPC=nop                  
  nop                             #  95    0xae  1      OPC=nop                    nop                             #  95    0xae  1      OPC=nop                  
  nop                             #  96    0xaf  1      OPC=nop                    nop                             #  96    0xaf  1      OPC=nop                  
  nop                             #  97    0xb0  1      OPC=nop                    nop                             #  97    0xb0  1      OPC=nop                  
  nop                             #  98    0xb1  1      OPC=nop                    nop                             #  98    0xb1  1      OPC=nop                  
  movl %edi, %eax                 #  99    0xb2  2      OPC=movl_r32_r32_1         movl %edi, %eax                 #  99    0xb2  2      OPC=movl_r32_r32_1       
  popq %r11                       #  100   0xb4  2      OPC=popq_r64_1             popq %r11                       #  100   0xb4  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  101   0xb6  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  101   0xb6  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  102   0xba  3      OPC=addq_r64_r64           addq %r15, %r11                 #  102   0xba  3      OPC=addq_r64_r64         
  jmpq %r11                       #  103   0xbd  3      OPC=jmpq_r64               jmpq %r11                       #  103   0xbd  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (233)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32           movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  nop                             #  8     0x8   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32           movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8          andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32           movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  nop                             #  12    0x10  1      OPC=nop                    nop                             #  12    0x10  1      OPC=nop                  
  jne .L_126860                   #  13    0x11  6      OPC=jne_label_1            jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  nop                             #  15    0x18  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1         movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32           movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x1f  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x23  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x24  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x25  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                             #  25    0x26  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                             #  26    0x27  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x28  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x29  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x2a  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x2b  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1            jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  nop                             #  32    0x32  1      OPC=nop                    nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x33  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x34  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x35  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x36  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x37  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x38  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
  nop                             #  39    0x39  1      OPC=nop                    nop                             #  39    0x39  1      OPC=nop                  
  nop                             #  40    0x3a  1      OPC=nop                    nop                             #  40    0x3a  1      OPC=nop                  
  nop                             #  41    0x3b  1      OPC=nop                    nop                             #  41    0x3b  1      OPC=nop                  
  nop                             #  42    0x3c  1      OPC=nop                    nop                             #  42    0x3c  1      OPC=nop                  
  nop                             #  43    0x3d  1      OPC=nop                    nop                             #  43    0x3d  1      OPC=nop                  
  nop                             #  44    0x3e  1      OPC=nop                    nop                             #  44    0x3e  1      OPC=nop                  
  nop                             #  45    0x3f  1      OPC=nop                    nop                             #  45    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              .L_126820:                        #        0x40  0      OPC=<label>              
  xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32           movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32         addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32         addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64           movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32           movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16           leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32         andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  notl %r9d                       #  54    0x66  3      OPC=notl_r32               notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64           andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  je .L_126820                    #  56    0x6c  6      OPC=je_label_1             je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x72  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x73  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x74  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x75  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x76  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x77  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x78  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x79  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  65    0x7a  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  66    0x7b  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  67    0x7c  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  68    0x7d  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  69    0x7e  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  70    0x7f  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x80  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  nop                             #  72    0x81  1      OPC=nop                    nop                             #  72    0x81  1      OPC=nop                  
  nop                             #  73    0x82  1      OPC=nop                    nop                             #  73    0x82  1      OPC=nop                  
  nop                             #  74    0x83  1      OPC=nop                    nop                             #  74    0x83  1      OPC=nop                  
  nop                             #  75    0x84  1      OPC=nop                    nop                             #  75    0x84  1      OPC=nop                  
  nop                             #  76    0x85  1      OPC=nop                    nop                             #  76    0x85  1      OPC=nop                  
  addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8          addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8          movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8          addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8             movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8          shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1            jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  nopl %eax                       #  83    0xa0  3      OPC=nopl_r32               nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  nopl %eax                       #  84    0xa3  3      OPC=nopl_r32               nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  nop                             #  85    0xa6  1      OPC=nop                    nop                             #  85    0xa6  1      OPC=nop                  
  nop                             #  86    0xa7  1      OPC=nop                    nop                             #  86    0xa7  1      OPC=nop                  
  popq %r11                       #  87    0xa8  2      OPC=popq_r64_1             popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8          andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64           addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64               jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
                                                                                                                                                                  
.size strcpy, .-strcpy                                                           .size strcpy, .-strcpy                                                           
                                                                                                                                                                  

********************************************************************************

Statistics Update: 

Iterations:                    300000
Elapsed Time:                  389.924s
Iterations/s:                  769.38

Starting cost:                 280
Lowest cost:                   233
Lowest correct cost:           233

Move Type       Proposed     Succeeded     Accepted        
                                                           
OpcodeWidth     8.387%       6.69433%      6.013%          
Delete          8.38033%     7.27533%      3.51367%        
Opcode          8.39067%     7.38133%      6.33533%        
Operand         8.34033%     5.02567%      0.727333%       
Local Swap      8.21067%     5.53167%      4.036%          
Instruction     8.32967%     3.48967%      0.118667%       
Add Nops        8.26567%     8.26567%      3.40667%        
ReplaceNop      8.34933%     7.26667%      5.78067%        
Rotate          8.33167%     6.442%        2.86833%        
Global Swap     8.32633%     5.896%        3.94633%        
Global Copy     8.38267%     7.14367%      7.14367%        
2xWeighted      0%           0%            0%              
Memory+Swap     8.30567%     4.436%        0.00666667%     
                                                           
Total           100%         74.848%       43.8963%        

********************************************************************************

Statistics Update: 

Iterations:                    400000
Elapsed Time:                  506.059s
Iterations/s:                  790.421

Starting cost:                 280
Lowest cost:                   233
Lowest correct cost:           233

Move Type       Proposed     Succeeded     Accepted     
                                                        
OpcodeWidth     8.38375%     6.7205%       6.05725%     
Delete          8.33175%     7.242%        3.62625%     
Opcode          8.3795%      7.369%        6.3325%      
Operand         8.33325%     4.972%        0.712%       
Local Swap      8.211%       5.5385%       4.12275%     
Instruction     8.33575%     3.49825%      0.1255%      
Add Nops        8.27875%     8.27875%      3.5005%      
ReplaceNop      8.378%       7.28175%      5.83675%     
Rotate          8.2995%      6.44225%      2.942%       
Global Swap     8.3455%      5.91275%      4.02375%     
Global Copy     8.42%        7.181%        7.181%       
2xWeighted      0%           0%            0%           
Memory+Swap     8.30325%     4.4305%       0.005%       
                                                        
Total           100%         74.8672%      44.4652%     

********************************************************************************

Progress Update: 

Lowest Cost Discovered (216)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x6   3      OPC=movq_r64_r64           movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  nop                             #  8     0x9   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  movl %edi, %eax                 #  9     0xa   2      OPC=movl_r32_r32           movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  nop                             #  10    0xc   1      OPC=nop                    andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  nop                             #  11    0xd   1      OPC=nop                    movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  movq %rdi, %rcx                 #  12    0xe   3      OPC=movq_r64_r64_1         nop                             #  12    0x10  1      OPC=nop                  
  andl $0x3, %esi                 #  13    0x11  6      OPC=andl_r32_imm32         jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  nop                             #  15    0x18  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  jne .L_126860                   #  16    0x19  6      OPC=jne_label_1            movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  nop                             #  17    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x22  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x23  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x26  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  movl %edx, %esi                 #  25    0x27  2      OPC=movl_r32_r32_1         nop                             #  25    0x26  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  26    0x29  4      OPC=movl_r32_m32           nop                             #  26    0x27  1      OPC=nop                  
  jne .L_126860                   #  27    0x2d  6      OPC=jne_label_1            nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x33  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x34  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x35  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x36  1      OPC=nop                    jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  andw %di, %ax                   #  32    0x37  3      OPC=andw_r16_r16           nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x3a  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x3b  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x3c  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x3d  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x3e  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x3f  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  39    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  39    0x40  3      OPC=addl_r32_imm8          nop                             #  40    0x3a  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  40    0x43  5      OPC=movl_m32_r32           nop                             #  41    0x3b  1      OPC=nop                  
  addl $0x4, %edx                 #  41    0x48  6      OPC=addl_r32_imm32         nop                             #  42    0x3c  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8         #  42    0x4e  4      OPC=movq_r64_m64           nop                             #  43    0x3d  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi      #  43    0x52  7      OPC=leaq_r64_m64           nop                             #  44    0x3e  1      OPC=nop                  
  movl %r8d, %r9d                 #  44    0x59  3      OPC=movl_r32_r32           nop                             #  45    0x3f  1      OPC=nop                  
  notq %r9                        #  45    0x5c  3      OPC=notq_r64             .L_126820:                        #        0x40  0      OPC=<label>              
  andq %rsi, %r9                  #  46    0x5f  3      OPC=andq_r64_r64           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  andl $0x80808080, %r9d          #  47    0x62  7      OPC=andl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  je .L_126820                    #  48    0x69  6      OPC=je_label_1             addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  nop                             #  49    0x6f  1      OPC=nop                    addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  nop                             #  50    0x70  1      OPC=nop                    movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  nop                             #  51    0x71  1      OPC=nop                    movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  nop                             #  52    0x72  1      OPC=nop                    leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  nop                             #  53    0x73  1      OPC=nop                    andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  nop                             #  54    0x74  1      OPC=nop                    notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  nop                             #  55    0x75  1      OPC=nop                    andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  nop                             #  56    0x76  1      OPC=nop                    je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x77  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x78  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x79  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x7a  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x7b  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
.L_126860:                        #        0x7c  0      OPC=<label>                nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  62    0x7c  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  63    0x7d  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  64    0x7e  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  65    0x7f  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  66    0x80  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  67    0x81  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  68    0x82  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  69    0x83  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
  nop                             #  70    0x84  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x85  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  incl %edx                       #  72    0x86  2      OPC=incl_r32               nop                             #  72    0x81  1      OPC=nop                  
  movsbq -0x1(%r15,%rdx,1), %rsi  #  73    0x88  6      OPC=movsbq_r64_m8          nop                             #  73    0x82  1      OPC=nop                  
  nop                             #  74    0x8e  1      OPC=nop                    nop                             #  74    0x83  1      OPC=nop                  
  nop                             #  75    0x8f  1      OPC=nop                    nop                             #  75    0x84  1      OPC=nop                  
  nop                             #  76    0x90  1      OPC=nop                    nop                             #  76    0x85  1      OPC=nop                  
  nop                             #  77    0x91  1      OPC=nop                    addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  nop                             #  78    0x92  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  nop                             #  79    0x93  1      OPC=nop                    addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  addl $0x1, %ecx                 #  80    0x94  3      OPC=addl_r32_imm8          movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  movb %sil, -0x1(%r15,%rcx,1)    #  81    0x97  5      OPC=movb_m8_r8             shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  sall $0x5, %esi                 #  82    0x9c  3      OPC=sall_r32_imm8          jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  jne .L_126860                   #  83    0x9f  6      OPC=jne_label_1            nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  nop                             #  84    0xa5  1      OPC=nop                    nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  nop                             #  85    0xa6  1      OPC=nop                    nop                             #  85    0xa6  1      OPC=nop                  
  nop                             #  86    0xa7  1      OPC=nop                    nop                             #  86    0xa7  1      OPC=nop                  
  nop                             #  87    0xa8  1      OPC=nop                    popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  nop                             #  88    0xa9  1      OPC=nop                    andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  nop                             #  89    0xaa  1      OPC=nop                    addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  nop                             #  90    0xab  1      OPC=nop                    jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
  nop                             #  91    0xac  1      OPC=nop                                                                                                   
  nop                             #  92    0xad  1      OPC=nop                  .size strcpy, .-strcpy                                                           
  popq %r11                       #  93    0xae  2      OPC=popq_r64_1                                                                                            
  andl $0xe0, %r11d               #  94    0xb0  4      OPC=andl_r32_imm8                                                                                         
  addq %r15, %r11                 #  95    0xb4  3      OPC=addq_r64_r64                                                                                          
  jmpq %r11                       #  96    0xb7  3      OPC=jmpq_r64                                                                                              
                                                                                                                                                                  
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (215)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x6   3      OPC=movq_r64_r64           movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  nop                             #  8     0x9   1      OPC=nop                    nop                             #  8     0x8   1      OPC=nop                  
  movl %edi, %eax                 #  9     0xa   2      OPC=movl_r32_r32           movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  nop                             #  10    0xc   1      OPC=nop                    andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  nop                             #  11    0xd   1      OPC=nop                    movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  movq %rdi, %rcx                 #  12    0xe   3      OPC=movq_r64_r64_1         nop                             #  12    0x10  1      OPC=nop                  
  andl $0x3, %esi                 #  13    0x11  6      OPC=andl_r32_imm32         jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  nop                             #  15    0x18  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  jne .L_126860                   #  16    0x19  6      OPC=jne_label_1            movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  nop                             #  17    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x22  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x23  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x26  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  movl %edx, %esi                 #  25    0x27  2      OPC=movl_r32_r32_1         nop                             #  25    0x26  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  26    0x29  4      OPC=movl_r32_m32           nop                             #  26    0x27  1      OPC=nop                  
  jne .L_126860                   #  27    0x2d  6      OPC=jne_label_1            nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x33  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x34  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x35  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x36  1      OPC=nop                    jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  andw %di, %ax                   #  32    0x37  3      OPC=andw_r16_r16           nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x3a  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x3b  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x3c  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x3d  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x3e  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x3f  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  39    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  39    0x40  3      OPC=addl_r32_imm8          nop                             #  40    0x3a  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  40    0x43  5      OPC=movl_m32_r32           nop                             #  41    0x3b  1      OPC=nop                  
  addl $0x4, %edx                 #  41    0x48  6      OPC=addl_r32_imm32         nop                             #  42    0x3c  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8         #  42    0x4e  4      OPC=movq_r64_m64           nop                             #  43    0x3d  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi      #  43    0x52  7      OPC=leaq_r64_m64           nop                             #  44    0x3e  1      OPC=nop                  
  movl %r8d, %r9d                 #  44    0x59  3      OPC=movl_r32_r32           nop                             #  45    0x3f  1      OPC=nop                  
  notq %r9                        #  45    0x5c  3      OPC=notq_r64             .L_126820:                        #        0x40  0      OPC=<label>              
  andq %rsi, %r9                  #  46    0x5f  3      OPC=andq_r64_r64           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  andl $0x80808080, %r9d          #  47    0x62  7      OPC=andl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  je .L_126820                    #  48    0x69  6      OPC=je_label_1             addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  nop                             #  49    0x6f  1      OPC=nop                    addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  nop                             #  50    0x70  1      OPC=nop                    movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  nop                             #  51    0x71  1      OPC=nop                    movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  nop                             #  52    0x72  1      OPC=nop                    leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  nop                             #  53    0x73  1      OPC=nop                    andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  nop                             #  54    0x74  1      OPC=nop                    notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  nop                             #  55    0x75  1      OPC=nop                    andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  nop                             #  56    0x76  1      OPC=nop                    je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x77  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x78  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x79  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x7a  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x7b  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x7c  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
.L_126860:                        #        0x7d  0      OPC=<label>                nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  63    0x7d  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  64    0x7e  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  65    0x7f  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  66    0x80  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  67    0x81  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  68    0x82  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  69    0x83  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
  nop                             #  70    0x84  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x85  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  nop                             #  72    0x86  1      OPC=nop                    nop                             #  72    0x81  1      OPC=nop                  
  incl %edx                       #  73    0x87  2      OPC=incl_r32               nop                             #  73    0x82  1      OPC=nop                  
  movsbq -0x1(%r15,%rdx,1), %rsi  #  74    0x89  6      OPC=movsbq_r64_m8          nop                             #  74    0x83  1      OPC=nop                  
  nop                             #  75    0x8f  1      OPC=nop                    nop                             #  75    0x84  1      OPC=nop                  
  nop                             #  76    0x90  1      OPC=nop                    nop                             #  76    0x85  1      OPC=nop                  
  nop                             #  77    0x91  1      OPC=nop                    addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  nop                             #  78    0x92  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  nop                             #  79    0x93  1      OPC=nop                    addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  nop                             #  80    0x94  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  addl $0x1, %ecx                 #  81    0x95  3      OPC=addl_r32_imm8          shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  82    0x98  5      OPC=movb_m8_r8             jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  sall $0x5, %esi                 #  83    0x9d  3      OPC=sall_r32_imm8          nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  jne .L_126860                   #  84    0xa0  6      OPC=jne_label_1            nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  nop                             #  85    0xa6  1      OPC=nop                    nop                             #  85    0xa6  1      OPC=nop                  
  nop                             #  86    0xa7  1      OPC=nop                    nop                             #  86    0xa7  1      OPC=nop                  
  nop                             #  87    0xa8  1      OPC=nop                    popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  nop                             #  88    0xa9  1      OPC=nop                    andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  nop                             #  89    0xaa  1      OPC=nop                    addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  nop                             #  90    0xab  1      OPC=nop                    jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
  nop                             #  91    0xac  1      OPC=nop                                                                                                   
  nop                             #  92    0xad  1      OPC=nop                  .size strcpy, .-strcpy                                                           
  nop                             #  93    0xae  1      OPC=nop                                                                                                   
  nop                             #  94    0xaf  1      OPC=nop                                                                                                   
  popq %r11                       #  95    0xb0  2      OPC=popq_r64_1                                                                                            
  andl $0xe0, %r11d               #  96    0xb2  4      OPC=andl_r32_imm8                                                                                         
  addq %r15, %r11                 #  97    0xb6  3      OPC=addq_r64_r64                                                                                          
  jmpq %r11                       #  98    0xb9  3      OPC=jmpq_r64                                                                                              
                                                                                                                                                                  
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (214)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x6   3      OPC=movq_r64_r64           movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  movl %edi, %eax                 #  8     0x9   2      OPC=movl_r32_r32           nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                    movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  nop                             #  10    0xc   1      OPC=nop                    andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  movq %rdi, %rcx                 #  11    0xd   3      OPC=movq_r64_r64_1         movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  andl $0x3, %esi                 #  12    0x10  6      OPC=andl_r32_imm32         nop                             #  12    0x10  1      OPC=nop                  
  nop                             #  13    0x16  1      OPC=nop                    jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  jne .L_126860                   #  15    0x18  6      OPC=jne_label_1            nop                             #  15    0x18  1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  nop                             #  17    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x22  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x23  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  movl %edx, %esi                 #  24    0x26  2      OPC=movl_r32_r32_1         nop                             #  24    0x25  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  25    0x28  4      OPC=movl_r32_m32           nop                             #  25    0x26  1      OPC=nop                  
  jne .L_126860                   #  26    0x2c  6      OPC=jne_label_1            nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x32  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x33  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x34  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x35  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x36  1      OPC=nop                    jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  andw %di, %ax                   #  32    0x37  3      OPC=andw_r16_r16           nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x3a  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x3b  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x3c  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x3d  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x3e  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x3f  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  39    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  39    0x40  3      OPC=addl_r32_imm8          nop                             #  40    0x3a  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  40    0x43  5      OPC=movl_m32_r32           nop                             #  41    0x3b  1      OPC=nop                  
  addl $0x4, %edx                 #  41    0x48  6      OPC=addl_r32_imm32         nop                             #  42    0x3c  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8         #  42    0x4e  4      OPC=movq_r64_m64           nop                             #  43    0x3d  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi      #  43    0x52  7      OPC=leaq_r64_m64           nop                             #  44    0x3e  1      OPC=nop                  
  movl %r8d, %r9d                 #  44    0x59  3      OPC=movl_r32_r32           nop                             #  45    0x3f  1      OPC=nop                  
  notq %r9                        #  45    0x5c  3      OPC=notq_r64             .L_126820:                        #        0x40  0      OPC=<label>              
  andq %rsi, %r9                  #  46    0x5f  3      OPC=andq_r64_r64           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  andl $0x80808080, %r9d          #  47    0x62  7      OPC=andl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  je .L_126820                    #  48    0x69  6      OPC=je_label_1             addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  nop                             #  49    0x6f  1      OPC=nop                    addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  nop                             #  50    0x70  1      OPC=nop                    movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  nop                             #  51    0x71  1      OPC=nop                    movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  nop                             #  52    0x72  1      OPC=nop                    leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  nop                             #  53    0x73  1      OPC=nop                    andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  nop                             #  54    0x74  1      OPC=nop                    notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  nop                             #  55    0x75  1      OPC=nop                    andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  nop                             #  56    0x76  1      OPC=nop                    je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x77  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x78  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x79  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x7a  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x7b  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x7c  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x7d  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x7e  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>                nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  65    0x7f  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  66    0x80  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  67    0x81  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  68    0x82  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  69    0x83  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
  nop                             #  70    0x84  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x85  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  nop                             #  72    0x86  1      OPC=nop                    nop                             #  72    0x81  1      OPC=nop                  
  nop                             #  73    0x87  1      OPC=nop                    nop                             #  73    0x82  1      OPC=nop                  
  nop                             #  74    0x88  1      OPC=nop                    nop                             #  74    0x83  1      OPC=nop                  
  incl %edx                       #  75    0x89  2      OPC=incl_r32               nop                             #  75    0x84  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  76    0x8b  6      OPC=movsbl_r32_m8          nop                             #  76    0x85  1      OPC=nop                  
  nop                             #  77    0x91  1      OPC=nop                    addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  nop                             #  78    0x92  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  nop                             #  79    0x93  1      OPC=nop                    addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  nop                             #  80    0x94  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  nop                             #  81    0x95  1      OPC=nop                    shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  nop                             #  82    0x96  1      OPC=nop                    jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  nop                             #  83    0x97  1      OPC=nop                    nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  addl $0x1, %ecx                 #  84    0x98  3      OPC=addl_r32_imm8          nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  movb %sil, -0x1(%r15,%rcx,1)    #  85    0x9b  5      OPC=movb_m8_r8             nop                             #  85    0xa6  1      OPC=nop                  
  sall $0x5, %esi                 #  86    0xa0  3      OPC=sall_r32_imm8          nop                             #  86    0xa7  1      OPC=nop                  
  jne .L_126860                   #  87    0xa3  6      OPC=jne_label_1            popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  nop                             #  88    0xa9  1      OPC=nop                    andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  nop                             #  89    0xaa  1      OPC=nop                    addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  nop                             #  90    0xab  1      OPC=nop                    jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
  nop                             #  91    0xac  1      OPC=nop                                                                                                   
  nop                             #  92    0xad  1      OPC=nop                  .size strcpy, .-strcpy                                                           
  nop                             #  93    0xae  1      OPC=nop                                                                                                   
  nop                             #  94    0xaf  1      OPC=nop                                                                                                   
  nop                             #  95    0xb0  1      OPC=nop                                                                                                   
  nop                             #  96    0xb1  1      OPC=nop                                                                                                   
  nop                             #  97    0xb2  1      OPC=nop                                                                                                   
  popq %r11                       #  98    0xb3  2      OPC=popq_r64_1                                                                                            
  andl $0xe0, %r11d               #  99    0xb5  4      OPC=andl_r32_imm8                                                                                         
  addq %r15, %r11                 #  100   0xb9  3      OPC=addq_r64_r64                                                                                          
  jmpq %r11                       #  101   0xbc  3      OPC=jmpq_r64                                                                                              
                                                                                                                                                                  
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (213)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                    nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  movq %rsi, %rdx                 #  7     0x6   3      OPC=movq_r64_r64           movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  movl %edi, %eax                 #  8     0x9   2      OPC=movl_r32_r32           nop                             #  8     0x8   1      OPC=nop                  
  nop                             #  9     0xb   1      OPC=nop                    movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  nop                             #  10    0xc   1      OPC=nop                    andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  movq %rdi, %rcx                 #  11    0xd   3      OPC=movq_r64_r64_1         movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  andl $0x3, %esi                 #  12    0x10  6      OPC=andl_r32_imm32         nop                             #  12    0x10  1      OPC=nop                  
  nop                             #  13    0x16  1      OPC=nop                    jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  jne .L_126860                   #  15    0x18  6      OPC=jne_label_1            nop                             #  15    0x18  1      OPC=nop                  
  nop                             #  16    0x1e  1      OPC=nop                    movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  nop                             #  17    0x1f  1      OPC=nop                    movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x20  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x21  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x22  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x23  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x24  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x25  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  movl %edx, %esi                 #  24    0x26  2      OPC=movl_r32_r32_1         nop                             #  24    0x25  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  25    0x28  4      OPC=movl_r32_m32           nop                             #  25    0x26  1      OPC=nop                  
  jne .L_126860                   #  26    0x2c  6      OPC=jne_label_1            nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x32  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x33  1      OPC=nop                    nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x34  1      OPC=nop                    nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x35  1      OPC=nop                    nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x36  1      OPC=nop                    jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  andw %di, %ax                   #  32    0x37  3      OPC=andw_r16_r16           nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x3a  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x3b  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x3c  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x3d  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x3e  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x3f  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  39    0x39  1      OPC=nop                  
  addl $0x4, %ecx                 #  39    0x40  3      OPC=addl_r32_imm8          nop                             #  40    0x3a  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  40    0x43  5      OPC=movl_m32_r32           nop                             #  41    0x3b  1      OPC=nop                  
  addl $0x4, %edx                 #  41    0x48  6      OPC=addl_r32_imm32         nop                             #  42    0x3c  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8         #  42    0x4e  4      OPC=movq_r64_m64           nop                             #  43    0x3d  1      OPC=nop                  
  leaq -0x1010101(%r8), %rsi      #  43    0x52  7      OPC=leaq_r64_m64           nop                             #  44    0x3e  1      OPC=nop                  
  movl %r8d, %r9d                 #  44    0x59  3      OPC=movl_r32_r32           nop                             #  45    0x3f  1      OPC=nop                  
  notq %r9                        #  45    0x5c  3      OPC=notq_r64             .L_126820:                        #        0x40  0      OPC=<label>              
  andq %rsi, %r9                  #  46    0x5f  3      OPC=andq_r64_r64           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  andl $0x80808080, %r9d          #  47    0x62  7      OPC=andl_r32_imm32         movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  je .L_126820                    #  48    0x69  6      OPC=je_label_1             addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  nop                             #  49    0x6f  1      OPC=nop                    addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  nop                             #  50    0x70  1      OPC=nop                    movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  nop                             #  51    0x71  1      OPC=nop                    movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  nop                             #  52    0x72  1      OPC=nop                    leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  nop                             #  53    0x73  1      OPC=nop                    andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  nop                             #  54    0x74  1      OPC=nop                    notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  nop                             #  55    0x75  1      OPC=nop                    andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  nop                             #  56    0x76  1      OPC=nop                    je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x77  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x78  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x79  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x7a  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x7b  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x7c  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x7d  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x7e  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>                nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  65    0x7f  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  66    0x80  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  67    0x81  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  68    0x82  1      OPC=nop                    nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  69    0x83  1      OPC=nop                    nop                             #  70    0x7f  1      OPC=nop                  
  nop                             #  70    0x84  1      OPC=nop                  .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x85  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  nop                             #  72    0x86  1      OPC=nop                    nop                             #  72    0x81  1      OPC=nop                  
  nop                             #  73    0x87  1      OPC=nop                    nop                             #  73    0x82  1      OPC=nop                  
  nop                             #  74    0x88  1      OPC=nop                    nop                             #  74    0x83  1      OPC=nop                  
  incl %edx                       #  75    0x89  2      OPC=incl_r32               nop                             #  75    0x84  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  76    0x8b  6      OPC=movsbl_r32_m8          nop                             #  76    0x85  1      OPC=nop                  
  nop                             #  77    0x91  1      OPC=nop                    addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  nop                             #  78    0x92  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  nop                             #  79    0x93  1      OPC=nop                    addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  nop                             #  80    0x94  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  nop                             #  81    0x95  1      OPC=nop                    shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  nop                             #  82    0x96  1      OPC=nop                    jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  addl $0x1, %ecx                 #  83    0x97  3      OPC=addl_r32_imm8          nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  movb %sil, -0x1(%r15,%rcx,1)    #  84    0x9a  5      OPC=movb_m8_r8             nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  sall $0x5, %esi                 #  85    0x9f  3      OPC=sall_r32_imm8          nop                             #  85    0xa6  1      OPC=nop                  
  jne .L_126860                   #  86    0xa2  6      OPC=jne_label_1            nop                             #  86    0xa7  1      OPC=nop                  
  nop                             #  87    0xa8  1      OPC=nop                    popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  nop                             #  88    0xa9  1      OPC=nop                    andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  nop                             #  89    0xaa  1      OPC=nop                    addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  nop                             #  90    0xab  1      OPC=nop                    jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
  nop                             #  91    0xac  1      OPC=nop                                                                                                   
  nop                             #  92    0xad  1      OPC=nop                  .size strcpy, .-strcpy                                                           
  nop                             #  93    0xae  1      OPC=nop                                                                                                   
  nop                             #  94    0xaf  1      OPC=nop                                                                                                   
  nop                             #  95    0xb0  1      OPC=nop                                                                                                   
  nop                             #  96    0xb1  1      OPC=nop                                                                                                   
  popq %r11                       #  97    0xb2  2      OPC=popq_r64_1                                                                                            
  andl $0xe0, %r11d               #  98    0xb4  4      OPC=andl_r32_imm8                                                                                         
  addq %r15, %r11                 #  99    0xb8  3      OPC=addq_r64_r64                                                                                          
  jmpq %r11                       #  100   0xbb  3      OPC=jmpq_r64                                                                                              
                                                                                                                                                                  
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Progress Update: 

Lowest Cost Discovered (212)                                                     Lowest Known Correct Cost (233)                                                  
                                                                                                                                                                  
  .text                                                                            .text                                                                          
  .globl strcpy                                                                    .globl strcpy                                                                  
  .type strcpy, @function                                                          .type strcpy, @function                                                        
                                                                                                                                                                  
#! file-offset 0                                                                 #! file-offset 0                                                                 
#! rip-offset  0                                                                 #! rip-offset  0                                                                 
#! capacity    0 bytes                                                           #! capacity    0 bytes                                                           
                                                                                                                                                                  
# Text                            #  Line  RIP   Bytes  Opcode                   # Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              .strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                    nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                    nop                             #  2     0x1   1      OPC=nop                  
  movl %edi, %eax                 #  3     0x2   2      OPC=movl_r32_r32_1         nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x4   1      OPC=nop                    nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x5   1      OPC=nop                    nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x6   1      OPC=nop                    nop                             #  6     0x5   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                    movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  movl %esi, %edx                 #  8     0x8   2      OPC=movl_r32_r32_1         nop                             #  8     0x8   1      OPC=nop                  
  andl $0x3, %esi                 #  9     0xa   6      OPC=andl_r32_imm32         movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  nop                             #  10    0x10  1      OPC=nop                    andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  movq %rdi, %rcx                 #  11    0x11  3      OPC=movq_r64_r64           movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  nop                             #  12    0x14  1      OPC=nop                    nop                             #  12    0x10  1      OPC=nop                  
  nop                             #  13    0x15  1      OPC=nop                    jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x16  1      OPC=nop                    nop                             #  14    0x17  1      OPC=nop                  
  nop                             #  15    0x17  1      OPC=nop                    nop                             #  15    0x18  1      OPC=nop                  
  jne .L_126860                   #  16    0x18  6      OPC=jne_label_1            movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  nop                             #  17    0x1e  1      OPC=nop                    movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x1f  1      OPC=nop                    nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                    nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                    nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x22  1      OPC=nop                    nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x23  1      OPC=nop                    nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x24  1      OPC=nop                    nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x25  1      OPC=nop                    nop                             #  24    0x25  1      OPC=nop                  
  nop                             #  25    0x26  1      OPC=nop                    nop                             #  25    0x26  1      OPC=nop                  
  nop                             #  26    0x27  1      OPC=nop                    nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x28  1      OPC=nop                    nop                             #  27    0x28  1      OPC=nop                  
  movl %edx, %esi                 #  28    0x29  2      OPC=movl_r32_r32_1         nop                             #  28    0x29  1      OPC=nop                  
  movl (%r15,%rsi,1), %r8d        #  29    0x2b  4      OPC=movl_r32_m32           nop                             #  29    0x2a  1      OPC=nop                  
  jne .L_126860                   #  30    0x2f  6      OPC=jne_label_1            nop                             #  30    0x2b  1      OPC=nop                  
  nop                             #  31    0x35  1      OPC=nop                    jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  nop                             #  32    0x36  1      OPC=nop                    nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x37  1      OPC=nop                    nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x38  1      OPC=nop                    nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x39  1      OPC=nop                    nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x3a  1      OPC=nop                    nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x3b  1      OPC=nop                    nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x3c  1      OPC=nop                    nop                             #  38    0x38  1      OPC=nop                  
  nop                             #  39    0x3d  1      OPC=nop                    nop                             #  39    0x39  1      OPC=nop                  
  nop                             #  40    0x3e  1      OPC=nop                    nop                             #  40    0x3a  1      OPC=nop                  
  nop                             #  41    0x3f  1      OPC=nop                    nop                             #  41    0x3b  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>                nop                             #  42    0x3c  1      OPC=nop                  
  addl $0x4, %ecx                 #  42    0x40  3      OPC=addl_r32_imm8          nop                             #  43    0x3d  1      OPC=nop                  
  movl %r8d, -0x4(%r15,%rcx,1)    #  43    0x43  5      OPC=movl_m32_r32           nop                             #  44    0x3e  1      OPC=nop                  
  addl $0x4, %edx                 #  44    0x48  6      OPC=addl_r32_imm32         nop                             #  45    0x3f  1      OPC=nop                  
  movq (%r15,%rdx,1), %r8         #  45    0x4e  4      OPC=movq_r64_m64         .L_126820:                        #        0x40  0      OPC=<label>              
  leal -0x1010101(%r8), %esi      #  46    0x52  7      OPC=leal_r32_m32           xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  movq %r8, %r9                   #  47    0x59  3      OPC=movq_r64_r64           movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  notl %r9d                       #  48    0x5c  3      OPC=notl_r32               addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  andl $0x80808080, %esi          #  49    0x5f  6      OPC=andl_r32_imm32         addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  andq %rsi, %r9                  #  50    0x65  3      OPC=andq_r64_r64_1         movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  je .L_126820                    #  51    0x68  6      OPC=je_label_1             movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  nop                             #  52    0x6e  1      OPC=nop                    leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  nop                             #  53    0x6f  1      OPC=nop                    andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  nop                             #  54    0x70  1      OPC=nop                    notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  nop                             #  55    0x71  1      OPC=nop                    andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  nop                             #  56    0x72  1      OPC=nop                    je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x73  1      OPC=nop                    nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x74  1      OPC=nop                    nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x75  1      OPC=nop                    nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x76  1      OPC=nop                    nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x77  1      OPC=nop                    nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x78  1      OPC=nop                    nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x79  1      OPC=nop                    nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x7a  1      OPC=nop                    nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  65    0x7b  1      OPC=nop                    nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  66    0x7c  1      OPC=nop                    nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  67    0x7d  1      OPC=nop                    nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  68    0x7e  1      OPC=nop                    nop                             #  68    0x7d  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>                nop                             #  69    0x7e  1      OPC=nop                  
  incl %edx                       #  69    0x7f  2      OPC=incl_r32               nop                             #  70    0x7f  1      OPC=nop                  
  movsbl -0x1(%r15,%rdx,1), %esi  #  70    0x81  6      OPC=movsbl_r32_m8        .L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x87  1      OPC=nop                    nop                             #  71    0x80  1      OPC=nop                  
  addl $0x1, %ecx                 #  72    0x88  3      OPC=addl_r32_imm8          nop                             #  72    0x81  1      OPC=nop                  
  movb %sil, -0x1(%r15,%rcx,1)    #  73    0x8b  5      OPC=movb_m8_r8             nop                             #  73    0x82  1      OPC=nop                  
  shlq $0x1, %rsi                 #  74    0x90  3      OPC=shlq_r64_one           nop                             #  74    0x83  1      OPC=nop                  
  jne .L_126860                   #  75    0x93  6      OPC=jne_label_1            nop                             #  75    0x84  1      OPC=nop                  
  nop                             #  76    0x99  1      OPC=nop                    nop                             #  76    0x85  1      OPC=nop                  
  nop                             #  77    0x9a  1      OPC=nop                    addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  nop                             #  78    0x9b  1      OPC=nop                    movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  nop                             #  79    0x9c  1      OPC=nop                    addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  nop                             #  80    0x9d  1      OPC=nop                    movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  nop                             #  81    0x9e  1      OPC=nop                    shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  nop                             #  82    0x9f  1      OPC=nop                    jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  nop                             #  83    0xa0  1      OPC=nop                    nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  nop                             #  84    0xa1  1      OPC=nop                    nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  nop                             #  85    0xa2  1      OPC=nop                    nop                             #  85    0xa6  1      OPC=nop                  
  nop                             #  86    0xa3  1      OPC=nop                    nop                             #  86    0xa7  1      OPC=nop                  
  nop                             #  87    0xa4  1      OPC=nop                    popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  popq %r11                       #  88    0xa5  2      OPC=popq_r64_1             andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  andl $0xe0, %r11d               #  89    0xa7  4      OPC=andl_r32_imm8          addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  addq %r15, %r11                 #  90    0xab  3      OPC=addq_r64_r64           jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
  jmpq %r11                       #  91    0xae  3      OPC=jmpq_r64                                                                                              
                                                                                 .size strcpy, .-strcpy                                                           
.size strcpy, .-strcpy                                                                                                                                            
                                                                                                                                                                  

********************************************************************************

Statistics Update: 

Iterations:                    500000
Elapsed Time:                  614.695s
Iterations/s:                  813.412

Starting cost:                 280
Lowest cost:                   212
Lowest correct cost:           233

Move Type       Proposed     Succeeded     Accepted     
                                                        
OpcodeWidth     8.367%       6.7294%       6.069%       
Delete          8.3108%      7.2198%       3.6554%      
Opcode          8.3798%      7.392%        6.3598%      
Operand         8.32%        4.8946%       0.7072%      
Local Swap      8.2468%      5.5754%       4.1814%      
Instruction     8.3334%      3.4948%       0.127%       
Add Nops        8.2772%      8.2772%       3.5324%      
ReplaceNop      8.3824%      7.2926%       5.8778%      
Rotate          8.2838%      6.4174%       2.9308%      
Global Swap     8.3622%      5.9106%       4.0784%      
Global Copy     8.4126%      7.1794%       7.1794%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.324%       4.422%        0.0042%      
                                                        
Total           100%         74.8052%      44.7028%     

********************************************************************************

===========================================
Working on pair / P: 1 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 1)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 1 (cell size 1)
Access 3 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 1 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
22 -> 0 (size 1 / cell size 1 / offset 0
24 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_8_6|8>)[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_8_4|8>))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_8_4|8> <TMP_BV_8_6|8>)) (== <TMP_BV_8_5|8> <TMP_BV_8_7|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x1|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   0 1 1 0 
1  |     0 0 1 
2  |       1 0 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 4)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 4 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_13|32> <TMP_BV_32_15|32>)) (== <TMP_BV_8_14|8> <TMP_BV_8_16|8>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_15|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_13|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_13|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_13|32> <TMP_BV_32_15|32>)) (== <TMP_BV_8_14|8> <TMP_BV_8_16|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 1 0 
1  |     0 0 0 1 
2  |       0 1 0 
3  |         0 1 
4  |           0 
5  |             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 0 size 1 (cell size 2)
Access 3 cell 1 offset 0 size 1 (cell size 2)
Access 4 cell 0 offset 1 size 1 (cell size 2)
Access 5 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
22 -> 0 (size 1 / cell size 2 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
35 -> 0 (size 1 / cell size 2 / offset 1
37 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_16_23|16> <TMP_BV_16_25|16>)) (== <TMP_BV_16_24|16> <TMP_BV_16_26|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_16_25|16>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_16_25|16>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_23|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_23|16>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_23|16> <TMP_BV_16_25|16>)) (== <TMP_BV_16_24|16> <TMP_BV_16_26|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 1 0 0 0 
1  |     0 0 1 0 0 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 1 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 4)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 0 offset 1 size 1 (cell size 4)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 4 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
53 -> 0 (size 1 / cell size 4 / offset 1
55 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_34|32> <TMP_BV_32_36|32>)) (== <TMP_BV_16_35|16> <TMP_BV_16_37|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_36|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_36|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_34|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_34|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_34|32> <TMP_BV_32_36|32>)) (== <TMP_BV_16_35|16> <TMP_BV_16_37|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 0 0 
2  |       0 1 1 0 
3  |         0 0 1 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 4 (cell size 12)
Access 3 cell 2 offset 0 size 4 (cell size 5)
Access 4 cell 0 offset 4 size 8 (cell size 12)
Access 5 cell 0 offset 4 size 1 (cell size 12)
Access 6 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_44|96> <TMP_BV_96_46|96>)) (== <TMP_BV_8_45|8> <TMP_BV_8_48|8>)) (== <TMP_BV_40_49|40> <TMP_BV_40_47|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_46|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_46|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_46|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_44|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_44|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_44|96> <TMP_BV_96_46|96>)) (== <TMP_BV_8_45|8> <TMP_BV_8_48|8>)) (== <TMP_BV_40_49|40> <TMP_BV_40_47|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 4 (cell size 12)
Access 3 cell 2 offset 0 size 4 (cell size 6)
Access 4 cell 0 offset 4 size 8 (cell size 12)
Access 5 cell 0 offset 4 size 1 (cell size 12)
Access 6 cell 2 offset 4 size 1 (cell size 6)
Access 7 cell 0 offset 5 size 1 (cell size 12)
Access 8 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_58|96> <TMP_BV_96_60|96>)) (== <TMP_BV_8_59|8> <TMP_BV_8_62|8>)) (== <TMP_BV_48_63|48> <TMP_BV_48_61|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_60|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_60|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_60|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_60|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_58|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_58|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_58|96> <TMP_BV_96_60|96>)) (== <TMP_BV_8_59|8> <TMP_BV_8_62|8>)) (== <TMP_BV_48_63|48> <TMP_BV_48_61|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 4 (cell size 12)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 0 offset 4 size 8 (cell size 12)
Access 5 cell 3 offset 0 size 4 (cell size 5)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 8)
Access 8 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_71|96> <TMP_BV_96_73|96>)) (== <TMP_BV_8_72|8> <TMP_BV_8_77|8>)) (== <TMP_BV_32_78|32> <TMP_BV_32_74|32>)) (== <TMP_BV_40_79|40> <TMP_BV_40_75|40>)) (== <TMP_BV_64_80|64> <TMP_BV_64_76|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_73|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_73|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_76|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_76|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_76|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_71|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_71|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_71|96> <TMP_BV_96_73|96>)) (== <TMP_BV_8_72|8> <TMP_BV_8_77|8>)) (== <TMP_BV_32_78|32> <TMP_BV_32_74|32>)) (== <TMP_BV_40_79|40> <TMP_BV_40_75|40>)) (== <TMP_BV_64_80|64> <TMP_BV_64_76|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 1)
Access 2 cell 0 offset 0 size 4 (cell size 12)
Access 3 cell 2 offset 0 size 4 (cell size 4)
Access 4 cell 0 offset 4 size 8 (cell size 12)
Access 5 cell 3 offset 0 size 4 (cell size 6)
Access 6 cell 4 offset 0 size 8 (cell size 8)
Access 7 cell 4 offset 0 size 1 (cell size 8)
Access 8 cell 3 offset 4 size 1 (cell size 6)
Access 9 cell 4 offset 1 size 1 (cell size 8)
Access 10 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 4 (size 1 / cell size 8 / offset 1
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_90|96> <TMP_BV_96_92|96>)) (== <TMP_BV_8_91|8> <TMP_BV_8_96|8>)) (== <TMP_BV_32_97|32> <TMP_BV_32_93|32>)) (== <TMP_BV_48_98|48> <TMP_BV_48_94|48>)) (== <TMP_BV_64_99|64> <TMP_BV_64_95|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_92|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_92|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_95|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_95|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_95|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_95|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_90|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_90|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_90|96> <TMP_BV_96_92|96>)) (== <TMP_BV_8_91|8> <TMP_BV_8_96|8>)) (== <TMP_BV_32_97|32> <TMP_BV_32_93|32>)) (== <TMP_BV_48_98|48> <TMP_BV_48_94|48>)) (== <TMP_BV_64_99|64> <TMP_BV_64_95|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 5
SAME MAP
     0 1 2 3 4 
------------------
0  |   1 0 1 0 
1  |     0 1 0 
2  |       0 1 
3  |         0 
4  |           

NEXT MAP
     0 1 2 3 4 
------------------
0  |   0 0 0 0 
1  |     0 0 0 
2  |       0 0 
3  |         0 
4  |           

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
22 -> 0 (size 1 / cell size 4 / offset 0
24 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_105|32> <TMP_BV_32_107|32>)) (== <TMP_BV_8_106|8> <TMP_BV_8_108|8>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_107|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_105|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_105|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_105|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_105|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_105|32> <TMP_BV_32_107|32>)) (== <TMP_BV_8_106|8> <TMP_BV_8_108|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   1 0 1 1 0 
1  |     0 1 1 0 
2  |       0 0 1 
3  |         1 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 0 0 
1  |     0 0 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 4 (cell size 4)
Access 4 cell 0 offset 0 size 1 (cell size 4)
Access 5 cell 1 offset 0 size 1 (cell size 1)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 1 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_115|32> <TMP_BV_32_117|32>)) (== <TMP_BV_8_116|8> <TMP_BV_8_118|8>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_117|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_115|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_115|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_115|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_115|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_115|32> <TMP_BV_32_117|32>)) (== <TMP_BV_8_116|8> <TMP_BV_8_118|8>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 1 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 0 0 1 0 
2  |       0 0 0 1 
3  |         0 1 0 
4  |           0 1 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 0 size 1 (cell size 4)
Access 4 cell 1 offset 0 size 1 (cell size 2)
Access 5 cell 0 offset 1 size 1 (cell size 4)
Access 6 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
22 -> 0 (size 1 / cell size 4 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
35 -> 0 (size 1 / cell size 4 / offset 1
37 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_126|32> <TMP_BV_32_128|32>)) (== <TMP_BV_16_127|16> <TMP_BV_16_129|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_128|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_128|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_126|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_126|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_126|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_126|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_126|32> <TMP_BV_32_128|32>)) (== <TMP_BV_16_127|16> <TMP_BV_16_129|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 1 1 0 0 0 
1  |     0 1 1 0 0 0 
2  |       0 0 1 0 0 
3  |         1 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 0 0 0 1 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 0 size 4 (cell size 4)
Access 4 cell 0 offset 0 size 1 (cell size 4)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 0 offset 1 size 1 (cell size 4)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
53 -> 0 (size 1 / cell size 4 / offset 1
55 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_138|32> <TMP_BV_32_140|32>)) (== <TMP_BV_16_139|16> <TMP_BV_16_141|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_140|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_140|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_138|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_138|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_138|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_138|32>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_138|32> <TMP_BV_32_140|32>)) (== <TMP_BV_16_139|16> <TMP_BV_16_141|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 1 1 0 
1  |     0 0 0 0 0 0 
2  |       0 0 0 0 0 
3  |         0 1 1 0 
4  |           0 0 1 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 4 (cell size 12)
Access 4 cell 2 offset 0 size 4 (cell size 5)
Access 5 cell 0 offset 4 size 8 (cell size 12)
Access 6 cell 0 offset 4 size 1 (cell size 12)
Access 7 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_149|96> <TMP_BV_96_151|96>)) (== <TMP_BV_8_150|8> <TMP_BV_8_153|8>)) (== <TMP_BV_40_154|40> <TMP_BV_40_152|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_151|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_151|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_151|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_149|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_149|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_149|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_149|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_149|96> <TMP_BV_96_151|96>)) (== <TMP_BV_8_150|8> <TMP_BV_8_153|8>)) (== <TMP_BV_40_154|40> <TMP_BV_40_152|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 1 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 1 0 0 0 
4  |           0 0 1 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 4 (cell size 12)
Access 4 cell 2 offset 0 size 4 (cell size 6)
Access 5 cell 0 offset 4 size 8 (cell size 12)
Access 6 cell 0 offset 4 size 1 (cell size 12)
Access 7 cell 2 offset 4 size 1 (cell size 6)
Access 8 cell 0 offset 5 size 1 (cell size 12)
Access 9 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_164|96> <TMP_BV_96_166|96>)) (== <TMP_BV_8_165|8> <TMP_BV_8_168|8>)) (== <TMP_BV_48_169|48> <TMP_BV_48_167|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_166|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_166|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_166|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_166|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_164|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_164|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_164|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_164|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_164|96> <TMP_BV_96_166|96>)) (== <TMP_BV_8_165|8> <TMP_BV_8_168|8>)) (== <TMP_BV_48_169|48> <TMP_BV_48_167|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 4 (cell size 12)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 0 offset 4 size 8 (cell size 12)
Access 6 cell 3 offset 0 size 4 (cell size 5)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_178|96> <TMP_BV_96_180|96>)) (== <TMP_BV_8_179|8> <TMP_BV_8_184|8>)) (== <TMP_BV_32_185|32> <TMP_BV_32_181|32>)) (== <TMP_BV_40_186|40> <TMP_BV_40_182|40>)) (== <TMP_BV_64_187|64> <TMP_BV_64_183|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_180|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_180|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_183|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_183|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_183|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_178|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_178|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_178|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_178|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_178|96> <TMP_BV_96_180|96>)) (== <TMP_BV_8_179|8> <TMP_BV_8_184|8>)) (== <TMP_BV_32_185|32> <TMP_BV_32_181|32>)) (== <TMP_BV_40_186|40> <TMP_BV_40_182|40>)) (== <TMP_BV_64_187|64> <TMP_BV_64_183|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 1)
Access 3 cell 0 offset 0 size 4 (cell size 12)
Access 4 cell 2 offset 0 size 4 (cell size 4)
Access 5 cell 0 offset 4 size 8 (cell size 12)
Access 6 cell 3 offset 0 size 4 (cell size 6)
Access 7 cell 4 offset 0 size 8 (cell size 8)
Access 8 cell 4 offset 0 size 1 (cell size 8)
Access 9 cell 3 offset 4 size 1 (cell size 6)
Access 10 cell 4 offset 1 size 1 (cell size 8)
Access 11 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 1 / offset 0
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 4 (size 1 / cell size 8 / offset 1
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_198|96> <TMP_BV_96_200|96>)) (== <TMP_BV_8_199|8> <TMP_BV_8_204|8>)) (== <TMP_BV_32_205|32> <TMP_BV_32_201|32>)) (== <TMP_BV_48_206|48> <TMP_BV_48_202|48>)) (== <TMP_BV_64_207|64> <TMP_BV_64_203|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_200|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_200|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_203|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_203|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_203|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_203|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_198|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_198|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_198|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_198|96>[7:0]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_198|96> <TMP_BV_96_200|96>)) (== <TMP_BV_8_199|8> <TMP_BV_8_204|8>)) (== <TMP_BV_32_205|32> <TMP_BV_32_201|32>)) (== <TMP_BV_48_206|48> <TMP_BV_48_202|48>)) (== <TMP_BV_64_207|64> <TMP_BV_64_203|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffc0|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x1|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 6
SAME MAP
     0 1 2 3 4 5 
------------------
0  |   0 0 0 1 0 
1  |     0 0 0 1 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

NEXT MAP
     0 1 2 3 4 5 
------------------
0  |   0 1 0 0 0 
1  |     0 1 0 0 
2  |       0 0 0 
3  |         0 0 
4  |           0 
5  |             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 1 (cell size 2)
Access 5 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
22 -> 0 (size 1 / cell size 2 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_16_214|16> <TMP_BV_16_216|16>)) (== <TMP_BV_16_215|16> <TMP_BV_16_217|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_16_216|16>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_214|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_214|16> <TMP_BV_16_216|16>)) (== <TMP_BV_16_215|16> <TMP_BV_16_217|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 1 1 0 
1  |     0 0 0 0 1 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           1 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 4)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 4)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 4)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 4 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 4 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_225|32> <TMP_BV_32_227|32>)) (== <TMP_BV_16_226|16> <TMP_BV_16_228|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_227|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_225|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_225|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_225|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_225|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_225|32> <TMP_BV_32_227|32>)) (== <TMP_BV_16_226|16> <TMP_BV_16_228|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 1 0 0 0 
1  |     0 0 0 1 0 0 
2  |       0 0 0 1 0 
3  |         0 0 0 1 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 0 0 0 1 0 
1  |     0 1 0 0 0 1 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 1 0 
5  |             0 1 
6  |               0 
7  |                 

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 2)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 2)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 1 (cell size 2)
Access 5 cell 1 offset 0 size 1 (cell size 2)
Access 6 cell 0 offset 1 size 1 (cell size 2)
Access 7 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 2 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 2 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
22 -> 0 (size 1 / cell size 2 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
35 -> 0 (size 1 / cell size 2 / offset 1
37 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_16_237|16> <TMP_BV_16_239|16>)) (== <TMP_BV_16_238|16> <TMP_BV_16_240|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_16_239|16>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_16_239|16>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_237|16>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_237|16>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_237|16>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_16_237|16>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_16_237|16> <TMP_BV_16_239|16>)) (== <TMP_BV_16_238|16> <TMP_BV_16_240|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x2|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 1 1 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       0 0 0 0 1 0 
3  |         0 0 0 0 1 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 1 0 
1  |     0 1 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 1 (cell size 4)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 4)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 4)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 0 offset 1 size 1 (cell size 4)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 4 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 4 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
53 -> 0 (size 1 / cell size 4 / offset 1
55 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_250|32> <TMP_BV_32_252|32>)) (== <TMP_BV_16_251|16> <TMP_BV_16_253|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_252|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_252|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_250|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_250|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_250|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_250|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_250|32> <TMP_BV_32_252|32>)) (== <TMP_BV_16_251|16> <TMP_BV_16_253|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               1 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 1 1 0 
5  |             0 0 1 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 12)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 12)
Access 5 cell 2 offset 0 size 4 (cell size 5)
Access 6 cell 0 offset 4 size 8 (cell size 12)
Access 7 cell 0 offset 4 size 1 (cell size 12)
Access 8 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 12 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_262|96> <TMP_BV_96_264|96>)) (== <TMP_BV_16_263|16> <TMP_BV_16_266|16>)) (== <TMP_BV_40_267|40> <TMP_BV_40_265|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_264|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_264|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_264|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_262|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_262|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_262|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_262|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_262|96> <TMP_BV_96_264|96>)) (== <TMP_BV_16_263|16> <TMP_BV_16_266|16>)) (== <TMP_BV_40_267|40> <TMP_BV_40_265|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               1 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 1 1 0 0 0 
5  |             0 0 1 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 12)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 12)
Access 5 cell 2 offset 0 size 4 (cell size 6)
Access 6 cell 0 offset 4 size 8 (cell size 12)
Access 7 cell 0 offset 4 size 1 (cell size 12)
Access 8 cell 2 offset 4 size 1 (cell size 6)
Access 9 cell 0 offset 5 size 1 (cell size 12)
Access 10 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 12 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_278|96> <TMP_BV_96_280|96>)) (== <TMP_BV_16_279|16> <TMP_BV_16_282|16>)) (== <TMP_BV_48_283|48> <TMP_BV_48_281|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_280|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_280|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_280|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_280|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_278|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_278|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_278|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_278|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_278|96> <TMP_BV_96_280|96>)) (== <TMP_BV_16_279|16> <TMP_BV_16_282|16>)) (== <TMP_BV_48_283|48> <TMP_BV_48_281|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   1 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 1 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 12)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 12)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 0 offset 4 size 8 (cell size 12)
Access 7 cell 3 offset 0 size 4 (cell size 5)
Access 8 cell 4 offset 0 size 8 (cell size 8)
Access 9 cell 4 offset 0 size 1 (cell size 8)
Access 10 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 12 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_293|96> <TMP_BV_96_295|96>)) (== <TMP_BV_16_294|16> <TMP_BV_16_299|16>)) (== <TMP_BV_32_300|32> <TMP_BV_32_296|32>)) (== <TMP_BV_40_301|40> <TMP_BV_40_297|40>)) (== <TMP_BV_64_302|64> <TMP_BV_64_298|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_295|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_295|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_298|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_298|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_298|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_293|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_293|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_293|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_293|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_293|96> <TMP_BV_96_295|96>)) (== <TMP_BV_16_294|16> <TMP_BV_16_299|16>)) (== <TMP_BV_32_300|32> <TMP_BV_32_296|32>)) (== <TMP_BV_40_301|40> <TMP_BV_40_297|40>)) (== <TMP_BV_64_302|64> <TMP_BV_64_298|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   1 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 1 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 1 (cell size 12)
Access 1 cell 1 offset 0 size 1 (cell size 2)
Access 2 cell 0 offset 1 size 1 (cell size 12)
Access 3 cell 1 offset 1 size 1 (cell size 2)
Access 4 cell 0 offset 0 size 4 (cell size 12)
Access 5 cell 2 offset 0 size 4 (cell size 4)
Access 6 cell 0 offset 4 size 8 (cell size 12)
Access 7 cell 3 offset 0 size 4 (cell size 6)
Access 8 cell 4 offset 0 size 8 (cell size 8)
Access 9 cell 4 offset 0 size 1 (cell size 8)
Access 10 cell 3 offset 4 size 1 (cell size 6)
Access 11 cell 4 offset 1 size 1 (cell size 8)
Access 12 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
11 -> 0 (size 1 / cell size 12 / offset 0
14 -> 1 (size 1 / cell size 2 / offset 0
20 -> 0 (size 1 / cell size 12 / offset 1
23 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 4 (size 1 / cell size 8 / offset 1
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_314|96> <TMP_BV_96_316|96>)) (== <TMP_BV_16_315|16> <TMP_BV_16_320|16>)) (== <TMP_BV_32_321|32> <TMP_BV_32_317|32>)) (== <TMP_BV_48_322|48> <TMP_BV_48_318|48>)) (== <TMP_BV_64_323|64> <TMP_BV_64_319|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_316|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_316|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_319|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_319|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_319|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_319|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_314|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_314|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_314|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_314|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_314|96> <TMP_BV_96_316|96>)) (== <TMP_BV_16_315|16> <TMP_BV_16_320|16>)) (== <TMP_BV_32_321|32> <TMP_BV_32_317|32>)) (== <TMP_BV_48_322|48> <TMP_BV_48_318|48>)) (== <TMP_BV_64_323|64> <TMP_BV_64_319|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   1 0 0 0 1 0 
1  |     0 0 0 1 0 
2  |       0 0 0 1 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 0 0 
1  |     0 1 0 0 0 
2  |       0 1 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
22 -> 0 (size 1 / cell size 4 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_331|32> <TMP_BV_32_333|32>)) (== <TMP_BV_16_332|16> <TMP_BV_16_334|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_333|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_331|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_331|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_331|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_331|32> <TMP_BV_32_333|32>)) (== <TMP_BV_16_332|16> <TMP_BV_16_334|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   1 0 0 0 1 1 0 
1  |     0 0 0 1 1 0 
2  |       0 0 0 0 1 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 
2  |       0 1 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 4)
Access 6 cell 0 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_343|32> <TMP_BV_32_345|32>)) (== <TMP_BV_16_344|16> <TMP_BV_16_346|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_345|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_343|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_343|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_343|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_343|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_343|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_343|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_343|32> <TMP_BV_32_345|32>)) (== <TMP_BV_16_344|16> <TMP_BV_16_346|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   1 0 0 0 1 0 0 0 
1  |     0 0 0 1 0 0 0 
2  |       0 0 0 1 0 0 
3  |         0 0 0 1 0 
4  |           0 0 0 1 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 1 0 
2  |       0 1 0 0 0 1 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 1 (cell size 4)
Access 6 cell 1 offset 0 size 1 (cell size 2)
Access 7 cell 0 offset 1 size 1 (cell size 4)
Access 8 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
22 -> 0 (size 1 / cell size 4 / offset 0
24 -> 1 (size 1 / cell size 2 / offset 0
35 -> 0 (size 1 / cell size 4 / offset 1
37 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_356|32> <TMP_BV_32_358|32>)) (== <TMP_BV_16_357|16> <TMP_BV_16_359|16>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_358|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_358|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_356|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_356|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_356|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_356|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_356|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_356|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_356|32> <TMP_BV_32_358|32>)) (== <TMP_BV_16_357|16> <TMP_BV_16_359|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 1 1 0 0 0 
1  |     0 0 0 1 1 0 0 0 
2  |       0 0 0 0 1 0 0 
3  |         0 0 0 0 1 0 
4  |           0 0 0 0 1 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 1 0 
2  |       0 1 0 0 0 0 1 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 1 (cell size 4)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 4)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 4)
Access 6 cell 0 offset 0 size 1 (cell size 4)
Access 7 cell 1 offset 0 size 1 (cell size 2)
Access 8 cell 0 offset 1 size 1 (cell size 4)
Access 9 cell 1 offset 1 size 1 (cell size 2)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 4 / offset 0
19 -> 0 (size 1 / cell size 4 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 4 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 4 / offset 0
40 -> 0 (size 1 / cell size 4 / offset 0
42 -> 1 (size 1 / cell size 2 / offset 0
53 -> 0 (size 1 / cell size 4 / offset 1
55 -> 1 (size 1 / cell size 2 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_32_370|32> <TMP_BV_32_372|32>)) (== <TMP_BV_16_371|16> <TMP_BV_16_373|16>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_372|32>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_32_372|32>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_32_370|32>)[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_32_370|32>))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_370|32>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_370|32>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_370|32>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_32_370|32>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_32_370|32> <TMP_BV_32_372|32>)) (== <TMP_BV_16_371|16> <TMP_BV_16_373|16>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   1 0 0 0 1 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 1 1 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 1 1 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 5)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 0 offset 4 size 1 (cell size 12)
Access 9 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_383|96> <TMP_BV_96_385|96>)) (== <TMP_BV_16_384|16> <TMP_BV_16_387|16>)) (== <TMP_BV_40_388|40> <TMP_BV_40_386|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_385|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_385|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_385|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_383|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_383|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_383|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_383|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_383|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_383|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_383|96> <TMP_BV_96_385|96>)) (== <TMP_BV_16_384|16> <TMP_BV_16_387|16>)) (== <TMP_BV_40_388|40> <TMP_BV_40_386|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 1 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 1 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 6)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 0 offset 4 size 1 (cell size 12)
Access 9 cell 2 offset 4 size 1 (cell size 6)
Access 10 cell 0 offset 5 size 1 (cell size 12)
Access 11 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_400|96> <TMP_BV_96_402|96>)) (== <TMP_BV_16_401|16> <TMP_BV_16_404|16>)) (== <TMP_BV_48_405|48> <TMP_BV_48_403|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_402|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_402|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_402|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_402|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_400|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_400|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_400|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_400|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_400|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_400|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_400|96> <TMP_BV_96_402|96>)) (== <TMP_BV_16_401|16> <TMP_BV_16_404|16>)) (== <TMP_BV_48_405|48> <TMP_BV_48_403|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   1 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 4)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 3 offset 0 size 4 (cell size 5)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_416|96> <TMP_BV_96_418|96>)) (== <TMP_BV_16_417|16> <TMP_BV_16_422|16>)) (== <TMP_BV_32_423|32> <TMP_BV_32_419|32>)) (== <TMP_BV_40_424|40> <TMP_BV_40_420|40>)) (== <TMP_BV_64_425|64> <TMP_BV_64_421|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_418|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_418|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_421|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_421|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_421|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_416|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_416|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_416|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_416|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_416|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_416|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_416|96> <TMP_BV_96_418|96>)) (== <TMP_BV_16_417|16> <TMP_BV_16_422|16>)) (== <TMP_BV_32_423|32> <TMP_BV_32_419|32>)) (== <TMP_BV_40_424|40> <TMP_BV_40_420|40>)) (== <TMP_BV_64_425|64> <TMP_BV_64_421|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   1 0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 1 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 5
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 0 offset 0 size 1 (cell size 12)
Access 2 cell 1 offset 0 size 1 (cell size 2)
Access 3 cell 0 offset 1 size 1 (cell size 12)
Access 4 cell 1 offset 1 size 1 (cell size 2)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 4)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 3 offset 0 size 4 (cell size 6)
Access 9 cell 4 offset 0 size 8 (cell size 8)
Access 10 cell 4 offset 0 size 1 (cell size 8)
Access 11 cell 3 offset 4 size 1 (cell size 6)
Access 12 cell 4 offset 1 size 1 (cell size 8)
Access 13 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
19 -> 0 (size 1 / cell size 12 / offset 0
22 -> 1 (size 1 / cell size 2 / offset 0
28 -> 0 (size 1 / cell size 12 / offset 1
31 -> 1 (size 1 / cell size 2 / offset 1
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 4 (size 8 / cell size 8 / offset 0
92 -> 4 (size 1 / cell size 8 / offset 0
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 4 (size 1 / cell size 8 / offset 1
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and (and TRUE (== <TMP_BV_96_438|96> <TMP_BV_96_440|96>)) (== <TMP_BV_16_439|16> <TMP_BV_16_444|16>)) (== <TMP_BV_32_445|32> <TMP_BV_32_441|32>)) (== <TMP_BV_48_446|48> <TMP_BV_48_442|48>)) (== <TMP_BV_64_447|64> <TMP_BV_64_443|64>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_440|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_440|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_64_443|64>[31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_64_443|64>)[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_443|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_4_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_443|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_438|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_438|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_438|96>[7:0]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_438|96>[7:0]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_438|96>[15:8]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_438|96>[15:8]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and (and TRUE (== <TMP_BV_96_438|96> <TMP_BV_96_440|96>)) (== <TMP_BV_16_439|16> <TMP_BV_16_444|16>)) (== <TMP_BV_32_445|32> <TMP_BV_32_441|32>)) (== <TMP_BV_48_446|48> <TMP_BV_48_442|48>)) (== <TMP_BV_64_447|64> <TMP_BV_64_443|64>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbf|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x2|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_4_ADDR|64>) (<= (plus <CELL_4_ADDR|64> <0x8|64>) <CELL_3_ADDR|64>))) (<= <CELL_4_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_4_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 7
SAME MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 0 0 0 1 0 
1  |     0 0 0 0 1 
2  |       1 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

NEXT MAP
     0 1 2 3 4 5 6 
------------------
0  |   0 1 1 0 0 0 
1  |     0 0 1 0 0 
2  |       0 0 0 0 
3  |         0 0 0 
4  |           0 0 
5  |             0 
6  |               

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
22 -> 0 (size 1 / cell size 8 / offset 0
24 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_454|64> <TMP_BV_64_456|64>)) (== <TMP_BV_40_455|40> <TMP_BV_40_457|40>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_456|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_454|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_454|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_454|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_454|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_454|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_454|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_454|64> <TMP_BV_64_456|64>)) (== <TMP_BV_40_455|40> <TMP_BV_40_457|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 8
SAME MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 0 0 0 1 1 0 
1  |     0 0 0 0 0 1 
2  |       1 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             1 0 
6  |               0 
7  |                 

NEXT MAP
     0 1 2 3 4 5 6 7 
------------------
0  |   0 1 1 0 0 0 0 
1  |     0 0 1 0 0 0 
2  |       0 0 0 0 0 
3  |         0 0 0 0 
4  |           0 0 0 
5  |             0 0 
6  |               0 
7  |                 

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 8)
Access 6 cell 0 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 8 / offset 0
40 -> 0 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 5 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_465|64> <TMP_BV_64_467|64>)) (== <TMP_BV_40_466|40> <TMP_BV_40_468|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_467|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_465|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_465|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_465|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_465|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_465|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_465|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_465|64> <TMP_BV_64_467|64>)) (== <TMP_BV_40_466|40> <TMP_BV_40_468|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 1 0 0 0 
1  |     0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 1 0 
6  |               0 1 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 1 (cell size 8)
Access 6 cell 1 offset 0 size 1 (cell size 5)
Access 7 cell 0 offset 1 size 1 (cell size 8)
Access 8 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
22 -> 0 (size 1 / cell size 8 / offset 0
24 -> 1 (size 1 / cell size 5 / offset 0
35 -> 0 (size 1 / cell size 8 / offset 1
37 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_477|64> <TMP_BV_64_479|64>)) (== <TMP_BV_40_478|40> <TMP_BV_40_480|40>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_479|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_479|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_477|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_477|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_477|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_477|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_477|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_477|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_477|64> <TMP_BV_64_479|64>)) (== <TMP_BV_40_478|40> <TMP_BV_40_480|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 1 0 0 0 
1  |     0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             1 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 1 0 
7  |                 0 1 
8  |                   0 
9  |                     

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 8)
Access 6 cell 0 offset 0 size 1 (cell size 8)
Access 7 cell 1 offset 0 size 1 (cell size 5)
Access 8 cell 0 offset 1 size 1 (cell size 8)
Access 9 cell 1 offset 1 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 8 / offset 0
40 -> 0 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 5 / offset 0
53 -> 0 (size 1 / cell size 8 / offset 1
55 -> 1 (size 1 / cell size 5 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_490|64> <TMP_BV_64_492|64>)) (== <TMP_BV_40_491|40> <TMP_BV_40_493|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_492|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_492|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_490|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_490|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_490|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_490|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_490|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_490|64>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_490|64> <TMP_BV_64_492|64>)) (== <TMP_BV_40_491|40> <TMP_BV_40_493|40>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 
2  |       1 0 0 0 1 1 0 
3  |         0 0 0 1 1 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 1 1 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 1 1 0 
6  |               0 0 1 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 5)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 0 offset 4 size 1 (cell size 12)
Access 9 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_502|96> <TMP_BV_96_504|96>)) (== <TMP_BV_40_503|40> <TMP_BV_40_506|40>)) (== <TMP_BV_40_507|40> <TMP_BV_40_505|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_504|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_504|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_504|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_502|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_502|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_502|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_502|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_502|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_502|96>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_502|96> <TMP_BV_96_504|96>)) (== <TMP_BV_40_503|40> <TMP_BV_40_506|40>)) (== <TMP_BV_40_507|40> <TMP_BV_40_505|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 1 1 0 0 0 
3  |         0 0 0 1 1 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 1 1 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 1 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 1 0 0 0 
6  |               0 0 1 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 12)
Access 6 cell 2 offset 0 size 4 (cell size 6)
Access 7 cell 0 offset 4 size 8 (cell size 12)
Access 8 cell 0 offset 4 size 1 (cell size 12)
Access 9 cell 2 offset 4 size 1 (cell size 6)
Access 10 cell 0 offset 5 size 1 (cell size 12)
Access 11 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_518|96> <TMP_BV_96_520|96>)) (== <TMP_BV_40_519|40> <TMP_BV_40_522|40>)) (== <TMP_BV_48_523|48> <TMP_BV_48_521|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_520|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_520|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_520|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_520|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_518|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_518|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_518|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_518|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_518|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_518|96>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_518|96> <TMP_BV_96_520|96>)) (== <TMP_BV_40_519|40> <TMP_BV_40_522|40>)) (== <TMP_BV_48_523|48> <TMP_BV_48_521|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 1 0 0 0 0 
3  |         0 0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 1 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 0 offset 4 size 1 (cell size 16)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 16)
Access 6 cell 2 offset 0 size 4 (cell size 4)
Access 7 cell 0 offset 4 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 5)
Access 9 cell 0 offset 8 size 8 (cell size 16)
Access 10 cell 0 offset 8 size 1 (cell size 16)
Access 11 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
58 -> 0 (size 1 / cell size 16 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_533|128> <TMP_BV_128_535|128>)) (== <TMP_BV_40_534|40> <TMP_BV_40_538|40>)) (== <TMP_BV_32_539|32> <TMP_BV_32_536|32>)) (== <TMP_BV_40_540|40> <TMP_BV_40_537|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_535|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_535|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_535|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_535|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_535|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_533|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_533|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_533|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_533|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_533|128>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_533|128>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_533|128> <TMP_BV_128_535|128>)) (== <TMP_BV_40_534|40> <TMP_BV_40_538|40>)) (== <TMP_BV_32_539|32> <TMP_BV_32_536|32>)) (== <TMP_BV_40_540|40> <TMP_BV_40_537|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 5)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 0 offset 4 size 1 (cell size 16)
Access 4 cell 1 offset 4 size 1 (cell size 5)
Access 5 cell 0 offset 0 size 4 (cell size 16)
Access 6 cell 2 offset 0 size 4 (cell size 4)
Access 7 cell 0 offset 4 size 8 (cell size 16)
Access 8 cell 3 offset 0 size 4 (cell size 6)
Access 9 cell 0 offset 8 size 8 (cell size 16)
Access 10 cell 0 offset 8 size 1 (cell size 16)
Access 11 cell 3 offset 4 size 1 (cell size 6)
Access 12 cell 0 offset 9 size 1 (cell size 16)
Access 13 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 5 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
58 -> 0 (size 1 / cell size 16 / offset 4
61 -> 1 (size 1 / cell size 5 / offset 4
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 0 (size 1 / cell size 16 / offset 9
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_552|128> <TMP_BV_128_554|128>)) (== <TMP_BV_40_553|40> <TMP_BV_40_557|40>)) (== <TMP_BV_32_558|32> <TMP_BV_32_555|32>)) (== <TMP_BV_48_559|48> <TMP_BV_48_556|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_554|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_554|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_554|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_554|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_554|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_554|128>[79:72])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_552|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_552|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_552|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_552|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_552|128>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_552|128>[39:32]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_552|128> <TMP_BV_128_554|128>)) (== <TMP_BV_40_553|40> <TMP_BV_40_557|40>)) (== <TMP_BV_32_558|32> <TMP_BV_32_555|32>)) (== <TMP_BV_48_559|48> <TMP_BV_48_556|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x5|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 1 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 
2  |       0 0 0 0 0 0 
3  |         0 1 0 0 0 
4  |           0 1 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 1 (cell size 8)
Access 8 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
22 -> 0 (size 1 / cell size 8 / offset 0
24 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_568|64> <TMP_BV_64_570|64>)) (== <TMP_BV_48_569|48> <TMP_BV_48_571|48>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_570|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_568|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_568|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_568|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_568|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_568|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_568|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_568|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_568|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_568|64> <TMP_BV_64_570|64>)) (== <TMP_BV_48_569|48> <TMP_BV_48_571|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 1 1 0 
1  |     0 0 0 0 0 0 0 1 
2  |       1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 
4  |           0 1 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 8)
Access 8 cell 0 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 8 / offset 0
40 -> 0 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 6 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_64_581|64> <TMP_BV_64_583|64>)) (== <TMP_BV_48_582|48> <TMP_BV_48_584|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_583|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_581|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_581|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_581|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_581|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_581|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_581|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_581|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_581|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_581|64> <TMP_BV_64_583|64>)) (== <TMP_BV_48_582|48> <TMP_BV_48_584|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 
4  |           0 1 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 1 (cell size 8)
Access 8 cell 1 offset 0 size 1 (cell size 6)
Access 9 cell 0 offset 1 size 1 (cell size 8)
Access 10 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
22 -> 0 (size 1 / cell size 8 / offset 0
24 -> 1 (size 1 / cell size 6 / offset 0
35 -> 0 (size 1 / cell size 8 / offset 1
37 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_595|64> <TMP_BV_64_597|64>)) (== <TMP_BV_48_596|48> <TMP_BV_48_598|48>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_597|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_597|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_595|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_595|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_595|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_595|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_595|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_595|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_595|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_595|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_595|64> <TMP_BV_64_597|64>)) (== <TMP_BV_48_596|48> <TMP_BV_48_598|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 1 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       1 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 8)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 8)
Access 3 cell 0 offset 4 size 1 (cell size 8)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 8)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 8)
Access 8 cell 0 offset 0 size 1 (cell size 8)
Access 9 cell 1 offset 0 size 1 (cell size 6)
Access 10 cell 0 offset 1 size 1 (cell size 8)
Access 11 cell 1 offset 1 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 8 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 8 / offset 4
58 -> 0 (size 1 / cell size 8 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 8 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 8 / offset 0
40 -> 0 (size 1 / cell size 8 / offset 0
42 -> 1 (size 1 / cell size 6 / offset 0
53 -> 0 (size 1 / cell size 8 / offset 1
55 -> 1 (size 1 / cell size 6 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_64_610|64> <TMP_BV_64_612|64>)) (== <TMP_BV_48_611|48> <TMP_BV_48_613|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_612|64>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_64_612|64>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_610|64>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_610|64>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_64_610|64>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_64_610|64>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_610|64>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_610|64>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_610|64>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_64_610|64>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_64_610|64> <TMP_BV_64_612|64>)) (== <TMP_BV_48_611|48> <TMP_BV_48_613|48>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb9|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x8|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 1 0 
3  |         0 0 0 0 0 1 1 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 1 0 0 0 0 0 1 1 0 
1  |     0 0 1 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 12)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 2 offset 0 size 4 (cell size 5)
Access 9 cell 0 offset 4 size 8 (cell size 12)
Access 10 cell 0 offset 4 size 1 (cell size 12)
Access 11 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 12 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_624|96> <TMP_BV_96_626|96>)) (== <TMP_BV_48_625|48> <TMP_BV_48_628|48>)) (== <TMP_BV_40_629|40> <TMP_BV_40_627|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_626|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_626|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_626|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_624|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_624|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_624|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_624|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_624|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_624|96>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_624|96>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_624|96>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_624|96> <TMP_BV_96_626|96>)) (== <TMP_BV_48_625|48> <TMP_BV_48_628|48>)) (== <TMP_BV_40_629|40> <TMP_BV_40_627|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 0 0 0 1 1 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 1 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 1 1 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 1 0 0 0 0 0 0 1 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 0 offset 4 size 1 (cell size 12)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 12)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 2 offset 0 size 4 (cell size 6)
Access 9 cell 0 offset 4 size 8 (cell size 12)
Access 10 cell 0 offset 4 size 1 (cell size 12)
Access 11 cell 2 offset 4 size 1 (cell size 6)
Access 12 cell 0 offset 5 size 1 (cell size 12)
Access 13 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
58 -> 0 (size 1 / cell size 12 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 12 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_642|96> <TMP_BV_96_644|96>)) (== <TMP_BV_48_643|48> <TMP_BV_48_646|48>)) (== <TMP_BV_48_647|48> <TMP_BV_48_645|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_644|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_644|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_644|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_644|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_642|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_642|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_642|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_642|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_642|96>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_642|96>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_642|96>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_642|96>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_642|96> <TMP_BV_96_644|96>)) (== <TMP_BV_48_643|48> <TMP_BV_48_646|48>)) (== <TMP_BV_48_647|48> <TMP_BV_48_645|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 1 0 
3  |         0 1 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 0 offset 4 size 1 (cell size 16)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 16)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 16)
Access 8 cell 2 offset 0 size 4 (cell size 4)
Access 9 cell 0 offset 4 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 5)
Access 11 cell 0 offset 8 size 8 (cell size 16)
Access 12 cell 0 offset 8 size 1 (cell size 16)
Access 13 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
58 -> 0 (size 1 / cell size 16 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 16 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_659|128> <TMP_BV_128_661|128>)) (== <TMP_BV_48_660|48> <TMP_BV_48_664|48>)) (== <TMP_BV_32_665|32> <TMP_BV_32_662|32>)) (== <TMP_BV_40_666|40> <TMP_BV_40_663|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_661|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_661|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_661|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_661|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_661|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_659|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_659|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_659|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_659|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_659|128>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_659|128>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_659|128>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_659|128>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_659|128> <TMP_BV_128_661|128>)) (== <TMP_BV_48_660|48> <TMP_BV_48_664|48>)) (== <TMP_BV_32_665|32> <TMP_BV_32_662|32>)) (== <TMP_BV_40_666|40> <TMP_BV_40_663|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 5 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       1 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 1 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 1 0 0 0 
3  |         0 1 0 0 0 0 0 0 0 0 0 0 
4  |           0 1 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 6)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 0 offset 4 size 1 (cell size 16)
Access 4 cell 1 offset 4 size 1 (cell size 6)
Access 5 cell 0 offset 5 size 1 (cell size 16)
Access 6 cell 1 offset 5 size 1 (cell size 6)
Access 7 cell 0 offset 0 size 4 (cell size 16)
Access 8 cell 2 offset 0 size 4 (cell size 4)
Access 9 cell 0 offset 4 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 6)
Access 11 cell 0 offset 8 size 8 (cell size 16)
Access 12 cell 0 offset 8 size 1 (cell size 16)
Access 13 cell 3 offset 4 size 1 (cell size 6)
Access 14 cell 0 offset 9 size 1 (cell size 16)
Access 15 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 6 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
58 -> 0 (size 1 / cell size 16 / offset 4
61 -> 1 (size 1 / cell size 6 / offset 4
67 -> 0 (size 1 / cell size 16 / offset 5
70 -> 1 (size 1 / cell size 6 / offset 5
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 0 (size 1 / cell size 16 / offset 9
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_680|128> <TMP_BV_128_682|128>)) (== <TMP_BV_48_681|48> <TMP_BV_48_685|48>)) (== <TMP_BV_32_686|32> <TMP_BV_32_683|32>)) (== <TMP_BV_48_687|48> <TMP_BV_48_684|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_682|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_682|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_682|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_682|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_682|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_682|128>[79:72])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_680|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_680|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_680|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_680|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_680|128>[39:32]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_680|128>[39:32]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x5|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_680|128>[47:40]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_680|128>[47:40]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_680|128> <TMP_BV_128_682|128>)) (== <TMP_BV_48_681|48> <TMP_BV_48_685|48>)) (== <TMP_BV_32_686|32> <TMP_BV_32_683|32>)) (== <TMP_BV_48_687|48> <TMP_BV_48_684|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x6|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 9
SAME MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 
3  |         0 0 0 0 0 
4  |           1 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

NEXT MAP
     0 1 2 3 4 5 6 7 8 
------------------
0  |   0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 
2  |       0 1 1 0 0 0 
3  |         0 0 1 0 0 
4  |           0 0 0 0 
5  |             0 0 0 
6  |               0 0 
7  |                 0 
8  |                   

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 1 (cell size 12)
Access 8 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
22 -> 0 (size 1 / cell size 12 / offset 0
24 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_695|96> <TMP_BV_96_697|96>)) (== <TMP_BV_72_696|72> <TMP_BV_72_698|72>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_697|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_695|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_695|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_695|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_695|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_695|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_695|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_695|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_695|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_695|96> <TMP_BV_96_697|96>)) (== <TMP_BV_72_696|72> <TMP_BV_72_698|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 10
SAME MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 0 0 0 0 0 1 1 0 
1  |     0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 
4  |           1 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 1 0 
8  |                   0 
9  |                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 
------------------
0  |   0 1 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 
3  |         0 0 1 0 0 0 
4  |           0 0 0 0 0 
5  |             0 0 0 0 
6  |               0 0 0 
7  |                 0 0 
8  |                   0 
9  |                     

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 0 offset 0 size 1 (cell size 12)
Access 9 cell 1 offset 0 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
40 -> 0 (size 1 / cell size 12 / offset 0
42 -> 1 (size 1 / cell size 9 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_707|96> <TMP_BV_96_709|96>)) (== <TMP_BV_72_708|72> <TMP_BV_72_710|72>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_709|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_707|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_707|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_707|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_707|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_707|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_707|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_707|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_707|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_707|96> <TMP_BV_96_709|96>)) (== <TMP_BV_72_708|72> <TMP_BV_72_710|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 1 0 
8  |                   0 1 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 1 (cell size 12)
Access 8 cell 1 offset 0 size 1 (cell size 9)
Access 9 cell 0 offset 1 size 1 (cell size 12)
Access 10 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
22 -> 0 (size 1 / cell size 12 / offset 0
24 -> 1 (size 1 / cell size 9 / offset 0
35 -> 0 (size 1 / cell size 12 / offset 1
37 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_720|96> <TMP_BV_96_722|96>)) (== <TMP_BV_72_721|72> <TMP_BV_72_723|72>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_722|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_722|96>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_720|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_720|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_720|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_720|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_720|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_720|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_720|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_720|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_720|96> <TMP_BV_96_722|96>)) (== <TMP_BV_72_721|72> <TMP_BV_72_723|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 1 0 0 0 
1  |     0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 1 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 1 0 
9  |                     0 1 
10 |                       0 
11 |                         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 0 offset 0 size 1 (cell size 12)
Access 9 cell 1 offset 0 size 1 (cell size 9)
Access 10 cell 0 offset 1 size 1 (cell size 12)
Access 11 cell 1 offset 1 size 1 (cell size 9)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
40 -> 0 (size 1 / cell size 12 / offset 0
42 -> 1 (size 1 / cell size 9 / offset 0
53 -> 0 (size 1 / cell size 12 / offset 1
55 -> 1 (size 1 / cell size 9 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_734|96> <TMP_BV_96_736|96>)) (== <TMP_BV_72_735|72> <TMP_BV_72_737|72>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_736|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_736|96>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_734|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_734|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_734|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_734|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_734|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_734|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_734|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_734|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_734|96> <TMP_BV_96_736|96>)) (== <TMP_BV_72_735|72> <TMP_BV_72_737|72>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 1 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 1 1 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 1 1 0 
8  |                   0 0 1 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 2 offset 0 size 4 (cell size 5)
Access 9 cell 0 offset 4 size 8 (cell size 12)
Access 10 cell 0 offset 4 size 1 (cell size 12)
Access 11 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_747|96> <TMP_BV_96_749|96>)) (== <TMP_BV_72_748|72> <TMP_BV_72_751|72>)) (== <TMP_BV_40_752|40> <TMP_BV_40_750|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_749|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_749|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_749|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_747|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_747|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_747|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_747|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_747|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_747|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_747|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_747|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_747|96> <TMP_BV_96_749|96>)) (== <TMP_BV_72_748|72> <TMP_BV_72_751|72>)) (== <TMP_BV_40_752|40> <TMP_BV_40_750|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 1 1 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 1 0 0 0 
8  |                   0 0 1 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 12)
Access 8 cell 2 offset 0 size 4 (cell size 6)
Access 9 cell 0 offset 4 size 8 (cell size 12)
Access 10 cell 0 offset 4 size 1 (cell size 12)
Access 11 cell 2 offset 4 size 1 (cell size 6)
Access 12 cell 0 offset 5 size 1 (cell size 12)
Access 13 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_764|96> <TMP_BV_96_766|96>)) (== <TMP_BV_72_765|72> <TMP_BV_72_768|72>)) (== <TMP_BV_48_769|48> <TMP_BV_48_767|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_766|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_766|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_766|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_766|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_764|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_764|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_764|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_764|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_764|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_764|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_764|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_764|96>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_764|96> <TMP_BV_96_766|96>)) (== <TMP_BV_72_765|72> <TMP_BV_72_768|72>)) (== <TMP_BV_48_769|48> <TMP_BV_48_767|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 1 1 0 
5  |             0 0 0 0 0 1 1 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 1 1 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 16)
Access 5 cell 0 offset 8 size 1 (cell size 16)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 16)
Access 8 cell 2 offset 0 size 4 (cell size 4)
Access 9 cell 0 offset 4 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 5)
Access 11 cell 0 offset 8 size 8 (cell size 16)
Access 12 cell 0 offset 8 size 1 (cell size 16)
Access 13 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 16 / offset 8
72 -> 0 (size 1 / cell size 16 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_780|128> <TMP_BV_128_782|128>)) (== <TMP_BV_72_781|72> <TMP_BV_72_785|72>)) (== <TMP_BV_32_786|32> <TMP_BV_32_783|32>)) (== <TMP_BV_40_787|40> <TMP_BV_40_784|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_782|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_782|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_782|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_782|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_782|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_780|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_780|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_780|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_780|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_780|128>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_780|128>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_780|128>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_780|128>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_780|128> <TMP_BV_128_782|128>)) (== <TMP_BV_72_781|72> <TMP_BV_72_785|72>)) (== <TMP_BV_32_786|32> <TMP_BV_32_783|32>)) (== <TMP_BV_40_787|40> <TMP_BV_40_784|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 1 1 0 0 0 
5  |             0 0 0 0 0 1 1 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 1 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 1 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 9)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 1 offset 4 size 4 (cell size 9)
Access 4 cell 0 offset 8 size 4 (cell size 16)
Access 5 cell 0 offset 8 size 1 (cell size 16)
Access 6 cell 1 offset 8 size 1 (cell size 9)
Access 7 cell 0 offset 0 size 4 (cell size 16)
Access 8 cell 2 offset 0 size 4 (cell size 4)
Access 9 cell 0 offset 4 size 8 (cell size 16)
Access 10 cell 3 offset 0 size 4 (cell size 6)
Access 11 cell 0 offset 8 size 8 (cell size 16)
Access 12 cell 0 offset 8 size 1 (cell size 16)
Access 13 cell 3 offset 4 size 1 (cell size 6)
Access 14 cell 0 offset 9 size 1 (cell size 16)
Access 15 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 9 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
43 -> 1 (size 4 / cell size 9 / offset 4
46 -> 0 (size 4 / cell size 16 / offset 8
72 -> 0 (size 1 / cell size 16 / offset 8
75 -> 1 (size 1 / cell size 9 / offset 8
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 0 (size 1 / cell size 16 / offset 9
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_800|128> <TMP_BV_128_802|128>)) (== <TMP_BV_72_801|72> <TMP_BV_72_805|72>)) (== <TMP_BV_32_806|32> <TMP_BV_32_803|32>)) (== <TMP_BV_48_807|48> <TMP_BV_48_804|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_802|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_802|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_802|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_802|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_802|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_802|128>[79:72])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_800|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_800|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_800|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_800|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_800|128>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_800|128>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_800|128>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_800|128>[71:64]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_800|128> <TMP_BV_128_802|128>)) (== <TMP_BV_72_801|72> <TMP_BV_72_805|72>)) (== <TMP_BV_32_806|32> <TMP_BV_32_803|32>)) (== <TMP_BV_48_807|48> <TMP_BV_48_804|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb8|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0x9|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 11
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 
1  |     0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 
5  |             0 0 0 0 0 
6  |               0 0 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 
4  |           0 0 0 0 0 0 
5  |             0 1 0 0 0 
6  |               0 1 0 0 
7  |                 0 0 0 
8  |                   0 0 
9  |                     0 
10 |                       

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 1 (cell size 12)
Access 10 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
22 -> 0 (size 1 / cell size 12 / offset 0
24 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_817|96> <TMP_BV_96_819|96>)) (== <TMP_BV_80_818|80> <TMP_BV_80_820|80>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_819|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_817|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_817|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_817|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_817|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_817|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_817|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_817|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_817|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_817|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_817|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_817|96> <TMP_BV_96_819|96>)) (== <TMP_BV_80_818|80> <TMP_BV_80_820|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 12
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 0 0 0 0 0 0 0 1 1 0 
1  |     0 0 0 0 0 0 0 0 0 1 
2  |       0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 
6  |               0 0 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     1 0 
10 |                       0 
11 |                         

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 
6  |               0 1 0 0 0 
7  |                 0 0 0 0 
8  |                   0 0 0 
9  |                     0 0 
10 |                       0 
11 |                         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 12)
Access 10 cell 0 offset 0 size 1 (cell size 12)
Access 11 cell 1 offset 0 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
40 -> 0 (size 1 / cell size 12 / offset 0
42 -> 1 (size 1 / cell size 10 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_96_831|96> <TMP_BV_96_833|96>)) (== <TMP_BV_80_832|80> <TMP_BV_80_834|80>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_833|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_831|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_831|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_831|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_831|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_831|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_831|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_831|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_831|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_831|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_831|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_831|96> <TMP_BV_96_833|96>)) (== <TMP_BV_80_832|80> <TMP_BV_80_834|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 13
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 
1  |     0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 0 0 
10 |                       0 0 
11 |                         0 
12 |                           

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 
6  |               0 1 0 0 0 0 
7  |                 0 0 0 0 0 
8  |                   0 0 0 0 
9  |                     0 1 0 
10 |                       0 1 
11 |                         0 
12 |                           

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 1 (cell size 12)
Access 10 cell 1 offset 0 size 1 (cell size 10)
Access 11 cell 0 offset 1 size 1 (cell size 12)
Access 12 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
22 -> 0 (size 1 / cell size 12 / offset 0
24 -> 1 (size 1 / cell size 10 / offset 0
35 -> 0 (size 1 / cell size 12 / offset 1
37 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_846|96> <TMP_BV_96_848|96>)) (== <TMP_BV_80_847|80> <TMP_BV_80_849|80>))

CONSTRAINTS

(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_848|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_848|96>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_846|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_846|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_846|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_846|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_846|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_846|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_846|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_846|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_846|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_846|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_846|96> <TMP_BV_96_848|96>)) (== <TMP_BV_80_847|80> <TMP_BV_80_849|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 1 1 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 1 0 0 
2  |       0 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     1 0 0 0 
10 |                       0 0 0 
11 |                         0 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 1 0 
11 |                         0 1 
12 |                           0 
13 |                             

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 12)
Access 10 cell 0 offset 0 size 1 (cell size 12)
Access 11 cell 1 offset 0 size 1 (cell size 10)
Access 12 cell 0 offset 1 size 1 (cell size 12)
Access 13 cell 1 offset 1 size 1 (cell size 10)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
40 -> 0 (size 1 / cell size 12 / offset 0
42 -> 1 (size 1 / cell size 10 / offset 0
53 -> 0 (size 1 / cell size 12 / offset 1
55 -> 1 (size 1 / cell size 10 / offset 1
Start memory constraint: (and (and TRUE (== <TMP_BV_96_862|96> <TMP_BV_96_864|96>)) (== <TMP_BV_80_863|80> <TMP_BV_80_865|80>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_864|96>[7:0])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x1|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x1|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_864|96>[15:8])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_862|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_862|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_862|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and TRUE (== <TMP_BV_96_862|96> <TMP_BV_96_864|96>)) (== <TMP_BV_80_863|80> <TMP_BV_80_865|80>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 14
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 1 0 
3  |         0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 0 0 0 
10 |                       0 0 0 
11 |                         1 0 
12 |                           0 
13 |                             

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 1 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 
7  |                 0 0 0 0 0 0 
8  |                   0 0 0 0 0 
9  |                     0 1 1 0 
10 |                       0 0 1 
11 |                         0 0 
12 |                           0 
13 |                             

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 12)
Access 10 cell 2 offset 0 size 4 (cell size 5)
Access 11 cell 0 offset 4 size 8 (cell size 12)
Access 12 cell 0 offset 4 size 1 (cell size 12)
Access 13 cell 2 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 5 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_877|96> <TMP_BV_96_879|96>)) (== <TMP_BV_80_878|80> <TMP_BV_80_881|80>)) (== <TMP_BV_40_882|40> <TMP_BV_40_880|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_879|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_879|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_879|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_877|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_877|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_877|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_877|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_877|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_877|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_877|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_877|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_877|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_877|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_877|96> <TMP_BV_96_879|96>)) (== <TMP_BV_80_878|80> <TMP_BV_80_881|80>)) (== <TMP_BV_40_882|40> <TMP_BV_40_880|40>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 0 0 0 
5  |             0 0 0 0 0 0 0 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         1 0 0 0 
12 |                           0 0 0 
13 |                             0 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 1 1 0 0 0 
10 |                       0 0 1 0 0 
11 |                         0 0 0 0 
12 |                           0 1 0 
13 |                             0 1 
14 |                               0 
15 |                                 

TOTAL CELLS: 3
Access 0 cell 0 offset 0 size 4 (cell size 12)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 12)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 12)
Access 5 cell 0 offset 8 size 1 (cell size 12)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 12)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 12)
Access 10 cell 2 offset 0 size 4 (cell size 6)
Access 11 cell 0 offset 4 size 8 (cell size 12)
Access 12 cell 0 offset 4 size 1 (cell size 12)
Access 13 cell 2 offset 4 size 1 (cell size 6)
Access 14 cell 0 offset 5 size 1 (cell size 12)
Access 15 cell 2 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 12 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 12 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 12 / offset 8
72 -> 0 (size 1 / cell size 12 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 12 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 12 / offset 0
48 -> 2 (size 4 / cell size 6 / offset 0
51 -> 0 (size 8 / cell size 12 / offset 4
80 -> 0 (size 1 / cell size 12 / offset 4
82 -> 2 (size 1 / cell size 6 / offset 4
93 -> 0 (size 1 / cell size 12 / offset 5
95 -> 2 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and TRUE (== <TMP_BV_96_896|96> <TMP_BV_96_898|96>)) (== <TMP_BV_80_897|80> <TMP_BV_80_900|80>)) (== <TMP_BV_48_901|48> <TMP_BV_48_899|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_96_898|96>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_96_898|96>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_898|96>[39:32])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x5|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_2_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_96_898|96>[47:40])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_96_896|96>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_96_896|96>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_96_896|96>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and TRUE (== <TMP_BV_96_896|96> <TMP_BV_96_898|96>)) (== <TMP_BV_80_897|80> <TMP_BV_80_900|80>)) (== <TMP_BV_48_901|48> <TMP_BV_48_899|48>))
(and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb5|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0xc|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_2_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 4 5 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 16
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 1 1 0 
5  |             0 0 0 0 0 0 0 1 1 0 
6  |               0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 0 
13 |                             1 0 
14 |                               0 
15 |                                 

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 1 1 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 
6  |               0 1 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 
9  |                     0 1 0 0 0 0 
10 |                       0 0 0 0 0 
11 |                         0 0 0 0 
12 |                           0 0 1 
13 |                             0 0 
14 |                               0 
15 |                                 

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 16)
Access 5 cell 0 offset 8 size 1 (cell size 16)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 16)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 16)
Access 10 cell 2 offset 0 size 4 (cell size 4)
Access 11 cell 0 offset 4 size 8 (cell size 16)
Access 12 cell 3 offset 0 size 4 (cell size 5)
Access 13 cell 0 offset 8 size 8 (cell size 16)
Access 14 cell 0 offset 8 size 1 (cell size 16)
Access 15 cell 3 offset 4 size 1 (cell size 5)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 16 / offset 8
72 -> 0 (size 1 / cell size 16 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 16 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 5 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 5 / offset 4
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_914|128> <TMP_BV_128_916|128>)) (== <TMP_BV_80_915|80> <TMP_BV_80_919|80>)) (== <TMP_BV_32_920|32> <TMP_BV_32_917|32>)) (== <TMP_BV_40_921|40> <TMP_BV_40_918|40>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_916|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_916|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_916|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_916|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_916|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_914|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_914|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_914|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_914|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_914|128>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_914|128>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_914|128>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_914|128>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_914|128>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_914|128>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_914|128> <TMP_BV_128_916|128>)) (== <TMP_BV_80_915|80> <TMP_BV_80_919|80>)) (== <TMP_BV_32_920|32> <TMP_BV_32_917|32>)) (== <TMP_BV_40_921|40> <TMP_BV_40_918|40>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x5|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbc|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 4 4 5 6 6 7 Q: 1 2 3 4 4 5 6 6 7
TARGET: 
.strcpy:
movl %esi, %esi
movl %edi, %eax
movl %esi, %edi
movq %rsi, %rdx
movq %rax, %rcx
orl %eax, %edi
andl $0x3, %edi
nop 
movl %esi, %esi
movl (%r15,%rsi,1), %r8d
movl %r8d, %esi
leal -0x1010101(%r8), %edi
notl %esi
andl %edi, %esi
andl $0x80808080, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
.L_126820:
addl $0x4, %edx
movl %ecx, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
movl %edx, %edx
movl (%r15,%rdx,1), %r8d
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
notl %r9d
nop 
andl %esi, %r9d
andl $0x80808080, %r9d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
.L_126860:
movl %edx, %edx
movzbl (%r15,%rdx,1), %esi
addl $0x1, %edx
movl %ecx, %ecx
movb %sil, (%r15,%rcx,1)
addl $0x1, %ecx
testb %sil, %sil
nop 
nop 
nop 
nop 
nop 
nop 
retq 
REWRITE: 
.strcpy:
nop 
nop 
nop 
nop 
nop 
nop 
movl %esi, %edx
nop 
movl %edi, %ecx
andl $0x3, %esi
movl %edi, %eax
nop 
nop 
nop 
nop 
movl %edx, %esi
movl (%r15,%rsi,1), %r8d
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
.L_126820:
xorl %esp, %ecx
movl %r8d, (%r15,%rcx,1)
addl $0x4, %ecx
addl $0x4, %edx
movq (%r15,%rdx,1), %r8
movl %r8d, %r9d
leal -0x1010101(%r8), %esi
andl $0x80808080, %esi
notl %r9d
andq %rsi, %r9
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
.L_126860:
nop 
nop 
nop 
nop 
nop 
nop 
addl $0x1, %edx
movsbq -0x1(%r15,%rdx,1), %rsi
addl $0x1, %ecx
movb %sil, -0x1(%r15,%rcx,1)
shll $0x3, %esi
nop 
leaq -0x8(,%rcx,8), %r13
retq 
Total accesses: 18
SAME MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
1  |     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
3  |         0 0 0 0 0 0 0 0 0 0 0 0 0 0 
4  |           1 0 0 0 0 0 0 0 1 1 0 0 0 
5  |             0 0 0 0 0 0 0 1 1 0 0 0 
6  |               0 0 0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 1 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 0 0 0 0 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 0 0 0 
13 |                             1 0 0 0 
14 |                               0 0 0 
15 |                                 0 0 
16 |                                   0 
17 |                                     

NEXT MAP
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
------------------
0  |   0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1  |     0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2  |       0 1 1 0 0 0 0 0 0 0 1 1 0 0 0 
3  |         0 0 1 0 0 0 0 0 0 0 0 0 0 0 
4  |           0 0 0 0 0 0 0 0 0 0 0 0 0 
5  |             0 1 0 0 0 0 0 0 0 0 1 0 
6  |               0 1 0 0 0 0 0 0 0 0 0 
7  |                 0 0 0 0 0 0 0 0 0 0 
8  |                   0 0 0 0 0 0 0 0 0 
9  |                     0 1 0 0 0 0 0 0 
10 |                       0 0 0 0 0 0 0 
11 |                         0 0 0 0 0 0 
12 |                           0 0 1 0 0 
13 |                             0 0 0 0 
14 |                               0 1 0 
15 |                                 0 1 
16 |                                   0 
17 |                                     

TOTAL CELLS: 4
Access 0 cell 0 offset 0 size 4 (cell size 16)
Access 1 cell 1 offset 0 size 4 (cell size 10)
Access 2 cell 0 offset 4 size 4 (cell size 16)
Access 3 cell 1 offset 4 size 4 (cell size 10)
Access 4 cell 0 offset 8 size 4 (cell size 16)
Access 5 cell 0 offset 8 size 1 (cell size 16)
Access 6 cell 1 offset 8 size 1 (cell size 10)
Access 7 cell 0 offset 9 size 1 (cell size 16)
Access 8 cell 1 offset 9 size 1 (cell size 10)
Access 9 cell 0 offset 0 size 4 (cell size 16)
Access 10 cell 2 offset 0 size 4 (cell size 4)
Access 11 cell 0 offset 4 size 8 (cell size 16)
Access 12 cell 3 offset 0 size 4 (cell size 6)
Access 13 cell 0 offset 8 size 8 (cell size 16)
Access 14 cell 0 offset 8 size 1 (cell size 16)
Access 15 cell 3 offset 4 size 1 (cell size 6)
Access 16 cell 0 offset 9 size 1 (cell size 16)
Access 17 cell 3 offset 5 size 1 (cell size 6)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
10 -> 0 (size 4 / cell size 16 / offset 0
29 -> 1 (size 4 / cell size 10 / offset 0
32 -> 0 (size 4 / cell size 16 / offset 4
43 -> 1 (size 4 / cell size 10 / offset 4
46 -> 0 (size 4 / cell size 16 / offset 8
72 -> 0 (size 1 / cell size 16 / offset 8
75 -> 1 (size 1 / cell size 10 / offset 8
81 -> 0 (size 1 / cell size 16 / offset 9
84 -> 1 (size 1 / cell size 10 / offset 9
REWRITE MAP:
17 -> 0 (size 4 / cell size 16 / offset 0
48 -> 2 (size 4 / cell size 4 / offset 0
51 -> 0 (size 8 / cell size 16 / offset 4
60 -> 3 (size 4 / cell size 6 / offset 0
63 -> 0 (size 8 / cell size 16 / offset 8
92 -> 0 (size 1 / cell size 16 / offset 8
94 -> 3 (size 1 / cell size 6 / offset 4
105 -> 0 (size 1 / cell size 16 / offset 9
107 -> 3 (size 1 / cell size 6 / offset 5
Start memory constraint: (and (and (and (and TRUE (== <TMP_BV_128_936|128> <TMP_BV_128_938|128>)) (== <TMP_BV_80_937|80> <TMP_BV_80_941|80>)) (== <TMP_BV_32_942|32> <TMP_BV_32_939|32>)) (== <TMP_BV_48_943|48> <TMP_BV_48_940|48>))

CONSTRAINTS

(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and <%rsi_2_INIT|64>[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_2_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_938|128>[95:32][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_938|128>[95:32])[31:0])[31:0] <0x80808080|32>))) <0x0|64>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))) (plus <CELL_3_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> !(concat <0x0|32> <TMP_BV_128_938|128>[127:64][31:0])[31:0]) (concat <0x0|32> (and (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) <TMP_BV_128_938|128>[127:64])[31:0])[31:0] <0x80808080|32>))) <0x0|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x4|64>))
(not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_938|128>[71:64])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0] <0x0|32>))))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> <%rsi_2_INIT|64>[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0xffffffff|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0])) (plus <CELL_3_ADDR|64> <0x5|64>))
(not (not (or (and (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>)) (== (<< (concat <0x0|1> (sign-extend-64 <TMP_BV_128_938|128>[79:72])[31:0]) (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>)))[31:0] <0x0|32>)) (and (not (not (== (concat <0x0|25> (and <0x3|8>[7:0] <0x1f|8>))[7:0] <0x0|8>))) (== (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> (concat <0x0|32> (xor (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0] <%rsp_2_INIT|64>[31:0]))[31:0]))[31:0])[31:0]))[31:0])[31:0]))[31:0] <0x0|32>)))))
(not (not (== (and (concat <0x0|32> (or (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0] (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0] (sign-extend-32 <0x3|8>)) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_936|128>[31:0])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_936|128>[31:0]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x4|64>))
(== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_936|128>[63:32])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_936|128>[63:32]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>)
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x4|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (and (concat <0x0|32> !(concat <0x0|32> (concat <0x0|32> <TMP_BV_128_936|128>[95:64])[31:0])[31:0])[31:0] (concat <0x0|32> (plus (sign-extend-64 <0xfefefeff|32>) (concat <0x0|32> <TMP_BV_128_936|128>[95:64]))[31:0])[31:0]))[31:0] <0x80808080|32>) <0x0|32>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x8|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x8|64>))
(not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_936|128>[71:64]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_936|128>[71:64]))[7:0]) <0x0|8>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x9|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x1|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])[31:0]))[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x9|64>))
(not (not (== (and (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_936|128>[79:72]))[7:0] (concat <0x0|32> (concat <0x0|24> <TMP_BV_128_936|128>[79:72]))[7:0]) <0x0|8>)))
(== <%rsp_1_INIT|64> <%rsp_|64>)
(== <%rbp_1_INIT|64> <%rbp_|64>)
(== <%rsi_1_INIT|64> <%rsi_|64>)
(== <%rdi_1_INIT|64> <%rdi_|64>)
(== <%r15_1_INIT|64> <%r15_|64>)
(== <sigbus_1_INIT> <sigbus_>)
(== <sigfpe_1_INIT> <sigfpe_>)
(== <sigsegv_1_INIT> <sigsegv_>)
(== <%rsp_2_INIT|64> <%rsp_|64>)
(== <%rbp_2_INIT|64> <%rbp_|64>)
(== <%rsi_2_INIT|64> <%rsi_|64>)
(== <%rdi_2_INIT|64> <%rdi_|64>)
(== <%r15_2_INIT|64> <%r15_|64>)
(== <sigbus_2_INIT> <sigbus_>)
(== <sigfpe_2_INIT> <sigfpe_>)
(== <sigsegv_2_INIT> <sigsegv_>)
(and (and (and (and TRUE (== <TMP_BV_128_936|128> <TMP_BV_128_938|128>)) (== <TMP_BV_80_937|80> <TMP_BV_80_941|80>)) (== <TMP_BV_32_942|32> <TMP_BV_32_939|32>)) (== <TMP_BV_48_943|48> <TMP_BV_48_940|48>))
(and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffb1|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (or (<= (plus <CELL_0_ADDR|64> <0x10|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffb7|64>)) (>= <CELL_1_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_2_ADDR|64>) (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>))) (or (<= (plus <CELL_1_ADDR|64> <0xa|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_1_ADDR|64>))) (<= <CELL_2_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_2_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_2_ADDR|64> <0x4|64>) <CELL_3_ADDR|64>) (<= (plus <CELL_3_ADDR|64> <0x6|64>) <CELL_2_ADDR|64>))) (<= <CELL_3_ADDR|64> <0xffffffffffffffbb|64>)) (>= <CELL_3_ADDR|64> <0x40|64>))
INEQUALITY: (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))
INEQUALITY: (== <sigbus_1_INIT> <sigbus_2_INIT>)
INEQUALITY: (== <sigfpe_1_INIT> <sigfpe_2_INIT>)
INEQUALITY: (== (or (or (or (or (or (or (or (or (or (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or (or (or (or (or (or (or (or (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)))
  (This case verified)
################################################################################

Final update:

Total search iterations:       500000
Number of attempted searches:  1
Total search time:             614.698s
Total time:                    674.783s

Statistics of last search

Iterations:                    500000
Elapsed Time:                  614.695s
Iterations/s:                  813.412

Starting cost:                 280
Lowest cost:                   212
Lowest correct cost:           233

Move Type       Proposed     Succeeded     Accepted     
                                                        
OpcodeWidth     8.367%       6.7294%       6.069%       
Delete          8.3108%      7.2198%       3.6554%      
Opcode          8.3798%      7.392%        6.3598%      
Operand         8.32%        4.8946%       0.7072%      
Local Swap      8.2468%      5.5754%       4.1814%      
Instruction     8.3334%      3.4948%       0.127%       
Add Nops        8.2772%      8.2772%       3.5324%      
ReplaceNop      8.3824%      7.2926%       5.8778%      
Rotate          8.2838%      6.4174%       2.9308%      
Global Swap     8.3622%      5.9106%       4.0784%      
Global Copy     8.4126%      7.1794%       7.1794%      
2xWeighted      0%           0%            0%           
Memory+Swap     8.324%       4.422%        0.0042%      
                                                        
Total           100%         74.8052%      44.7028%     

Lowest Cost Discovered (212)                                                     
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                  
  movl %edi, %eax                 #  3     0x2   2      OPC=movl_r32_r32_1       
  nop                             #  4     0x4   1      OPC=nop                  
  nop                             #  5     0x5   1      OPC=nop                  
  nop                             #  6     0x6   1      OPC=nop                  
  nop                             #  7     0x7   1      OPC=nop                  
  movl %esi, %edx                 #  8     0x8   2      OPC=movl_r32_r32_1       
  andl $0x3, %esi                 #  9     0xa   6      OPC=andl_r32_imm32       
  nop                             #  10    0x10  1      OPC=nop                  
  movq %rdi, %rcx                 #  11    0x11  3      OPC=movq_r64_r64         
  nop                             #  12    0x14  1      OPC=nop                  
  nop                             #  13    0x15  1      OPC=nop                  
  nop                             #  14    0x16  1      OPC=nop                  
  nop                             #  15    0x17  1      OPC=nop                  
  jne .L_126860                   #  16    0x18  6      OPC=jne_label_1          
  nop                             #  17    0x1e  1      OPC=nop                  
  nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x25  1      OPC=nop                  
  nop                             #  25    0x26  1      OPC=nop                  
  nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x28  1      OPC=nop                  
  movl %edx, %esi                 #  28    0x29  2      OPC=movl_r32_r32_1       
  movl (%r15,%rsi,1), %r8d        #  29    0x2b  4      OPC=movl_r32_m32         
  jne .L_126860                   #  30    0x2f  6      OPC=jne_label_1          
  nop                             #  31    0x35  1      OPC=nop                  
  nop                             #  32    0x36  1      OPC=nop                  
  nop                             #  33    0x37  1      OPC=nop                  
  nop                             #  34    0x38  1      OPC=nop                  
  nop                             #  35    0x39  1      OPC=nop                  
  nop                             #  36    0x3a  1      OPC=nop                  
  nop                             #  37    0x3b  1      OPC=nop                  
  nop                             #  38    0x3c  1      OPC=nop                  
  nop                             #  39    0x3d  1      OPC=nop                  
  nop                             #  40    0x3e  1      OPC=nop                  
  nop                             #  41    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              
  addl $0x4, %ecx                 #  42    0x40  3      OPC=addl_r32_imm8        
  movl %r8d, -0x4(%r15,%rcx,1)    #  43    0x43  5      OPC=movl_m32_r32         
  addl $0x4, %edx                 #  44    0x48  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8         #  45    0x4e  4      OPC=movq_r64_m64         
  leal -0x1010101(%r8), %esi      #  46    0x52  7      OPC=leal_r32_m32         
  movq %r8, %r9                   #  47    0x59  3      OPC=movq_r64_r64         
  notl %r9d                       #  48    0x5c  3      OPC=notl_r32             
  andl $0x80808080, %esi          #  49    0x5f  6      OPC=andl_r32_imm32       
  andq %rsi, %r9                  #  50    0x65  3      OPC=andq_r64_r64_1       
  je .L_126820                    #  51    0x68  6      OPC=je_label_1           
  nop                             #  52    0x6e  1      OPC=nop                  
  nop                             #  53    0x6f  1      OPC=nop                  
  nop                             #  54    0x70  1      OPC=nop                  
  nop                             #  55    0x71  1      OPC=nop                  
  nop                             #  56    0x72  1      OPC=nop                  
  nop                             #  57    0x73  1      OPC=nop                  
  nop                             #  58    0x74  1      OPC=nop                  
  nop                             #  59    0x75  1      OPC=nop                  
  nop                             #  60    0x76  1      OPC=nop                  
  nop                             #  61    0x77  1      OPC=nop                  
  nop                             #  62    0x78  1      OPC=nop                  
  nop                             #  63    0x79  1      OPC=nop                  
  nop                             #  64    0x7a  1      OPC=nop                  
  nop                             #  65    0x7b  1      OPC=nop                  
  nop                             #  66    0x7c  1      OPC=nop                  
  nop                             #  67    0x7d  1      OPC=nop                  
  nop                             #  68    0x7e  1      OPC=nop                  
.L_126860:                        #        0x7f  0      OPC=<label>              
  incl %edx                       #  69    0x7f  2      OPC=incl_r32             
  movsbl -0x1(%r15,%rdx,1), %esi  #  70    0x81  6      OPC=movsbl_r32_m8        
  nop                             #  71    0x87  1      OPC=nop                  
  addl $0x1, %ecx                 #  72    0x88  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  73    0x8b  5      OPC=movb_m8_r8           
  shlq $0x1, %rsi                 #  74    0x90  3      OPC=shlq_r64_one         
  jne .L_126860                   #  75    0x93  6      OPC=jne_label_1          
  nop                             #  76    0x99  1      OPC=nop                  
  nop                             #  77    0x9a  1      OPC=nop                  
  nop                             #  78    0x9b  1      OPC=nop                  
  nop                             #  79    0x9c  1      OPC=nop                  
  nop                             #  80    0x9d  1      OPC=nop                  
  nop                             #  81    0x9e  1      OPC=nop                  
  nop                             #  82    0x9f  1      OPC=nop                  
  nop                             #  83    0xa0  1      OPC=nop                  
  nop                             #  84    0xa1  1      OPC=nop                  
  nop                             #  85    0xa2  1      OPC=nop                  
  nop                             #  86    0xa3  1      OPC=nop                  
  nop                             #  87    0xa4  1      OPC=nop                  
  popq %r11                       #  88    0xa5  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  89    0xa7  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  90    0xab  3      OPC=addq_r64_r64         
  jmpq %r11                       #  91    0xae  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
Lowest Known Correct Cost (233)                                                  
                                                                                 
  .text                                                                          
  .globl strcpy                                                                  
  .type strcpy, @function                                                        
                                                                                 
#! file-offset 0                                                                 
#! rip-offset  0                                                                 
#! capacity    0 bytes                                                           
                                                                                 
# Text                            #  Line  RIP   Bytes  Opcode                   
.strcpy:                          #        0     0      OPC=<label>              
  nop                             #  1     0     1      OPC=nop                  
  nop                             #  2     0x1   1      OPC=nop                  
  nop                             #  3     0x2   1      OPC=nop                  
  nop                             #  4     0x3   1      OPC=nop                  
  nop                             #  5     0x4   1      OPC=nop                  
  nop                             #  6     0x5   1      OPC=nop                  
  movl %esi, %edx                 #  7     0x6   2      OPC=movl_r32_r32         
  nop                             #  8     0x8   1      OPC=nop                  
  movl %edi, %ecx                 #  9     0x9   2      OPC=movl_r32_r32         
  andl $0x3, %esi                 #  10    0xb   3      OPC=andl_r32_imm8        
  movl %edi, %eax                 #  11    0xe   2      OPC=movl_r32_r32         
  nop                             #  12    0x10  1      OPC=nop                  
  jne .L_126860                   #  13    0x11  6      OPC=jne_label_1          
  nop                             #  14    0x17  1      OPC=nop                  
  nop                             #  15    0x18  1      OPC=nop                  
  movl %edx, %esi                 #  16    0x19  2      OPC=movl_r32_r32_1       
  movl (%r15,%rsi,1), %r8d        #  17    0x1b  4      OPC=movl_r32_m32         
  nop                             #  18    0x1f  1      OPC=nop                  
  nop                             #  19    0x20  1      OPC=nop                  
  nop                             #  20    0x21  1      OPC=nop                  
  nop                             #  21    0x22  1      OPC=nop                  
  nop                             #  22    0x23  1      OPC=nop                  
  nop                             #  23    0x24  1      OPC=nop                  
  nop                             #  24    0x25  1      OPC=nop                  
  nop                             #  25    0x26  1      OPC=nop                  
  nop                             #  26    0x27  1      OPC=nop                  
  nop                             #  27    0x28  1      OPC=nop                  
  nop                             #  28    0x29  1      OPC=nop                  
  nop                             #  29    0x2a  1      OPC=nop                  
  nop                             #  30    0x2b  1      OPC=nop                  
  jne .L_126860                   #  31    0x2c  6      OPC=jne_label_1          
  nop                             #  32    0x32  1      OPC=nop                  
  nop                             #  33    0x33  1      OPC=nop                  
  nop                             #  34    0x34  1      OPC=nop                  
  nop                             #  35    0x35  1      OPC=nop                  
  nop                             #  36    0x36  1      OPC=nop                  
  nop                             #  37    0x37  1      OPC=nop                  
  nop                             #  38    0x38  1      OPC=nop                  
  nop                             #  39    0x39  1      OPC=nop                  
  nop                             #  40    0x3a  1      OPC=nop                  
  nop                             #  41    0x3b  1      OPC=nop                  
  nop                             #  42    0x3c  1      OPC=nop                  
  nop                             #  43    0x3d  1      OPC=nop                  
  nop                             #  44    0x3e  1      OPC=nop                  
  nop                             #  45    0x3f  1      OPC=nop                  
.L_126820:                        #        0x40  0      OPC=<label>              
  xorl %esp, %ecx                 #  46    0x40  2      OPC=xorl_r32_r32         
  movl %r8d, (%r15,%rcx,1)        #  47    0x42  4      OPC=movl_m32_r32         
  addl $0x4, %ecx                 #  48    0x46  6      OPC=addl_r32_imm32       
  addl $0x4, %edx                 #  49    0x4c  6      OPC=addl_r32_imm32       
  movq (%r15,%rdx,1), %r8         #  50    0x52  4      OPC=movq_r64_m64         
  movl %r8d, %r9d                 #  51    0x56  3      OPC=movl_r32_r32         
  leal -0x1010101(%r8), %esi      #  52    0x59  7      OPC=leal_r32_m16         
  andl $0x80808080, %esi          #  53    0x60  6      OPC=andl_r32_imm32       
  notl %r9d                       #  54    0x66  3      OPC=notl_r32             
  andq %rsi, %r9                  #  55    0x69  3      OPC=andq_r64_r64         
  je .L_126820                    #  56    0x6c  6      OPC=je_label_1           
  nop                             #  57    0x72  1      OPC=nop                  
  nop                             #  58    0x73  1      OPC=nop                  
  nop                             #  59    0x74  1      OPC=nop                  
  nop                             #  60    0x75  1      OPC=nop                  
  nop                             #  61    0x76  1      OPC=nop                  
  nop                             #  62    0x77  1      OPC=nop                  
  nop                             #  63    0x78  1      OPC=nop                  
  nop                             #  64    0x79  1      OPC=nop                  
  nop                             #  65    0x7a  1      OPC=nop                  
  nop                             #  66    0x7b  1      OPC=nop                  
  nop                             #  67    0x7c  1      OPC=nop                  
  nop                             #  68    0x7d  1      OPC=nop                  
  nop                             #  69    0x7e  1      OPC=nop                  
  nop                             #  70    0x7f  1      OPC=nop                  
.L_126860:                        #        0x80  0      OPC=<label>              
  nop                             #  71    0x80  1      OPC=nop                  
  nop                             #  72    0x81  1      OPC=nop                  
  nop                             #  73    0x82  1      OPC=nop                  
  nop                             #  74    0x83  1      OPC=nop                  
  nop                             #  75    0x84  1      OPC=nop                  
  nop                             #  76    0x85  1      OPC=nop                  
  addl $0x1, %edx                 #  77    0x86  3      OPC=addl_r32_imm8        
  movsbq -0x1(%r15,%rdx,1), %rsi  #  78    0x89  6      OPC=movsbq_r64_m8        
  addl $0x1, %ecx                 #  79    0x8f  3      OPC=addl_r32_imm8        
  movb %sil, -0x1(%r15,%rcx,1)    #  80    0x92  5      OPC=movb_m8_r8           
  shll $0x3, %esi                 #  81    0x97  3      OPC=shll_r32_imm8        
  jne .L_126860                   #  82    0x9a  6      OPC=jne_label_1          
  nopl %eax                       #  83    0xa0  3      OPC=nopl_r32             
  nopl %eax                       #  84    0xa3  3      OPC=nopl_r32             
  nop                             #  85    0xa6  1      OPC=nop                  
  nop                             #  86    0xa7  1      OPC=nop                  
  popq %r11                       #  87    0xa8  2      OPC=popq_r64_1           
  andl $0xe0, %r11d               #  88    0xaa  4      OPC=andl_r32_imm8        
  addq %r15, %r11                 #  89    0xae  3      OPC=addq_r64_r64         
  jmpq %r11                       #  90    0xb1  3      OPC=jmpq_r64             
                                                                                 
.size strcpy, .-strcpy                                                           
                                                                                 

################################################################################

Search terminated successfully with a verified rewrite!

time stoke debug verify --target target.s --rewrite optimize.s --testcases testcases --strategy ddec --def_in "{ %r15 %rdi %rsi }" --live_out "{ %rax }"
10000
Target                     Rewrite                        
                                                          
.wcpcpy:                   .wcpcpy:                       
movl %edi, %edi            nop                            
movl %esi, %esi            nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
.L_140ae0:                 nop                            
movl %esi, %esi            nop                            
movl (%r15,%rsi,1), %edx   .L_140ae0:                     
movq %rdi, %rax            addl $0x4, %esi                
addl $0x4, %esi            movl -0x4(%r15,%rsi,1), %edx   
movl %edi, %edi            movl %edi, %eax                
movl %edx, (%r15,%rdi,1)   addl $0x4, %edi                
addl $0x4, %edi            movl %edx, -0x4(%r15,%rdi,1)   
testl %edx, %edx           testl %edx, %edx               
jne .L_140ae0              jne .L_140ae0                  
retq                       nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
nop                        nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           nop                            
                           retq                           
                                                          
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 90
Cutpoints worked? 1
Target cutpoint 0 has 90 states.
Target cutpoint 1 has 90 states.
Target cutpoint 2 has 3941 states.
Target cutpoint 3 has 80 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 90 states.
Rewrite cutpoint 1 has 90 states.
Rewrite cutpoint 2 has 3941 states.
Rewrite cutpoint 3 has 80 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%esi + %rsi = 0
-1*%r15d + %r15 = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%edi + %rdi = 0
Nullspace dimension:9
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%r15d + %r15 = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%edi + %rdi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%esi + %rsi = 0
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== <%r15_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== <%r15_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     ff ff ff ff 80 04 00 00
%rdi     ff ff ff ff 98 00 80 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 01 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     ff ff ff ff 80 04 00 00
%rdi     ff ff ff ff 98 00 80 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 01 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 80 04 00 00
%rdi     00 00 00 00 98 00 80 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 01 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     ff ff ff ff 80 04 00 00
%rdi     ff ff ff ff 98 00 80 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 01 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 91
Cutpoints worked? 1
Target cutpoint 0 has 91 states.
Target cutpoint 1 has 91 states.
Target cutpoint 2 has 3941 states.
Target cutpoint 3 has 80 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 91 states.
Rewrite cutpoint 1 has 91 states.
Rewrite cutpoint 2 has 3941 states.
Rewrite cutpoint 3 has 80 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%edi + %rdi = 0
65536*%rsi + -65536*%rsi' + %r15d + -1*%r15 = 0
-1*%esi' + %rsi = 0
65536*%rdi + -65536*%rdi' + %r15d + -1*%r15 = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%esi + %rsi = 0
Nullspace dimension:8
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%edi + %rdi = 0 ^ 65536*%rsi + -65536*%rsi' + %r15d + -1*%r15 = 0 ^ -1*%esi' + %rsi = 0 ^ 65536*%rdi + -65536*%rdi' + %r15d + -1*%r15 = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%esi + %rsi = 0
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus (plus (plus <0x0|64> (mult <0x10000|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffff0000|64> <%rsi_2_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus (plus (plus <0x0|64> (mult <0x10000|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffff0000|64> <%rdi_2_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 00 00 00 00
%rdi     00 00 00 00 00 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     c0 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 00 00 00 00
%rdi     00 00 00 00 00 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     c0 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 00 00 00 00
%rdi     00 00 00 00 00 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     c0 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 00 00 00 00
%rdi     00 00 00 00 00 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     c0 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 92
Cutpoints worked? 1
Target cutpoint 0 has 92 states.
Target cutpoint 1 has 92 states.
Target cutpoint 2 has 3941 states.
Target cutpoint 3 has 80 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 92 states.
Rewrite cutpoint 1 has 92 states.
Rewrite cutpoint 2 has 3941 states.
Rewrite cutpoint 3 has 80 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%esi + %rsi = 0
-1*%esi' + %rsi = 0
-1*%rsi + %rsi' + %rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%edi + %rdi = 0
Nullspace dimension:7
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%esi' + %rsi = 0 ^ -1*%rsi + %rsi' + %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%edi + %rdi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%esi + %rsi = 0
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0x1|64> <%rsi_2_INIT|64>)) (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     d1 48 f5 fb e0 00 00 00
%rdi     7d 48 f5 fb a0 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     d1 48 f5 fb e0 00 00 00
%rdi     7d 48 f5 fb a0 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 e0 00 00 00
%rdi     00 00 00 00 a0 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     d1 48 f5 fb e0 00 00 00
%rdi     7d 48 f5 fb a0 00 00 00
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 93
Cutpoints worked? 1
Target cutpoint 0 has 93 states.
Target cutpoint 1 has 93 states.
Target cutpoint 2 has 3941 states.
Target cutpoint 3 has 80 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 93 states.
Rewrite cutpoint 1 has 93 states.
Rewrite cutpoint 2 has 3941 states.
Rewrite cutpoint 3 has 80 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%esi' + %rsi = 0
-1*%edi + %rdi = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%esi + %rsi = 0
Nullspace dimension:6
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%esi + %rsi = 0
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (This case verified)
===========================================
Working on pair / P: 1 2 Q: 1 2
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_2|32> <TMP_BV_32_4|32>)) (== <TMP_BV_32_3|32> <TMP_BV_32_5|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(and (and TRUE (== <TMP_BV_32_2|32> <TMP_BV_32_4|32>)) (== <TMP_BV_32_3|32> <TMP_BV_32_5|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_2|32> <TMP_BV_32_4|32>)) (== (concat <0x0|32> <TMP_BV_32_2|32>)[31:0] (concat <0x0|32> <TMP_BV_32_4|32>)[31:0])))
Proof inequality: (not (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_2|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_4|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_2|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_2|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_2|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_4|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_2|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_4|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_2|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_4|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_2|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_2|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_4|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_4|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) FALSE) FALSE))))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 29 fd ff fc
%rdi     00 00 00 00 80 00 00 39
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     80 02 04 84 ff ff ff e5

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 80020485 80000028 - 80020485 80000000 ]
[ 2 valid rows shown ]

80020485 80000020   . . . . . . v v   00 00 00 00 00 00 00 00 
80020485 80000018   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 80020485 29fdffe8 - 80020485 29fdffe0 ]
[ 1 valid rows shown ]

80020485 29fdffe0   . . . v v v v .   00 00 00 00 00 00 82 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 29 fd ff fc
%rdi     00 00 00 00 80 00 00 39
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     80 02 04 84 ff ff ff e5

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 80020485 80000028 - 80020485 80000000 ]
[ 2 valid rows shown ]

80020485 80000020   . . . . . . v v   00 00 00 00 00 00 00 00 
80020485 80000018   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 80020485 29fdffe8 - 80020485 29fdffe0 ]
[ 1 valid rows shown ]

80020485 29fdffe0   . . . v v v v .   00 00 00 00 00 00 82 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 80 00 00 39
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 82
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 29 fe 00 00
%rdi     00 00 00 00 80 00 00 3d
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     80 02 04 84 ff ff ff e5

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      1 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 80020485 80000028 - 80020485 80000000 ]
[ 2 valid rows shown ]

80020485 80000020   . . . . . . v v   00 00 00 00 00 00 00 00 
80020485 80000018   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 80020485 29fdffe8 - 80020485 29fdffe0 ]
[ 1 valid rows shown ]

80020485 29fdffe0   . . . v v v v .   00 00 00 00 00 00 82 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 80 00 00 39
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 82
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 29 fe 00 00
%rdi     00 00 00 00 80 00 00 3d
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     80 02 04 84 ff ff ff e5

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      1 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 80020485 80000028 - 80020485 80000000 ]
[ 2 valid rows shown ]

80020485 80000020   . . . . . . v v   00 00 00 00 00 00 00 00 
80020485 80000018   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 80020485 29fdffe8 - 80020485 29fdffe0 ]
[ 1 valid rows shown ]

80020485 29fdffe0   . . . v v v v .   00 00 00 00 00 00 82 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 94
Cutpoints worked? 1
Target cutpoint 0 has 94 states.
Target cutpoint 1 has 94 states.
Target cutpoint 2 has 3942 states.
Target cutpoint 3 has 80 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 94 states.
Rewrite cutpoint 1 has 94 states.
Rewrite cutpoint 2 has 3942 states.
Rewrite cutpoint 3 has 80 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%esi' + %rsi = 0
-1*%edi + %rdi = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%esi + %rsi = 0
Nullspace dimension:6
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%rax + %rdi = 4
Nullspace dimension:15
Column count: 21
sizeof(long): 8
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%r15d + %r15 = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
-1*%r15d' + %r15 = 0
-1*%rax + %rdi = 4
Nullspace dimension:17
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %r15[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ %r15'[63][32] == 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%r15d + %r15 = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ -1*%r15d' + %r15 = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (This case verified)
===========================================
Working on pair / P: 1 2 Q: 1 2
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_8|32> <TMP_BV_32_10|32>)) (== <TMP_BV_32_9|32> <TMP_BV_32_11|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(and (and TRUE (== <TMP_BV_32_8|32> <TMP_BV_32_10|32>)) (== <TMP_BV_32_9|32> <TMP_BV_32_11|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_8|32> <TMP_BV_32_10|32>)) (== (concat <0x0|32> <TMP_BV_32_8|32>)[31:0] (concat <0x0|32> <TMP_BV_32_10|32>)[31:0])))
Proof inequality: (not (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_8|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_10|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_8|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_8|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_8|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_10|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_8|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_10|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_8|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_10|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_8|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_8|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_10|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_10|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) FALSE) FALSE))))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 Q: 1 2 3
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_14|32> <TMP_BV_32_16|32>)) (== <TMP_BV_32_15|32> <TMP_BV_32_17|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_16|32>)[31:0] (concat <0x0|32> <TMP_BV_32_16|32>)[31:0]) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_14|32>)[31:0] (concat <0x0|32> <TMP_BV_32_14|32>)[31:0]) <0x0|32>)))
(and (and TRUE (== <TMP_BV_32_14|32> <TMP_BV_32_16|32>)) (== <TMP_BV_32_15|32> <TMP_BV_32_17|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_14|32> <TMP_BV_32_16|32>)) (== (concat <0x0|32> <TMP_BV_32_14|32>)[31:0] (concat <0x0|32> <TMP_BV_32_16|32>)[31:0])))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_14|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_16|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== <%r15_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_14|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_14|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_16|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_16|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>)))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 df ff df fe
%rdi     00 00 00 00 e0 00 00 1c
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     1e fa 00 01 1f ff c0 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 1efa0001 ffffc020 - 1efa0001 ffffc000 ]
[ 1 valid rows shown ]

1efa0001 ffffc018   v v v v . . . .   00 00 00 00 00 00 00 00 

[ 1efa0001 ffffa008 - 1efa0001 ffff9fe0 ]
[ 2 valid rows shown ]

1efa0001 ffffa000   . . . . . . v v   00 00 00 00 00 00 00 00 
1efa0001 ffff9ff8   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 df ff df fe
%rdi     00 00 00 00 e0 00 00 1c
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     1e fa 00 01 1f ff c0 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 1efa0001 ffffc020 - 1efa0001 ffffc000 ]
[ 1 valid rows shown ]

1efa0001 ffffc018   v v v v . . . .   00 00 00 00 00 00 00 00 

[ 1efa0001 ffffa008 - 1efa0001 ffff9fe0 ]
[ 2 valid rows shown ]

1efa0001 ffffa000   . . . . . . v v   00 00 00 00 00 00 00 00 
1efa0001 ffff9ff8   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 e0 00 00 1c
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 df ff e0 02
%rdi     00 00 00 00 e0 00 00 20
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     1e fa 00 01 1f ff c0 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      1 
%0       0 
%af      0 
%0       0 
%zf      1 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 1efa0001 ffffc020 - 1efa0001 ffffc000 ]
[ 1 valid rows shown ]

1efa0001 ffffc018   v v v v . . . .   00 00 00 00 00 00 00 00 

[ 1efa0001 ffffa008 - 1efa0001 ffff9fe0 ]
[ 2 valid rows shown ]

1efa0001 ffffa000   . . . . . . v v   00 00 00 00 00 00 00 00 
1efa0001 ffff9ff8   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 e0 00 00 1c
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 00 00 00 00
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 df ff e0 02
%rdi     00 00 00 00 e0 00 00 20
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     1e fa 00 01 1f ff c0 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      1 
%0       0 
%af      0 
%0       0 
%zf      1 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 1efa0001 ffffc020 - 1efa0001 ffffc000 ]
[ 1 valid rows shown ]

1efa0001 ffffc018   v v v v . . . .   00 00 00 00 00 00 00 00 

[ 1efa0001 ffffa008 - 1efa0001 ffff9fe0 ]
[ 2 valid rows shown ]

1efa0001 ffffa000   . . . . . . v v   00 00 00 00 00 00 00 00 
1efa0001 ffff9ff8   v v . . . . . .   00 00 00 00 00 00 00 00 

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 5; has jump? 0
Cutpoint 0; has jump? 0
Cutpoint 1; has jump? 0
Cutpoint 2; has jump? 1
Cutpoint 3; has jump? 1
Cutpoint 4; has jump? 0
Sandbox size: 95
Cutpoints worked? 1
Target cutpoint 0 has 95 states.
Target cutpoint 1 has 95 states.
Target cutpoint 2 has 3943 states.
Target cutpoint 3 has 81 states.
Target cutpoint 4 has 0 states.
Rewrite cutpoint 0 has 95 states.
Rewrite cutpoint 1 has 95 states.
Rewrite cutpoint 2 has 3943 states.
Rewrite cutpoint 3 has 81 states.
Rewrite cutpoint 4 has 0 states.
TARGET OPC: nop
TARGET CC: op
REWRITE OPC: nop
REWRITE CC: op
-1*%esi' + %rsi = 0
-1*%edi + %rdi = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%esi + %rsi = 0
Nullspace dimension:6
Column count: 13
sizeof(long): 8
Learned invariant @ i=1
no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0
TARGET OPC: jne
TARGET CC: ne
REWRITE OPC: jne
REWRITE CC: ne
-1*%edx + %rdx = 0
-1*%edi + %rdi = 0
-1*%eax + %rax = 0
-1*%esi + %rsi = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
%rdx + -1*%rdx' = 0
-1*%edx' + %rdx = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%rax + %rdi = 4
Nullspace dimension:15
Column count: 21
sizeof(long): 8
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%eax + %rax = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
Learned invariant @ i=2
( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
TARGET OPC: retq
TARGET CC: etq
REWRITE OPC: retq
REWRITE CC: etq
-1*%esi + %rsi = 0
-1*%rdx = 0
-1*%edi + %rdi = 0
-1*%edx = 0
-1*%eax + %rax = 0
%rax + -1*%rax' = 0
-1*%eax' + %rax = 0
-1*%rdx' = 0
-1*%edx' = 0
%rsi + -1*%rsi' = 0
-1*%esi' + %rsi = 0
%rdi + -1*%rdi' = 0
-1*%edi' + %rdi = 0
%r15 + -1*%r15' = 0
%r15d + -1*%r15d' = 0
-1*%rax + %rdi = 4
Nullspace dimension:16
Column count: 21
sizeof(long): 8
Learned invariant @ i=3
no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4

CHECKING INVARIANTS WITH BOUNDED VALIDATOR

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (This case verified)
===========================================
Working on pair / P: 1 2 Q: 1 2
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_20|32> <TMP_BV_32_22|32>)) (== <TMP_BV_32_21|32> <TMP_BV_32_23|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(and (and TRUE (== <TMP_BV_32_20|32> <TMP_BV_32_22|32>)) (== <TMP_BV_32_21|32> <TMP_BV_32_23|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_20|32> <TMP_BV_32_22|32>)) (== (concat <0x0|32> <TMP_BV_32_20|32>)[31:0] (concat <0x0|32> <TMP_BV_32_22|32>)[31:0])))
Proof inequality: (not (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_20|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_22|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_20|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_20|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_20|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_22|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_20|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_22|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_20|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_22|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_20|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_20|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_22|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_22|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>))) FALSE) FALSE))))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 Q: 1 2 3
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_26|32> <TMP_BV_32_28|32>)) (== <TMP_BV_32_27|32> <TMP_BV_32_29|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_28|32>)[31:0] (concat <0x0|32> <TMP_BV_32_28|32>)[31:0]) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_26|32>)[31:0] (concat <0x0|32> <TMP_BV_32_26|32>)[31:0]) <0x0|32>)))
(and (and TRUE (== <TMP_BV_32_26|32> <TMP_BV_32_28|32>)) (== <TMP_BV_32_27|32> <TMP_BV_32_29|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_26|32> <TMP_BV_32_28|32>)) (== (concat <0x0|32> <TMP_BV_32_26|32>)[31:0] (concat <0x0|32> <TMP_BV_32_28|32>)[31:0])))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_26|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_28|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_26|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_26|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_28|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_28|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])[31:0]))[31:0]))) <0x4|64>)))
  (This case verified)
===========================================
Working on pair / P: 1 2 3 Q: 1 2 3
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 

TARGET: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
retq 
REWRITE: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
33 -> 0 (size 4 / cell size 4 / offset 0
37 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
35 -> 0 (size 4 / cell size 4 / offset 0
38 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_32|32> <TMP_BV_32_34|32>)) (== <TMP_BV_32_33|32> <TMP_BV_32_35|32>))
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_34|32>)[31:0] (concat <0x0|32> <TMP_BV_32_34|32>)[31:0]) <0x0|32>)))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(not (not (== (and (concat <0x0|32> <TMP_BV_32_32|32>)[31:0] (concat <0x0|32> <TMP_BV_32_32|32>)[31:0]) <0x0|32>)))
(and (and TRUE (== <TMP_BV_32_32|32> <TMP_BV_32_34|32>)) (== <TMP_BV_32_33|32> <TMP_BV_32_35|32>))
(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_32|32> <TMP_BV_32_34|32>)) (== (concat <0x0|32> <TMP_BV_32_32|32>)[31:0] (concat <0x0|32> <TMP_BV_32_34|32>)[31:0])))
Proof inequality: (not (and (and TRUE (and (and (and (and TRUE (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0]) (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE))))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))))
  (This case verified)
i=0, j=0 0 / 0
i=0, j=0 0 / 0
cutpoint blocks: 0  (and)  0
i=0, j=1 1 / 1
i=0, j=1 1 / 1
cutpoint blocks: 0  (and)  1
Checking (t/r agree on { %rsi %rdi %r15 %mxcsr::rc[0] }) ^ no signals { 1 ; 1 } no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0


WORKING ON no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0

===========================================
Working on pair / P: 1 Q: 1
TARGET UNROLL: 
.wcpcpy:
movl %edi, %edi
movl %esi, %esi
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

REWRITE UNROLL: 
.wcpcpy:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))

CONSTRAINTS

(and (and TRUE (and (and (and (and (and (and TRUE (== <%rsi_1_INIT|64> <%rsi_2_INIT|64>)) (== <%rdi_1_INIT|64> <%rdi_2_INIT|64>)) (== <%r15_1_INIT|64> <%r15_2_INIT|64>)) (== <sigbus_1_INIT> <sigbus_2_INIT>)) (== <sigfpe_1_INIT> <sigfpe_2_INIT>)) (== <sigsegv_1_INIT> <sigsegv_2_INIT>))) (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))) <0x0|64>)))
  (This case verified)
i=0, j=2 0 / 0
i=0, j=2 0 / 0
cutpoint blocks: 0  (and)  2
i=0, j=3 0 / 0
i=0, j=3 0 / 0
cutpoint blocks: 0  (and)  3
i=0, j=4 0 / 0
i=0, j=4 0 / 0
cutpoint blocks: 0  (and)  4
i=1, j=0 0 / 0
i=1, j=0 0 / 0
cutpoint blocks: 1  (and)  0
i=1, j=1 0 / 0
i=1, j=1 0 / 0
cutpoint blocks: 1  (and)  1
i=1, j=2 1 / 1
i=1, j=2 1 / 1
cutpoint blocks: 1  (and)  2
Checking no signals ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ -1*%esi' + %rsi = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%esi + %rsi = 0 { 2 ; 2 } ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )


WORKING ON ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )

===========================================
Working on pair / P: 2 Q: 2
TARGET UNROLL: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 

TARGET: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
2 -> 0 (size 4 / cell size 4 / offset 0
6 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
2 -> 0 (size 4 / cell size 4 / offset 0
5 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_38|32> <TMP_BV_32_40|32>)) (== <TMP_BV_32_39|32> <TMP_BV_32_41|32>))
Assuming (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rsi_1_INIT|64>[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rdi_1_INIT|64>[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(and (and TRUE (== <TMP_BV_32_38|32> <TMP_BV_32_40|32>)) (== <TMP_BV_32_39|32> <TMP_BV_32_41|32>))
(and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_38|32> <TMP_BV_32_40|32>)) (== (concat <0x0|32> <TMP_BV_32_38|32>)[31:0] (concat <0x0|32> <TMP_BV_32_40|32>)[31:0])))
Proof inequality: (not (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_38|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_40|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_38|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_38|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_38|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_40|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_38|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_40|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdi_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_38|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_40|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_38|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_38|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_40|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_40|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdi_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) <0x4|64>))) FALSE) FALSE))))
  (This case verified)
i=1, j=3 0 / 0
i=1, j=3 0 / 0
cutpoint blocks: 1  (and)  3
i=1, j=4 0 / 0
i=1, j=4 0 / 0
cutpoint blocks: 1  (and)  4
i=2, j=0 0 / 0
i=2, j=0 0 / 0
cutpoint blocks: 2  (and)  0
i=2, j=1 0 / 0
i=2, j=1 0 / 0
cutpoint blocks: 2  (and)  1
i=2, j=2 1 / 1
i=2, j=2 1 / 1
cutpoint blocks: 2  (and)  2
Checking ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) ) { 2 ; 2 } ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )


WORKING ON ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )

===========================================
Working on pair / P: 2 Q: 2
TARGET UNROLL: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 

TARGET: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.L_140ae0:
addl $0x4, %esi
movl -0x4(%r15,%rsi,1), %edx
movl %edi, %eax
addl $0x4, %edi
movl %edx, -0x4(%r15,%rdi,1)
testl %edx, %edx
nop 
Total accesses: 4
SAME MAP
     0 1 2 3 
------------------
0  |   0 1 0 
1  |     0 1 
2  |       0 
3  |         

NEXT MAP
     0 1 2 3 
------------------
0  |   0 0 0 
1  |     0 0 
2  |       0 
3  |         

TOTAL CELLS: 2
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 1 offset 0 size 4 (cell size 4)
Access 2 cell 0 offset 0 size 4 (cell size 4)
Access 3 cell 1 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
2 -> 0 (size 4 / cell size 4 / offset 0
6 -> 1 (size 4 / cell size 4 / offset 0
REWRITE MAP:
2 -> 0 (size 4 / cell size 4 / offset 0
5 -> 1 (size 4 / cell size 4 / offset 0
Start memory constraint: (and (and TRUE (== <TMP_BV_32_44|32> <TMP_BV_32_46|32>)) (== <TMP_BV_32_45|32> <TMP_BV_32_47|32>))
Assuming (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE)))

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0xfffffffc|32>) <%r15_2_INIT|64>) (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rsi_1_INIT|64>[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rdi_1_INIT|64>[31:0])) (plus <CELL_1_ADDR|64> <0x0|64>))
(and (and TRUE (== <TMP_BV_32_44|32> <TMP_BV_32_46|32>)) (== <TMP_BV_32_45|32> <TMP_BV_32_47|32>))
(and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE)))
(and (and (and (and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>)) (or (<= (plus <CELL_0_ADDR|64> <0x4|64>) <CELL_1_ADDR|64>) (<= (plus <CELL_1_ADDR|64> <0x4|64>) <CELL_0_ADDR|64>))) (<= <CELL_1_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_1_ADDR|64> <0x40|64>))
End memory constraint: (not (and (and TRUE (== <TMP_BV_32_44|32> <TMP_BV_32_46|32>)) (== (concat <0x0|32> <TMP_BV_32_44|32>)[31:0] (concat <0x0|32> <TMP_BV_32_46|32>)[31:0])))
Proof inequality: (not (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_44|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_46|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_44|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_44|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_44|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_46|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <TMP_BV_32_44|32>))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_46|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdi_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== (or (or <sigsegv_1_INIT> (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) (and (and (not <sigfpe_1_INIT>) (not <sigbus_1_INIT>)) FALSE)) FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== (or (or <sigsegv_2_INIT> (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) (and (and (not <sigfpe_2_INIT>) (not <sigbus_2_INIT>)) FALSE)) FALSE))) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_44|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> <TMP_BV_32_46|32>)[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_44|32>))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_44|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <%rdi_2_INIT|64>[31:0])[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <TMP_BV_32_46|32>))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> <TMP_BV_32_46|32>)[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rsi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rsi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> (concat <0x0|32> (plus (concat <0x0|1> <0x4|32>) (concat <0x0|1> <%rdi_2_INIT|64>[31:0]))[31:0])[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdi_1_INIT|64>)) (mult <0x1|64> (concat <0x0|32> (plus (concat <0x0|1> (sign-extend-32 <0x4|8>)) (concat <0x0|1> (concat <0x0|32> <%rdi_1_INIT|64>[31:0])[31:0]))[31:0]))) <0x4|64>))) FALSE) FALSE))))
  (This case verified)
Checking ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) ) ^ ( target !) ^ ( rewrite ) { 2 ; 3 } false 
===========================================
Working on pair / P: 2 Q: 3
TARGET UNROLL: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 

REWRITE UNROLL: 
.anonymous_function:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 

TARGET: 
.L_140ae0:
movl %esi, %esi
movl (%r15,%rsi,1), %edx
movq %rdi, %rax
addl $0x4, %esi
movl %edi, %edi
movl %edx, (%r15,%rdi,1)
addl $0x4, %edi
testl %edx, %edx
nop 
REWRITE: 
.anonymous_function:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 
Total accesses: 2
SAME MAP
     0 1 
------------------
0  |   1 
1  |     

NEXT MAP
     0 1 
------------------
0  |   0 
1  |     

TOTAL CELLS: 1
Access 0 cell 0 offset 0 size 4 (cell size 4)
Access 1 cell 0 offset 0 size 4 (cell size 4)
ALIASING CASES: 1
1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
TARGET MAP:
2 -> 0 (size 4 / cell size 4 / offset 0
6 -> 0 (size 4 / cell size 4 / offset 0
REWRITE MAP:
Start memory constraint: (and TRUE (== <TMP_BV_32_49|32> <TMP_BV_32_50|32>))
Assuming (and (and (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE))) TRUE) FALSE)

CONSTRAINTS

(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rsi_1_INIT|64>[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(== (plus (plus (sign-extend-64 <0x0|32>) <%r15_1_INIT|64>) (concat <0x0|32> <%rdi_1_INIT|64>[31:0])) (plus <CELL_0_ADDR|64> <0x0|64>))
(and TRUE (== <TMP_BV_32_49|32> <TMP_BV_32_50|32>))
(and (and (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE))) TRUE) FALSE)
(and (and TRUE (<= <CELL_0_ADDR|64> <0xffffffffffffffbd|64>)) (>= <CELL_0_ADDR|64> <0x40|64>))
End memory constraint: (not (and TRUE (== (concat <0x0|32> <TMP_BV_32_49|32>)[31:0] <TMP_BV_32_50|32>)))
Proof inequality: (not FALSE)
  (This case verified)
i=2, j=3 1 / 1
i=2, j=3 1 / 1
cutpoint blocks: 2  (and)  3
Checking ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) ) { 3 ; 3 } no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4


WORKING ON no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4

===========================================
Working on pair / P: 3 Q: 3
TARGET UNROLL: 
.anonymous_function:
retq 

REWRITE UNROLL: 
.anonymous_function:
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
nop 
retq 

1 Aliasing cases.  Yay.
------ NEXT ALIASING CASE -----
Assuming (and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE)))

CONSTRAINTS

(and TRUE (or (or (or (or FALSE (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdx_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) TRUE) TRUE)) (and (and (and TRUE FALSE) TRUE) FALSE)) (and (and (and TRUE FALSE) FALSE) TRUE)) (and (and (and TRUE (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>))) FALSE) FALSE)))
Proof inequality: (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and TRUE (and (and (and (and (and (== <sigbus_1_INIT> FALSE) (== <sigfpe_1_INIT> FALSE)) (== <sigsegv_1_INIT> FALSE)) (== <sigbus_2_INIT> FALSE)) (== <sigfpe_2_INIT> FALSE)) (== <sigsegv_2_INIT> FALSE))) (== <%rax_1_INIT|64>[63:32] <0x0|32>)) (== <%rdx_1_INIT|64>[63:32] <0x0|32>)) (== <%rsi_1_INIT|64>[63:32] <0x0|32>)) (== <%rdi_1_INIT|64>[63:32] <0x0|32>)) (== <%rax_2_INIT|64>[63:32] <0x0|32>)) (== <%rdx_2_INIT|64>[63:32] <0x0|32>)) (== <%rsi_2_INIT|64>[63:32] <0x0|32>)) (== <%rdi_2_INIT|64>[63:32] <0x0|32>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_1_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_1_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rax_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rax_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rax_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rdx_2_INIT|64>)) <0x0|64>)) (== (plus <0x0|64> (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdx_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rsi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rsi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rsi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%rdi_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%rdi_1_INIT|64>)) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%rdi_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> <%r15_1_INIT|64>)) (mult <0xffffffffffffffff|64> <%r15_2_INIT|64>)) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0x1|64> (concat <0x0|32> <%r15_1_INIT|64>[31:0]))) (mult <0xffffffffffffffff|64> (concat <0x0|32> <%r15_2_INIT|64>[31:0]))) <0x0|64>)) (== (plus (plus <0x0|64> (mult <0xffffffffffffffff|64> <%rax_1_INIT|64>)) (mult <0x1|64> <%rdi_1_INIT|64>)) <0x4|64>)))
  (Got counterexample)
TARGET START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 08 7c 60 02
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 88 04 00 00
%rdi     00 00 00 00 00 00 00 04
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE START STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 08 7c 60 02
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 88 04 00 00
%rdi     00 00 00 00 00 00 00 04
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

TARGET END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 08 7c 60 02
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 88 04 00 00
%rdi     00 00 00 00 00 00 00 04
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)

REWRITE END STATE
SIGNAL 0 [normal exit]

%rax     00 00 00 00 00 00 00 00
%rcx     00 00 00 00 00 00 00 00
%rdx     00 00 00 00 08 7c 60 02
%rbx     00 00 00 00 00 00 00 00
%rsp     00 00 00 00 00 00 00 00
%rbp     00 00 00 00 00 00 00 00
%rsi     00 00 00 00 88 04 00 00
%rdi     00 00 00 00 00 00 00 04
%r8      00 00 00 00 00 00 00 00
%r9      00 00 00 00 00 00 00 00
%r10     00 00 00 00 00 00 00 00
%r11     00 00 00 00 00 00 00 00
%r12     00 00 00 00 00 00 00 00
%r13     00 00 00 00 00 00 00 00
%r14     00 00 00 00 00 00 00 00
%r15     00 00 00 00 00 00 00 00

%ymm0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm1    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm2    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm9    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm11   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm12   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm13   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm14   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
%ymm15   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

%cf      0 
%1       1 
%pf      0 
%0       0 
%af      0 
%0       0 
%zf      0 
%sf      0 
%tf      0 
%if      1 
%df      0 
%of      0 
%iopl[0] 0 
%iopl[1] 0 
%nt      0 
%0       0 
%rf      0 
%vm      0 
%ac      0 
%vif     0 
%vip     0 
%id      0 

[ 00000007 00000000 - 00000007 00000000 ]
[ 0 valid rows shown ]

[ 00000001 00000000 - 00000001 00000000 ]
[ 0 valid rows shown ]

[ 00000000 00000000 - 00000000 00000000 ]
[ 0 valid rows shown ]

0 more segment(s)



*********************************************************************
****************************   SUMMARY   ****************************
*********************************************************************
Cutpoint 0: 
    (t/r agree on { %rsi %rdi %r15 %mxcsr::rc[0] })
    no signals
Cutpoint 1: 
    no signals
    %rsi[63][32] == 0
    %rdi[63][32] == 0
    -1*%esi' + %rsi = 0
    -1*%edi + %rdi = 0
    -1*%edi' + %rdi = 0
    %r15 + -1*%r15' = 0
    %r15d + -1*%r15d' = 0
    -1*%esi + %rsi = 0
Cutpoint 2: 
    ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%edx + %rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%eax + %rax = 0 ^ -1*%esi + %rsi = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ %rdx + -1*%rdx' = 0 ^ -1*%edx' + %rdx = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target !) ^ ( rewrite !) ) v ( false ^ ( target !) ^ ( rewrite ) ) v ( false ^ ( target ) ^ ( rewrite !) ) v ( no signals ^ %rax[63][32] == 0 ^ %rdx[63][32] == 0 ^ %rsi[63][32] == 0 ^ %rdi[63][32] == 0 ^ %rax'[63][32] == 0 ^ %rdx'[63][32] == 0 ^ %rsi'[63][32] == 0 ^ %rdi'[63][32] == 0 ^ -1*%esi + %rsi = 0 ^ -1*%rdx = 0 ^ -1*%edi + %rdi = 0 ^ -1*%edx = 0 ^ -1*%eax + %rax = 0 ^ %rax + -1*%rax' = 0 ^ -1*%eax' + %rax = 0 ^ -1*%rdx' = 0 ^ -1*%edx' = 0 ^ %rsi + -1*%rsi' = 0 ^ -1*%esi' + %rsi = 0 ^ %rdi + -1*%rdi' = 0 ^ -1*%edi' + %rdi = 0 ^ %r15 + -1*%r15' = 0 ^ %r15d + -1*%r15d' = 0 ^ -1*%rax + %rdi = 4 ^ ( target ) ^ ( rewrite ) )
Cutpoint 3: 
    no signals
    %rax[63][32] == 0
    %rdx[63][32] == 0
    %rsi[63][32] == 0
    %rdi[63][32] == 0
    %rax'[63][32] == 0
    %rdx'[63][32] == 0
    %rsi'[63][32] == 0
    %rdi'[63][32] == 0
    -1*%esi + %rsi = 0
    -1*%rdx = 0
    -1*%edi + %rdi = 0
    -1*%edx = 0
    -1*%eax + %rax = 0
    %rax + -1*%rax' = 0
    -1*%eax' + %rax = 0
    -1*%rdx' = 0
    -1*%edx' = 0
    %rsi + -1*%rsi' = 0
    -1*%esi' + %rsi = 0
    %rdi + -1*%rdi' = 0
    -1*%edi' + %rdi = 0
    %r15 + -1*%r15' = 0
    %r15d + -1*%r15d' = 0
    -1*%rax + %rdi = 4
Cutpoint 4: 
    (t/r agree on { %rax })
    no signals
Equivalent: no

No counterexample available.
